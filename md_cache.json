{
    "e97a7f7d7517dc99a2f54ead18fdf632": "---\ntitle: Introduction\n---\n\n![](01-introduction-0.jpeg)\n\nSystems thinking helps tackle complexity in various projects: it allows you to focus on all the important aspects while temporarily discarding the unimportant ones, yet maintaining the overall integrity of the situation by considering the interrelationships of these separately thought-out important points. Systems thinking occurs through model-thinking (with texts in formal languages or data in tables) and writing (with texts in natural languages, but with tracking object types and object relationships in these texts), thus attention is not only drawn to important subjects but is also maintained throughout the project: what is written down is not easily forgotten in the hustle. Furthermore, systems thinking allows for creativity: in its informal part, it enables guessing possible solutions to improve the world, while in the formal part, it critiques these solutions so that those surviving criticism can be taken seriously, as a foundation for collective actions. Systems thinking manages the attention of many people in complex collective projects, focusing the collective attention on important matters and saving time by excluding the unimportant from consideration.\n\nFor students of various specializations, systems thinking allows retaining in mind and recordings their projects in all their vibrant complexities, linking theory and life. For experienced engineers, managers, technological and corporate entrepreneurs, researchers, creative professionals, and public figures, systems thinking organizes their life knowledge. This thinking is a cheat sheet, reminding of forgotten matters, and quickly burying bad projects to avoid wasting resources.\n\nOurs is not a systems analytics course (often confused with systems thinking), as systems synthesis is equally emphasized. Systems thinking is practical, cultural, stylish, and active, because the creation and development of systems occur through various methods, practices, cultures, and work styles, types of activities/labor/engineering, but we discuss all these work methods using the concepts of systems thinking. This is fundamental, universal thinking.\n\nThe course also shows how systems thinking allows thinking more or less the same way about objects of various complexities, such as inanimate matter, living beings, cyber-physical systems, personalities, organizations, communities, societies, and even humanity as a whole. This happens because systems thinking, on one hand, pays great attention to the scale of objects, and on the other hand, system reasoning itself is scale-independent, just scales are its subject matter. Systems thinking is universal and scale-free, allowing one to consider different objects of various scales in a single discussion: it is precisely for such coordination of different objects in complex projects that systems thinking is intended.\n\nSystems thinking does not depend on which powerful intelligent agents are engaged in it—humans, AI-agents, or even collective agents (organizations of many people, AI-agents). It is non-anthropocentric, and our course takes this into account.\n\nTaking the systems thinking course implies some experience in complex collective projects from real life (not simple \"training projects\" for one person, but \"real,\" collective working projects, where results are valued enough for someone to pay for them!), experiencing complexity face to face in life—the complexity examples in systems thinking mainly relate to life examples, not “textbook cases,” as “textbook cases” are weakly linked to real-life situations. In the online systems thinking course, you will do a lot of modeling (unfortunately, there are no modeling assignments in the book), i.e., not only ‘learn systems thinking’ but also practice it, ‘think systematically through modeling.’ Further in your work and even ‘just in life,’ you will do exactly the same as in the course: fill in tables, which will be your systems thinking. We hope you won’t even notice that you are ‘thinking systematically,’ it will be just ‘filling in fairly simple tables, though each time this filling will require some thought.’\n\nThe course lays ‘rails’ for thinking, which after some training allows quickly and automatically evaluating situations in real-life collective projects. Systems thinking avoids ‘reinventing the wheel’ in dealing with complexity, substituting difficult and slow ‘thinking off-road’ with light and quick ‘thinking on rails,’ quickly utilizing the best thought techniques devised by civilization. Much of what seems like creativity to others for a systems thinker is the fluid application of thinking patterns, saving time for inevitable real creativity. There will always be situations in life that are not covered in textbooks for the subject area you are engaged in. The systems thinking course helps in precisely these situations. Just as mathematicians do not reinvent the idea of integration each time, systems thinkers do not reinvent the idea of differentiation between functional and constructive system descriptions, distinguishing a target system from a creation system, and a couple of dozen other useful ideas. And this is done in various projects for different systems, connecting situations described in various specialized textbooks.\n\nThe main task of the course is to gather concisely in one text (a \"body of knowledge,\" analogous to an \"aggregated body of laws\" that accounts for the current configuration of normative texts with all updates, additions, exclusions, suggesting some completeness of coverage of the subject area and official status—handled by a methodologist, which is methodological work) and to explain (to bridge the \"conceptual distance\"^[<http://wiki.lesswrong.com/wiki/Inferential_distance>] for understanding, work of a curriculum designer) the \"minimum thinking\" on systems thinking, usually scattered across various sources of knowledge. The specificity of our course is that its content is based not so much on traditional academic literature of the last century on general systems theory or traditional management textbooks but on modern engineering and scientific literature of 2017–2023, as well as, to a slightly lesser extent, on international standards and public documents of systems engineering and enterprise engineering developed or updated in the last five-six years (ISO 15288:2023, ISO 42010:2022, ISO 15926-2:2003, IEC 81346-1:2022, OMG Essence:2018). The course considers the latest research on the physical foundations of biology, including explanatory theories of evolution occurring at different system levels. This is presented in the course not very thoroughly ( more thoroughly, it can be found in the \"Intellect-Stack\" course), but all necessary references are provided for curious students to explore further on their own. The course material presents a scale-free (from molecules to humanity as a whole) version of systems thinking and a de-anthropomorphized (no assumption that a rational agent is necessarily an individual human) version of methodological thinking.\n\nThe course is based on the experience of teaching systems thinking both in numerous universities (annually since 2012) and in qualification enhancement systems for engineers, managers, technological entrepreneurs, teachers, and people of various other professions, particularly in the School of System Management^[<http://system-school.ru/>], where the author serves as the scientific director. The online course contains many questions with the author's answers, as well as modeling assignments (modeling situations in students’ work projects), so the course serves as something like a “help” to these assignments. Our experience shows that merely reading a textbook does not teach systems thinking, but systems thinking itself (in the format of model-thinking with structured texts and writing-thinking with unstructured texts in natural languages) does, if it is based on reading course materials and completing assignments.\n\nThe exposition of the systems approach is given universally for engineers of \"hardware\" and software systems, managers and business owners, cultural figures, politicians, and people engaged in a variety of other applied labor roles. However, knowledge of methodology, systems engineering, personal engineering, and system management must be obtained from separate courses, the systems thinking course is a prerequisite for these courses. Additionally, separate applied courses must be taken on various applied work methods. “How should I deal with this problem in my project” is usually resolved using systems thinking, organizing the application of applied skills in various types of work, but not replacing the applied skills themselves. Systems thinking will allow you to quickly solve your piano playing problems, but you will still have to learn to play the piano—and the same applies to robotics system engineering. You will solve problems faster, but you will still have to learn how to create these systems, miracles do not happen.\n\nTo enhance your intelligence, you need to take many courses, as one systems thinking course does not cover all the fundamental methods of thinking included in the intellect stack (systems engineering, methodology, rhetoric, ethics, aesthetics, cognition/research, rationality, logic, algorithmics, ontology, theory of concepts, physics, mathematics, semantics, composure, concept-formation). But the \"Systems Thinking\" course touches on large chunks of these methods, so the course can be attributed to the courses on enhancing intelligence.\n\nThe course text in this edition has been practically rewritten for the ninth time: the first two versions were in 2014 and 2015 for the “Systems Engineering Thinking” course, then the \"Systems Thinking\" book was published in February 2018 in Ridero (and simultaneously a course was released on Coursera), a fourth revision was made in July 2019 (around 120 new pages were added, and the terminology was simplified), and an online course was launched at the School of System Management. The fifth revision was in August 2020, considering the experience of conducting lessons and releasing the \"Education for the Educated 2020\" course, where the place of systems thinking in the general intellect stack with other fundamental methods of the intellect stack was clarified. In the sixth version of 2021, the terminology was simplified again, and changes were made to keep the material relevant.\n\nIn the seventh edition of 2022, the main change was the separation of the material about \"non-life cycle\" into a separate methodology course, as well as adding the course materials on scale-free and de-anthropomorphized thinking, supported by modern findings not only in engineering and management but also in physics and biology. The course was named \"Practical Systems Thinking\" to reflect the proactive/enactive nature of the agents changing the world. This exposition was already based on the third generation of systems approach. Activity/labor/practice/engineering in this course version became synonyms, referring to the work of creation systems on target systems.\n\nAfter the release of the seventh edition in 2022, courses \"Methodology,\" \"Systems Engineering,\" and \"System Management\" were developed, reflecting changes in systems engineering and management methods that occurred in recent years: first of all, the shift toward “continuous everything,” the disappearance of requirements engineering, and the final separation of architecture from development (including the separation of the concept of the system and architecture). Therefore, in January 2023, the text of \"Systems Thinking\" was rewritten for the eighth time to align it with the new methods of systems engineering and management. The shorter title \"Systems Thinking\" returned, the section \"Requirements and Architecture\" was removed, and a new section reflecting the third generation system approach ontology instead of the glossary was added. The ontology of the service was clarified.\n\nIn May 2023, further changes were made, effectively starting the ninth rewrite: it was strictly forbidden to consider the behavior (processes) of any system as systems (but if necessary, it was recommended to gather a new system from all the interacting systems during these processes, thus acquiring new properties, and it will behave differently due to emergence). The example of social dance was rewritten (the word “dance” was tabooed, now the dancer dances). The theatrical metaphor became a role-playing game metaphor. Many typographical errors and small mistakes were corrected. The course titles “Ontologic and Communication\" and “Composure” were corrected to the combined “Modeling and Composure.” And even the old course title \"Systems Thinking\" returned (for a couple of years the course was called \"Practical Systems Thinking\"). In December 2023, the rewrite continued aiming to improve understanding, adding many questions, exercises, assignments. The appearance of the \"Personality Engineering\" course was considered. The course was divided into smaller sections, increasing from 8 to 12. The course “Modeling and Composure” was renamed to “Rational Work.”\n\nMany clarifications and explanations were made: the concept of affordance was clarified, a \"systems mantra\" was given, warning about the potential confusion of different types of relationships for sub-roles—specialization and composition, the main term instead of \"practice\" became \"method\" and added synonymy of method (culture, style, strategy, and even service), the concept of \"method/service subject\" and its synonymy with alphas was introduced, the term \"technologies\" was tabooed and replaced with \"tools,\" synonymy of disciplines/theories/explanations/knowledge/algorithms was added, the intellect stack is now the stack of thinking methods (rather than disciplines), the concept of techno-evolution was clarified, four main alphas instead of three were proposed. The text volume increased during the rewrite mainly due to additional explanations and examples. New assignments were also added. The \"doctoral\" section \"12. Instead of a glossary: third-generation systems approach ontology\" offers a hypothesis that the fourth generation systems approach will appear after the emergence of unified classical semantics based on semiotic (sign, local) representations and distributed (as in neural networks) representations.\n\nThe course introduces the concepts of the system usage concept and system concept, architecture, success justifications, configuration, work management, other traditional and relatively new systems engineering and system management concepts directly following from the systems approach. But the course does not cover how to develop high-quality system concepts and architecture, how to thoroughly justify system success, i.e., the course does not contain descriptions of modern systems engineering methods and applied engineering methods of cyber-physical systems engineering, software engineering, systems management, cultural construction, technological entrepreneurship, and social engineering. Studying such methods, even at a broad level, typically requires additional extensive efforts and separate courses. The \"Systems Thinking\" course is part of the educational program \"Organizational Development,\" where the student learns how to:\n\n- **focus their attention** and that of other **agents** on objects from an explicit specification (ontology), i.e., focus attention conceptually, not spontaneously, and also **maintain** conceptually focused attention on various time scales, including collective attention in agents such as a team or an entire enterprise through leadership, or influence on a community or society (course \"Modeling and Composure\"),\n- focus attention on **systems** (our course \"Systems Thinking,\" which we are currently discussing),\n- focus attention on **methods** by which **systems creators** conduct work (course \"Methodology\"),\n- structure **activities and roles**, necessarily maintained within attention during **systems engineering projects** (course \"Systems Engineering\"),\n- teach the **skill** of performing activities (course \"Personality Engineering\"),\n- direct their and **organizations’** (teams, groups, enterprises) attention to objects described by a **specialization** of the systems ontology for such systems creators as organizations (course \"System Management\"),\n- enhance their **intelligence/thinking skill**, using the best current methods of thinking (SoTA, state-of-the-art) (course \"Intellect Stack\").\n\nThe course requires readers to know English. The text of the course is in Russian, but most references are to English-language materials: there are many primary sources (about 400 literature references), and they are modern, not yet translated and published in Russian.\n\nThe course follows a presentation method in which the material is repeated several times in different parts of the text—with varying levels of detail. The principle of \"said once in one place\" (as in encyclopedias and reference books) is deliberately not followed; this is an educational course, not a reference book. This increases the text volume but significantly facilitates understanding and memorizing the material through spaced repetition. The total volume of the course, including assignments, is about 2.5 million characters with spaces, shorter than the quite manageable for many generations of schoolchildren (even not in the final grade) novel \"War and Peace,\" which is 3.0 million characters^[<https://otvet.mail.ru/question/54668490>].\n\nAfter mastering the systems thinking course material, we recommend continuing education by studying the \"Methodology,\" then courses on engineering methods—“Systems Engineering,” “Personality Engineering,” “System Management.” This direction can be called **“the devil in the details”**: delving into studying specific engineering, managerial, creative, social work methods, i.e., studying specific applied work methods. This is traditional training in engineering, management, and other specializations linked to real life. Systems thinking will allow maintaining the integrity of the studied set of broad and applied work methods and transferring accumulated experience from project to project. This is the education of an engineer, manager, entrepreneur/founder of companies, cultural figure, public figure/politician, etc.: a person who has mastered systems thinking and uses it to improve the world.\n\nBut an alternative option can also be proposed, **“angel in abstractions”** (\"knowledge of principles frees from the knowledge of facts\"): generalizing the proposed systems thinking to increase fluency in using its techniques and extending it to various types of systems—for expanding systems thinking to new work methods, new classes of systems (e.g., machine learning and artificial intelligence systems, youth subculture systems, etc.). In this direction, you can deepen your knowledge of fundamental thinking methods of the intellect stack, for which we recommend taking the course \"Intellect-Stack.\" This is the education of a person engaged in endless cognition, endless development. A good support on this path will be studying the literature mentioned in the course, especially the literature from the last section of the course (this section is “doctoral,” not “master’s” level).\n\nActive participation in the course material preparation was taken by teachers, graduate students, and students of the MIPT Department of Technological Entrepreneurship, teachers, students, and graduates of the School of System Management, the Directorate of the Russian INCOSE Section. Without their active participation, this course would hardly appear in its current form.\n\nMany thanks for the principled questions reflected in the course, to participants of educational programs on systems engineering at Ural Federal University, MIPT, MEPhI, Siberian Federal University, MIET-RTU. Course materials were repeatedly discussed at meetings of the Russian sections of INCOSE and SEMAT, the author expresses gratitude to members of these international organizations for numerous comments and suggestions. Many valuable remarks were presented by readers of the author's blog ([http](http://ailev.livejournal.com)[://](http://ailev.livejournal.com)[ailev](http://ailev.livejournal.com)[.](http://ailev.livejournal.com)[livejournal](http://ailev.livejournal.com)[.](http://ailev.livejournal.com)[com](http://ailev.livejournal.com), the blog is mirrored on Telegram, Facebook, VKontakte, Freefeed). Thanks to Roman Varyanko for prompt proofreading and valuable substantial comments, Viktor Agroskin for help in debugging the course ontology, Yulia Tchaikovskaya for proposing successful terms.\n\nA support chat for the course exists on Telegram, common for the courses of systems thinking, methodology, systems engineering, personality engineering, and system management: <https://t.me/systemsthinking_course>\n\nA two-volume version of the course (due to its large volume) has been published by Ridero^[Volume 1: <https://ridero.ru/books/sistemnoe_myshlenie_2024_tom_1/>, Volume 2: <https://ridero.ru/books/sistemnoe_myshlenie_2024_tom_2/>], which can be used as souvenir products for lovers of electronic and paper books, as well as a gift option. The text of the books changes less frequently than the course text (it's impossible to quickly replace a book), and the book does not contain questions with the author's answers. We recommend taking the online version of the course.",
    "da5dc1b2c7ad8fd60393e93629b6d479": "---\ntitle: Speak not with people, speak with roles\n---\n\nYou must determine the actor/“role-performer agent”'s method of work by their actions and statements and assign the role based on this method. This is done regardless of what this performer is called in real life---their job title, how they name themselves, how they are referred to in project documents, how people around them call them, and whether they are a person, organization, or a robot of some organization. A rose smells sweet, whether you call it a rose or not. If a person is fixing a toilet, that is the role of a plumber, even if the person fixing the toilet calls themselves a cardiothoracic surgeon. Focus on what the agents do, not what they are named---names can be chosen for various reasons.\n\nNext, you need to understand the current object of interest of the role and determine the role's preferences for this object of interest. After this, you will understand who the role's allies and opponents are (also roles), and you will determine yourself (as you also have a role with its own objects of interest and preferences, and you need to carry out a role's method of work efficiently!)---you are an ally or an opponent.\n\nThen, you need to find a suitable method of description/viewpoint for discussing the the object of interest. **Method of description** **(viewpoint)** — it is akin to a map legend, showing which objects and their relationships will be depicted on the description map. How to make and document descriptions of different degrees of formality you already learned in the “Rational Work” course.\n\nLater, in your statements, documents, actions, provide descriptions (the map itself according to the chosen legend), clearly sticking to the object of interest of your interlocutor::role, and show what will happen in the project with the implementation of his preferences concerning the value of an important characteristic for his role, and also negotiate with other agents, as the interests of other roles also need to be considered.\n\nIf you hear something about finances::“object of interest,” then you need to understand that before you is a financier::role, and abstract from the appearance of the actor realizing::the financier’s relation, i.e., ignore for the current reasoning the height, age, gender, religion, intonations, and degree of hostility, though you need to understand the actor’s skill in financial discussions. You need to understand further which important characteristic currently interests the financier, and then choose an adequately reflecting method of descriptions: balance sheet, profit and loss statement, cash flow---these are three different description methods for answering different objects of interest within the general interests of “finances.” **Don’t make a mistake when choosing the method of description: if the financier’s question is about a cash gap, it’s useless to talk about the balance!** **Therefore, you need to have a certain methodological/labor/engineering outlook on** **the methods of work** **of many roles required for project success. At least---** **take a course in systems engineering, personality engineering, systems management, though this is far from enough, but better than not having any outlook** **on engineering methods**.\n\nThis is all valid not only when interacting with a human-actor but also with robots, and organizations (when you ask questions via chat, and you receive answers, or vice versa---you are asked questions and you send answers, it doesn’t matter who is on the other end of the chat: how many people are talking, and whether they are people or a robot).\n\nAlways speak not with the agent (person, company, their computer, their questionnaire), but with the role, though you should monitor the agent’s emotional state (if it’s a person) and the resource situation. For example, if you are riding an elevator, it’s pointless to start a two-hour conversation; it’s futile, and it’s also pointless to discuss with Vasya Pupkin his relationship to Desdemona in the role of Othello when Vasya is fully immersed in playing Prince Hamlet: his response might unexpectedly be “I’ll ask Desdemona, to be or not to be”---don't be surprised, you misunderstood the roles and confused Vasya with your question.\n\nFor example, when you perform modeling within our course framework, remember: such modeling is offered to you by a “teacher,” whose task is to teach you something from the course, to train you in some skill from the course. There is no task to check your knowledge “in general,” or to exercise something that doesn’t belong to the course--- and therefore possible answers need to be given precisely along this line of reasoning, addressing the “teacher’s role,” and not the agent playing the teacher's role as a citizen of your country, the course's organization as a legal entity in some jurisdiction, the computer program as something soulless and purposeless, etc.---the number of senselessly possible role choices could be huge, and here the outlook comes in handy! **“What is the teacher** **trying to train you with the questions or proposed modeling?”** --- answer this hypothesis related to the role!\n\nIt’s important not so much to give an answer to the concrete singular question posed by an actor in an unclear role, but generally to respond to the interest of his current project role, giving a comprehensive description of the object of interest using the chosen (and preferably agreed upon and explained) method of description so that the actor understands the chances of realizing the preferences of his role. Respond not to the spoken question itself, but directly to the interest! You are asked: “did you use gold in your system?” but after understanding “where the question is coming from” (what the role interest is), the correct answer is not “used/ did not use,” and not even “there are one and a half grams of gold per three tons of the system,” but “the price per system unit will not exceed $300 for orders of 1000 units.” And this will reduce the conversation time several times over!\n\nIf the interests/preferences of various roles even of a single actor differ concerning one interest, and even more so the preferences of different roles performed by a team of actors, this is a reason for negotiations regarding selling out 1. First describes the method of description, which is one negotiation topic, and 2. The values of an important characteristic that needs to be agreed upon. This is a reason for inventive activity in the course of these negotiations (methods of conflict studies^[<https://en.wikipedia.org/wiki/Conflict_resolution>], invention theory^[<https://en.wikipedia.org/wiki/ TRIZ>] can significantly help here).\n\nThis is a typical way to use methodological (in this case) thinking: important objects and their connections from the meta-meta-model form a checklist of what you must definitely think about and what you must do during the conversation:\n\n- Shift your focus from the actor to their work method, determine the method by deeds and words.\n- Rebrand the agent according to the role of their work method.\n- Understand the object of the role interest of the interlocutor::role.\n- Understand the interlocutor's::role preference in the object of interest (for example, some architectural characteristic).\n- Split negotiations on the method of description reflecting the object of interest and the value of an important characteristic (one complex negotiation on two topics simultaneously is much worse than two simpler negotiations on different topics).\n- Take into account in these negotiations the existence of other roles with similar objects of interest, including actors performing these roles in the negotiations. **You can’t “agree with everyone”! Any later agreement among these “everyone” among themselves will disrupt their agreements with you. The only way out---** **is to agree everyone around you!** The object of interest may be the same for these “everyone,” but the preferences---differ! And during the project, priorities in interests might change: at some point “price decides everything,” but then a month later it might turn out that “we don't care about the price, but the system weight decides everything!”---be prepared for such situations.\n\nThis checklist---is simply a representation in another form of the material from the previous paragraphs. The method/way of its application is developed during each conversation, participation in each meeting, work in every collective project. This is typical use of materials on fundamental methods of thinking in the intellect stack (conceptionalization, semantics, ontology, ethics, rhetoric, methodology, systems engineering among some): objects of disciplines/theories of these fundamental methods of thinking allow you to routinely think about what is important in the current situation, ignore the unimportant and thus significantly save effort and time. Thus, during negotiations, besides this role reasoning, you will also use rhetorical culture (persuasive speech), in which you will focus on appealing to the neural network of your interlocutor, not a dry computer (i.e., you will manage the formality level of statements, consciously use different concept theories in your statements), will take into account the agent’s emotional state, and assess his current knowledge level (perhaps something will need additional explanation, especially if the actor-interlocutor is poorly qualified in performing his project role). And take into account whether you are talking to people at all, whether you are personally familiar, or are communicating “with an indefinite circle of people” or even with a computer “undead.”\n\nWhy synchronize interests? Remember: systems thinking says that the system being created and its design will only succeed with synchronized values of important characteristics, with synchronized interests/preferences regarding the system. Synchronizing interests significantly reduces the time needed, reduces the complexity of this work:\n\n- Conversations not with people::actors, but with their roles regarding the objects of their interests and methods of descriptions of these objects of interest, the interests themselves as preferences in the values of important characteristics of the system,\n- Predicting intentions of actors and their possible strategies and plans for realizing intentions in their explicitly and implicitly manifested roles,\n- Splitting complex communication into separate questions (the principle of “separation of concerns” will be discussed a bit later),\n- Using systems thinking to find the necessary objects of interest for the discussion (this will also be covered a bit later in our course),\n- Engaging the full intellect stack (for example, rhetoric as the method of persuasive speech).\n\n**After transitioning to this kind of** **“role conversations”** **(instead of conversations with** **actors)** **those people::actors, who earlier would not speak with you, will now engage with you.** They previously did not understand your usefulness in clarifying the situation with areas of their interest, realizing their preferences in important characteristics of the systems involved in the project (including numerous creation systems' characteristics), so it was **uninteresting** to them to communicate with you. It all boils down to recognizing that **people-performers of roles** **act not according to their whims** **as** **“people”** **or AI-agents,** **but act in accordance with role-imposed preferences** **in** **role-dictated** **important characteristics. People-actors are** **not interested in everything, but their** **preferences in** **their** **role objects** **of interest** **they will not abandon,** **they will not “forget” their role interests---** **these role interests/preferences** **are culturally conditioned, and in understanding them, it is critical to focus not on the agent’s** **personal traits, especially if this is a living person** **but on** **the culturally created labor culture** **of the role being played by the actor.**",
    "794f5698cea6363b9b26733fbf7639ed": "---\ntitle: Mistakes in Defining Roles\n---\n\n“If you read ‘buffalo’ on the elephant’s cage, don’t trust your eyes”^[[https://en.wikipedia.org/wiki/Kozma_Prutkov](https://en.wikipedia.org/wiki/Kozma_Prutkov)].\nThis aphorism by Kozma Prutkov is fully applicable to project roles: we\nshould identify them by words and actions, not by official job titles. Sometimes titles do match\nproject roles, but often they do not. An agent with the title “programmer,” for example, may turn out to be a technical writer for user manuals and not know how to program at all. The same goes for self-identifications; they can also be misleading. Only actions, only discussion of the subject area of a certain method of work\n(activity, culture, practice—there are countless synonyms) in conversation.\n\nIf Prince Hamlet suddenly starts asking, “Have you prayed tonight, Desdemona?”, he is no longer Prince Hamlet! That is Vasily Pupkin, who has switched to another role (which one? That’s where your outlook matters! You might miss the moment when you are clearly told that someone is about to be strangled!).\n\nIn the moment of the unexpected role switch of the performer/actor, it is helpful to ask why they have changed the “subject of interest”/theme and became a different role: you may learn many interesting details. It most likely means that a new interest has emerged: the actor in your team, Vasya Pupkin, performing the previous role, remembered something important and thus switched roles, showing interest in another role. Do not forget to ask about the reason for the change of theme/“subject of interest”/“important discussed characteristic” when “people or AI”::agents suddenly change roles during conversation. The positions of these agents don’t matter, except they might indicate the administrative authority of the conversation participants. Position only matters when giving orders and determining rates; it does not affect thinking and activities!\n\nNevertheless, we remember that “they meet by clothes,” and the role is often deduced from the position. Therefore, we recommend naming yourself as close to the real role as possible. Call yourself an “analyst”—and you will be talked to as a person who decides nothing, just “makes suggestions to the boss.” Call yourself an “engineer”—you will be talked to as someone who makes decisions themselves, not just suggests them to someone else.\n\n**We remind you of the main mistakes made by people in defining ** **external and internal (team) roles for the project. If a student makes these mistakes (because they are clearly spelled out here), they can boldly count on two points on the exam. If these mistakes are made by someone other than a student, life will give them those two points:**\n\n- Instead of a role, they indicate a performer—a specific person or specific department (name or department/organizational unit), or even AI.\n- Instead of a role, they indicate a “responsible one” (position, organizational unit, position in staffing), most often the “boss” (error like “Theater Director” in the cast list of “A Midsummer Night's Dream”). It is easily recognized by the qualifiers “lead,” “chief,” “manager”: these words in the role name should be very alarming).\n- They indicate a rank (academic degree, military rank) instead of a role, attempts to indicate the level of skill but not the type of skill itself.\n- They indicate the type of organization, which has many different roles (clinic, factory). Indicating “clinic” for a medical project—what work methods does the clinic deal with, what important characteristics and preferences does this “super role” have? Inside there are many people, executing various work methods in various roles, and among them, there will surely be different preferences for the same characteristics of the same system, you can't mix them into one whole! Indicate roles in large organizations in detail, the closer to narrow professional roles, the better!\n- They assume that one agent-executor of a role means one role. No, one performer/actor can perform ten roles, whether we're talking about a person, AI, or an entire organization. One role can be performed by a large department or even many thousands of people (say, the role “player” in a game with two million players) or a complex network of many AI agents.\n- They think that five external roles in the project are more than enough. No, usually the count starts from fifteen. If only five external roles are identified, it means you haven’t thought enough.\n- They forget to account for their own roles and interests. But you—the agent—are also a participant in the project! What are you doing there, what are you achieving (interests), what have you learned for this, do you have a high level of expertise in performing work by what method?\n- They forget about the multitude of subjects of interest in the project role and the multitude of project roles having one subject of interest. And preferences in one important characteristic/subject of interest for these roles might be different. And the ways to realize preferences are very different: three actors/performers of the doctor role will inquire about blood pressure and even agree that it needs to be urgently lowered, and then they will offer three completely different ways of lowering it! The saying about “two lawyers, three opinions” is just about this.\n- They do not pay attention to the interest shown in the current situation, indicating a presumed interest from some past or expected situations. No two projects are the same, always clarify what is happening in your project, and right now (because the project situation usually changes quickly: people are active!).\n- They do not distinguish between role interests, the interests/preferences themselves, not expecting the inevitable actions of agents to realize their intentions in achieving the interests of their roles.\n\nTo understand the roles in the project, you can recommend filling out a table of roughly this content. Here’s an example of filling out such a table for the simplest meeting of three from the development department:\n\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td><p>Number</p></td>\n<td><p>Role</p></td>\n<td><p>Method of role</p></td>\n<td><p>Role performer</p></td>\n<td><p>Performer position</p></td>\n<td><p>Performer organization</p></td>\n<td><p>Performer’s skill in this role</p></td>\n<td><p>Subject of interest</p></td>\n<td><p>Preference/interest</p></td>\n<td><p>Agent strategy (“what will do”::method)</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>1</p></td>\n<td><p>Usage concept developer</p></td>\n<td><p>Jobs to be done</p></td>\n<td><p>Dinara</p></td>\n<td><p>programmer</p></td>\n<td><p>Development department</p></td>\n<td><p>novice</p></td>\n<td><p>functionality</p></td>\n<td><p>Maximization of features</p></td>\n<td><p>Interviewing everyone, and what is not determined in the interview— then inventing</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>2</p></td>\n<td><p>Visionary</p></td>\n<td><p>MVP</p></td>\n<td><p>I</p></td>\n<td><p>programmer</p></td>\n<td><p>Development department</p></td>\n<td><p>master</p></td>\n<td><p>functionality</p></td>\n<td><p>Minimization of features</p></td>\n<td><p>Pushing MVP, ignoring the rest</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>3</p></td>\n<td><p>Operational manager</p></td>\n<td><p>Time estimation of task completion based on functional points</p></td>\n<td><p>Timur</p></td>\n<td><p>Department head</p></td>\n<td><p>Development department</p></td>\n<td><p>novice</p></td>\n<td><p>Development time</p></td>\n<td><p>Minimization of development time</p></td>\n<td><p>Reducing functionality even in MVP</p></td>\n</tr>\n</tbody>\n</table>\n\nThis table is specifically designed to prompt questions that could be overlooked without it: so you don’t confuse role and position, to think about the method of work, and to pay attention to the actors’ skill in performing specific roles. Managing attention to roles, subjects of interest, interests, methods of realizing interests during the meeting is an example of methodological (about work methods) thinking, a small part of it. Without this, there will be no systemic thinking, because “the system is in the eyes of the beholder,” and the beholder here will be the role.\n\nWho else needed to be invited to the meeting to fully discuss these subjects of interest? To answer this question, you first need to think about what roles might have other preferences in these important characteristics. Then assume who::agent might be the actor/performer of these roles. For example, it was possible to invite an actor in the role of a developer, who would give an estimate of the development time for each proposed feature^[<https://en.wikipedia.org/wiki/Software_feature>] of the system: this would help the operational manager actor deal with their interest. You can improve the results of the role of usage concept developer by inviting someone more experienced instead of the current performer (after all, the skill of the current performer is “novice”). You can invite someone from the product promotion (marketing) department to better assess the MVP^[<https://en.wikipedia.org/wiki/Minimum_viable_product>]. The main thing is that this simple table is filled in three minutes but helps to plan and understand the situation better. In complex cases, such tables save months of fruitless conversations of irrelevant people on unimportant topics.\n\n**Special attention should be paid to your own roles in such tables.** Did you state your roles and interests at this meeting? Did you reveal your intentions, plans to realize your role interests? Did the meeting participants know what roles you played during the meeting if you didn’t explicitly state these roles?\n\nKnowing the position and which organization you are from is not important here, nor what roles you can play outside the meeting. The main thing: who were you behaving like (in role)? What method/process did you use in your role? “None” and “common sense” is a very, very bad answer. So, you were not playing any role, acting arbitrarily, were not in culture, did not show style, behaved like a “savage at work.” How did you help other meeting participants communicate better with you? In this example, did you clearly state that you would use a method involving the concept of a minimal viable product? Did you declare your preference in features based on the MVP development method and provide arguments “from the MVP book” (thus giving a culturally conditioned role-based, not personal-without-role opinion)?\n\nDid you answer the interests/preferences of other present roles in your speeches, did you show understanding of their subjects of interest and consider their plans for realizing their interests in your plans? Or did you respond to “simply people” or positions, not actors-in-role?\n\nIt is not necessary to create such a table in writing each time in full at each meeting (remember, “chatting in messengers” is also a meeting!). But initially, it will be very useful for you to “think in writing,” in this case, modeling the situation with roles documented in a table. At first, it will be difficult and time-consuming to think through. For example, each agent may have three roles, and the meeting may include a dozen people. Or there will be difficulties in identifying the AI role. How to account for the role of AI? As a role played by the service provider of this artificial intelligence (the role is played by AI, or even not the creator, but the operator of this AI, and the AI itself is their tool—like “nail driver” can be played by carpenter Vasya or carpenter Vasya’s hammer), because if something goes wrong, you will have to negotiate with the AI service provider, not the AI itself (with Vasya, not his hammer)—and not even with the “provider” role, but some sub-role, as “AI provider” can easily split into many different roles, and you will have to negotiate with only one of them, and all of them will be played by different people or even entire departments of the AI provider company.\n\nThinking about roles and their methods will become easier and easier; then you will do it “on the fly” and mentally. And, of course, without some\nmethodological/labor/practical/engineering outlook, it is impossible to fill out this table; for people without an outlook, what happens at the meeting will be a magical action by mutual persuasion of agent-participants. With the table, it becomes completely clear what the intrigue is and what can be done to improve the quality of decision-making at such meetings.",
    "63dda12c28332a4c365161653f8a612c": "---\ntitle: Items of Interest and Interests\n---\n\nIn systems thinking, reasoning usually follows the systems mantra,\nwhich has many different formulations, but it all comes down to\nfirst considering the working target system in its environment (concept of\noperation), then — what to make it of (system concept) and what methods can be used to create this system (engineering methods), then — who could\ncarry out these methods (creators-engineers), then — who could create\nthese creators (creators-organizers of engineers), and so on\ndown the creation graph. In any case, at some point in determining\nimportant objects of attention in the project, its participants::roles are driven by\ncultural conditioning on which objects are most likely\nto change their state during the project--- based on knowledge of\nhow the typical engineering method of creation is arranged for those types\nof systems. In fact, all our courses talk about the fact that a\nsystems thinker enters a project not with zero knowledge about\nwhat happens in the project (which he has not yet properly seen) and what could\nhappen there at all.\n\nFor example, it is assumed that at each stage of growing the functionality\nof the developing system (continuous development implies not a one-time\ncreation of the system, but the creation and development of the system with gradual\naccumulation of its functionality), the possibility of creating\nthe next increment of the system is realized, it will be described in the concept\nof operation, the system concept will be corrected, then the system\nconcept will be detailed in the project/design with enough precision for\nmanufacturing the increment, then parts of the new\nincrement will be manufactured, the system will be assembled and debugged “in the physical”, tested, and put into operation with the new increment, if problems are found, taken out of operation reverting to the previous version, operated\n(operator's work, monitoring), and so on--- for each type of system\nit will be something similar, although the terminology may differ significantly\n(for example, the term “manufacturing of mastery” won't be used, but\nthere will be talk of “training to mastery”).\n\nIn any case, in the project, some set of objects is expected to change their states in the course of the project. This change of states\nis carried out by some working methods. For example, the system concept\nis developed with the participation of developers (their subject of interest is the functional\ndecomposition and set of constructs as affordances for subsystems\nas functional objects) and architects (their interest is that\nthe system is built from constructs with optimal autonomy, because\nthis affects numerous architectural characteristics--- and this often\ncontradicts the proposals of some development groups). The interest\nof developers is usually --- quick introduction of new functionality now\n(\"quick and dirty solution\"), the interest of architects--- quick introduction\nof new functionality in the future (minimizing\ntechnical/architectural debt). This is discussed in more detail in the course\n\"Systems Engineering.\" Still, it is important now that there are working methods\nfor development and working methods for making architectural decisions, which move the object \"system concept\" through states\nin a coordinated manner, and this movement occurs throughout the project, considering\nthe continuous development of the system and the release of new and\nnew increments that implement new functionality.\n\nThe movement through the states of some objects changing during the project, as well as methods of modeling this movement, will be considered in\nthe methodology course. Which objects and how exactly they move through\nstates--- this will be considered in engineering courses (systems\nengineering, personal engineering, systems management). In these\nengineering courses, the roles that carry out engineering\n(managerial, educational, promotional, etc.) work methods will also be considered. Each of\nthese work methods forces an agent performing the corresponding\nrole to pursue some interests.\n\nUltimately, we are interested not in the roles themselves, but in their working methods\n(including methods of thinking/reasoning) and important/key characteristics\nof some systems (concerns, systems/roles/works/activities\nitems of interest, \"concerns\"). Important characteristics --- these are\nthe characteristics of the system that are interesting to the roles in connection with their working methods. The values of these characteristics are changed by the roles\nby their method/way, realizing their interest/preference in the values of these important\ncharacteristics. Several related important characteristics are sometimes collected into\nan area of interest, area of concern, the areas of objects of attention of roles in\na project.\n\nFor example, for the role of the architect in modern architecture, the characteristics that the architect must monitor are clearly\nindicated (leading items of interest of the role are explicitly selected and documented in the project), and even guidelines are given on which metrics are better to use for\ntracking these characteristics. For example, to track the\nsatisfaction of developers' interest in supporting the principle of \"continuous everything\" by developers::roles and \"internal production platform engineers\"::roles, four key metrics (Four Keys of DevOps, proposed in the book \"Accelerate: The Science of Lean Software and DevOps\" by Nicole Forsgren, Jez Humble, and Gene Kim) are offered to architects::roles:\n\n- Deployment frequency\n- Lead time for changes\n- Change failure rate\n- Time to restore service\n\nApart from these characteristics/concerns, architects are interested in (their items of interest) operational (i.e., operational/usage time) characteristics: availability, continuity, performance, recoverability, reliability, security, sustainability, and scalability. And also creation time characteristics: configurability, extendability, installability, reuse, localization, maintainability, portability, supportability, upgradability.\n\nCommon to all systems, these key architectural characteristics (also--- architectural interests, expressed by a variety of metrics) are not related to functionality, thus the unfortunate names were non-functional requirements, quality requirements. They are well known to systems engineers as --ilities, and it was understood that achieving acceptable values of these characteristics can be obtained by changing the design of the system, i.e., using different system assembly options from constructs/modules and different options for organizing interactions\nbetween modules through interfaces.\n\nThese characteristics and possible metrics for them are continuously discussed\nby the architectural community, in each engineering organization these\ncharacteristics have their own variants, in each project, the architect\npays attention to only a small part of these characteristics. But agents\nperforming the role of architects are trained to uphold their interests in\nachieving these or similar characteristics. The list of these\ncharacteristics --- is a good starting point for training architects on what\nshould be the subject of their close attention.\n\nA similar set of items of interest and some ideas on acceptable\nvalues of achieved metrics for these items of interest is also available to\nall other roles; in light of the vast variety of types of systems,\nthis set of \"key characteristics\"/\"items of interest\" is enormous, and\na huge number of roles participate in the project, performing work\nby various methodologies, hence affecting, willingly or unwillingly, others'\nitems of interest: there is continuous collective discussion of\nsuch decisions regarding the target system and all other systems in the creation graphs,\nwhich leads to the project's success: if almost all interests are met, then the system being created and\ndeveloped by the project is successful. The project of its creation and development is successful.\n\nAn item of interest can be anything. Thus, ISO 42010:2022 gives\nthe following (also absolutely incomplete) approximate list of these items\nof interest for the architect, and requires the architect to identify and\ndocument them explicitly: suitability of the architecture for achieving\nthe objectives for the entity of interest, enterprise capability and capacity to implement the entity of interest, the feasibility of realizing and operating the entity of interest, the potential risks and impacts of the entity of interest to its stakeholders throughout its life cycle, added value to the stakeholder(s), reuse of known architectures, resilience, extensibility, adaptability, latency, resource utilization, effectiveness, operability, usefulness, usability, interoperability, complexity, sustainability and evolvability of the entity of interest, environmental impacts of the development, use, and disposal of the entity of interest.\n\nIn the previous version ISO 42010:2019 instead of the entity of interest it was the system of interest, in the current version the word \"system\" was replaced with a more general term. In ISO 15288:2023, when referring to ISO 42010:2022, the word entity is replaced by system, so we will follow this example. It's also interesting that the approximate list of architectural characteristics in ISO 42010:2022 differs from that provided in the previous paragraphs based on the latest discussions on the subject of systems architecture in the era of \"continuous everything.\" Discussions among architects about what constitutes their item of interest are ongoing, and each architect is expected to have their opinion on what their role's item of interest (architectural characteristic) is, and what their role's interest (what value of the architectural characteristic they need to achieve) is in each specific project, with the architect's priority interests potentially changing throughout the project. This is exactly what's indicated now in textbooks for architects: you cannot satisfy all possible architectural interests, so choose only a few main items of interest (architectural characteristics), list them explicitly --- and professionally optimize metrics only for them, while keeping the rest at a \"hygiene\" level, that is, maintaining them at a minimally acceptable level to avoid remarks.\n\nItems of interest determine the questions of some roles to other roles: they are interested in the forecast of the situation regarding the realization/observance of their preferences in the values of these important characteristics. These are not questions from performers/agents, these are questions from professional/occupational roles/“actors.” These are not questions from John Doe, these are questions from his role as Prince Hamlet. Important characteristics and preferences are role-based, needed for performing the work of this role by the working method of this role.\n\nAn agent/actor performing an assigned role may use means to satisfy their role's interest, far beyond merely performing the work by the assigned role's methodology. For example, actor-1 may unexpectedly for actor-2, who is playing a role with a different preference than the role of actor-1, call their friend, and this friend's boss actor-2. Actor-1 then asks the friend to \"pressure\" the performer to realize his preference/interest, instead of the preference/interest of actor-2's role. The result may be not a rational argumentation in favor of changing the opinion of actor-2's role, but a banal blackmail: a threat not to the role, but to the actor himself (a managerial threat from the theater director to deprive John Doe of a bonus if he insists on saying \"to be or not to be\" while playing Hamlet --- and let him solve it as he wishes with Shakespeare, the director, the audience, theatrical critics).\n\nThis is all sheer improvisation by actor-1, but no one said that people will realize their preferences just by stating them at meetings with other roles. No, people/actors are very inventive when realizing their role's preferences, they may change roles two or three times to realize these intentions, and hire other people to perform missing roles. Working methods, items of interest, and interests of roles, that is, actors, not performers/actors!\n\nThe performers/actors themselves, as roles of agents (it can also be considered this way: the actor's work is also work! Entering the role, playing the play, arriving on time for performances/games, not mixing up words) want to get paid, sleep well before going to work, be entertained and develop to take on more interesting roles. John Doe or Jane Smith are not particularly distinguished, they usually do not have their own preferences in current projects, but when they start playing their roles, that is, performing the artist’s work (playing Prince Hamlet to the audience), engineer (developing CAD models), manager (negotiating the project plan regarding resources and timing), marketer (assessing market volume) --- this is where initiative and inventiveness awaken.\n\nThis is an “active entrepreneurial attitude”/enterprise/initiative/inquisitiveness and creativity, but not a specific role, but an actor, supported by intellect and further the entire set of skills of performing work according to applied methods available to the agent.\n\nThe actor develops a strategy (**strategy** --- is a specialized method for obtaining results in a specific situation), based on which plans his work (clarifies the availability of resources), and then\nacts, strategizing on the move (re-evaluating the strategy) and replanning the work based on the changed circumstances.\n\nWhy does the actor act? He simply believes that investing in\nadditional actions of role-playing through additional working methods “here and now” will bring him benefits in the future, “there and then.” He acts absolutely engineeringly, that is, in the process of strategization based on his model of the world, he generates many alternatives for some methods of achieving his goals in the interests of the role, assesses the benefit of these actions by comparing the investments in them and the resulting imagined picture of the future world (the classic role of the entrepreneur according to Joseph Schumpeter), and then plans actions/work based on available resources according to the developed strategy --- and acts, continuously clarifying the state of affairs with satisfying the interest of his core role and changing the situation with the readiness of agents playing other roles to yielding to his pressure.\n\nA systems thinker, as an actor, needs to be able to maintain a conversation on the topics of items of interest in the project (many roles may have the same items of interest, but different interests --- and this requires reconciliation of interests), to give each role sufficient answers about their items of interest so that each team and external role could assess the feasibility of their preferences/interests.\n\nIn the project, it is important to document descriptions of common areas of interest to facilitate the achievement of agreements. For example, if the item of interest is the price of a unique system, then some version of the estimate, or protocol on the agreed price, or expert assessment of similar open-market sales prices, or some other variant of description is needed. One needs to choose the description that will allow reaching an agreement. This documented description of the price::\"key/important characteristic\" will be studied by both the seller::role and the buyer::role. The price description will be their main communication tool for reaching an agreement\non their completely different preferences in price as an important characteristic.\nAnd this price description will be of interest not only to the seller and\nbuyer, it may be needed for many other roles to agree on their preferences.\nFor example, the operational manager may be interested in the price when evaluating the maximum possible set of\nresources for performing work on the project: he must have the maximum\nresources, but no more than what the agreed price between the buyer and\nseller will allow.\n\nIf you meet a person without a clearly expressed interest (interested in everything, or not interested at all, not having clearly expressed preferences, although they seem to declare some item of interest) --- this means this is not a role performer in the project, but just someone “curious”, “from extras”, an “onlooker passing by”, a spectator accidentally entering the stage during a play, a non-player who accidentally wandered into the role-playing game. Do not waste time on him until he shows his item of interest and preferences! But after you understand what he will do::method with the information obtained about his items of interest in the project, on the contrary, you should spend time on him, agree with him on decisions taken, however much you would like to ignore him. **Creation of systems ---** **is a continuous search for agreements regarding the project. A successful project ---** **is when everyone has agreed, and the systems thinker must ensure that everyone around him agrees!**\n\nIf a role (Prince Hamlet, not John Doe) discusses something that is not a part of his occupational interest, then at this moment you are talking to an actor (possibly playing some other role at the moment, which you are not aware of), not to a character in your \"play\", your\nactivity. **To reliably distinguish people in their various roles and determine** **their** **working methods, items** **of interest** **and** **preferences, one needs to have a** **work** **perspective ---** **in general terms to understand how human activities are organized with** **division of labor** **in its various forms** **into very different** **working methods, what** **types/variants of methods** **exist in each** **category** **of methods** **(for example, in** **systems engineering** **they immediately recommend paying attention to such** **working methods of different roles as** **visioning, development, architectural activities, production platform engineering, and in management it is business, organizing, organizational-architectural activities, administration),** **with what types of systems these** **methods** **work,** **what** **items of interest of these** **working methods,** **what preferences in these items.** In the previous section about methods and roles, we have already discussed this, but here we add that the perspective includes understanding the items of interest of typical roles. In the project, it will not be enough to recognize the working method and find out the culturally conditioned role performing the method. One also needs to understand what the role's interests are, what it will strive for!",
    "246811ff42897c05dc69ba22536e0dd9": "---\ntitle: Do Not Conflate Critical Characteristics and Preferences\n---\n\nThe word \"interest\" in English is \"interest,\" meaning a \"commercial interest,\" \"what we are interested in regarding the project.\" In systems thinking, \"interest\" is historically referred to by another word: **concern**^[Stakeholders have interests in a System; those interests are called Concerns --- <http://www.iso-architecture.org/ieee-1471/cm/>], which in a more precise Russian translation sounds like \"**concern:** **a critical attribute of the system, an object of interest in the system.**\" Objects of interest are the characteristics of the system that various roles in the project continuously pay attention to. These are not role-based desires for where to steer the object of interest. The object of interest of many roles and the interest/preference of a role (\"role-based desire to steer the object of interest\") are different. The object of interest, a characteristic, is not \"higher price\" but \"price.\" However, the interest/preference is precisely \"higher price,\" where to steer the object of interest! For price, there could also be another preference: lower price, but \"object of interest\"/\"key characteristic\" will remain the same—price.\n\nProject roles, both external and team roles, continuously pose various questions about their objects of interest. ISO 42010:2022 provides an example of such questions (remember that this is a standard for documenting architectural descriptions, but all other descriptions will respond to similarly formulated questions, though their objects might be entirely different):\n\n- How is the system maintained?\n- What system behavior is critical for safety?\n- Can the target system comply with mandatory national standards?\n- What is the operating cost?\n- What risks, opportunities, satisfaction, survivability, coherence, resource availability, complexity, and trust does this architecture offer?\n- What is the transparency of distribution described in the reference model of open distributed processing^[<https://www.geeksforgeeks.org/types-of-transparency-in-distributed-system/>]?\n\nThe project team describes the target system and its environment, as well as the creator systems in their complex graph, so that both the project team roles and external project roles have clear answers to these questions. Additionally, all roles involved in the discussion undertake actions to realize their preferences regarding the interests (sometimes actors, to achieve the preferences of some of their roles, include executing methods of other roles; remember that agents can exhibit significant creativity).\n\nRoles are truly concerned with some object, and in their thinking, these work/activity \"concerns\" dominate; they act based on the intent to realize their preferences in target characteristics. A seller will try to raise the price, a buyer—to lower the price.\n\nEach work role, depending on its function/type of work, has one or more interests (objects of interest with preferences in them)—it is quite possible that different project roles/stakeholders have the same objects of interest and the same or different preferences in them. This is very convenient: even if one role has two-three-five objects of interest, the overall list of these system characteristics will not be two to five times longer than the list of project roles; it will be much shorter. **If it is necessary to prepare some materials/descriptions/models for negotiating preferences in interests, their number will be proportional to the number of** **critical characteristics**, **not the number of preferences, nor the number of project roles.** **And further, the preferences** **of a large number of roles** **will be negotiated using a few descriptions reflecting a small number of objects of interest.**\n\nThe schematic diagram of an electric scooter as a description reflecting some of its critical characteristics will be used by many roles: those advocating for increasing::preference its power::characteristic, those advocating for limited::preference power consumption::characteristic, those advocating for maximum::preference acceleration speed::characteristic, and those concerned about its charging speed. This description/model allows for negotiating multiple preferences for various characteristics of the electric scooter as objects of interest to both external and team roles in the electric scooter creation project.\n\nWhen the objects of interest/important characteristics for roles are the same, **preferences** in the value of these characteristics for different internal/team and external roles can vary significantly. If you encounter roles such as \"safety officer\" and \"seller,\" their object of interest in the electric scooter will surely be \"maximum speed,\" but their preferences/interest evaluations will differ: one needs to lower the maximum speed for maximum safety, while the other needs to raise it as much as possible to convince buyers and have an advantage over competitors' scooters. Naturally, it is not always necessary to have pairs of roles with such different preferences for one interest, but such pairs occur quite frequently, and not only regarding the interest of \"cost\" or \"maximum speed.\"\n\nNegotiations over the values of critical characteristics (sometimes called **production conflict**) occur with any objects of interest. For instance, the \"weight of the electric scooter\"::characteristic has the preference \"lighter\" for the consumer, while for the designer, the interest might be \"heavier weight\" to place a more capacious battery or use a stronger, and thus heavier, construction. The designer acknowledges that \"heavier weight\" is bad, but for them, it is a \"necessary evil,\" beneficial for them! If the decision is left to the designer, the scooter might become excessively heavy for the consumer, even though it might look great in many other characteristics. It is better for the consumer's interest in weight::characteristic to be defended by a marketer/seller as a team member rather than the designer making the \"balanced decision.\"\n\nRemember, if both project roles with conflicting preferences for one characteristic are played by one actor/role performer, and the production conflict occurs in one head, this is called a **conflict of interest**^[<https://en.wikipedia.org/wiki/Conflict_of_interest>]. It is useful to segregate the conflict of interest among different people::actors because in a productive production conflict, the roles control each other's mistakes, but when this mistake control occurs in one head, it becomes difficult: an actor might prefer one role's solution even if it's erroneous. By segregating the conflict of interest into roles for different actors, the discussion of preferences within one object of interest is public, and errors in reasoning might be found by some third parties, who can also provide proposals for resolving the production conflict. Decision-making can be documented and reviewed by independent experts. Thus, in the absence of a conflict of interest (production conflict within one actor's head) and translating the conflict of interest into a production/productive conflict, more quality agreements on preferences within the production conflict across different heads of different actors can be made, fewer mistakes will occur, various role preferences will be considered more qualitatively, and the system will be more successful.\n\nBut if trying to segregate all identified conflicts of interest among different heads (whether people or even divisions) literally, nothing will work out: the number of conflicts of interest is enormous, and even considering that one head can participate in many conflicts of interest, you still need to ensure that roles engaged in intensive negotiations are organizationally closer to each other—the negotiations are not everybody with everybody, but within some org-units (this will be discussed later: good modularity is important for both target systems/products and creator organizations), hence ideally—within one agent's head.\n\nBut if simply assuming that we will then increase the number of heads in the division (roughly—instead of one person, we will place two to separate the conflict of interest, a classic example—separating the roles of cashier and ticket seller), it will not only become more expensive but also slow down the work in large projects. The more heads in a project, the less time will be spent on work (decision-making, \"choosing from different alternatives in one head\") and the more on endless negotiations over conflicts, thereby drastically slowing down the project according to Amdahl's law^[<https://en.wikipedia.org/wiki/Amdahl's_law>] (increasing the number of processors/heads for speeding up work cannot be done infinitely, as more and more time will be spent not on the actual work, but on dividing the work, then coordinating, then collecting the results, eventually productivity per worker/processor drops significantly). Be cautious with increasing the number of workers and slowing down work, as this also applies in the case of an \"infinite number of workers obtained from AI agents.\"\n\nHowever, if a \"goat guarding the vegetable plot\" is found, it is better to allocate the functions of guarding the plot and eating the cabbage to different workers. Though the process might be slightly slower, failing to do so will result in quick and highly predictable outcomes, often involving unforeseen additional expenses on the cabbage.\n\nConflicts of interest could be in one head or entire communities. Not addressing Big Pharma's vested interests in selling medications that do not cure patients but are taken indefinitely to relieve symptoms or the conflict of interest among doctors appointing unnecessary procedures, let's consider an industrial example—the Phoebus Cartel.\n\nIn May 2022, the USA announced (attention! The agent who did this is missing! Did you notice the impersonal sentence? What role typically carries out such \"announcements\" and what does it signify? Identify impersonal sentences! They lack roles and actors, making them hard to work with further!) a bill banning (again, the object is missing: who::role will ban whom::role) the sale of incandescent lamps (there it is: the system type we're dealing with, substance level, even below the level of a cyber-physical system). This is done (by whom?! Role again missing!) to stimulate the transition to LED lamps (whom are we stimulating? Who benefits? But this is clearly an expression of intent). In this context, Bloomberg's article authors (here they act as critics of the proposed regulation: critics of the social engineers advocating for banning incandescent lamps) discuss the story of the Phoebus Cartel (Phoebus, also Apollo - light’s god)^[<https://www.bloomberg.com/opinion/articles/2022-05-04/cheering-for-led-bulbs-read-this-cautionary-tale-about-the-phoebus-cartel>].\n\nThere was social engineering at the community level. Competition among tungsten filament incandescent lamp manufacturers quickly led to nearly eternal lamps (lamp lifespan::critical characteristic/object of interest). A conflict of interests is evident: manufacturers benefit when lamps burn out quickly::preference (they will be bought forever!), and when they last long::preference (they will be bought from those who make them that way). Thus, social engineering was undertaken among manufacturers: they organized a cartel::\"organizational system\" which, with great effort (remember, in a conflict of interest, forces simultaneously pull towards different preferences—and hence there are always forces inducing cartel formation and forces leading to cartel dissolution; thus, the saying \"cartels work, cartels don't last long\") forced all manufacturers to make tungsten-filament incandescent lamps not burning out before 1000 hours but eventually burning out after. A \"1000 Hours Life Committee\" was established, creating a Swiss laboratory to check lamp batches for \"appropriate burnout.\" If lamps burned out prematurely, the market eliminated them (buyers are smart! they don't buy bad products!), but if they burned out later—the cartel fined it. If lamp samples from a batch burned without burnout between 800 and 1750 hours, the manufacturer could sell the rest without a fine. But if the lamps managed to last from 1750 to 2000 hours, the responsible company had to pay a fine of 20 Swiss francs per thousand sold lamps. Fines increased as lamps lasted longer: if a lamp lasted 3000 hours, it cost the manufacturer 200 francs per thousand lamps sold. The system worked: before the cartel, lamps lasted on average 2500 hours without burning out; a decade later, the Phoebus Cartel reduced this figure to 1200 hours.\n\nThe article authors query how the intention to ban incandescent lamps' sale (still burning out at roughly 1200 hours without the cartel) matches different roles' interests and what opposing social engineering might ensue: during the switch to LED lamps, it is claimed they are nearly perpetual (just like incandescent lamps at the Phoebus Cartel formation). The authors ponder: once legislative prohibition of competing, still-burning-out incandescent lamps occurs, won't LED lamp lifetime slip from \"nearly perpetual\" to the usual 1200 hours? After all, the situation with LED lamps and the purity of their manufacturers' intentions (frustration from the consumer's desire for a perpetual lamp and manufacturers' desire to limit lamp lifespan) is exactly the same, while the competitive advantage in durability over incandescent lamps need not be shown; regular incandescent lamps won't be on sale. Remaining LED lamp manufacturers would collude: perpetual LEDs would burden these manufacturers, so they'd produce burnout-prone ones.\n\nOf course, the article doesn't discuss antitrust laws (by whom? Article authors! Catch the impersonal sentences!) as they are about price collusion, not lamp lifespan! Social engineering is interesting as all these \"social engineers\" work oppositely, competitively. Cartels inevitably appear and dissolve, but in techno-evolution, some discoveries succeed despite being disliked or irrational, surviving with numerous variations at similar costs (manifestation of frustrations due to attempts to resolve conflicts across systemic levels). This is physics^[<https://elementy.ru/nauchno-populyarnaya_biblioteka/434505/Konflikty_kak_osnova_slozhnosti>, scientific article in <https://www.pnas.org/doi/full/10.1073/pnas.1807890115>], explaining the rise in possible nearly identically quasi-optimal configurations of various systems and the general increase in system complexity (growth in systemic levels) during evolution: solving lower-level problems influences higher levels, and vice versa: project optimizations must be multi-level.\n\nExamples like the Phoebus consortium show that **one can indeed decipher situations at a higher organizational/project level (community,** **society, and even \"agency,\" as agents aren't always humans nowadays). Utilizing a methodological concept set** **comprising \"agent,\" \"actor** **as** **role-performing agent,\" \"role,\" \"object of interest/critical system characteristic or** **the creating and developing** **project,\" \"interest/preference,\" \"intention,\" \"strategy\"::method, \"work** **plan,\"** **should suffice for thorough analysis of varied situations relating to agents' behavior, sometimes demonstrating highly** **\"rational.\"**",
    "b2b96260b8b5072aeffc223c2dbc2418": "---\ntitle: Position\n---\n\nWhen a performer holds onto a particular role for a long time, sometimes acting according to the interests of that role even in situations where other roles and the pursuit of other interests are expected from him (i.e., the objects of interest and preferences of this role come first in any roles in the corresponding method of work), this is called --- **position** (a concept of system-activity methodologists^[[http://praxos.ru/index.php/СМД-методология](http://praxos.ru/index.php/СМД-методология)], it is almost equivalent to the concept of methodological/project/activity/organizational role, but has its peculiarities). However, we do not confuse **\"1.** **position\"** as a term for reliably maintaining a role (conscious or unconscious) and another dictionary meaning--- **\"2.** **position\" as a position in an organization. We are not discussing the job title; we continue discussing roles.**\n\nWhen an agent-actor not only plays a role but also occupies the role position of \"manager\", their managerial values/preferences in certain important characteristics for their role begin to manifest both when they organize engineers in a work project, and when they raise children, and when they sit in Parliament. When this actor is in the position of \"parent\", their educational (for instance, instilling some moral guidelines in others) interests/important characteristics and preferences/values are present both at home among children, and in the work collective, and at a noisy party.\n\nPositions are most often occupied unconsciously (and thus it is easy to manipulate such **positioners** as agents who have taken a position: any of their actions are easily predictable, as they no longer act by themselves, their role/functional position and its values are quite predictable, and they cannot change it, cannot exit the role). The reaction of a performer of such a \"stuck functional role\" to a direct indication of their unconsciously occupied position can vary: \"Seems like I'm stuck in this role, thank you for pointing it out\" or on the contrary \"What position? How do my roles not change in different matters? I'm so spontaneous and diverse, which I am proud of!\"\n\nBut long-term presence in a role by an agent can be intentional and conscious --- deliberate focus on the interests of the role, focus, \"holding a position\". If this is \"unconscious focus\", then it is more likely \"distraction\" (loss of control over one's attention), \"unconscious role sticking\", \"unconscious position holding\". In any case, **position ---** **is prolonged** **and clear** **role holding, deliberate or not.**\n\n**It's important to note the term\nproject/functional/activity role itself:** **\"project role\"**\n**means a role in some project, but the role itself is taken not from the project,\nbut from some culturally conditioned** **(often associated with** **\"profession\",** **although here it’s simply about** **qualification in some skill)** **work method. Activity role ---** **is a role in activity/ \"type of labor\", these are all synonyms with slight meaning nuances, but these are all references to the well-known division of labor.**\nThe role of \"carpenter\" is not taken from the project of \"building a doghouse\", but from human culture, it is a functional role --- but in the project of building a doghouse it will be a project role! To avoid confusion, you can always check: if both these roles are played by the same physically existing Stepan Nikanorovich at the same time, then we are talking about the same role --- just different names emphasize different aspects of this role: the project where this role is involved and the activity in which this role is defined.\n\nIt can be supplemented with a number of synonyms:\n**methodological/project/functional/activity/practical/labor/cultural/organizational/engineering**\n**role**. If you want to emphasize that you adhere to systems engineering as a normative method, then it will be **an engineering role** --- and even some \"politician\" here will be in an engineering role (social engineer). If these roles are held for a long time by someone --- they will not be roles anymore, but\nmethodological/project/activity/practical/labor/engineering/cultural/organizational\npositions.\n\nOccupying a position is more related to \"work method\"/\"type of activity\"/\"type of labor\"/\"type of engineering\"/\"type of subculture\"\n(sometimes they talk about the work method as a whole, activity as a whole, labor as a whole, but sometimes they emphasize that usually, only part of all possible\nwork methods/activities/labor/engineering/practices of one role is used, then they simply insert \"type\" or \"variant\" --- \"variant of the method\", \"type of labor\", \"type of culture\" or even \"variant of subculture\" to emphasize the applicability of reasoning for some variety of the method), but less related to the project. A person who has taken a position will usually occupy it consciously and unconsciously not in one project, but in many projects --- it is something like \"choosing a profession\" (conscious choice), or \"discovering oneself in a profession\" (unconscious choice), rather than purely situational choice \"in the project of creating a specific system\". An agent in the role of \"carpenter\" --- he will be a \"project carpenter\" in all projects if he holds the position, but we will call his position in this case an activity/labor position, not a project one. This is, of course, because a role is chosen and a position is occupied not just any role, but only that for which the agent has the skills to perform the work methods. If you want to take the role of a hairdresser or thermal engineer, without skills in hair-cutting methods or heat exchanger engineering methods, this will not be possible.\n\nYou can and should occupy a position consciously: \"now I will strategically take such and such a position\", that is, \"choose a clear role for myself in a clear play/activity/practice/game/culture, and keep my attention on the objects of interest and preferences of this role in the most varied projects until I change my mind and independently clearly exit this role” (and somewhere nearby there will be training in the skill of performing the work method of the chosen role). Strategic --- means that during the strategy-making a decision was made to adhere to some work method and keep it in attention (for details on strategy-making as the choice of work method, see the course \"Systems Management\", there are two sections dedicated to strategy-making, and it turns out to be equally applicable to agent-people and agent-organizations).\n\nThe conscious choice of a role/position by an agent (e.g., a person) during strategy-making is usually called\n**self-determination**^[<https://shchedrovitskiy.com/nabroski-k-bazovoy-sheme-samoopredeleniya-1/>]\nand is highly valued: **you become predictable in your behavior to people with** **labor** **horizon. They understand how to cooperate with you, what you can do, and what you will not do. Self-determination significantly facilitates entry into various projects, improves teamwork.** **Remember that it’s not enough to just self-determine, you also need the skill to perform the method of the occupied position, and also focus to hold this position during the project.**\n\nWhen a performer jumps from one role to another in a single project like a rabbit, it is very difficult to negotiate with them: the external effect is such that they constantly change their objects of interest and preferences in characteristics --- what was valuable to them in their previous role five minutes ago suddenly ceases to be significant, but instead, new claims arise to the already agreed values of characteristics. **A person without explicitly presented roles and role preferences** **can be called** **\"such a flexible person, no one can catch them\",** **or** **(and** **most often it is called that way!) ---** **\"such a slippery person\".** **Therefore, it is better to be focused and attempt to occupy a position, rather than just \"playing roles\" one per second.**\n\nPeople as actors relatively rarely consciously and intentionally avoid clearly occupying a position, then performing tasks within a clearly understandable method, consciously becoming unpredictable so that their role objects/zones/areas of interest remain hidden, intentions and strategies (methods/ways of work) of them as agents are unclear, and therefore actions resulting from them cannot be calculated. No, in such cases people::actors are simply poorly oriented in their roles, do not realize them (do not know that games by role, and not “general active participation” in the project are expected from them), they have no \"intentional avoidance of holding a role\", but their attention wanders over various objects of discussion, they lack focus, and they themselves do not notice this.\n\nSometimes the need for role-playing by actors is realized, but they simply do not have the skills necessary to perform their role: they poorly know the role, are unfamiliar with the labor culture, i.e., they have not read textbooks and did not receive other education; they lack experience in role-playing, as they do not accumulate time in the role; lack labor horizon and therefore do not understand what to negotiate with actors playing other roles in this project.\n\nUnfocused people will unstably hold a position, unstably reproduce role behavior --- and this will be a problem for the project. A functional/professional/activity/labor/project/engineering/practical/methodological/organizational/cultural role can change in a person even during the utterance of one phrase --- the beginning of the phrase will be, for example, from the role of Prince Hamlet or operational manager, and the end of the phrase from the role of Othello or a grabber wanting to grab a bonus to their salary.\n\nJumps between roles are possible to roles from completely different plays or games (like in the case of Prince Hamlet and Othello, operational manager and grabber) --- and yes, this may be a manifestation of a conflict of interest. Or suddenly emerges the role of a party functionary who decided to carry out the policy of their political party right in the workplace. A systems thinker should track such situations and use leadership methods (in theater this is done by the director towards the actors), helping role performers to get comfortable with their roles and focusing them on performing role work in the project, not just arbitrary \"life in the project\".\n\nMany people are perceived as reliable (and really are) because \"holding their role\"/\"occupying a position\" happens to them already automatically, as a habit of their thinking. They automatically adhere to a \"set of values\" (i.e., interests, preferences in values of important characteristics, we rarely consciously use the word \"values\" because everyone understands it differently and it is confusing, sometimes it means value/use, not \"values of important characteristics\", sometimes it is about morality) of their role, in which they are stuck, values of work methods they have long been engaged in. Therefore, they look like principled people, upholding some of their principles. But if they do not have their own business/activity/work methods and performing these work methods position/role, then they just as unconsciously \"do not hold a position\", and look slippery and unprincipled: they are never \"Prince Hamlets\", they are always Vasya Pupkins, it is impossible to play role games for multiple roles with them, i.e., participate in the division of labor (work of different agents by different work methods, in which they have different skills). And there are no projects without division of labor today.\n\nPeople (we are mainly talking about people here, not about AI or organizations) who are aware of performing their (professional, social, family) roles can choose --- to occupy any positions for a long time or on the contrary, to part with occupied positions when there is no longer a need for them. People who realize others' roles can often understand the objects of interest and role preferences/motives/values of certain actions and statements of people, precisely because they think not about the people themselves, but about the roles they perform. About the people::agents themselves, their intentions, personal strategies, intentions, and plans, they know very little, but about activity roles in culture, usually quite a lot is known, plus they can always verify their knowledge (e.g., Google or ask AI if the role is rare).\n\nIn many cases, \"position\" is determined by profession, often used in reliable skill in the job. **Names of common** **roles** **in projects and organizations ---** **these are very often profession names (some jobs/methods/\"types of labor\", all narrower as the division of labor deepens): manager** **and narrower in part of the tasks solved** **operational** **manager,** **classical** **systems** **\"iron\"** **engineer and narrower** **engineer-architect,** **vendor and** **narrower** **account manager (dealing with** **key clients and** **opportunities** **for making deals** **with these clients).** **The deepening of the division of labor is just about this.** **Artist,** **narrower** **circus artist and even** **narrower** **trainer, specializations become more and more narrow.** **Roles ---** **these** **are never job titles, not titles of \"leadership and subordination\", no \"lead artist\" or “principal artist\",** **roles** **indicate** **the** **used** **work method,** **they do not indicate either the** **degree of skill** **of the agent-performer of the role** **in working by this method, nor the** **authority** **of the agent-performer of the role** **to perform such work with the involvement of some resources.**\n\nIn various engineering (iron engineering, personality engineering, organization engineering, community engineering) projects, it is necessary to model the position and skill level of all agents as detailed as possible --- the competence of a role performer in the project may both meet the required role and not meet it. \"Woe, if a cobbler starts baking pies, and a pastry cook makes boots\" --- woe, if a performer with the skill of a cobbler in your project will be baking pies, because \"we have no other performers\". The taste and harm of such pies you can easily imagine.\n\nAlways separate the person and their role in the project: evaluate whether the performer fits the specific role based on their skill/competence in the work methods of the role, but also their focus (role skill, because what good is a pianist who cannot sit at the piano for five minutes?). Therefore, in all meetings and when reading all project documents, it is necessary to separately understand:\n\n-   what method the role performer should use, where this method is described,\n-   what their culturally conditioned role is, how it can be called,\n-   whether the role performer occupies a position, or \"evades\" positioning, so that leadership is required as a method of helping to hold the role/occupy a position,\n-   what their skill level is in performing the work method of the role they should play and how skilled you yourself are in applying this method, to evaluate their skill level.\n\nThis understanding must be absolutely conscious and preferably documented, because it is difficult to keep all this in mind for many roles. Difficulties with documenting your understanding of someone else's and even your own role and the chosen method of work often indicate insufficient thoughtfulness of the question --- \"the dog understands everything but cannot speak\", the hand hangs over the keyboard but does not write! Remember the description method (which table with types in the columns to fill), this can help.\n\nA systems thinker must also clearly understand that usually, they themselves play some roles in the project, they have some professional/competence position, they are not thoroughly \"systemic neutral person above the fray\". No, they also occupy some role position, but as a systems thinker they do it consciously (occupation of a position in the SMD-methodology is called \"self-determination\", we would call it personal strategy-making) and reliably hold this position. A systems thinker self-determines/strategizes their work by role. They also plan resources to master this position (i.e., in a stably and long-held role). They are focused after taking the position, openly presenting it for the convenience of organizing cooperation with them, openly presenting their interests as dependent on the occupied position.\n\nA separate problem is the transition to practically continuous personal strategy-making (self-determination), because a lifelong single choice of position::role for some profession::method work is impossible today, and it is not possible to do this even a few times, re-define/strategize constantly, constantly learn new applied skills, constantly increase intelligence, i.e., engage in education.\n\nAnother problem is holding multiple self-determinations/holding multiple strategies, because one has to occupy many role positions in various life contexts, different life situations. What to do with self-determination/personal strategy-making today, not in the past century of \"hereditary professions\", is detailed in the course \"Systems Management\" in the part about strategy-making, because in its essence strategy-making (determining the method/way to achieve some results as the basis of work planning) has the same nature for individual and collective agents, i.e., for people and organizations. Continuous during life and multiple strategy-making/self-determination with regular changes in the work methods in which there is skill, role positions and interests for successful work by these methods is called **endless development,** it is necessary for the agent to match the constantly evolving modernity.\n\n**Declaring that you have occupied** **a position ---** **does not mean you are** **a master of the declared work method. You can take the position of a saxophonist, but play the saxophone very poorly,** **not know the notes.** **So be careful with taking positions** **based on strategy-making results, do not forget that to occupy a position you first need to learn how to act in this position, learn to work not anyhow, but by some method. \"**Hey, on the barge, do you need any moths? ---**\n**We don't need them!---** **Well, right, otherwise I would have moth-eaten for you!\".**",
    "e016ee4f4f230613ce23b4ccd209b6b9": "---\ntitle: Organizational Places, Organizations, Org Units\n---\n\nTo clarify who manages the organization's resources (premises, equipment, and especially the labor of other people), organizations introduce a structure of responsibility: some people are superiors to others. But, of course, it is better to think of them as agents, and in the case of legal \"supervision\" - \"persons\". For example, you cannot fire an agent (a person) holding the position of \"CEO of a joint-stock company,\" even if you own the controlling stake. You need to convene a general meeting that will elect a new CEO. But you can appoint your organization to the position of \"CEO of a joint-stock company\" through this same shareholders' meeting. The CEO in a joint-stock company is called a \"sole executive body,\" but no one said that it must be a physical/human person! So, you appoint your organization as the CEO of the joint-stock company, and then inform the employees of the joint-stock company that your junior janitor Vasya Pupkin will be performing the role of CEO on behalf of your organization - Vasya Pupkin presents your order to the employees of the JSC and begins to perform his official duties as a junior janitor of your organization, i.e., the work as the CEO of the joint-stock company.\n\nWhy so complicated? If you need to replace Vasya Pupkin with someone like Dasha Mirkina, you can do it at two in the morning by issuing your own order within your organization. Then Dasha Mirkina arrives at the joint-stock company at three in the morning and announces that they now need to follow her orders instead of Vasya Pupkin's orders since she is now the sole executive body of the joint-stock company, the CEO. And Vasya Pupkin? Well, he continues to work in your organization. The advantage is that you can replace the CEO of the joint-stock company in a few minutes, instead of going through the months-long procedure of convening a general shareholders' meeting. This is a perfectly functional scheme. At one time, RAO \"UES of Russia\" managed the activities of its regional energy companies in this way, which were also joint-stock companies but subsidiaries and dependent. If any of the directors disagreed with the opinion of the managing company, they would be removed from their position in a few hours, not months that it takes to organize an extraordinary shareholders' meeting, even if you have 100% of the shares.\n\nSo remember: positions are not about roles, and not even about people. These are organizational places where various agents work, performing various roles. And it's about appointments and dismissals first of all, and then about subordination in terms of delegating tasks. And that's all, if we don't consider the fact that a position title doesn't cost anything, but to the person bearing a position title, it might be pleasant. Say, a small enterprise \"Empire,\" the sole executive body - not a CEO, but an \"emperor.\" Zero cost if you are the owner of the enterprise, but to the bearer of the title \"emperor,\" it might be pleasant.\n\n**Organization** (organization) - is an organized (i.e., with clear authorities and responsibilities for managing labor and capital) group of agents with buildings, structures, equipment, consumables, raw materials, financial resources, etc., at their disposal. But the main thing is the management of resources: the principle of known responsibility for all organized agents about who::agent-in-orgplace/position can ask whom::agent-in-orgplace/position for something::task-in-practice, and this request must be fulfilled, and refusal leads to investigations and may serve as grounds for dismissal.\n\nIn organizations, **organizational places/positions/vacancies** are introduced (sometimes referred to as positions in the staffing table - not to be confused with role positions from the previous section!). The structure of positions/org places defines not the role structure, but the structure of subordination, accountability, the possibility to ask someone for something, to pay someone for something, to prevent someone from doing something, to allow someone to do something. In the theater, these are actors responsible for playing certain roles assigned to them later. First, Vasily Pupkin is hired for the position of an actor, thereby obtaining authority to play roles in performances, and later the actor is assigned the role of Prince Hamlet in daytime performances and also the role of Othello in evening performances (and the actor in the position plays two roles), later Vasily Pupkin is dismissed, and Pyotr Sidorov is hired for his position (after dismissal, it is vacant - organizational place), and these roles of Prince Hamlet and Othello are played by Pyotr Sidorov.\n\nPeople-in-position and people-in-role are different things. People-in-position are about subordination-accountability, including \"promise to perform work\" and \"actual performance of work,\" people-in-role are about the method of work. From the position, you usually cannot understand the method people in this position work, although position titles may very much resemble role names, you would not immediately understand what it is about. The position of \"programmer\" may be occupied by Bohdan, who performs the role of a technical writer of English documentation, improves in the methods of technical writing, and considers writing programs in programming languages boring for him, and thinks that he will never again work in the role (but not the position, the position in this regard does not concern him - it is about salary and name, not the content of the work) of a programmer.\n\nEmployees in the organization cannot be asked to do everything, but if you ask an employee for action according to the expected role in the project, the request will be fulfilled. The essence here is that positions and roles do not depend on each other: they are assigned separately, often multiple roles are assigned to be executed by agents-in-positions/organizational places, and then the agent gets to this position and is henceforth expected to perform all roles assigned to this position. If the position of \"chief mountaineer\" is associated with the roles of \"speleologist,\" \"chemical analyst,\" \"helicopter pilot,\" then replacing Pavel Andreevich with Ilya Nikanorovich in this position means that Ilya Nikanorovich begins to perform work according to the methods of speleology, chemical analysis and helicopter flights (and from him, accordingly, mastery of these methods is expected). At the same time, it is absolutely clear (from the structure of subordination) who will be the boss of the \"chief mountaineer,\" and thus - the boss of the agent who will occupy the position/organizational place.\n\nIt is necessary to clearly delineate:\n\n- Positions - these are about requests and obligations (hence \"position,\" but often also \"place\") in their execution of work attached to the roles. About the work roles (associated with the cost of resources working with instances of certain objects, for which authorities are needed), but not the methods/functions/ways/cultures of work (for which mastery is needed).\n- Roles - primarily about work methods, professional competence/qualification/\"degree of mastery\" in performing work by the method of this role by the agent who will play the role (occupy the position to which the role is attached), role/labor/activity crucial characteristics of some systems affected by the work methods of the role (objects of interest) and preferences in the values of these important characteristics (interests).\n\nWith people, everything is complicated if we say that positions are primarily about resources, that is, also the concept of \"rate\" which means the standard duration of paid work in this position per period (most often per month, but sometimes per week or even day, or even hour - then they speak of a weekly rate, daily rate, or hourly rate, say, $300 per hour may be an hourly rate for a lecturer at a foreign university). \"Work one and a half rate\" - this usually means spending one and a half times more time than usual for the specified position, receiving one and a half times more payment. It is possible, of course, to occupy several positions at once (\"sitting on two chairs at once\" - remember, position and organizational place are synonyms).\n\nA vacancy/position/organizational place filled by a person gives us an **org unit/organizational unit**. The minimum org unit/organizational unit consists of one person, and if we are talking about \"half-rate\" (and in universities, to grant some formal authority to lecture but not to pay a salary, sometimes 1/8 rate is given), then it is not \"half-person,\" but \"one full person, but in terms of performing work, half the usual weekly duration of work can be expected, for all the roles assigned to the position.\"\n\nOrg units can be merged, forming both **departments** (permanently functioning organizational units) and **collegial bodies** (temporary, convening only occasionally councils, commissions, working groups), as well as **project groups** engaged in achieving some result.\n\n**Usually, collegial bodies and project groups are not listed in staffing tables** **(vacancy lists)** **just to emphasize their relative autonomy in subordination, as well as the non-standard** **way of remuneration** - though this does not mean that no one has the right to assign them tasks, requiring the performance of certain activities and expecting them to show role interests/preferences, and also that compensation will not be paid for work within such an org unit. But to reiterate: the subordination/leadership relationship is separate from the role/subject/professional attitude to activity.\n\nThe minimum org unit consists of a performer, viewed simultaneously as:\n\n- **agent-in-position** (and this means that their accountability/subordination and rights for managing/directing the labor and property of other organizational units are clear, as well as how their work is paid for). **Along this line works positional subordination,** **management, leadership. This is the line of the constructive organization design.**\n- **agent-in-role** (and this means that their method of work is understood, there are expectations of their professional mastery in the method of this role, it is clear their objects of interest and the interests themselves, and therefore it is possible to build expectations about their actions in the role). Along this line works professional/functional oversight, governance (this translates as \"supervision,\" \"oversight,\" but not \"management\") and it is not customary to talk about subordination. But if adherence to the method along this line is performed poorly, the agent will be removed from the position - and no boss can help them.\n\nAnd it would be good to understand that the language of this conversation about organization (when it is clear who can assign tasks to whom and why these assignments will be fulfilled) is not very applicable for conversations at the level of communities, societies, and humanity in general: in communities, it is not clear who can assign what to whom, if there are assignments, they are carried out voluntarily. In societies, an organization (state) can exist which treats its citizens as almost property, and fulfilling assignments there is usually associated with extortion: direct threat of violence if assignments are refused. If you are assigned to come to the draft board and you don't want to - you have no option to \"resign.\" If you are assigned to pay 13% of your income, there is no option not to fulfill the assignment, and resigning is also not so simple, \"pay your taxes and sleep well\" is no different from extortion, if you disobey, force will be applied to you, which will not happen in business or communities.\n\nTherefore, be careful in using recommendations from our course at these levels: communities and societies. Systems thinking, of course, is quite applicable at these levels, but it’s not a fact that you will immediately be successful in this application. Systems thinkers have not yet worked out these levels well enough in terms of quick-thinking methods about them and reliably working engineering methods for creating and developing societies and communities to quickly and effectively teach you to work with communities and societies. And always remember, if you want to do something with communities and societies, then every person there (and AI agent) does not dream of being managed by you, and vice versa - would be happy to manage you if they had the opportunity. Therefore, such projects are most often utopian. Yes, some people become presidents and prime ministers and somehow influence the lives of millions of people, but think about the percentage of these elites from the Earth's total population and estimate the likelihood that you will find yourself in this number in your lifetime. Do not engage in utopian projects, do not waste time on them. You can very well improve the lives of millions and millions of people without having them under direct subordination - neither positional nor in terms of state power.",
    "c476c2b745b1c91e64e30b2d3bdfffdc": "---\ntitle: Leadership\n---\n\nTo ensure that people::agents sustainably hold the required roles in an organization, there is a method called **leadership**. It helps executors to reliably occupy roles in a project (including, if necessary, encouraging them to reach the required level of mastery in their roles), as well as assisting them in cooperation in these roles. Leadership methods primarily persuade or \"talk\" agents into taking positions; assistance in learning to achieve mastery is rarely included in leadership, as it is often assumed that \"the agent can, but does not want to, and needs motivation.\" If an agent \"wants, but cannot\" --- this is a different situation, an educational one (but for an agent to start learning a craft, leadership is also required, as the agent usually \"can learn, but does not want to, and needs motivation\").\n\nIn management as organizational engineering, leadership is equivalent to production methods, i.e., methods of creating/implementing the target system based on a known project. In production, we buy or fabricate structural parts and then assemble them to ensure they perform the desired functions when operational. Leadership is not that straightforward, starting with the fact that there often is no \"known organizational project,\" and it needs to be made explicit. Then, people need to be sourced, usually by the administration, which often may hire people lacking the necessary skills because hiring individuals with the required skills is “too expensive.” Thus, training or educating people is necessary (enhancing intelligence because there not only is often a shortage of skilled people but also a shortage of educated people, and everyone agrees with this. For instance, enhancing intelligence through training at the School of System Management, which might take about a year, three initial semesters, or a couple of years---six semesters of the \"Organizational Development\" program).\n\nThen it's necessary to \"persuade\" people to take positions, teach them to perform their roles, and remain focused. Perscading involves taking not a job position, not a position in the staffing schedule, not a vacancy, but a role position!\n\nLeadership does not deal with people taking on the authority to manage their and others' labor and company property/equipment/capital and then using this authority. Leadership specifically addresses the problem of agents who are reluctant to play their roles, even if they have the required skills. It is often said, \"yes, I am good at organizing events, but I really want to learn to work with 3D models in CAD,” turning a good event manager into a poor project engineer.\n\nLeadership is often called \"catalysis of cooperation\" because the division of labor is primarily the distribution of roles among different performers (not all roles are given to one performer), and if some role is missed in its execution, then the project/play/organization of labor halts, and cooperation fails. There must be performers for all necessary roles in the project who perform these roles well without shirking. For instance, if no one plays the role of Ophelia and four extremely busy actors play Prince Hamlet in one ensemble, there is no cooperation regarding Ophelia's role. It needs to be specially organized--- either hiring additional people for Ophelia's role (either already capable of playing it or who will need to be hired and then taught), or retraining one of the Prince Hamlet performers to play the new role of Ophelia, but the organization will then lack the necessary number of Prince Hamlets during this time. Since all current role performers are busy with their role work without any spare time for learning new methods of their work, it's rare to retrain old role performers. Someone must do the work of the old roles' performers while new people are being trained for new roles, so the old role performers will continue to work full-time in new roles without time for retraining. New people will learn to do the new work using new methods in new roles.\n\nWhen people sustainably occupy some culturally-driven position, professionalize in its working methods, and pursue the interests of this position, their life gains meaning as they participate in the culture, a team, and evidently contribute within the division of labor.\n\nPeople who securely retain their position can very effectively play their role in collective/project-based labor division, that is, distributing performed tasks through various methods to different people-agents who have a high level of mastery in executing those methods.\n\nLeader--- this is also a role! The role of a leader is played not only by managers but occasionally by all employees. **A leader** **doesn’t so much \"lead by example\" or \"show the way\" (strategist), as much as they help people occupy and retain** **role** **positions** **within the organization. They are the director, assigning people-actors (executors) to** **project/organizational/activity/professional** **roles and helping them to successfully master these roles and maintain them amid the corporate life's hustle.**\n\nLeadership::method is a bridge connecting the impersonal world of organizational development and design (knowledge, schemes, role/functional objects) with the vibrant world of role-executing people, with their personal (not professional-role) preferences.\n\nInformally speaking, a leader persuades (in the course of personality engineering, it will be \"teaches\") certain executors to play a certain role in a project, to take a role/professional position. The leader does not define it themselves! They learn it from the organizational project! And if there is no organizational project, or it exists but is not documented, expect problems.\n\nFor example, in a play (led by a script, which will be the organizational project), the role of Ophelia (role!) is lacking, and of the available actors in the troupe, only Peter Nikolaevich is left. Peter Nikolaevich is not keen on playing Ophelia. The leader might have several conversations with Peter Nikolaevich: talk about the art of acting being about transformation, the need for acquiring new skillsets (continuous education, infinite development), about the challenge of transforming a man into a woman and therefore testing acting skill, about the ancient traditions of Kabuki theatre^[[https://en.wikipedia.org/wiki/Kabuki](https://en.wikipedia.org/wiki/Kabuki)], where hereditary male actors play both male and female roles. And eventually, one evening Peter Nikolaevich goes out in a skirt to try it, realizes it’s exceedingly difficult from an acting perspective, \"a true test of his skill\" as the leader said, and after a month is successfully playing Ophelia to great acclaim. The troupe is happy, Peter Nikolaevich is happy, and the audience is pleased. This is leadership: on one hand, catalyzing cooperation and enriching people's lives (the \"official\" modern understanding of leadership), and on the other hand--- persuading people to play necessary roles for the organization (defined by the organizational project) well (the informal modern understanding of leadership).\n\nTypically, the entire team engages in leadership as a method of \"persuading agents to properly execute a role,\" with each role performer in the project being guided towards sustainable occupation of their position by practically all members of the united team. Hence, everyone in the team plays their professional/project role and the role of a leader. Leadership is implicitly distributed, not personal.\n\nTight-knit teams are characterized precisely by this \"distributed leadership,\" as no single executor-leader-administrator can conduct all necessary leadership work in a large team--- they simply lack the time for heartfelt conversations with hundreds or even thousands of colleagues (co-workers, working together) if only one person-executor is engaged in this leadership. In a nutshell, there is leadership in a good project team, but explicit leaders are usually absent--- everyone engages a bit in leadership towards others and (importantly!) with **conscious leadership towards themselves, demonstrating role mastery.** If in the game/theater metaphor, leadership is a method by which the game master/director works, then role mastery is what players/actors are taught. And, of course, all players/actors are taught to be a bit of game masters/directors (and in life managers).\n\nLeadership is discussed in the course \"Personality Engineering\" and in more detail in the course \"System Management.\"",
    "189eeb77be2a0701926bc345eb683ae1": "---\ntitle: Rank and Level of Skill\n---\n\nNothing can be said about the boss's professional interests: they wander, as understood by the agent-in-position in terms of their authority. Similarly, nothing can be said about the labor interests of an agent (often a person) as a bearer of the rank. The words “professor”, “PhD”, “colonel”, or “red-bannered division” tell us nothing except that a person or a division has some experience in some unclear field of activity. A shop of advanced production culture, like a red-bannered regiment: nothing can be said about the working methods (what it does) of the shop or regiment, what roles they perform in these methods, the subject area remains unknown (Genetics? Artillery? Air transportation? Suppression of uprisings?). The title “People’s Artist” doesn’t clarify whether it refers to playing the role of Hamlet or Petrushka in entirely different plays. It’s a general characteristic of the agent-actor but doesn’t specify the subject specificity of the role itself, nor indicate the method of performing the role.\n\nBut **the degree of skill**/**qualification**/**competence** of an executor for some role is important. We specifically talk about the degree, not the level of skill, so as not to confuse it with various other levels (ontological in the hierarchy of types/meta-models, system levels in the hierarchy of system dimensions taking into account their nesting). **Levels---** **are usually about hierarchies, degree---** **about the manifestation of some quality.** Although the language doesn’t strictly follow these distinctions, for example, “volume level”, though there are no hierarchies in volume, or “water level”, there too without hierarchy. Yet, we will talk about the degree of skill, not level, understanding that in life these will be synonyms.\n\nToday, qualification is considered not as a set of some separate knowledge, skills, and abilities but as a set of **competencies** sufficient to play some role. Competence means that some tasks the role executor with this competence can perform successfully not only \"on an exam\" but also in real life, in a real project. Competence in some method includes not only knowledge-skills-abilities but also a personal attitude towards this method, taking on professional role responsibility, self-identification in the role for this method.\n\nIn fact, the traditionally used criteria of knowledge-skills-abilities/**KSA** in Russian and Soviet pedagogy do not include the skills of setting tasks in non-greenhouse conditions of real life, whereas competence includes setting tasks in real life for their subsequent solution---finding in life the objects of interest of the role, being a master of the method for which the agent is, being able to maintain the role amidst the hustle and abundance of details irrelevant to the role in life. **Mastery**--- is a part of the personality. **Personality** --- is the sum of all mastery of the agent, who besides personality (“mastery in some methods of work”) also has an organism (“apparatus for the personality as a set of mastery”) and even tools can be considered, enhancing the capabilities of the personality in part of some methods (say, a notepad as a memory enhancer for the mastery of thinking).\n\nPersonality manifests itself through the behavior of the organism-expanded-with-tools of the agent. Of course, the skill of “performing some method”/“playing some role according to the method's script/algorithm” in particular and personality as a whole, as the sum of all such skills--- these are functional objects that represent agent constructs (brain, computer, and the body of a human or robot as a whole, plus additional method tools--- we consider the agent with their tools) of creators/constructors, acting according to the work methods algorithms as “algorithms of transformations” (we remember that constructor theory gives us a theoretical generalization of universal computers/information processors according to some algorithms to universal transformers of the physical environment into some material results according to some algorithms). More details about personality and its mastery, training in mastery (personal development), and assessment of mastery will be in the course “Personality Engineering”.\n\nAn actor possessing the skill degree of knowledge, skills, and abilities (KSAs) for the role of Prince Hamlet will quite be able to play Prince Hamlet in rehearsals, at most--- in a graduation performance with carefully selected viewers. We can only guess how he will behave on some tour in a rural outback, and not necessarily in his own country. A competent actor in playing the role of Prince Hamlet will be able to play Prince Hamlet somewhere in the thick of a chaotic crowd (usual conditions in projects!), and when he has to communicate with Yorick's skull, for the lack of a skull, he will adapt some potato or at least some paper with a drawn skull---and he will make this “skull” himself, inventing how to do it. But most importantly--- someone with sufficient mastery will find among the crowd the rest of the missing participants of the play and will be able to organize his role dialogues with them, involving all around him!\n\nHe can fit his labor in the role into the labor of the whole collective playing the play/role play (we call such qualification/competence a “practitioner”), and ultimately--- organize the collective to perform new tasks for it. We call such a qualification “master”, although this is a narrow meaning of the term “master”. A broader meaning--- “bearer of mastery”. More meanings of the word “master” will be described in our courses in the course “Personality Engineering”.\n\nMastery includes some applied/narrow intelligence for the subject area of mastery. We have already noted that fundamental intelligence is independent of the subject area, but in sufficiently broad subject areas the number of possible objects of attention and actions with them is large enough so that to perform the method, the agent-in-role must have a general ability to handle the situation, “narrow, but intelligent”. Mastery in some broad area usually includes the ability to cope with tasks in the subject area of some method, which neither the master as a bearer of mastery, nor his teacher has encountered. Roughly speaking, if in a play/game a situation arises where a line is needed that wasn’t in the role script (in a project--- perform an operation that wasn’t in the training course), then the master will deliver that line (in the project--- perform the operation he wasn’t taught), even if it means changing the type of mastery (if your car engine stalls or its electric drive breaks down, then the mastery of the driver won’t help you, you’d need to switch to the mastery of a mechanic or call some agent who has such mastery). In applied mastery, intelligence (both applied/narrow and fundamental/universal) plays a huge role, because one must always be on alert: in life, when performing the method, something regularly goes “wrong” as in the knowledge/theory/explanations of this method, and one needs to quickly comprehend what to do in this case.\n\nOne can generally move away from pedagogical slang (both old with knowledge-skills-abilities and new “competence-based”) and simply talk about skill at performing a method, the skill of playing some role, the skill at a given (professional) position. A boss, having begun (often unnoticed to themselves) to play some operational/professional/functional role (for example, an engineer-architect, because they noticed that no one is playing this role, but there are already several groups of developers whose work needs to be urgently adjusted in terms of organizing the interfaces between the autonomous modules of the system being created) can be either a master in this matter, or a well-trained novice, or not understood at all in system architecture. It’s important to understand not only which role a person is playing, but also what degree of their mastery in performing the method of this role. Because if there’s no mastery, then in the project, it will be necessary to find someone who really knows how to perform the tasks by the method and thus will qualitatively play this role, otherwise, there will be no successful project. You cannot look for a “role executor”, you need to look for “someone who can work by the necessary method, possessing a high degree of skill in working by the necessary method”--- then appoint him as the role executor and also use the leadership::method so that the appointed role executor is genuinely engaged in the tasks by the method and cooperates in this with the rest of the role executors. You need to get results, this is achieved by performing tasks by some methods, not just any tasks. **You don’t just need a “role executor”, you need him to be able to work by the method of this role!**\n\nQuestions about methods and selecting people-executors of roles for these methods--- are different questions! First, you need to say, \"we need exact measurements, these methods are practiced in metrology\", then \"thus we need a metrologist\", and only then select people for the role according to their degree of mastery in performing exact measurements. So, the degree of skill/**qualification**/**competence** of Masha in precise measurements, that is, as a metrologist--- zero, Petya has never performed tasks by methods of metrology, but took a metrology course in college five years ago (that is, he has small non-zero mastery in metrology), while Aristarkh Nikanorovich defended his doctoral dissertation in metrology a month ago---his mastery in metrology is higher than required to perform the work of a metrologist in the current project.",
    "b0b5a9796e969142e54d32c9ea7f9363": "---\ntitle: How many project roles are there\n---\n\nYou need to remember a simple principle: **important** **roles** **in a project are always one more than you have identified**. Roles with their interests in relation to your system and project always exist if there is a project. And you don't \"develop/invent/imagine\" them. You \"identify,\" \"discover\" them (discover).\n\nIf we take external roles separately, not team/internal roles, then you should begin not with two or three roles, but with about **15 (fifteen).** Remember that if five people are playing the same activity role for the project, it's still one role. Remember the \"Dance of the Little Swans\" from Swan Lake? There are four performers, but the culturally conditioned role of \"little swan\" is actually one, although there will be four performances of this role in the play. Mobile game players might number forty thousand, but they all share one role --- \"player.\" So, the 15 external roles may indeed be performed by a large number of people. But the opposite is also true: one agent can play multiple roles, so five people in a project could actually be playing ten very different roles. A player-agent can also be a payer for the right to play and a buyer (registration of the purchase is in their name) --- even though these roles can also be played by different individuals, for example, if a child is playing, the purchase is registered to the mother, and the father pays for the game with his card.\n\nOne project manager told us that after easily identifying the first fifteen external roles, he realized where all his time was going unnoticed: **15 phone calls** **with role performers** **per day, each 10 minutes long, and 10 minutes of prep and post-call work, resulting in 5 hours simply to maintain adequate understanding** **of the current situation of reconciling their interests! And if there are project problems to solve with** **these roles, 10-minute calls are clearly insufficient.** Since no one explicitly tracked external roles in the project, this time vanished \"invisibly,\" spent unconsciously, not reflected in plans, and the manager's resources for this work weren't allocated or accounted for. Awareness of roles and their interests, planning work with agents-in-roles to align their interests --- they are important!\n\nSo for dancing::method/culture/practice/process/activity (we taboo the word \"dance\" as it may mean \"a type of dance\"/\"style of dancing,\" \"dance performance/outcome of dancing,\" or \"dance culture\") you can separately highlight the roles^[<https://vk.com/@buffdance-rasskaz-o-sistemnyh-urovnyah-v-tance>]:\n\n- The dancer (who, in fact, dances --- performs the \"dancing\"),\n- sub-role \"partner\" (only in those types/styles of dance where they exist! In other types/styles of dance, they might not be, or conversely, there might be an ensemble/team/crew with many dancers, and for lap dance, it's not so much a \"partner\" as a \"client.\" In social/partner styles, there are separate roles of leader and follower, both gender-independent^[<https://jenabl.wordpress.com/2017/05/17/inclusivity-and-dance-terminology/>]),\n- the spectator (but only in dances that assume a spectator. For example, in social kizomba, a spectator is not assumed; partners in the pair dance only for each other),\n- the choreographer (responsible for the composition and set of movements),\n- the dance coach/teacher (teaches dancing),\n- the music editor/DJ (selects music),\n- the dance event organizer (party, battle/competition, concert, seminar/festival, etc.),\n- often this list includes a photographer (at parties) or videographer (for concert performances and battles),\n- for stage dance styles (ballet, stage dances) there will also be a costume designer,\n- often a makeup artist/visagist.\n\nAnd this is also not a complete list! For example, in sports dances, there are also\n\n- judges,\n- a member of the scoring committee (calculates the judges’ work results),\n- an informant judge (announces the judges' results).\n\nOf course, these are just roles, and role performers may be fewer. If I dance-improvise by myself in front of a mirror at home, then I perform many of these roles myself simultaneously or at different moments. For example, first, I will be the music editor/DJ, choosing music, and then the dancer and spectator, simultaneously doing the choreographer's work --- composing the dance performance/number/setup. Or the number of agent-role performers may be more: there are many spectators, and you can even **deepen the division of labor**, that is, split the current role set into sub-roles and distribute them to different performers: the music editor/DJ splits into the artistic director of the event (sets the music format, its stylistic direction, and checks adherence by the DJ; the term \"director\" here should not confuse, it doesn’t refer to a job title) and the DJ who directly implements the given musical format and stylistic direction.\n\n**When a systemic thinker thinks about a system, and the projects related to its creation and use, they** **remember that** **the success of the system depends** **precisely on how** **the interests/preferences** **of all involved roles are taken into account.** **And** **also** **they remember that they themselves::actor** **are not a neutral** **\"thinker above the fray,\"** **but also play a role in the project, and they::roles** **have** **preferences/interests** **they want to realize.** **Don’t forget to take yourself into account** **as a role, and also don't forget to show** **other agents-participants of the project, which** **\"position\"** **you have taken!**\n\nOften among the many synonyms for project/work/practical/organizational/engineering/cultural/strategic roles (especially external project roles) the word \"stakeholder\" is chosen, familiar in English literature. In English literature, they may still separately consider the agent-in-role as a stakeholder and separately recognize the existence of this person’s role as a stakeholder role, but this distinction is not universally accepted! For instance, ISO 42010:2022 states: \"stakeholder: role, position, individual, organization, or classes thereof, having an interest, right, share, or claim, in an entity of interest. EXAMPLE: End users, operators, acquirers, owners, suppliers, architects, developers, builders, maintainers, regulators, taxpayers, certifying agencies, and markets\". What do you think, how many people will read this as a list of roles, and how many--- as agents-in-roles, considering the definition includes \"role,\" \"position\" and \"agent/individual with organization (or even their classes).\" How many will get confused by \"market\" as an example --- is it a role, position, individual, organization, or class? From the perspective of our course, this list is akin to \"metal crosses, Catholic crosses.\" Of course, we use international standards materials in our course but urge caution and to always engage \"type detector\" when reading to catch ontological jitter.\n\nWe acknowledge that the term \"stakeholder\" (and much less often \"stakeholder role\") is already widespread in Russian, but we avoid using it in our course. The word \"stakeholder\" easily conflates role with actor/performer of the role, and even position. \"Stakeholder Prince Hamlet\" and \"stakeholder Vasya Pupkin\" sound the same to a Russian ear, and from that moment thoughts about the role quietly switch off, leaving the usual household thinking \"about people\" and not even as actors but as agents who, besides playing roles as individuals-actors, also as organisms eat, sleep, get sick, and go to the bathroom.\n\n\"Stakeholders\" start to be perceived as \"just people, as they are and for some reason sometimes organizations\". With this word usage, it's easy to think these \"just people\" make decisions based on pettiness, bad character, mood, and not due to some role preferences. No, roles cannot be petty, they are roles, not people! Their interests --- are role interests, their decisions stem from the method of the role. If a structural engineer thinks a part in the system can't be less than 4 cm for the chosen material, and everyone else opposes it because such a decision steps on their interests, then this is not his opinion as an agent-with-a-bad-character but the opinion of the role!\n\nIf agents, roles, positions are confused --- there is no methodological (about methods/work activities, what roles are dealing with) thinking, and as a result, no systems thinking! Therefore, we recommend using role terminology, because \"work/project role Prince Hamlet/engineer/salesman\" sounds good, whereas \"external project role Vasya Pupkin\" --- the tongue does not turn to say it. And it’s good that the tongue does not turn! By not confusing agents, their roles, and positions, there will be full-fledged methodological thinking, enabling you to discuss culturally conditioned work methods, role items of interest, role interests, engage in systems thinking --- and initially negotiate with everyone (qualification \"practitioner\"), and subsequently have everyone around you negotiate (qualification \"master\").\n\nEarly versions of our course used traditional \"stakeholder\" terminology, and the material on roles was poorly understood. After changing the terminology to \"project role\" in its distinction from a person or organization, things improved, including communication with people in projects who hadn't taken the system thinking course. Additionally, the joke disappeared about the level of steak doneness for the stakeholder. **Don't talk about stakeholders, talk about roles** **(in extreme cases ---** **\"stakeholder roles,\" if your organization can't live without the word \"stakeholder\")!** In the current version of the course, \"person\" was further replaced by \"agent,\" because roles in the 21st century are not always performed by humans, and not all decisions in a group of people are made by humans; smart sensible \"non-living entities\"/AI have appeared (and it can't be said they are just \"interface modules to humans,\" so too can be said about a human secretary --- \"an interface module to the human boss\").\n\nIf we speak not about a \"role in the work method\"/\"project role,\" but just about practitioner/worker/dealer/engineer --- this is quite possible, but there may be confusion akin to that with stakeholder:\n\n- whether we call the person::agent \"practitioner\" or \"dealer\" without regard to their role,\n- or indicating the agent's role, although not specifying which one.\n\nIn such cases, it's better to clarify. In our course, a similar range of synonyms has been provided several times; usually, we refer to the actor-in-some-role. However, there is a high probability the role aspect will not be picked up, and it would just be an \"epithet\" for a specific agent: \"practitioner Vasya\" will mean not that Vasya is performing some specific subject-specific method (e.g., pasting posters on fences, and now he is not Vasya but \"poster sticker,\" or \"Vasya::actor practicing poster sticking,\" \"Vasya::actor/practitioner poster sticking\"). For those unfamiliar with the concept of the work method and the role practicing this method, it will be just an indication of Vasya himself, similar to \"mister\" or \"sir.\" \"Practitioner Vasya,\" \"dealer Vasya\" sound good.\n\nUnfortunately, light solutions and universally understood terms won’t exist, all words have long been taken. Therefore, better talk about roles, it is more reliable, but we will also speak of \"dealer,\" \"practitioner,\" \"actor,\" \"engineer,\" and even \"worker,\" meaning the actor-in-role performing work by some method, working in some culture, in some style, performing practice/activity/\"type of work\"/\"type of engineering\"/\"method of work\" or even strategy (as a target method chosen during strategizing::method). All these are synonyms with slight nuances.",
    "db554089cb52bca197395a31360c0ad5": "---\ntitle: External and Internal Roles\n---\n\nConditionally, functional/project/stakeholder roles can be divided into **external** and **internal** in relation to the team of engineers directly creating the system (with creator teams across the creation graph, it is more complex and each time requires figuring out which project is meant).\n\nInternal roles — these are roles of the **project** **team** (classic engineers or not-so-classic ones — doctors, teachers, various specialties of managers, marketers, etc.), while external ones — these are all others who are not part of the project team, but who are affected by or affect the project. A typical external role is \"user,\" who **should be named by** **their** **role in** **their** **domain** — player, patient, diner, or payer, contractor, inspector, etc.\n\nA good analysis of types of external roles in large sales (e.g., engineering equipment — unlike retail sale of a toy car) is given in Neil Rackham's \"Strategy of Working with Customers in Large Sales\"^[<http://www.koob.ru/rekhem_nick/strategiya_raboti_s_klientami_v_bolshih_prodazhah>]. In this rather old (1989) book, it is stated that in a large organization, the simple word \"client\" can hide very different roles — and each of them needs to be engaged differently. Hence, it is better not to say \"our clients are polyclinics\" anymore for over thirty years; it's not best practice. In real life, within this polyclinic, one discovers many different roles — doctor, nurse, manager, IT specialist (and several different ones!), lab technician, patient, and usually invisible investor-owner. When you said, \"our clients are polyclinics,\" whom did you mean? For each, you need to answer different questions, present material at different levels of detail, praise the system for various features, differentiate from competitors differently, negotiate differently at different sales stages. Therefore, **try to name** **external** **roles not based on their relation to the team (here, the decidedly overly general word \"client\" will escape, as \"all those who are outside\"), but as they are called in their** **activities, in their teams.**\n\nWe recommend taboos on certain words that are very popular in such cases and hide entire bouquets of roles with very different role preferences in various essential system characteristics:\n\n- **User** — name them as they are called in the project roles of their projects. If it's about a game, it’s a \"player.\" If it's corporate software, there are usually many different people playing very different roles — and for these different roles, one will have to consider very different important characteristics; they cannot be combined under the word \"user.\" The key guide here — the role is named by the key work method of the role performer. If they play a computer game — player, if they practice medicine — doctor, if they think about finances — financier. A simple test: is there a subject area, specialization method in the name? Not just \"user,\" because for the \"user,\" the subject area is unclear, the method for the \"user\" is not applied from any subject area, but just \"method in general,\" this is too abstract for productive discussions! Ground it! Words should sound from some subject area, not general methodological words!\n- **Buyer** — usually there is also separately a beneficiary (one who receives benefits from the purchase), acquirer (legal party to the contract), payer, trustee (e.g., courier receiving the purchase), expert (one who selects the product), etc., and all need to be considered in different roles, considering their different role interests in various important characteristics.\n- ... you got the idea. The word \"customer\" or \"client\" is also suspicious — often there are people with opposite preferences. The finance customer wants the lowest price and therefore minimal features, the engineering customer wants the maximum features and therefore the highest price — and they have opposite preferences in price and features; if they are combined as the \"customer,\" not much can be done with this in the project, all must be considered separately.\n\nOften external people-in-roles/stakeholders are unavailable. For example, you have 10 thousand players of your phone game, all having one role \"player.\" But until the game program is written, and no one is playing, there are no players. Remember: if some \"Vasya Pupkin\"::orgunit/\"constructive object\" is not playing a hobbit::role/\"functional object,\" then there is no \"hobbit\" in the physical world at that moment! In such cases, when there are \"no players of the role, no one to ask, they will be there someday,\" external roles are trusted to team members to represent.\n\nA quarter of a century ago, the **persona method** described in Alan Cooper's book \"The Inmates Are Running the Asylum\"^[<http://www.koob.ru/cooper_a/psih_v_rukah_pacientov>] in 1999 was used for this. There, not the roles, but the role performers — characters/personas — were modeled. This method suggested creating a typical portrait of the *user* of the product, and someone from the team should play his or her role as in a theater. For example, \"single mother, 32 years old, living on the outskirts of a small town, using her tablet for household finances.\" But in recent years, there has been a wave of criticism of the persona method since its focus was not on role modeling and work methods of the role to identify role interests but on modeling non-essential characteristics of the role performer agent, poorly connected with the essence of the matter, i.e., with the sources of the role's interest. This is a typical mistake: working with the agent instead of identifying the work method of the agent, his role, and role interests.\n\nIt's like if we advised describing Prince Hamlet in the persona method, suggesting a precise description of his weight, height, dietary habits, clothing preferences (thus describing not the role but the agent who could play Prince Hamlet) and hoping this would give a more accurate answer about his activity preferences at moments when he asks his role question \"to be or not to be.\" Understandably, this is psychologically comfortable for the team. It is extremely important for the project team to design the system not as convenient \"for themselves,\" as this would be a conflict of interest — they would prefer the system easier to develop, but as convenient \"for others.\" And designing a system for the \"fat Hamlet\" is much better than for \"me, though I'm not Hamlet at all but ready to portray him as I understand.\" However, from the perspective of role interest modeling of the persona — it is a dead end, though for the system's success, it is necessary to satisfy role interests!\n\nIt's better to abstract from the \"single mother living on the outskirts of a small town\" and instead of \"user\" call her a \"home financier\" — this will exclude all areas of the single mother's interest, all areas of the small town resident's interest from discussions, and that is correct, they will only be extra, distracting from the important. If any characteristics of the performer/actor need to be considered, they are considered as features of a different role of this actor, not the agent-actor itself. Thus, for visually impaired (important characteristic: accessibility of the interface) a large font must be provided in the interface (preference). But we understand that the roles of \"home financier\" and \"visually impaired\" have different important characteristics, and these characteristics will be reflected in the system's functionality and design differently.\n\nA conflict of interests may even be revealed (different preferences regarding one subject of interest/important characteristic in one role performer). A home financier wants to see a lot on a small screen at once, and a visually impaired person wants a large font, and let everything not fit on the screen, it will be inconvenient to scroll, but everything is visible! Which font size will it be — like for the visually impaired, or for the home financier? Who will win in this conflict of interests? Now, different solutions can be proposed. For instance, a screen magnifier for the font (a lot on the screen, but the magnifier allows viewing something in a normal size for the eyes), adjustable font size (each role performer, either the home financier or the visually impaired, will adjust the font size to their liking), etc.\n\nAll modern methods of modeling external roles in the project (for example, Jobs To Be Done method^[[https://medium.com/no-flame-no-game/what-is-jobs-to-be-done-and-job-stories-4c57c1dc84cf](https://medium.com/no-flame-no-game/что-такое-jobs-to-be-done-и-job-stories-4c57c1dc84cf)]) try to simultaneously increase the accuracy of substantial role modeling and the role's work method to better determine role objects of interest and preferences (success is needed, so satisfying these preferences is crucial!), and raise the psychological credibility of this representation for the project team, because \"helping a person\" is psychologically easier than \"satisfying what a model describes.\" For this, various subject matter experts are invited to personal meetings in the team, focus groups for potential performers of the necessary external role are organized, team members themselves try to gain the necessary experience and play the external role.\n\nMethods of modeling and \"personal representation by live people\" of different external roles in the project are discussed during the development of the **concept** **of system use** (description of system functionality that brings benefits during its operation). The development of the system use concept is conducted according to the development methods involved by the developers::role. In addition to the concept of use, the developers::role also develop the **system concept**, perform designing with sufficient detail for manufacturing, create the system (using an internal production platform, \"factory,\" \"conveyor\" constructed by the platform engineers). Developers/developers::role do a lot more, and they are usually considered the main ones concerned with satisfying the interests of external project roles, especially user roles (we have discussed that these roles can be numerous, and they will be called not \"user\" but something more specific for their subject area).\n\nNevertheless, satisfying the interests of external roles will concern not only developers but all team roles involved in the project. For instance, architects::role also model external project roles because they are concerned with satisfying their interests regarding specific **architectural characteristics** that developers might overlook. For example, developers of a server system might be concerned with some product capabilities requiring too much computational power for one \"player,\" the architect's task is to remember there will be many such players. Thus, the architect models what people from the promotion service tell (expecting these \"players\" to be a hundred, a hundred thousand, or a hundred million simultaneously). Consequently, the architect and developers will be in a productive conflict, and developers are likely to develop a technical (architectural) debt, i.e., works needed to satisfy players' interests not only in functionality but also in players' interests (\"gaming audience\") in server availability and performance (these \"availability\" and \"performance\" being architectural characteristics), and the representative of the \"gaming audience\" (all players combined, as opposed to a single player) will be the promotion service. The developer team may consider the architect an external project role; the team manager considers developers and the architect (or an entire architect team) as team members.\n\nAn illustrative example is one of the engineering teams suddenly asking to include a local lawyer in the team. The motive: during negotiations, the agent playing the lawyer's role acted as if working against the engineering team, not as a team member! The team's calculation: after the formal inclusion as a team member, the legal role performer will primarily consider the engineers' interests, not some \"oversights\" or whomever he accounts for, representing and promoting the interests not of engineers regarding these \"oversights,\" but the interests of \"oversights,\" ignoring the engineers' interests.\n\n\"\\-- How much is two plus two?--- Are we buying or selling?\" Always remember this. In the web of organizational relationships, it is easy to get lost without **understanding (i.e., emphasis on** **modeling,** **with documented models)** of work methods, roles, objects of interest, and interests, who::agent represents whose::roles interests.\n\nNot so much \"externalness\" or \"internality\" is important, but rather **accounting** **(emphasis on documenting the modeling results)** of all found objects of interest and then performing work on agreeing and satisfying interests based on this list of objects of interest as a checklist — and remembering that interests come from culturally conditioned roles, not specific agents performing interest-bearer roles, many interests will not be publicly presented but may appear in private negotiations (and that is good, since if everyone talks to everyone, it is a bad architecture, bad project modularity, more details in the course \"Systems Engineering\" and \"Systems Management\").\n\nIn any case, missing external and internal roles always need to be somehow played out in the project, organizing for this some competent, at least somewhat qualified, not randomly available role performers, otherwise, the system's success will be in question. Remember that the success of a system is determined by the agreement of roles (Prince Hamlet understands something about the Danish kingdom), not by the agreement of role performers (Vasya Pupkin, assigned to play Prince Hamlet, knows nothing about the Danish kingdom)!\n\nIf a deaf person performs the role of a music connoisseur, he will play the role poorly — and his agreement with some music will mean nothing, it won't guarantee the success of the music. If an operational management pro performs the role of an engineer-architect, his agreement with the system's design will mean a lot administratively, but nothing in systems engineering, as agreement is needed from a qualified actor-performer in systems engineering role. The agreement of an experienced operational management role performer, posing as an engineer, doesn’t count.\n\nThe failure/misfortune of many projects is explained by decisions made by inexperienced performers of professional roles (while being authorized to make decisions for any role, but this explains but doesn't justify).\n\nIf it is difficult for someone to imagine an abstract \"Prince Hamlet\" (but that's exactly what you need to do!), then at least imagine a persona: create a typical role performer. In any case, avoid thinking that all people-in-roles are like you-in-role. All people-in-roles are unique, and experienced role performers have considerable experience in playing the corresponding role, plus they often have more time to perform their role in your project than you do — unless you are a professional in this role. But if you are a developer, your chance to properly perform someone else's external role is close to zero (\"the best model of a cat is another cat, preferably the same,\" you have to take someone with similar skill, not a broad understanding of skill). Special efforts must be made to represent external roles in the project: conducting focus groups, talking to positioners, studying literature, etc.\n\nThe same can be said about you: you in your traditional roles, in which you have skill, will have more time to perform them, and have more experience in playing them than performers of other roles. If this is not the case, and in your project \"the cobbler bakes pies, the pie-maker stitches boots,\" then your project is in danger, and this danger comes from you.\n\nA boss is not a role, it is the authority to make decisions. A decision will be made, but it will be bad if the boss does not have mastery in the role's work method. Verify the skill of bosses in performing some activity, in occupying if not a position, then at least fleetingly occupying a role and demonstrating skill. Ask them simple test questions (e.g., \"by what method did you obtain this result? Which textbook can I refer to repeat the reasoning that led you to this decision?\"). Of course, you'll need to decide: do you love the project or the boss more. If the boss more, then to hell with the project, failed due to the role incompetence/lack of qualification of the agent-boss (the agent occupying the boss's organizational position).",
    "1ebaabce77a7877e0d6ae8090bcd4bf0": "---\ntitle: 'Supervisors: they are jokers, expect them to play any roles'\n---\n\nPeople often confuse activity/project/organizational roles and organizational units/filled organizational positions when looking at supervisors—because supervisors' ability to manage resources is very important. Will you align some preferences on the subjects of your interest with the player in the professional role (substantive discussion) or with the supervisor (will permit or not, based on unclear considerations)?\n\n**Supervisors in relation to roles** **should be viewed as card** **«jokers»**^[[https://en.wikipedia.org/wiki/Joker_(playing_card)](https://en.wikipedia.org/wiki/Joker_(playing_card))**, which can become any card at the player's will.** A supervisor tries to personally play those roles which he/she considers underrepresented in the project or attempts to understand the situation to delegate the resolution of some issues to those organizational units (individual people or teams) within the project that have a sufficient level of expertise to accomplish the work via the method necessary to solve a challenging issue. To do this, he/she actively seeks out overlooked interests/preferences and also engages in leadership, meaning he/she places an individual or group in the necessary role as the smallest organizational unit or even appoints an organizational unit of several people as co-organized actors with their internal distribution of roles within the team-unit. This leadership by the supervisor aims to ensure the quality execution of a specific work method that accounts for certain interests. One must pay special attention to supervisors’ speech: their areas of interest are usually undefined, not presented, and they regularly change them during the conversation.\n\nRemember: \"words-terms are important and unimportant,\" hence there is no need to focus on job titles and official titles. You should carefully listen to what the supervisor is saying right now and/or read his/her texts in chats and documents carefully, disregarding job references like the names of roles (for example, in orders and directives). A job title—this is not about the content of the work, i.e., methods/styles/cultures of work! It’s about the authority to manage resources, delegate tasks! It's logistics, management, rational use of resources. The content/methods of work need to be reconstructed independently from the speech, writings, and models of agents participating in the project.\n\nFor example,\n\n- For the first five minutes of a \"conference call,\" some \"shop supervisor\" might take on the role of operational manager (preferences: shorten work timelines, reduce resource usage),\n- Then for a couple of minutes as an engineer (for example, a concept developer engineer: preference to identify and align additional usage scenarios that could introduce new features/capabilities to the target system),\n- And then as a CNC machine engineer (preference for low complexity in parts processing from the production platform engineer, hence the intention to determine the features of parts processing concerning changed usage scenarios of the machine and newly known deadlines).\n\nYou must timely recognize the moment of switching from one role to another during the conversation and respond each time to the correct role, not to \"shop supervisor.\" Respond to the \"shop supervisor\" only when the question concerns resource management authorities. Only then is it important that the conversation concerns the \"supervisor of the unit/workshop,\" but even here it’s easy to confuse an operational manager, who calculates the optimal distribution of resources without touching the authority to manage them (say, an operational manager issues a work schedule, and specific workers for these tasks are assigned by their supervisors)—and hence it is easy to mix up one resource conversation with another, \"resource allocation\" with \"granting resource management authority.\"\n\nA theater director doesn't perform in plays, but even if he/she does in emergency situations (an actor got sick or is on vacation, or the budget doesn't allow hiring an actor, and someone had to step in), one **can't understand from the job title what role** **is being played, in which work method he/she has a high level of expertise.** A director, like any supervisor, can disrupt the role play at any moment and perform any role because he/she has the authorization for it (although not the expertise!). A theater director is not Prince Hamlet; it’s just a job title in the organizational chart, not even an acting one.\n\nManager-supervisor and \"operational manager\"/\"project manager\" in classical project management—there's no need to confuse them, although the word used is the same, manager. Manager-supervisor indicates responsibility and authority (a position), not an activity/professional role requiring some level of expertise from the performer. An operational manager is a person who performs the tasks of operational management methods, thus increasing the throughput of work through the organization.\n\nPositions are not roles; they are **organizational places**. Agents as role performers occupy organizational places, thereby becoming an \"organizational unit.\" An organizational position/role has:\n\n- The name of the place (\"position\" name)\n- The authority to manage labor and resources\n- The obligation to perform works using certain methods in certain roles\n- The obligation to follow orders from their supervisors in higher organizational units.\n- A wage rate (some part of the compensation for work gained due to holding the position).\n\nAgents occupying organizational places inherit these authorities and obligations.\n\nIf a role performer is also a supervisor, he/she can arbitrarily choose his/her role, trying to substitute for an absent role performer. Certainly, the supervisor may often perform poorly (an engineer-thermite role performer occupying a supervisor position might be a very bad thermite engineer, or might be a very good thermite engineer, but instead of spending two days on the problem, as he/she would if actually performing the role, he/she will spend ten minutes, akin to an actor in a Shakespeare play spending a minute on Hamlet's role and then moving on to other business). But this supervisor-agent might believe that decisions for any subordinate role must be made by him/her, as he/she is the supervisor!\n\nSuch a situation is fostered by the organizational culture of \"engineers as analysts providing proposals\" and \"supervisors approving proposals.\" One of the chief designers of a machine-building plant (note, the word \"chief\" signifies a position, not a role) recently told the course author that in the evening, he/she finds about two hundred documents in his/her information system for approval. When asked about the quality of decision-making in approving all these engineering \"proposals\" (two hundred in an evening!), he/she just laughed. Such a system will exist for years unless we start dealing with agents (people, AI, organizations), positions, organizational units as agents-in-positions, roles (and in the course \"Systems Management\" we will also discuss **organizational capabilities/capabilities** as a reflection of the fact that organizational units have the authority and resources to perform work using some method. One might have the expertise to work using a method, hold a position, but lack the capability to work using that method. A pianist with \"expertise in playing the piano\" was hired for the \"pianist\" position to play sonatas in a hotel's lobby because he/she can do it. But the small nuance: no piano was provided. An organizational unit exists, expertise is there, but no organizational capability to play sonatas, thus silence in the hall, \"no organizational capability.\" This situation is no different from a designer who was not provided with CAD tools).\n\nIt’s wrong to confuse persons (including people) occupying organizational places and thus holding positions and playing organizational roles as they can (don't shoot the pianist; he/she plays as he/she can) with \"professionals\" who certainly possess a high level of expertise in performing work using the role's methods. In discussing roles, the performer's professionalism and \"level of expertise\"/qualification/competency in the role's workflow method are at issue, while for those holding a position, completely different characteristics (responsibility, loyalty, honesty, a tendency not to steal resources) are considered.\n\nThe word \"manager\" confuses everyone: it can be:\n\n- A position \"manager,\" understood as \"just a supervisor,\" although there is also a \"sales manager,\" representing, on the contrary, the lowest rung in the worker hierarchy,\n- A role \"manager\" meaning \"organizer,\" understood as a combined role of an organization designer (designing the role structure in the organization's tasks and proposing the organizational structure of management/reporting), leader (helping people to take organizational places/positions and start performing the roles attached to those positions—becoming organizational units),\n- A role \"manager\" as only one narrow \"operational manager,\" engaging in activities to maximize the throughput efficiency of the organizational system, \"organization operator,\" \"organization operations engineer.\" Such a manager has a clear subject of interest: the flow of materials, information, tasks through the organization's workplaces, interested in maximizing throughput (flow/throughput—the amount of flow per unit of time), the theory/discipline of the operational management method—\"operations research\" (mathematical performance calculations), considerations from this theory/discipline give the (in this case—operational) manager::role the ability to optimize workload of available resources (literally, he/she::role ensures there are no \"bottlenecks\"—traffic jams in the flow of semi-finished products through the enterprise). If a malfunction is found in the organization (the flow through the organization is disrupted, \"nothing works\"), you need to call the manager-organizer::role. Yes, the same agent might be the same, the same role \"manager,\" no need to call anyone, but the types of roles are different, methods of work are different, and it would be good to distinguish between them. In large organizations, people will precisely be different (moreover, the role of operational manager will quickly pass to the computer, the operation of anything today is intensely automated).\n- Trendy various positions and roles implying the making of decisions—both administrative (positions) and content-related (roles). For example, product manager ^ [<https://en.wikipedia.org/wiki/Product_manager>], who makes decisions on the market properties of a product and the priority of launching new features into development (often confused with a project/program manager, product owner, and even stakeholder representative). It is a complex role (implying the performance of many work methods), but as usual, this role can be performed by one performer, many people, and even many organizational units/divisions. In each specific case, you will have to figure out exactly what you're dealing with: and then always work with the methods by which the roles of the agent-in-position operate, taking into account the authority coming from the position.\n- Founder of the enterprise/founder, but in fact, he/she is also an \"enterprise engineer,\" so this role is considered managerial. The education of various \"technological entrepreneurs\" mainly provides intensive organizational management training, i.e., teaching enterprise founders agile methods (e.g., Kanban) in operational management, but also instructs on strategies by aligning different preferences of various roles when performing the role of a businessperson, whose subject of interest is the market price of the enterprise itself. The specificity here can be indicated only by negotiating with external project roles for the enterprise itself, i.e., with investors and regulatory authorities (registration chamber, bank).\n\n**In our course, the term \"manager\" is primarily used as an engineer of the organization (most often an enterprise, but it can also be an association, holding, or even a swimming club). \"Manager\" in our course is not a position of a supervisor/director, but a professional role, which is also broken down into numerous subroles!** There is a separate course: \"Systems Management,\" where this is discussed in detail, with the primary methods of management as organizational engineering provided, and the typical subroles of management, \"manager roles,\" are identified.",
    "b43ca6859898764e52c967dd001f9187": "---\ntitle: List of description methods from CPS PWG Cyber-Physical Systems (CPS) Framework\n---\n\nPoint of interest/important characteristic we need it so that we can later\nsay how to describe it --- **point of interest**\n**is reflected/framed** **by a description method/viewpoint.** For example,\nthe description method for cost::characteristic may be rules for estimating\nin rubles, or it may be rules for specifying an arbitrarily determined price,\nbut in dollars or \"conditional units.\" This description method will need to be\nused so that whatever is described using it (price) can then be discussed by\ndifferent roles (seller and buyer). Thus, **the discussion about the cost\ndescription method** (how to model the cost, how best to describe it, what method\nto use to reflect knowledge about cost as a system characteristic) will differ\nfrom **the discussion about the value of cost**, that is, \"how to lower the cost\"\nand \"how to raise the cost,\" although both discussions are significantly related\n(the choice of description method usually influences the negotiation position of one\nof the parties: different description methods are convenient for promoting different\npreferences).\n\nAnd when we have just **divided one complex discussion about** **an important\ncharacteristic** **into two simpler ones (about the description method and\nbargaining preferences)**, the task becomes slightly easier --- this is the goal\nof systems thinking. **In the range of** **concepts \"method of work,\"**\n**\"role,\" \"point of interest,\" \"preference\" we need to add one more concept:\n\"method** **of description\" (viewpoint).**\n\nSeparating in thought the methods, their roles, the objects of role interest,\npreferences in the values of system characteristics, the method of describing\nthe point of interest, and documenting the state of all these entities ---\nsimplifies keeping attention on achieving agreements between roles in the\nproject, facilitates the collective execution of projects for system creation.\n\nWe cannot, after making a list of points of interest/concerns and preparing\ndescriptions/views based on some agreed description methods/viewpoints, forget\nwhose these points of interest are: the interests/preferences of different roles\nfor the found common points of interest/characteristics can significantly differ,\nso the prepared system descriptions are merely materials for discussions.\n\n**Systems thinking is collective ---** **it implies continuous alignment of\npreferences** **for a wide variety of characteristics, important to the\nmost different** **project** **roles. Systems thinking is intended to\nstructure these discussions** **and requires distinguishing within them\nactor, role, point of interest, interest/preference (which direction to move**\n**the characteristic, which state to prefer), method of description,\ndescription, value of characteristic as the outcome of bargaining preferences.**\n\nIn the public document (the public document differs from the standard only\nby the absence of a compliance check procedure) CPS PWG Cyber-Physical Systems (CPS) Framework Release\n1.0^[<https://pages.nist.gov/cpspwg/>] there is a more complete table\nof points of interest for cyber-physical systems, i.e., systems that\ninclude sensors, effectors, and a Turing-complete computer controlling them, than\nin ISO 42010. In this public document (released in May 2016) due to the large length\nof the characteristic checklist, they are grouped into aspects:\nfunctional, business, human, trustworthiness, timing, data,\nboundaries, composition, lifecycle.\n\nAspects/aspects/area of concerns/”areas of interest” reflect some\nsubstantially grouped points of interest. The long CPS Framework table\nin the document looks like this (we give its beginning and end):\n\n\n![](03-list-of-description-methods-from-cps-pwg-cyber-physical-systems-cps-framework-26.png)\n\n\nHow to use the table? This CPS Framework table works as a checklist: have\nyou discussed all aspects/”areas of interest” of systems (target and further\ncreation systems) for your project, have you found all points of interest in them?\n\nISO 42010:2022 says that aspects are a reflection of \"best practices\"\n(sometimes good practices, the best or just good known methods as of today)\nin what specialists in their subject areas should be interested in, as it is\neasier to agree on them and remember them during the project as somewhat\nless detailed points of interest --- and then delve into individual points of interest\nbased on the specifics of the particular project. Remember that\n\"objectivity is well-organized subjectivity,\" so aspects simply reflect\nexperts' opinions on what is important when creating and developing some systems,\nand \"best practice\" is the \"best method of work for today.\" The list of aspects in CPS\nFramework was the “best” (although this could be debated) as of May 2016. Since then,\nfor example, the term “lifecycle” has often been replaced by “system creation and\ndevelopment,” as the one-time development from \"birth to death\" has been replaced by the creation\nof an MVP, or minimal viable product, and subsequent continuous development without explicit\nconsideration of the end of this development.\n\nAfter you have identified points of interest, you need to select for each\npoint of interest its description method (a reference to some standard or\nself-created and documented method of description). Next, you need to determine: where::software\nvarious project roles can find the current project’s documented current description of the state\nof affairs for the selected point of interest.\n\nSay, for the functional aspect (functional aspect) the target system's\nfunctions (functionality) are important. This you are unlikely to forget to\nfigure out. In the systems engineering course, it will be indicated that\nsuch a description (view) is a concept of use. But you must go further: what\nwill be the functional description method? Say, for small projects\nyou have chosen JTBD or customer journey (if you don’t know, then google it\nor ask an AI agent! If you are professionally involved in creating concepts of use, \ni.e., describing the functionality of systems, you should know this without googling\nor asking an AI assistant, you should have a professional scope), for larger projects \nuse case 2.0 (same: google if you don’t know! Although we have already mentioned use cases\nin our systems thinking course and will mention in the systems engineering course). Now you need \nto document the chosen description method and indicate the place (modeler--- and the address where \nto find in it) where the latest versions of the functionality descriptions will be kept.\nAlong the way, you will have to answer questions like “what if two developer teams are working \non different use cases and creating independent modules to support them--- should this be \nin one place or two?”.\n\nAnd these questions are asked for all other aspects (which are areas of interest) and all\ntheir key characteristics (which are points of interest). For example, for the area of interest \nof system creation and development (replacing the term \"lifecycle\" in the CPS Framework), we chose \nthe point of interest \"operability.\" If you are an engineering professional, you know what to be \ninterested in there. If you are not a professional, you will \"reinvent the wheel.\" But it is better \nto reinvent the wheel than to forget! Warning: this is a very tricky question! For example, you will \nhave to somehow include in the considerations the digital twin --- this is precisely for improving \noperability, right? Now you need to choose a description method\n(\"domain-specific language\"/DSL/“modeling approach”/framework/ontology--- either take it from the \nliterature or create it yourself for the project's needs). Determine the software (not yours, but \nthose agents who will change these descriptions for some purpose and view these descriptions for \nsome purpose) as the place where the documented description will be stored. Then document this \ndescription, trying to take into account all preferences regarding operability --- and project \nroles (internal and external) will have very different preferences. And ensure that the description \nis somehow realized, reflected in the physically embodied system (it means not just documented, but\nreflect what you described: realizing a described tractor means not documenting the description \nof the tractor, but making a functional iron tractor). You should not create detached-from-reality \ndescriptions, unless you are a sci-fi writer.",
    "07d044a00af1b16aea64b18dc81a52af": "---\ntitle: Physical Thinking in Systems Thinking\n---\n\nIn systems thinking, most often (alas, this is true) \"Aristotelian physics\" is used: when a finger presses on a table, but the table does not press on the finger because the finger is alive and active, while the table is passive! In systems thinking, the system as a role-playing object \"plays its role\"::behavior, i.e., it functions, performs its function---but is considered active and changing the world around it without significant changes to its states (at least---without destruction during work, being steady), while systems in the environment are considered primarily passive, undergoing changes and significantly altering their states, sometimes to the point of destruction.\n\nChanges in the states of the system while performing its function are considered later, separately. This approach is also used in modern physics. For example, in constructor theory, a creator is defined as one who changes its environment an unlimited number of times without its own degradation (and they cite an example of a catalyst molecule, which produces catalysis but remains unchanged after each act, and a self-replicating robot, which remains unchanged after each replication act)^[https://www.constructortheory.org/].\n\nThe stability of some systems in a chaotic environment that interacts with them is a subject of close study by physicists. Atoms are very stable, molecules are also stable, as well as life forms. The boundaries of systems are often drawn along the lines of stable existence, non-destruction during use. In physics, this is a non-equilibrium steady state, NESS (non-equilibrium steady state), which is actively studied in the 21st century: in contrast to equilibrium, which requires no energy and work to sustain, energy and work are involved to sustain a non-equilibrium state, which generally maintains this state. Imagine a tightrope walker maintaining balance in the wind---this is it. On one side, many small state changes in the target system, and on the other---no catastrophe, sharp state changes, or system destruction. Stability to external impacts consists in constant changes, adjustments, paradoxically. Although NESS was initially studied on simple systems in physics, this thesis was picked up by chemists^[https://pubs.acs.org/doi/10.1021/jp061858z], and later by biologists^[https://physicallensonthecell.org/chemical-physics/non-equilibrium-steady-states], but it concerns the general description of some systems that \"balance\" around some state, remaining \"almost the same\" under fairly sharp environmental changes.\n\nThe idea of a creator/constructor is that it is a universal transformer of matter/things much like a computer is a universal calculator if it is equivalent to a universal Turing machine^[https://www.youtube.com/watch?v=40CB12cj_aM], only these transformations of the environment according to some algorithm/theory for a universal creator are limited not only by calculations but also by changes in the physical world---the universality is that potentially any transformations (transformations) permitted by physical laws are possible. And the universal creator after each transformation is ready for the next---it does not lose its stability, actively \"balances\" in interaction with the environment, \"microfluctuates\" compared to macrofluctuations, where identity is lost (e.g., destruction occurs). The \"universal creator\" can, of course, create new tools as a method step, and even a copy of itself (\"army of clones\").\n\nA person (or a sufficiently advanced robot) in this physical theory is just such an example of a universal creator: it can acquire knowledge/theories/disciplines/algorithms from its interactions with the environment (conduct research), create tools from the surrounding matter and thereby enhance its ability to transform the world, it can self-replicates (have children).\n\nCreators from the systems approach are most often universal creators, but all other systems (which maintain stability, leading to changes around them), and a simple machine (processing multiple parts according to an algorithm, while remaining a machine, stable in maintaining its shape in space-time, retaining the boundary with the environment, not mixing with it) or computer (producing multiple calculations as physical processes, retaining its shape, not mixing with the environment), are creators. But both a person and an AI agent in a robot (the exit into transformation of the surrounding world is essential, it is impossible to limit oneself only to calculations/thinking, i.e., it is impossible to limit oneself only to work with information) and even a large organization performing various projects for many years---all these are creators, only in the case of people, AI agents, and organizations these are universal creators: potentially they can carry out any (even unknown at the moment) transformations of the physical world if they are not prohibited by physical laws.\n\nThe main question thus becomes whether some action, the creation of some system, or the transition of a system into some state is in principle/theoretically possible by the principles of physics or impossible. If possible, then potentially we can make such a transformation if only we have the right knowledge---i.e., we can develop a method. What about the resources for such a transformation? If we have the knowledge, we can obtain the resources!\n\nSo in systems thinking, words about the \"interaction\" of parts of a system are used, but in fact, each time it is not \"mutual\" but simply \"action\": a pair of some active system-creator and more or less passive environment. Why is this so?\n\nWe remember that systems thinking is about managing the attention of universal creators who realize universal calculations and universal transformations (people, AI agents, organized/collective intelligences). In the thinking of these agents, saying that \"everything is connected with everything else\" and \"everything interacts with everything else\" and \"everything affects and mutually influences everything\" is not very correct^[See the concept of small-world networks and examples including non-small-world networks, https://en.wikipedia.org/wiki/Small-world_network]. It is more useful to attract attention to a central object, anchor one camera of attention on it, and then consider everything else with other cameras in relation to this anchored object.\n\nIf there are many agents, then it is possible to divide overall thinking among several agents (or in other words---federate the thinking of several agents into a single holistic reasoning) if the agents communicate with each other, exchanging the results of measurements and reflections^[https://www.sciencedirect.com/science/article/pii/S0149763423004694]. Systems thinking is exactly for such work, helping to federate (i.e., unite disparate objects) the information of different agent-creators.\n\nModeling is primarily about compressing information; a model does not contain all the information about an object but only the most important about what is being modeled for the object. For example, mechanical models contain information about the motion of physical bodies but not the color of these bodies. Operational management models contain information about work speed but not about the workers' clothes or the language of communication. Systems modeling, based on functional (time of operation of the system considered as a role, by the changes in the states of its environment)---is essentially a move towards information compression, highlighting the important. Of course, for different agents involved in the project to create some target system, the important appears different. Someone is concerned with taste, someone with color, someone (we write \"someone\" because agents are mostly living today, but this is not necessary), and someone with cost.\n\nThe target system as a role/functional object that plays a role/performs a function (or for agents---works by the method) in its environment---this is the answer to the requirement for a center of attention in the course of systems reasoning. If it becomes clear what the system will do, it also becomes clear what it should be created from. If it is clear what to create from, it is also clear how to create this system, \"what needs to be done\". If it is understandable what to do, it becomes clear who can do it and what will be needed for this. In the previous phrase, \"he\" may refer to the **extended** **enterprise** as the creator, i.e., a union of various enterprises by some contracts to carry out a large complex project. And since enterprises are made from universal creator-people and AI agents (primarily robots, because we need an exit into changes to the physical world, 4E cognition), the same enterprises can produce/create and develop very different kinds of target systems depending on the accessibility of knowledge/algorithm/discipline of the method of how to do it (including knowledge of how to obtain the necessary resource tools and estimate the required time, and also to survive and not be destroyed during work).\n\nMethods and systems working by them (as role objects) are very often considered exactly this way: system-creator::\"role object\" acts on the materials of the system being created (in the end, these materials will become the target system, and the target system itself will start to work), and the system being created is just another role object. Rebound action (of the target system during its creation on its creators) is neglected, but if it is really important, they conduct another consideration specifically to account for this action.\n\nIf a tool cuts a part, it blunts. This is neglected, and the changes to the part are studied, it is essential! The role action of the tool alters the shape of the part (converting the state of the metal part from \"workpiece in the machine\" to \"part in the machine\")! And then a separate consideration talks about what happens to the tool. But then they also call the part \"a blunting medium\", not a part. Another role of the same physical object---a piece of metal!\n\nIn some way, this is **panpsychism**---a convenient way to think of inanimate objects as if they were alive. In panpsychism, which, besides **animism** as a belief in spirits dwelling in all objects, has other variations, for example, **minimal physicalism**^[https://academic.oup.com/nc/article/2021/2/niab013/6334115], which does not propose the existence of living beings other than following the most basic laws of physics (e.g., understanding that living beings are creators/constructors who can only perform those transformations of the world around that are allowed by physical laws and nothing supernatural). We will adhere to panpsychism precisely in the version of minimal physicalism. And further conversation will be in terms of the physics of creators, somewhat similar to Aristotelian physics, where participants of the action are divided into \"active\" and \"passive\" objects, like \"a hammer hits a nail.\" This way of thinking has its limitations, but it is at least necessary to recognize and understand what is being discussed in such cases, as well as to understand such descriptions.\n\nStrangely, panpsychism as a way of thinking about everything as somewhat alive (but without animism! No \"spirits of things\", no \"feelings of the stool one sits on\"!) turns out to be quite modern. Thus, one molecule can very well be a witness/observer of another molecule, i.e., \"measure\" it, interact with it, and thus solve the \"observer\" problem in physics.\n\nOne molecule is clearly not yet a living \"observer,\" but it is quite \"alive\" in the sense of panpsychism in the version of minimal physicalism. In panpsychism as minimal physicalism, \"life\" itself is defined by physical principles and laws, as the ability of some creators to self-replicate. The approach to the universality of the creator, i.e., the potential ability to perform any transformations not only of information, as in the case of a universal Turing machine but also of matter, is associated with intelligence and consciousness.\n\nSince physics deals with the concept of \"observer,\" let's look at it as a system-observer, i.e., a system in the role of an observer, or \"observer\"::system::role. If the \"observer\" is a role, there must be a method/culture of observation, and it should start from the method to understand what (or who) can perform the work by this method, not the other way around, starting from the \"observer\" and coming to a misunderstanding, what method will conduct this observation. The method/way/style of observation for the role of the observer can vary greatly, and in physics, it is currently reduced to measurement as obtaining information about the environment. So, if we consider the interaction of a molecule with the environment as obtaining information by it, this is the \"molecule-observer.\" That's all, no \"human-observer\" is needed, not even an \"observing robot.\" It is enough to consider the interaction as facts of measurement, i.e., obtaining information. The whole physics, which deals with interactions of objects of the surrounding world, thereby becomes informational physics, because everything becomes expressible in terms of information.\n\nQuantum physicists love such a method/way/culture of thinking [from \"Minimal physicalism as a scale-free substrate for cognition and consciousness\", 2021, by Chris Fields, James F. Glazebrook, and Michael Levin https://chrisfieldsresearch.com/min-phys-NC-2021.pdf and more works about \"no, it's not solipsism! just physicists didn't understand what they've been doing for many years!\" from there the phrase \"information can only be obtained by intervention, i.e., by actively posing a question (see Mermin 2018; Mueller 2020) for recent, somewhat philosophical discussions\": \"Making better sense of quantum mechanics\", 2018, by N. David Mermin, https://arxiv.org/abs/1809.01639 (it was Mermin who said about the interpretation of quantum mechanics as \"Shut up and calculate!\", not Feynman first said, https://www.lassp.cornell.edu/mermin/), and also \"Law without law: from observer states to physics via algorithmic information theory\", 2017, by Markus P. Mueller, https://arxiv.org/abs/1712.01826 (here are the author's publications---http://www.mpmueller.net/research.html).], and astrophysicists who work at a completely different scale also adhere to such reasoning (and Earth is somewhat \"alive\" in a sense^[https://www.cambridge.org/core/journals/international-journal-of-astrobiology/article/intelligence-as-a-planetary-scale-process/5077C784D7FAC55F96072F7A7772C5E5]). And it is necessary to say here that all phenomena \"only of the living, but not of the undead\" like \"consciousness\" also turn out in such a version of panpsychism-minimal physicalism reinterpreted anew [Here we can highlight a consciousness theory supporting such an approach: IIT, integrated information theory, http://integratedinformationtheory.org/] and one can speak to some extent about the consciousness of a bacterium (although very small), and about the consciousness of an ant colony^[https://philpapers.org/archive/FRITAC-4.pdf], and even about the consciousness of Earth, as in the work of the mentioned astrophysicists---and, without any esotericism, exclusively within the framework of physics laws!\n\nOne example of such an approach of indistinction between the living and non-living (when \"function\" and \"role\" are employed for agents in a broad sense, not only in the narrow sense of \"intellectual conscious agents\") is the engineering method of developing a **Use Case** \"usage scenarios\"^[https://en.wikipedia.org/wiki/Use_case]. In English it's use case, but in Swedish, the language in which Ivar Jacobson proposed the method of use case scenarios in 1986, instead of the word case/\"legal case\"/\"case history\"/\"practice variant\" the word \"scenario\" was used.\n\n**Use Case** defines the interaction between active external **actors** trying to achieve their goals and the target system. Actors in use cases (in other methods, the term actor/actuator/actor might mean something completely different! Here we discuss only the method of creating a **Use case** system through use case scenarios) are functional/role objects, which are not necessarily realized by humans: they can be implemented/embodied in the physical world by people, a company or just an organizational unit, some equipment, a computer program including universal (AI). When analyzing the interaction of external actors and the system as use cases, it is easy to \"identify requirements,\" and the approach gained broad recognition in requirement engineering. Somewhere from 2015-2017, requirements ceased to be developed (this will be detailed in the \"Systems Engineering\" course), but for modeling the functioning/usage/operationof the system in its external world (environment), one continues to engage in the method of describing this functioning through use case scenarios.\n\nHere is a typical use case diagram^[http://www.uml-diagrams.org/examples/online-shopping-use-case-diagram-example.html] (the example emphasizes that not all actors in these diagrams are people; see the example description in the article via the provided link):\n\n\n![](05-physical-thinking-in-systems-thinking-19.png)\n\n\nUse case scenarios proved very successful for describing system functioning/processes/sequences\\_actions/scenarios/behavior and its parts. This way of description became ubiquitous for engineers, leading to the creation of functional/role descriptions. Note that the change in system states in the use concept is hard to express, but it is clear \"what affects what\" during functioning, who are the participants of interactions, and what surrounds the target system.",
    "868e27d3640316d099659fa0e2dfd912": "---\ntitle: 'The Ontology of Inventiveness: Constructs as Affordances for Roles'\n---\n\nThe system is physical: it has a purpose/function in changing the state of physical objects in the environment (also systems). No one needs the system to change its internal states; it's necessary for these changes in the internal states of the system to somehow influence the state of external systems. No one needs the gears of a mechanical clock to turn evenly by themselves, but the clock is required to \"show time,\" which is the usefulness of the clock, its function, the role of the construct \"clock\" --- \"time indicator.\" Whether this is achieved by gears or electronics, or even using the Sun as very crude (accurate to an hour) and unreliable (cloudiness possible) clocks in the \"sundial\" construct --- this is important, but only after we have figured out what is needed at the moment of operation. And the needed function is \"showing time\" with such accuracy and reliability. If these are clocks in a rocket, then mechanical clocks and sundials as material/construct objects are unsuitable, but electronic clocks may be appropriate. But until we look at the \"time indicator in the rocket environment at the moment of launch,\" we can't say anything about what constructs might be suitable for us, and that was discussed in the previous section.\n\nThe system always performs some function during its use, that is, it changes the state of the environment. The system::role and function of the system::role are always determined at the moment of its operation. However, the system::construct --- this is the consideration at the moment of creation when we estimate what material objects will be processed in what ways to achieve a successful system::role (roughly speaking, the material/construct of gears and springs, electronics, or a stick and some plane with a scale and placement in an open area will be clocks::construct/materials). The choice we make from a long row of possible constructs --- this is an affordance, \"the suitable one.\"\n\nThe system::role may have a name different from the name of the system::construct, as the construct objects are considered outside the environment during use, but during creation. Most often the constructs/materials from which the system is created are named after the primary function of these constructs when similar types of systems were considered as roles. For example, if you are interested in the \"paperweight\"::role with the function \"holding papers from flying in the wind by its weight,\" then the constructs/\"construct objects\"/\"material objects\"/materials stone, microscope, hammer --- all can be called affordances (that is if they are chosen to hold papers, to perform the function) and \"paperweight.\" This does not make them less of a stone, microscope, hammer, but their role behavior/function will be --- holding papers from flying.\n\n**The function of the system::role** **is conveyed by gerunds (verbal nouns): “holding” (from the verb “to hold”), in English, this is the -ing** **form of verbs.** In the case of the creator system, the term will be from the synonymous series function/practice/culture/method of work, but this does not change the naming rules. Of course, not all schools of thought adhere to this rule (they may use the verb in the infinitive), but still today such naming of functions is the most common. And the naming always refers to the time of engagement/operation/exploitation/use/functioning of the system when it changes the state of systems in its environment.\n\nAnd this is always the time of exploitation (the time of practicing the creation system is the time of creating the target system, but the time of exploitation/use/functioning/practicing the creation system).\n\nWithout a typewriter in your head, it is hard to understand. For example, “the function of an engineer is the design, planning, and implementation of a system.” The phrase speaks of the function of some object --- the engineer. If it is about function, it refers to the engineer::role, the engineer not at the moment of his creation (training the agent, appointing the agent to the role of engineer), but at the moment of the engineer system functioning, when the engineer changes the state of the environment, that is, transfers some target system from the states “not designed,” “not planned,” “not implemented” to the states “designed,” “planned,” “implemented.”\n\nWho will be this “engineer”? Some “suitable construct object”/affordance --- this may turn out to be Pyotr Fyodorovich, but it may also be LLC \"Atomstroyautomatautomatica.\" How so? This way: the phrase speaks about function, directly indicating that the functional/role object “engineer” is considered in its environment. The phrase says nothing about the construct/material object, that is, it does not indicate the \"suitable thing\"/affordance that will then \"perform the function\"/\"play the role.\" The engineer thus can be an AI agent, an undead, or an entire enterprise.\n\nIf you are told that the function of a nail-driving device is “driving a nail,” that is, the nail in the environment of this device transitions from the state “not driven” to the state “driven,” then this is an implicit indication of the type: “nail-driving device”::role, and it is about the time of use of this device. The target system, changing its state as a result of performing the function, is the nail.\n\nBut a hammer, microscope, or stone as an affordance for a \"nail-driving device\" as a system creating a \"driven nail\" will play the role of this device, or a crafty robot on quantum crystals, it doesn't matter --- this is important for the moment of creating the nail-driving device. It is necessary to separate the discussion of functionality (what needs to be done, purpose, function, and role) and constructiveness (what to do it from) to be able to change constructs without changing the function. If you need \"to move a ton of cargo from point A to point B,\" you separately discuss what kind of cargo it is, what are the start and finish points, how much of this cargo there is --- and only then you begin to choose the method/style/way of movement, and only after that --- who can implement this method. This is the basis of **inventiveness** (selecting the minimal set of affordances to perform the function). **System thinking thus explicitly** **provides** **the ontology of** **inventiveness.**\n\n**If you don't know what affordances your system has ---** **don't attempt to make it!** Charles Babbage and his assistant Ada Lovelace described a computer: a calculating machine with the function of converting input data for some mathematical tasks into output data. The function is computing by a changeable algorithm. But the affordance they took was mechanical constructs. Later, they tried to take pneumatic, electric (relay) constructs too, and it also didn't work out: terribly low reliability, terribly low speed of operation.\n\nWhat was needed? To take as a construct (i.e., an affordance chosen from all other options) radio tubes-triodes, which were invented by the American Lee De Forest only half a century after the death of Charles Babbage and Ada Lovelace, and the invention of using triodes for the computer happened another half-century later. The functional description of the computer (what happens during its operation to achieve the desired result) was made, but there were problems with finding affordances (inventiveness!) for a whole century, that is, two times for half a century: the invention of the amplifying triode --- half a century from the start of the Babbage and Lovelace universal programmable computer project, then the invention of the triode and setting up mass production of cheap amplifying triodes --- half a century, and only then using the triode-construct in the key mode \"logical switch\" as part of the computer, thereby getting the first truly universal and useful computer ENIAC. And then it took several more decades to wait to replace the tube triodes with transistors, including transistors in integrated circuits. Only after that did computers become a mass product.\n\nAffordances as constructs/materials usually \"come from the side,\" that is, they are the material products of other industries. The klystron as a radio tube for microwaves came into kitchens not from the industry that produced primus stoves, kerogases, and gas burners. If you have no idea what may be an affordance for your system description (say, the “magic tablecloth” system, whose function is to feed ten people for five rubles), then you risk ending up in a situation like the inventors of the computer or the inventors of heavier-than-air flying machines, which could not be invented until there were light internal combustion engines: the Wright brothers were not accidentally owners of a workshop for making and repairing motorcycles. More details about all these stories can be found in the materials on strategy in the \"System Management\" course. But to understand this strategizing, you need to have an idea of the system::role and its function at the moment of exploitation, embodying this system::role in the system::construct, which will be the affordance during the creation of the system::role. And understand that **selecting an affordance ---** **this is inventiveness.**",
    "890d0cb2e47fcf72ce1667876bd345c7": "---\ntitle: Typewriter\n---\n\nSystemic thinking significantly engages your skill across a range of fundamental disciplines of the intellectual stack thinking methods (physics, concept theory, semantics, logic, ontology, ethics, etc.). By the time you study the course on systemic thinking, the **typewriter** should work well in your head and body. Yes, in the body too, because **ontological jitter** **as a type error signal** is noticed as a sensation in the body, which is one of the interfaces to the computations happening in the brain. This typewriter is built up in students during the course \"Rational Work.\" The teaching of skill as the engineering \"fabrication of skill in the student\" is studied in more detail in the course \"Personality Engineering.\"\n\nIf at the entrance to this course the typewriter works for 20% of students, then at the exit --- almost for everyone. The course teaches you to highlight objects in the text or the world by the specified type of object with your attention and then keep these objects in your attention. This retention by attention is not \"mental\" because we do not trust the reliability of the biological brain, even if this brain is trained on “good attention,” but technically --- attention is retained by recording, preferably on a computer.\n\nWhat's next? As one of the graduates of one of the previous versions of this course said to his classmates, where the \"Rational Work\" course was not yet mandatory prerequisites, \"I don’t understand at all what you read out from the systemic thinking course material if you haven’t taken the rational work course!\"\n\nThe typewriter is responsible for assigning and controlling types in some descriptions, documented in texts both in natural language with a low level of formality, and in models of objects and relationships, documented in texts (or even diagrams) in a highly formal language. The main thing is that the student (the future master) should not only have a rational understanding of the fact that there is always some type for an object but that their typewriter works with sufficient fluency in work projects.\n\nWhat is behind the typewriter? The brain supports the work with different concept theories^[<https://iep.utm.edu/concepts/>]. One of the simplest concept theories explaining the results of the brain's work in \"fast thinking S1 mode according to Kahneman\" is the prototype theory when we imagine some prototype object for each object and then act by analogy. In this theory of concepts, all thinking is continuous metaphor processing, looking for similarities. Another theory of concepts is the much more complex theory theory^[<https://iep.utm.edu/th-th-co/>], in which typed concepts are linked by relationships (which can also be expressed by concepts). It corresponds to slow S2 thinking, formal thinking, and logical constructions. And texts like \"the sepulka is an animal. Does the sepulka have a backbone?\" are parsed by just such a thinking mechanism. If you know that animals have backbones, then the indication for the sepulka type “animal” is quite sufficient to figure out that — yes, the sepulka has a backbone. If you haven’t mentally classified the sepulka or just didn’t hold this classification of the sepulka in your attention until the second sentence in this short text, you’ll be puzzled about how to answer about the presence or absence of a backbone in an absolutely unknown object?!\n\nIf you want to think systemically, then you must have a typewriter embedded in the brain and body. The slow S2 thinking mode is present in systematic thinking almost always: we think systemically with substantial involvement of the theoretical theory (theory theory) of concepts. If you don’t remember theory theory, you need to return to the \"Rational Work\" course.\n\nSay, you were informed: “A leader is a role. What role does the leader play?” If you don’t have a typewriter in your head, you’ll start making up some everyday metaphorical things about the leader, relying on fast S1 thinking and the prototype theory of concepts with metaphors and images: that he leads people, that a leader should be an example for the actions of others, etc. (check yourself, answer the question and write down the answer).\n\nIf you have a typewriter in your head, you should be puzzled: “A leader is a role.” At this moment, the leader is marked by the type “role.” The next sentence is — “what role does the role play?” Because if the leader is marked in your mind as a role, you retain this even to the second sentence and check for type compliance. The question “what role does the role play?” should stress you out because its meaningfulness is low. **A typewriter embedded in the head exposes all nonsense in the text; it is needed for criticism during creativity.**\n\nIf they told you that the engineer is Vasya’s role, then it’s not good to ask the engineer how he slept today. The engineer is a role, just like \"dad\" in playing \"house\" or Prince Hamlet in a theatrical play. The sleep was good for the agent (human or even AI that needs “sleep” for further training) playing the engineer role in the work project as a role-playing game, or “dad,” or Prince Hamlet. It’s the actor/agent who should be asked about “good sleep.” Such a question to the engineer::role is a typewriter failure; the brain should automatically forbid this, raise the alarm! In principle, if someone considers that they are not playing the role of a king, engineer, or tree in a fairy tale, but they themselves are the king, engineer, or tree, they have gone mad. People and AI must be clearly separated from their roles.\n\nHow do you recognize when the term \"engineer\" refers to a role, a position, or the actor-in-role::agent? From the context, but for this, you need to be collected/attentive and hold in mind that “an engineer” is still a role, not the agent playing this role. Vasya sleeps, not the engineer. Vasya \"plays the role\" of an engineer::role (that is, performs::works “work method”/\"type of engineering/activity,\" **the roles of agents “perform methods”/ “work by methods”::behavior**) just when not sleeping! Without dealing with types in such situations, one can get confused.\n\nOn average, the typewriter reliably \"automatically\" works in the head without special training (which takes place in the \"Rational Work\" course) in about 20% of those with higher technical education (that’s only two out of ten people), if not fewer. Why so few? After all, all people use the brain's S2 mode, slow logical thinking? This is unknown. What needed to be done to make it work reliably? There are different hypotheses; one of them is reading a large amount of non-fiction and dealing with formal models that require holding long chains of reasoning with the use of types in the head. This guess is indirectly confirmed by experiments with large language models, which are initially trained on program code (these are formal languages with strict type checking) so that their ability for logical reasoning grows exponentially^[<https://arxiv.org/abs/2401.00812>].\n\nIf you are not among those 20% of the population whose typewriter \"just is, don’t know where from,\" then it will be extremely difficult for you to engage in systemic thinking without the \"Rational Work\" course: you simply will not understand the material. **Systemic thinking is all based on theory theory, and logic there shines through seemingly absolutely artistic and humanitarian texts. But no, these texts are stitched with types: systemic thinking forces you to operate with types much more frequently than in ordinary life. This work with types gives power to systemic thinking.** **If you by default use prototype theory or sample theory as your thinking tool instead of theoretical theory/theory theory, then you will not cope with our course and will not be able to master systemic thinking.**\n\nSystemic thinking gives a meta-meta-model as a set of types. Systemic thinking types (\"system\" with its different subtypes, \"environment,\" etc.) point to the most important objects of attention in a work project, help model, and compose systemic descriptions of the world. And remember, systemic descriptions need to be documented somehow; they are written, not \"in the head.\"\n\nIn our course, explicit type assignment happens using the **::** notation, for example, airplane::system. By now, you have already encountered it many times in our texts.\n\nThus, our prerequisite for the systemic thinking course is a well and fluently working \"typewriter.\" Without it, you won’t have systemic thinking, and there won’t be communication in complex projects either^[See Pripion Medvedeva's talk at the 6th SSPM conference, \"Typewriter: Why It Is Needed,\" <https://www.youtube.com/watch?v=2T7P64GARzY&t=28850s> (from 8:00:50).].",
    "e6a9b013cb9db38c9265dd4935a4f43c": "---\ntitle: Role objects/roles and \"role playing\"/function/purpose in the environment\n---\n\nThe same system can have numerous descriptions:\n\n-   Functional/role-based: a kettle is needed to boil water. It heats the water poured into it to boiling, then whistles loudly to signal that the water has boiled.\n-   Constructive: the kettle consists of a body, heating element, boiling indicator (sensor, controller, speaker), and a cord with a plug for connecting to the power grid.\n-   Placement: the kettle is on the window in the kitchen, plugged into the socket to the left of the window.\n-   Cost-based: the kettle costs 5,000 rubles upfront, and then you will also pay for electricity depending on your rate, 1.2 kW per hour of operation.\n-   ... and there could be countless more descriptions. An artistic description to evaluate how it fits into the interior, a description of potential hazards (burns, electric shocks, etc.) from a safety perspective, instructions on how to perform maintenance (remove scale) and repairs, etc.\n\nRemember, in 4D extensionism, if you describe some objects and these descriptions refer to the same place in space-time, then it's the same object. If you describe a \"warm item on the window in the kitchen,\" your friend describes an \"orange item on the window in the kitchen,\" and I describe a \"kettle on the window in the kitchen,\" and you understand that nothing else is on the window in the kitchen except this kettle, then we are talking about the same warm orange kettle on the window in the kitchen.\n\nAll these descriptions seemingly have equal status, but the first four are commonly accepted as the most important, with the first among them being the first among equals. Systems thinking considers systems primarily as having a **purpose in their environment** **at the moment of use/operation/functioning**, meaning they provide behavior that is important/interesting to someone in their surrounding environment in their finished state (not at the moment of creation). This description is usually called **functional** (what function the system performs in its environment during its operation, emphasis on function::behavior) or **role-based** (what role the system plays in the environment, emphasis on the role object::thing, that is, an object that behaves in some way). What is important to someone varies — for different agents from different projects, something may be important for their own functioning, and something else may not. One agent may need the kettle to boil water quickly, while another agent might care about the kettle being orange; the latter agent is concerned with the interior design rather than tea-making. Systems thinking should enable agreement on these important issues so the created system is successful. Here, \"important behavior\" can be \"importantly needed\" or \"importantly harmful\" behavior, the main point being not the positivity or negativity of the behavior itself but its importance to the agents concerned by the system or affecting the system. These agents are system creators, but there are also agents concerned with systems in the environment around the created system and systems involved in system creation projects existing in the surrounding metasystem. All these interests need to be satisfied. Therefore, there could be multiple functional descriptions (the same system may play different roles in different metasystems identified by different agents in their projects related to the target system), and these will have to be reconciled too. And since we mentioned both creator agents and user agents and systems in the environment, it is usually necessary to functionally describe all of them. Systems thinking requires this description first.\n\nFirst, you need to understand what the system does during operation, what benefits or harms its behavior brings: what the system's role::thing is and what the function::behavior of this thing is (the behavior of the role during its operation). The role is the system itself in its physical form, as the role object is physical when its role is performed by a constructive/material object within the system. A constructive/material/materialized object is important in the time of creation by the creators; it represents the \"material\" of the role, the substance, and fields. However, the role/functional object is physical, though it is less often called the \"physical object.\" A physical object exists and is stable as long as the material exists over time in some form (NESS, insignificant fluctuations for maintaining stability do not affect it here), and this material is taken independently of its function. But the role/functional system is physical because it remains as long as its function::behavior is performed by some constructive objects. Thus, we consider the system at least twice (and then we find out that we need to minimally consider the system four times, but usually a much larger number of times):\n\n-   **As** **role:** functional/\"role object\"::\"physical object\" (physicality is ensured by embodiment with constructive/material objects) performing some function::behavior. The functional thing continues to exist as long as the role is maintained (the same function is performed), and the material can change. The kettle as a functional object exists as long as some construct heats water. If it doesn't heat — it's not a kettle.\n-   **As** **constructive:** constructive/\"material thing\"::\"physical object,\" which continuously exists as long as its physical **material** is preserved, while the role may change. A stone is either a paperweight::role or a nail driver::role, but it is just a stone, \"material,\" \"constructive.\"\n\nThese objects are related by the relationship of embodiment: a set of constructive objects embodies some functional system (role).\n\nDifferent versions of systems thinking treat the physicality of the functional thing/object a bit differently. For example, in ISO 15926, a functional object is considered one of the subtypes (specialization relationship, \"subset\") of a physical object.\n\n![](02-role-objects-roles-and-role-playing-function-purpose-in-the-environment-17.png)\n\nMoreover, in ISO 15926-2:2003, spatial location is also a physical object due to 3D extensionism. As a functional object is defined based on the stability of purpose/behavior, as a constructive/material object is based on the stability of material presence, so a spatial object is defined based on location stability. Another material object is separately distinguished which is important in engineering but difficult to define through the constancy of material, location, and purpose: a flow/stream, where the constancy of its path/flow_path is important.\n\n\"Functional physical object\" and \"material physical object\" are linked by the relation \"temporal whole part\":\n\n-   The word \"temporal\" here means that the functional physical object exists temporarily, only when its role is played by some physical object. For example, \"crane operator\" exists only at the moment when this professional/operational role is played by some person or even an AI agent, and \"driver\" only exists when this role is played by a stone or a microscope.\n-   The word \"whole\" means that at some moment, one constructive object entirely fulfills the role of a functional object (the crane operator entirely consists of the person playing his role, the driver entirely consists of a stone or microscope, and sometimes a hammer, but also entirely).\n\nIn other schools of thought, it is said that a functional object is not directly a \"physical object\" but is \"physical when embodied by a constructive physical object.\" Which is correct? Different engineering schools and schools of philosophical logic give different options.\n\nA number of engineering schools introduce the concept of affordance/\"suitability\" for a constructive object considered during its role-playing. So, \"Vasya, trained in crane operator courses\" is an \"affordance\" for playing the role of \"crane operator,\" and a \"microscope\" as a material object is an \"affordance\" for the role of \"instrument for examining small objects.\" However, in some situations, it is an \"affordance\" for the role of \"nail driver.\"\n\nPay attention to the nuances and abundance of terms for the same concepts in the proposed ontology, but the general idea remains the same: 4D extensionism will help sort it out. In any case, we cannot discuss systems until we understand:\n\n-   Function: what the system does (what its function is, what behavior we expect from it)\n-   Construct: what material performs the necessary behavior\n-   Placement: where this material performs the behavior\n-   Cost: how much it will cost to create and operate the system (total cost of ownership).\n-   ... and there could be many more different descriptions of the same system, each time refining the previous ones and requiring agreement: all of them should consistently describe the same place in space-time so that they describe the same system.\n\nSystems are the embodiments of the system, physical objects. Essentially, it is stated that all systems::\"physical objects that we have highlighted with our attention from their physical environment\" demonstrate some behavior, changing the state of the external environment in a targeted manner, usually referring to a non-equilibrium steady state (NESS, non-equilibrium steady state, small fluctuations in the state of the target system interacting with the external environment, the target system thus not being destroyed).\n\n**Systems** **represent roles in the environment, performed by constructive objects chosen from material affordance objects and playing the role of this system in the environment, occurring in some place. And it doesn’t matter what terms express this: different words can be used. For instance, the term \"function,\" denoting the behavior of the object considered as a role/functional object/thing at the moment of its use/operation, can be replaced in the case of a system-creator agent with strong (capable of planning its actions in a changing environment) intelligence with words**\n**method/activity/engineering/practice/culture/style/strategy, and there can also be nuances related to distinctions of specialization** **or classification** **(e.g., \"type of labor,\" \"type of engineering,\" \"subculture,\" \"sub-style,\" if they want to emphasize the narrow nature of the statement —** **and remember that prefixes \"sub-\" and \"super-,\" as well as \"meta-,\" can refer to different types of relations, always clarify).**\n\nIn conclusion, in the previous text of the subsection, we introduced the following important objects of attention (**ontology** **of functional consideration** **of the system**):\n\n- The system as a physical object\n- The system's environment\n- The time of use/operation/functioning of the system\n- The role (system in some role), functional/role object, which is either a physical object or simply \"physical\" at the moment of system operation — depending on the school of thought, we take the option where it is a physical object, as in ISO 15926-2\n- Constructive/material object of creation time, physical object\n- Affordance as a chosen suitable material object from the surrounding world (possibly complex, e.g., a nuclear power plant as suitable for electricity generation) performing the role.\n- Function/purpose/\"behavior of the system as a role\" – this is behavior to bring the system's environment to an expected state during the system's operation/use/functioning. This is a common term for all types of systems, but if the agent is \"smart\" (agent in a narrow sense of the word), then the term will be \"method\" (and another dozen others — activity/labor/style/culture/practice, etc.).\n- The state of the system (we’re talking about minor \"working\" state changes that do not lead to the system's destruction) and the state of the environment (including the expected state as a result of the system's function) at the time of use/operation/\"performing the function.\"\n\nOf course, no definitions can express these complex relationships; a lot of text and examples are needed.\n\nTo reiterate: different schools of engineering and system thinking have nuances in the use of all these terms, nuances in defining concepts. The use of types and grounding helps to understand.\n\nFunction is usually behavior with an emphasis on \"purpose as the expected result of behavior at the moment of use: what happened to the system's environment,\" but functioning is \"function work,\" with an emphasis on the time of work/use and the system itself producing changes in the environment. And you also need to monitor when discussing whether a system instance or a type of systems is being referred to. For example, \"the function of an airplane is to transport cargo and passengers by air\" — this statement is not about a specific airplane but about \"a number of boards with different serial numbers, from different manufacturers,\" given the general statement about all instances of the type \"airplane\" (boards with serial numbers), not about the type itself as an abstract object.\n\nYou can get bogged down in this ontological work, but you won't be able to build your texts in natural language to be ontologically precise: people will stop understanding you, and the text will be like a text in a programming language. However, in communication with agents based on language models (people and AI agents), you need to use natural language understanding mechanisms, including S1 with its prototype theory of concepts, and S2 with strict logic, but not overdo it: communication in programming and modeling languages is possible but very difficult. You should fully formalize only what is very important: it’s very labor-intensive! To some extent, this explains the limited spread of systems thinking: it clearly requires working with types and formalizing much more than usual, hence being labor-intensive even with training. But systems thinking provides excellent results precisely due to the move towards the formalization of the ontology of the situation, the formalization of system descriptions.\n\nTherefore, in our texts, we will strive to observe strict typing wherever possible but will not fully switch to the formal mathematical language of system modeling. Thus, you will need to somehow deal with the inaccuracies in indicating object types and understanding object types in any case (both in our course and in life). Grounding will help you: always consider the intentions of your interlocutor, including the course author's intentions (what does he want to express, which situations is he talking about? Specific \"instances\" or types of situations?), and try to concretize with examples from real life, that is, to \"ground\" the statements. And of course, if possible, ask clarifying questions about the types.\n\nIf some subsection of the course turns out to be poorly understood by you, remember: no definitions or clarifications of terms will help, but numerous uses of terms in various situations, this will significantly refine understanding. Highly likely, you will get examples of such numerous uses of terms in multiple situations as you progress through the course since the material presentation in our courses consciously includes revisiting opportunities. So just keep going through the courses, and then revisit the entire chain of courses, which will help more than getting stuck on a small unclear piece of some subsection. We will repeat everything more than once!\n\nLet’s say a physical carpentry hammer[^](https://dnipro-m.ua/ru/news/vidy-molotkov-i-ikh-naznachenie/) used (not being developed or manufactured: the time of system use, not creation) in its environment usually (but not always) plays the role of a nail-driving device. For simplicity, let’s call it a \"driver\" or \"nail driver,\" but sometimes you might see very general words (\"device,\" \"system,\" \"tool\") followed by an indication of the function (\"driving nails\"). Hence, bureaucratic terms like \"nail-driving system\" or \"nail-driving device,\" \"nailing tool\" appear.\n\n![](02-role-objects-roles-and-role-playing-function-purpose-in-the-environment-18.png)\n\nThe role::thing \"driver,\" manifesting the function::behavior \"driving\" at the moment of use, can be played by a stone, can be played by a microscope — they can both be affordances for a \"driver.\" But more often, it is (a carpenter or even locksmith) hammer. You might even confuse the constructive/material object \"hammer\" with its role \"driver\" and call the role itself \"hammer,\" in which case the constructive/material object \"microscope\" (with the primary purpose in its traditional role of helping examine small objects) will be called \"hammer\" if chosen as an affordance for the role named \"hammer\" \"driver.\"\n\nThis confusion between the constructive-in-role and the role-constructive leads to funny jokes in situations where everyone is used to some construct embodying some role, and suddenly they need to name the role, but everyone has even forgotten the role's name! \"Who will be Vasya today?\" they say in a situation where Vasya has long played, for example, the role of \"crane operator\" and suddenly Vasya does not show up, searching not for a construct for \"crane operator,\" but \"construct for the construct,\" Vasya. The role is simply \"implied.\" It’s funny but not so funny when instead of a \"hammer\" they look for \"another hammer,\" thereby losing the opportunity to replace one affordance with another. Say, a driver, whose role is played by a hammer, with a driver whose role is played by a nailer (automatic electric nail driver).\n\nWe should still differentiate the functional/role naming of the system by its function in the environment and the constructive/material name of the system as a material object \"without the intended environment,\" which is only being considered as an affordance/suitability for its role. Names are not scarce; one object can have many names. The main thing is to understand that if two different names refer to the same place in space-time, it is the same object. If \"microscope\" and \"nail-driving device\" refer to the same place in space-time at some moment, then it is the same object. If \"hammer\" and \"microscope\" refer to the same place in space-time at some moment, it's the same object, and you can guess whether it's a microscope being used to drive nails or a hammer being used to examine something.\n\nA role/functional name of a system always indicates the purpose/function as the system's behavior in a role. If the role of the system involves driving nails, then the role object's name is \"nail-driving device,\" \"nail driver\" or something similar. And for a hammer, this consideration seems to end because it is usually clear from the context what driving a nail involves with something like a hammer. But no, the \"nail driver\"::system as a role object can demonstrate surprisingly different behaviors:\n\n-   Driving a nail by the blow of a hand-driven hammer, mechanically\n-   Driving a nail with a nailer on electric power,\n-   Pressing a nail with a press,\n-   ... invent a dozen more ways.\n\nTo change the way/method of the \"nail driver\" system's work (you see how many different functional names for the system's role came up, more and less bureaucratic, but each time meaning the function \"driving a nail\") as a simple physical system, it is necessary to reassemble it from other constructive/material objects as affordances. A nailer and a hammer are built in entirely different ways concerning the constructive parts used.",
    "c48e76a3b954fadf7ed7a31441e6bcba": "---\ntitle: Mantra of Systems Thinking\n---\n\nTraditionally, the question arises: shouldn't we start with roles right away? We wrote that people find it hard to think about behavior, that is, functions/practices/cultures/ways of working. It seems that therefore we should first talk about roles (this is easier), and then discuss their methods of work (this is more difficult)! But “first roles, then what they do”—this turns out to be incorrect in projects. Roles appear in reasoning much later, and we will repeat this once again (this sequence of thinking needs to be repeated, repeated, repeated not only in the course but also in life: this is the **“mantra of systems thinking”**):\n\n-   **What needs to be changed in the environment of the target system.** First, we need to understand what changes are needed in the environment of the target system. If you remove the target system from the world, break it—what will everyone cry about? If no one notices, then immediately stop the project of creating and developing the system, it is not needed, it does not change anything in the surrounding world when it is used (the fact that its creators will not receive salaries is an excuse. They will not bring irreparable benefit by creating the system, the world will not improve from the creation of the system, so creators should not be paid for a system that does not change the environment, unless as charity. If this is not obvious and conscious charity, then the creators' demand for resources for work that is unnecessary for anyone but them is insolence and fraud).\n-   **By what means/method are we changing the environment** **of the target system.** Next, we need to choose the means by which the system changes this world, the function/method of the system’s operation. This is the examination of behavior that should occur at the moment of using the system with some role objects to bring about the changes in the environment specified in the previous point. Here are different calculations related to the moment of use (what flows at the moment of use, what energy is needed, how much time it will take, etc.).\n-   **What is the role of the target system.** Only here can you say what name is culturally accepted for target systems performing such functions—say the role of the target system. **The role of the target system only here!**\n-   **What will we make the target system from.** Then choose the affordances for the target system (and since systems have many systemic levels, it often comes down to choosing affordances for well-identified subsystems). This is an inventive task, pure creativity.\n-   **By what methods of work do we make the target system.** Then we need to understand by what methods we should work with these constructs/materials so that the target system can function properly. Should we use welding, training, laser cutting, teambuilding?\n-   **What is the role of the creator.** After identifying what is needed and how to do it, we need to ask about the role of the creator who will do this with the constructs-affordances, ultimately turning them into a functioning/used system. Choose a culturally-defined role name, refer to a textbook for the agent (or at least articles, posts by specialists on methods of the role), who will be the construct-affordance for the role. **The role of the creator only at this step!**\n-   **Who/what will be the creator.** Only after this do we take the constructs for potential creators (people, equipment, AI agents, enterprises) and select affordances/fit ones that will be able to perform the roles from the previous point. For we must always beware of choosing a baker from skilled shoemakers.\n\nOf course, going through these steps is not like a \"waterfall/cascade\" that always falls down and never goes back. No, at each step, hypotheses are made, which are criticized, experiments conducted with them (the usual course of knowledge!), and if these hypotheses are refuted, it is necessary to return to the previous steps, often to the very beginning: understanding why the created and developed system is needed at all. But the logical sequence of steps is as written. Of course, in life, we have to solve reverse problems as well, \"here we have people Petya and Vasya who can start a fire by friction. How can we adapt them to the business so that they at least feed themselves today?\" Or \"here our scientists have invented a sepulka. Where could we stick it so that people would pay us for its mass production?\" But these are not direct, but reverse problems—their solutions are interesting, but it's still better to solve the direct problem in each project.\n\nAnother difficulty is that creators can \"create creators\" (for example, people-founders of an enterprise can create an enterprise, and the enterprise will create the target system). But this is just sequential utilization of these considerations in some chains or even graphs of system creation.\n\nThe main problem here is that this logical sequence of steps of system reasoning is rarely followed in work projects. Most students of previous versions of our course demonstrated knowledge of this reasoning in conversations detached from the work project, but its non-application in their real projects—it was necessary to conduct training (repetition, repetition, repetition of reasoning for the real project, training the neural network in the student's brain by multiple repetitions of the pattern) so that this reasoning would not remain \"reasoning from the textbook,\" but become a purposeful method of thinking, consciously and constantly used in work projects.",
    "a4618cfdd161aab00ac8a0278d3f9058": "---\ntitle: Gaming Metaphor\n---\n\nIt is easiest to discuss behavior influenced by the execution of a method as a kind of **live-action role-playing game**^[[https://en.wikipedia.org/wiki/Role-playing_game](https://en.wikipedia.org/wiki/Role-playing_game)], played by various groups of players. A live-action game can be thought of as a theatrical performance without prescribed lines and a clear plot, although roles and a storyline outline are given—the rest will be improvisation by the role-playing agents/actors. Another important distinction is that in role-playing games, roles are played not \"for the audience\" but \"for oneself and other actors.\" The simplest role-playing game would be the game \"house\" (\"let's pretend you are the mom, and I am the dad, and you will be the child,\" or \"let's pretend you are the firefighter and will rescue me\"; sometimes these children's games are called **scripted role-playing**^[<https://www.akusherstvo.ru/guide/syuzhetno-rolevye-igry-dlya-detej-pochemu-oni-vazhny/>]), in which young children play, or \"war\" (where \"you’ll be the reds, and I'll be the blues, and we'll fight\"). Even simpler are sports games like soccer, where everything follows simple rules that slightly differ for various roles (the goalkeeper can touch the ball with hands, while other team members cannot). Sports games can be both \"for oneself and other actors\" and \"for the audience,\" but in general, they are distinguished by having a clearly defined game goal and methods to achieve it. In live-action role-playing games, the goals and methods of achieving them are much more flexible and are more akin to professional and personal projects. Here’s what players in a classic live-action game look like:\n\n![](15-game-metaphor-22.jpeg)\n\nIn a theatrical play, they look just as colorful, except their lines are already prescribed, so the execution of roles in some method in projects is a bit farther from theatrical performance and closer to a live-action role-playing or scripted role-playing game.\n\nThe most important aspect here is **role-playing**^[<https://en.wikipedia.org/wiki/Role-playing>] as a change in one's behavior to somewhat resemble the working methods of the chosen role. Whether this transition to \"role-playing\" is fully conscious to the player/actor in the role-playing game or theatrical performance or passes unnoticed by the agent performing some work in real life, the work is done by some method, thus the agent plays a role in this method. If it is buying a bun in a cafe, you, whether conscious of it or not, are performing the role of \"buyer\" in the method of exchanging goods, specifically in a voluntary exchange, which is \"buying-selling\" with roles of \"buyer\" and \"seller\" (and you can easily count many other roles: for example, you can buy a bun for a child, and pay not from your account—thus the roles of payer, beneficiary, and buyer may diverge, each performing a part in the buying-selling, without even touching on splitting the roles of the seller. It does not matter whether the agents call themselves something specific (and even if they are people), what matters is what they do—and from these actions (method/way) we recognize their role.\n\nIf you are not acting randomly but following some method, then you have started role-playing in some role-playing game, following some plot. It is safe to assume that this is a role from some game (the same \"buying-selling\" or \"course studying\" as a \"student\"), whether you know it or not, whether you call it something or not. Life thus, in systemic thinking, is simply the performance of actions in various methods/ways in different roles, life itself is a \"role-playing game,\" with many roles and many role-playing games.\n\nYou come to a pizzeria and order pizza—you play the role of a pizzeria visitor. And once you start playing this role, play it precisely. So, if you ask at the counter for women’s sandals size 37 instead of pizza, you'll immediately see this seemingly hidden role structure, by which people perform work in some method, keeping themselves in some role for this method. Your request for sandals in a pizzeria will cause its staff to deviate from their usual work roles to deal with your role—what method, what result you are trying to achieve (what is your function as a system in relation to your environment in which they find themselves), what is your role, what are your interests? If you do something similar in a project at work, playing \"out of role,\" i.e., showing a deep departure from the method of work prescribed by the role, you will immediately cause an investigation with clarification of roles and the methods used by these roles. If you unexpectedly change your method of work (say, after reading a textbook on operational management, stopped taking ten-twenty tasks at once but started performing no more than two tasks in parallel), the result will be the same: an attempt by colleagues to figure out what is happening, what methods of work you perform in what role, why these methods (which results you want to achieve), why you use this type/variant of the method in this role.\n\nIf the departure beyond \"work as a role-playing game\" is obvious, i.e., you demonstrate behavior in a project role not among the expected project/organizational roles, the outcomes will be very different depending on the roles played by colleagues and the roles they consider acceptable to play during the project work. Try asking a colleague to bring you pizza or scratch your back. The results of the request will clearly show that the work in the project is deliberate, not all requests are possible: the attitude will be akin to the game \"house,\" where the dad suddenly decided to play the role of the granddaughter. Leadership—this is the role returning the player in the father role to fulfilling the taken role. At work, leadership does the same: if an employee is tasked to perform some role in the activity, i.e., conduct work with specific objects by some method, not perform arbitrary actions at arbitrary times with arbitrary objects, leadership will strive to bring him back to this role.\n\nIn the work environment of **blue-collar**^[<https://en.wikipedia.org/wiki/Blue-collar_worker>] settings, it may be less colorful regarding clothing, but the principle of dividing collective activity by roles (division of labor) is the same.\n\n![](15-game-metaphor-23.png)\n\nIn an office environment with roles and projects, it is the same—all are dressed more or less alike^[<https://en.wikipedia.org/wiki/White-collar_worker>], so you have to guess who agent is who role sometimes by the lines chasing the role interests of the agents, and sometimes by their actions (for one can punch in the face, saying polite things about the weather outside—the words do not always match the actions, methods of work are about deeds, changes in the physical world state in the end, descriptions here are extremely important but secondary, they may starkly not match reality, conversations look all alike, yet the situations discussed vary greatly, including differing from what is discussed in conversations)^[Illustration zna-camarada]:\n\n![](15-game-metaphor-24.png)\n\nNot only actions of agents may diverge from their lines, but every agent present in a project (some of whom will be absent but available via computer networks, this also needs to be noted) can role-play several roles, and you may not keep up with which role he is playing at any given moment: in a conflict of interests, lines might be from one role (say, the goat-guard of the garden), and actions—from another (say, the goat-eater of cabbage). Clothing as a role identifier in important situations helps clarify. Put on a judge's robe—well, you are a judge while the robe is on. Don a security jacket with tie, put an earpiece in your ear—well, you are a security guard, guarding those in t-shirts and jeans, but only temporarily, as long as you are in uniform.\n\nDespite significant differences in role interpretation by live-action role-playing players and game masters, or even a simplified version (with known and memorized lines, repeatable situations) by actors and directors in different theaters, and even in the same theater on different days, there's much sense in discussing the game scripts or plays and the roles involved (**methodological reality,** methodology realm, activity reality—classes, the general, typical), not just their separate performances/executions (**operational reality** of a specific project, endeavor realm, reality of individual work performances with specific dates and performers).\n\nThe role-playing game metaphor sets role-playing by some method and its knowledge/script/algorithm given by the game plot, albeit with possible variations (unlike \"variantless\" theatrical role-playing). The script/knowledge/theory of the method describes different typical situations in which the agent-player will act in role, conducting **work** (performing tasks with specific resources::construction at specific moments of time), but work based on an algorithm/script/theory, being within their role, achieving various ever-changing and agreed-upon in-game (and in life—project) interests. Importantly, different roles' work methods and interests differ (in role-playing games, theater, work-life, hobbies, and personal life), therefore work methods turn out different: kings maintain their lands and try to conquer others, shoemakers make shoes, wizards cast spells, warriors fight, engineers try to make the world better, managers organize agents to make the world better.\n\nA game/method/practice/activity/function can\n\nbe played/executed/involved many times, the work method is repeated many times with different constructive objects, playing the role of functional objects employed by the method. Though each game's performance, or in a more simplified, less improvisational version—each theatrical play execution is somewhat unique, thinking can be economized by \"bracketing out\" all that is repeatable. The method/way implies employing craftsmanship, similar to software programs following an algorithm/knowledge/discipline/theory of the method and supported by tools—thus the method is applicable to various combinations of inputs and/or materials, and outputs different results for these inputs and/or materials. A good method works with many different objects if they are of the suitable types—just as a computer program works with varied input data if they are of its needed types.\n\nThe cultural conditioning of roles and methods, the use of terminology from culture, is important; it provides stability to methodological discourse. Wizards always cast spells, electronic engineers always design, repair, test electronics—no matter if it's in role-playing or even a business game, theatrical play, project work. This is irrespective of the performer being a man, woman, elderly or young person, a large organization, a robot, each performance conducted by the same actor/agent/player or different ones. Though of course, role-playing skill (called acting skills in theatre: a safe entry and crucially exit from the role, maintaining focus on role-playing, avoiding accidental exits from the role, improvising without breaking character) and talent heavily influence, it is assumed the actors/players/workers have mastered role-playing—so the wizard knows how to cast spells, and the electronic engineer knows how to design electronics. **Work, hobby, and personal projects differ from theater and role-playing** **games only by the need for an honest and complete execution of the role,** **even when no one is watching, while in games and plays—only depicting/showcasing this role-playing to the audience, \"as if.\"**\n\nKnowledge of principles frees from knowing facts (here you may refer to the book \"The Programmer Stone\"^[<http://progstone.narod.ru/reciprocality/r0/index.html>] —in it, people are divided into \"mapmakers\" and \"packers\" precisely on this basis: whether they construct a \"principles map\" or memorize each encountered route, i.e., know many facts and their \"twenty-year job experience is one-year experience repeated twenty times\"). If you understand the game plot (in life—have read a work method textbook, regulations, instructions, protocol/procedure, standard), thus know what different roles do in this plot—you can abstract from who the agents are and in what particular situation (instance of the situation) playing these roles, you will be able to predict, at least somewhat, the happening. If you realized a buying-selling transaction occurs, you know there are roles of the seller and the buyer, one item of interest—the price, and the parties will haggle over this item of interest, with the buyer trying to drop the price, and the seller trying to raise it. If the buyer raises the price and the seller lowers it, you must realize another method with different roles is at play (say, an attempt to avoid taxes through gifting, \"I didn't receive this three-story house as a gift but honestly bought it for one ruble, no gifting, no taxes\"—the buying-selling here is fake, covering other roles in other activity/\"work by another method\").\n\nA theater program contains crucial information: \"the cast and performers\":\n\n![](15-game-metaphor-25.png)\n\n**Cast/roles**—this is the thoughtful Prince Hamlet and the mad Ophelia. They have their designated roles in the play, these are role/function objects.\n\n**Performers/agents/organizational units**—this is the cheerful trainee actor Vasya Pupkin in morning shows and the gloomy national artist Vasily Petrovich Chernomorda-in-the-ass-high-knee in the evening shows, both playing Prince Hamlet, plus the meticulous Elena Efimovna in all shows, and she is not ill and is not substituted. Performers—constructive/material objects, these are system-creators playing roles in the play-project. Thinking here is the same as about a microscope, a stone, or a hammer that plays the role either as a nail-driving device or a paperweight. Constructive objects play the role of functional objects. People play roles; roles are functional objects. Cast—these are functional objects.\n\nIn role-playing games, it’s the same as in theater, but with more freedom. The same \"program\" is called the **roles grid**^[<https://vk.com/@-217236218-setka-rolei>, previously called \"role layout\" <https://hobbitsi.livejournal.com/3711.html>], with important notes like \"until the prescribed roles are filled, applications for roles invented by the players themselves are not accepted. However, proposals for game hooks and role-played professions and hobbies are welcome and accepted by agreement with the master.\" If in a role-playing game, which has dwarves and firefighters, neither dwarves nor firefighters' roles are filled, it will fail, but the plot might take in some additional roles. Here, you can discuss whether this is needed—the principle of elegance/lean, conversely recommends managing with the minimum number of roles, but other considerations might compel different thinking, for example, if needed to differentiate from competitors, you can add something to the project results that only additional roles can add. Suppose a project to create an AI system requires at least one player/actor/employee who can create AI systems, but if everyone around creates AI, you might also need another player/employee who can play the role of a designer creating convenient interfaces for AI systems, or can do something else that role performers in other projects cannot do, and that might be useful for the project's success. But it is useless to start a project to create an AI system if you have a good specialist for the role of interface developer, but no one in the team to excellently play the role of AI developer.\n\nThe question is not in the agents::constructing, who are performers and generally can learn the work by **method/procedure/\"work process\"/protocol/practice** described by **textbook/\"training course\"/regulation/instruction/standard**, and acquire skill reinforced by **template/example/blank template** **checklist** for passing the object states. Regulations and checklist templates describe the work method, and the specific checklist instance will reflect the passage of state of specific objects during agents work by the method, this is part of the toolkit enhancing skill—external memory used in skill work. Remember that method::behavior, its skill with toolkit, is discussed as:\n\n- Knowledge/theory/discipline/explanation/algorithm describing the method,\n- Skill in the method—a computer, implementing this knowledge/algorithm in the agent's body (human, robot, organization) \"hardwarely,\" \"a program running in the brain or computer,\"\n- The tool kit hardwarely enhances the skill, no one works \"bare-brained, bare-handed,\" the skill of tool-less results is better suited for circus, not work.\n\nChecklists implemented in a computer or even on paper give external memory for the method skill, enhancing the skill.\n\nThe main question is in the \"cast\"—the roles, functional objects performing some functions, changes in the environment. If you don't know what to do, you can't pick performers (casting in theater—this is exactly the pick of affordances for roles: agents able to play the required role without special problems, without special makeup, without special training).\n\nIn the projects of creating and developing systems, all roles are occupied by some work methods, and actors (people, computers, teams of people and computers with AI, as well as machines and materials provided to them) matter only to the extent that they can play the required roles for the project, i.e., be able to work by the agreed-upon method, possess the skill and toolkit prescribed by knowledge/discipline of the method. Moreover, it is necessary to check the presence of skill and toolkit with the agents in the project to perform culturally conditioned normative roles.\n\nSay, if an architecture project lacks an architect, the project will definitely be unsuccessful. Further, we take some \"Seraphim Vladimirovich, the chief designer\"::\"agent in a position,\" who does not know about the modern method of creating system architecture and sometimes makes good architectural decisions \"by intuition,\" and sometimes doesn't: just doesn’t realize that these decisions need to be necessarily made and require developers (with unavoidable disputes outlined directly in the textbooks on architectural work methods, sometimes in engineering standards and sometimes in regulations) to follow these decisions in the order of architectural oversight/governance. Maybe Seraphim Vladimirovich would make these decisions if he guessed at taking this up, and the powers of the chief designer would be enough for governance. But he does not know, that he must play the role of an architect, as well as does not know the modern method content of creating system architecture \"hardware\" or even software systems. And yet in this method, it even tells in what form to document architectural decisions (not with diagrams, but ADR, architectural decision records, see more in the \"System Engineering\" course).\n\nRole/function objects and, chosen by affordances from available physical objects, constructive/material objects occupying the same place in space-time—4D extensionism considers them the same object, no matter whether they are conscious or unconscious, sane or insane, live or inanimate. So at the moment of playing a role in the \"Prince Hamlet\"::role performance, or in the Prince::role game, or in a work project, Architect::role—this is the same object as \"Vasya Pupkin::agent.\" Prince Hamlet will smell like Vasya Pupkin. But we should not confuse them: Prince Hamlet exists only during the performance, when Vasya Pupkin plays his role. Like the electronics engineer exists only during work, when Vanya Shchupkin plays his role. Vasya Pupkin and Vanya Shchupkin exist independently of role-playing, and we are not much bothered by Vasya Pupkin and Vanya Shch",
    "2de63bd2d19d7398c1495e5971b87baf": "---\ntitle: 'Methodology: Agents, Roles, Items of Interest, Interests'\n---\n\nThus, in modern systems thinking, we do not emphasize who will play the role of \"rational being\": a human, a human with enhanced intelligence via a computer, an organization of people and computers, or a computer with artificial intelligence (or artificial intelligence with a computer: it depends on how you look at it). They will all do something similar to what people usually do now, and in an indistinguishable manner (science fiction is very popular with plots where a \"legal entity\" hides some \"artificial intelligence\"^[Point 5 in <https://ailev.livejournal.com/1258352.html>]).\n\nIf we use the language of work methods and roles working by those methods, rather than specifying the role performers, the nature of the performer does not matter (the construct/material for the functional object does not matter). If we need to obtain an ice cream cone, some performer of the function \"selling an ice cream cone\" is needed because the cone will not sell itself! It doesn't matter which agent fulfills this function: Petya-the-ice-cream-seller (that's the name of the role for agent Petya!), the vending machine number 4 on the second floor (it won't be called an ice-cream-seller, but \"selling an ice cream cone\" is one of its functions!), a fast food restaurant (not called an \"ice-cream-seller,\" but they will sell you an ice cream cone!), or even an entire chain of fast food restaurants (also not an \"ice-cream-seller,\" but will fulfill the function of \"selling an ice cream cone,\" and you can even choose the nearest place to get it).\n\nFunction is the most stable object under consideration, changing the states of some objects in the surrounding world (cone requested, cone promised, cone being made, cone delivered, ignoring money for now). Next, consider the culturally conditioned role \"ice-cream-seller,\" which for a person is simple, but we can easily call a vending machine performing it (which may be both an ice-cream-seller and a barista, depending on the customer's request), or even a fast food restaurant in that brief moment when it supplies us with an ice cream cone. We can call by role certain other entities unknown to us yet, even though their names are being invented. For example, biocyborg^[<https://www.tandfonline.com/doi/full/10.1080/14636778.2021.2007064>], hybrot^[<https://en.wikipedia.org/wiki/Hybrot>], and so on. At the same time, AGI as artificial general intelligence is often not used as the \"intellect\" of some being, but as an \"intelligent being\" without reference to specific embodiment/technical/biological/machine form.\n\nSo we will further talk a lot about roles and their functions, and when mentioning \"agents\" as role performers, these are not always humans. When discussing **roles** and **agents**, they can be not entirely individual humans but sometimes not entirely living entities-objects and sometimes large organizations: the conversation in systems thinking is largely scale-independent and non-anthropocentric. Synonyms for \"function\" for intellectual and collective agents can also vary—method/practice/culture/style/work, type of labor, type of engineering.\n\nMoving forward, we will mostly mean by agents the agents in their narrow sense, that is, planning intellectual agents or, as also called, **rational agents** (although we won't delve deeply into rationality and decision-making theories, these are topics for other courses^[Details about modern approaches to rationality: <https://ailev.livejournal.com/1619025.html>.]). Rational agents are most commonly humans today, and organizations of people can also be considered in this category, but AI-agents are already showing much rationality.\n\nUsually, rational agents involved in projects aiming to create and develop some systems are interested in a whole range of **\"important/interesting characteristics\"/\"items of interest\"** (concern, rarely interest, sometimes even driver as \"something important,\" key/target/main characteristic, object of close attention for some \"work method\"/practice/activity).\n\n**\"Item of interest\"/\"important characteristic\"/\"interesting characteristic\"** **can be** **any characteristic of the system or project, typical for many projects or unique to this one.** Temperature, development time, adjustability and customizability, mean time between failures: **any important characteristic for a specific project role can be an item of interest.** Cost, performance, reparability, system functions and features, shelf life, safety, etc.: anything important for successfully shifting objects from one state to another by various work methods.\n\nNote that a characteristic or item of interest is not the value of the characteristic! Water temperature can be an item of interest at a pool or beach and is crucial for \"water swimming\" work methods, but we haven't mentioned the characteristic's value, the temperature value! Roughly speaking, we only named the scale by which we will later judge the value—reparability as an item of interest implies that we will later assess it: whether it's high, medium, low, or other. But \"item of interest,\" \"characteristic\"—is a property, not the value of the property.\n\nWhen planning to break down this item of interest into smaller parts, the terms \"area of concern\" can be used, and in such an area, there will be several specific items of interest. **Area of concern** can be any set of characteristics considered important by work/activity/project/org roles. For instance, a client's area of concern may include system characteristics (what it does and how well), the price of the target system, manufacturing time, and the location for receiving the final system. Again: we haven't said anything about these characteristics' values! We are discussing in terms of scales/properties, not their values.\n\nNote, we just expanded the range of synonyms for \"role\": adding epithets pointing to different contexts of role usage: project or organizational contexts clarify rational agents—\"project role\" (role in executing some work methods in the current project), \"org-role\" (role in executing some organizational methods). Constructs/materials and affordances here are the same as for other roles of more or less universal creators—humans, organization units or entire organizations, teams with their computers and equipment, as well as AI-agents.\n\nDifferent roles have different **concerns/preferences** **in** **\"items of interest\"/\"important characteristics\"**. They are sometimes called **role concerns, role preferences**. This means it's not the preferences of the construct-agent Vasya playing the role of Prince Hamlet but Prince Hamlet’s preferences in his role.\n\nIf it's Dasha-the-seller, it's not about Dasha herself but the role \"seller\" preferences, executing sales methods.\n\nIf a common item of interest/important characteristic for project roles buyer and seller is the price, then the buyer’s role concern is minimizing the price, while for the seller, it’s maximizing the price. Therefore we speak of two concepts: characteristic with its value and concern, as for two or more roles, the characteristic may be the same, but the concerns/preferences differ. Don’t confuse: concern/preference as aiming for a specific value on a scale/characteristic/property versus \"item of interest\"/\"item of concern\" as the scale/characteristic/property itself.\n\nFor example, price: \"item of interest\" will be the same for all roles negotiating within a project, while the concern/preference (to have a higher or lower price) for each role will differ. Preference/concern is about where to push the characteristic/property value during negotiations: make it higher or lower if continuous, or closer to one value or another if discrete (hot—open the door, everyone is sweating, draft—close the door, I just recovered from a cold, sweating is okay): item of interest—\"door openness,\" different concerns!\n\nPeople and organizations (and sometimes not only people and their organizations, we won't make these reservations further—be attentive in real life) are considered autonomous **agents** executing **roles**. Sometimes agents as role performers are called **actors**, sometimes **org-unit**(meaning the construct), unlike org-role (functional object, we avoid the word \"division\" as \"org-unit\" can mean both the whole enterprise or one person, and some collegiate bodies—councils, commissions generally not considered divisions).\n\nA creating-agent handles \"work by method\"/activity/labor/practice/engineering/creation, having **intention**^[<https://plato.stanford.edu/entries/intention/>], aimed at eliminating certain dissatisfactions at different system levels, which prompts them to work by a method aimed at changing the world, themselves, or their model of the world. Working by a method, the agent plays a role and pursues role concerns, striving for preferences in certain interesting system characteristics. Intention/intent to act is an element of entrepreneurship/proactivity/research curiosity, evaluating uncertain future and creatively suggesting world changes (for instance, creating new systems) to avoid unpleasant surprises from the universe and prompting creativity.\n\nThere's speculation in active inference^[<https://www.activeinference.org/>], which hasn't yet been disproved, hence taken seriously: **all without exception** **systems** **of any scale** **(as stable objects that manage to sustain themselves in the physical world) engage in actions implementing the principle of minimization of free** **energy from physics. Rational agents engage in proactive action, planning possible future unpleasant surprises** **and acting beforehand, sometimes organizing into collectives for more effective action**^[<https://www.sciencedirect.com/science/article/pii/S0149763423004694>]**.**\n\nThis applies to molecules, humans, organizations, and so on, up to humanity as a whole. Details can be found in the work by Chris Fields, Karl Friston, James F. Glazebrook, Michael Levin, \"A free energy principle for generic quantum systems\"^[<https://arxiv.org/abs/2112.15242>], 2021. Of course, in each case, it’s about very different intentions and actions, but due to the physical principle of least action^[https://en.wikipedia.org/wiki/Principle_of_least_action], an agent::system to the extent of its rationality, memory volume (we can always connect computer memory and memory of other people!) and computing power (besides the brain, we can connect other brains and computing resources up to data centers) implements the physical principle of free energy minimization: minimizing expected unpleasant surprises from the universe, i.e., minimizing the chances of disappearing, disintegrating, or dissipating under the pressure of entropy. If you try to break a stone, it will resist as much as it can. If you try to break a person, they can foresee it and either run away or (be warned) hit back—not alone but with friends and using tools/weapons unpleasant for you. How communities and societies react to attempts to destroy them is intriguing, yet answers are tough as they can’t be asked (anyone speaking from their behalf will say different things). It is observed that communities sometimes live shorter than individuals, but sometimes much longer, and humanity vastly longer than individuals, i.e., communities, societies, and humanity also resist cosmic trials, successfully more than individuals. But **speaking about** **communities and societies** **anthropomorphically (e.g., they have intention/intent we can know and consider, societies have interests**) **should be cautious, as** **advanced language for such discussion** **is currently lacking.**\n\nReturning to rational agents like individuals and organizations, intention not only makes them pursue role concerns but often switch roles, changing role concerns. So, it’s crucial to understand items of interest and preferences in them for the project role played by an agent (Bogdan, playing engineer-thermal technician), and also understand the actor's intention as a role player (e.g., Bogdan wants to eat, so his engineer-thermal technician role discussion quickly ends without results, switching to the eater role and heading off to eat).\n\nFor realizing agent intentions, strategies are developed based on their understanding of causal relationships in the situation. Broadly, strategy is a continuation of the synonym series method/practice... It’s a pattern of actions, and hence strategy/method of work is essentially the same, barring nuances, \"way to achieve success in getting results.\" Based on strategy (a method without specific time and resource instances), an **action plan** is developed, involving resources for role objects at specific times when resources will be available to execute the strategy/method.\n\nEverything concerning the methods (their creation, comparison, evolution, implementation) is studied under **methodology**, the science of agent work methods. This course offers methodology elements, while the method/work/activity/practice/engineering/strategy concept has additional discussion in a separate methodology course (how to think about world improvement), and general engineering methods (how to change the world for the better) in a systems engineering course, further covering specialized engineering methods in comprehensive (personal engineering, systems management) and applied engineering courses.\n\nPeople as agent-actors are typically very inventive. Before making choices, they generate and evaluate various decision options, getting creative—offer them a choice between red and blue, and they, adhering to decision-making norms, will wonder what other choices might be available, then unexpectedly choose green and strive to make this option available. Thus, agents can trigger unforeseen action chains even with strictly positive preferences for you.\n\nFor example: item of interest: headache, preference/interest: head shouldn't ache, strategy/method of treatment: decapitation, \"cut off the head—no head, no headache,\" a role for this method: executioner with the item of interest/characteristic \"presence of head\" and preference/interest \"no head,\" then find an agent for the executioner role and execute the decapitation::method in the executor's available time using an effective method studied by the agent. Will this event sequence be realized significantly depends on the agent's rationality and handling the goal (interests) and means (methods/practices) tangle. Not all agents take courses teaching rational decision-making, not just any kind.\n\nFor implementing agent intentions, their strategy and plans might involve other agents in different roles executing other methods, possibly even paying them! But our agent might get distracted from their role and take on other roles' work if qualified. If not qualified, they might still do it poorly, possibly unaware of their inadequacies!\n\nThis complicates the scenario, but methodological concepts \"agent,\" \"actor\":: \"role performer,\" \"role,\" \"item of interest/important characteristic of a system or project,\" \"interest/preference,\" \"intention,\" \"strategy,\" \"plan\" should suffice for thoroughly understanding various situations concerning human behavior in projects, including discussing conflicts and cooperation. The course's goal is to acquaint you with these concepts for managing attention in complex situations with many agents pursuing various intentions driven by different interests. You should find these concept types in life.\n\nPrimarily, pay attention to actions (discover the work method, then determine the role, then understand the \"items of interest\"/\"important practice characteristics\" of the role, and the role's interest). But also pay attention to words if actions are not visible, but only speeches or texts by the agent \"with unclear intentions.\" Vasya::agent, so in the conversation with me he has some intention and role—what is that intention, what role? And how rational is Vasya, how insane might his actions be in realizing these intentions? I::agent, what are my intentions and roles when communicating with Vasya? After realizing them, what actions should I take?\n\nUnfortunately, methodological considerations are complicated by:\n\n-   Multiple agents/actors usually participate in a situation.\n-   Every agent has hidden intentions from other agents (not necessarily humans) in a project.\n-   Each agent is involved in multiple projects, and an agent's win in one project may lead to a loss in another, prompting idea generation to optimize the situation, often with multi-level optimization due to conflicts between system levels: a specific item of interest like salary, an employee's interest \"raise salary,\" company's interest \"pay the employee less.\" The agent might increase overall gains for themselves or even others (if collaborating). Thus, an agent could perform multiple roles, some of which you are unaware of, even within different projects, and some conflicting (especially if accountable for different system levels, inevitable conflict between them leading to dissatisfaction from conflicts of all 'bad but equally' solutions).\n-   Each agent develops strategies to engage roles in various projects unseen by other agents (including people) in a project, designing an action plan unseen by others. If an agent's strategy fails, they might unexpectedly change strategy and plans, possibly playing entirely different roles with different important characteristics.\n-   Each role may have numerous important characteristics/items of interest with preferences/concerns in them.\n-   Agents then execute plans (perform works) by the methods/practices well-known to their roles. Here, an agent can be doubly incompetent, as twice unskilled: 1. in their role, playing it poorly if unaware, and 2. lacking intellectual capability, making irrational and inadequate decisions with unknown situations.\n-   Agents have authority to manage their own and others' work and equipment (speaking of positions in organizations). Agents might confuse roles of themselves and their subordinates.\n-   Here, we don't discuss the methods as a subject of methodology, nor works as a subject of operations management (resource engagement maximizing workflow through these resources, treating the role-executing agent as a resource).\n\n\n**Translated Text:**",
    "ec9a0933026471aad073a9bdfaa0f062": "---\ntitle: Functional and Constructive Considerations of the Same System\n---\n\nThe term \"function,\" as we discussed in the first section, has many different meanings. Very often, role-based behavior/action (behavior for a specific purpose) is called a function. For instance, the usual usage is “the function of a hammer is to drive nails.” If a verbal noun (ing form in English, a reference to the continuity of action) is used instead of a verb, it usually means function/process/method.\n\n**Works** (instances of processes) considered as instances of performing the \"work method\" (\"the system playing its role\"), engaging resources/constructs, are often expressed by an infinitive verb or (if it is a plan) in the imperative mood for the resource performing the work. The job (what needs to be done specifically with instances of objects at a specific time) will be planned as \"hammer nail number three into board number four no later than 4 PM,\" with the expected result being \"nail number four hammered into board number four no later than 4 PM.\" Subsequently, the method by which the work will proceed can be discussed. Indication of the method (what generally needs to be done) would be \"hammering the nail into the board\" (in essence, the method/means::behavior is the hammering, and the objects of the method are the nail and the board), and once again, the options of how to do it need to be discussed, as just the name of the method is usually insufficient (there are few types/patterns of behavior), it often needs to be specialized to a specifically understandable variant (to move from the genus to the species—it’s inappropriate to say \"beast,\" since the genus \"beast\" includes the species \"tiger\" and \"mouse\" simultaneously). For example, \"hammering\" is specified down to \"nail into the board\" (the objects of the method are specified), then it can be further specified to \"hammering the nail into the board with a nailing machine\"—here, besides the knowledge/theory/explications of the general method \"hammering\" and specifying it with the objects \"nail\" and \"board,\" the method's name also includes the tools that will be utilized by the specific specialization of the method \"hammering.\"\n\nIn our course, **we will distinguish works/actions** **and** **methods/means** **of work.** Methods mention types of resources at the moment the method is engaged, whereas works require instances of resources, that is, material/constructive objects necessary to engage the method. Therefore, works as \"work resources\" will be performed by systems::constructs, and the methods of these works will be performed by systems::roles (and one can discuss whether or not to include the objects of the method's work, which will need to change their state, as well as the tools that expand/augment the agent's body performing the work by the method, in the system composition).\n\nIdentifying functional and constructive systems with their works and practices will be as for the \"warm object\" and \"orange object,\" as well as the \"object on the window,\" which are simply descriptions of the same material \"kettle\": through 4D extensionalism.\n\nSystems::roles (functional objects as a subtype of physical objects) are interesting in that they can disappear from the physical world and reappear completely different—at the moment they gain a new affordance as \"role performer.\" A \"hammerer\" disappears when we stop hammering with a stone and suddenly appears as a microscope when we start hammering with a microscope.\n\nAgain, we repeat: systems as roles are quite physical. Although some philosophers insist that roles (role-based/functional objects) should be considered abstract objects, engineers and managers listen to other philosophers who point out that most people consider **functional/role** **objects** to exist when some **material/constructive** **objects** play their role and do not exist when no objects play these roles.\n\nWe can think of Prince Hamlet, implying that he exists at the moment when his role is played by an actor (for example, the famous artist Vasily Pupkin). At that moment, one can conditionally \"knock\" on Prince Hamlet, point a finger at him (the place he occupies in space), moreover, he occupies not only a place in space but also a place in space-time. Prince Hamlet, as a functional object/role, behaves in some way, meaning he is needed in the context of the play. When does Prince Hamlet go for lunch? The answer: never, as Vasily Pupkin goes for lunch, and Prince Hamlet does not exist during lunchtime—he ceases to exist at that moment because he \"does not play the role\"/\"does not perform the functions\"/\"does not function\"/\"is not used.\" And if Vasya Pupkin falls ill? Then the role of Prince Hamlet will be played by another actor.\n\nThe same reasoning applies to the pump::construct and the blower::role. The \"water blower to the third floor\"::functional/role object exists when a certain pump with a serial number plays that role. Then it disappears from the world when this pump breaks down and is dismantled, and when it is replaced by a pump with a different serial number and it starts working, the functional object appears in the world again, but it is realized/embodied by completely different molecules of matter. Remember, \"starts working\" is important here: all functional/role considerations only during operation/use. If you think the functional consideration of the creating system (some plumber, alternately realized by Petya or Bogdan) refers to the creation time, then for the plumber as a creating system, it's the time of his plumbing use, the time of performing works by plumbing methods (performance of the plumbing function/method/practice/culture). No confusion: always remember the time we are considering the target system: if it is a functional consideration (utility, usage results), then it's functioning/work/use, and if it's constructive (seeking affordances, processing them to change states from raw to a ready working system), then it's creating and developing time. And yes, there can be long chains of such consideration (creators creating other creators, and so on for multiple steps until the target system—if you create game sessions, some engineers should create game software in the data center, and someone should organize the engineers who will then create this game software, and someone must somehow create those organizing engineers, all these chains and even creation graphs in life are quite long).\n\nFunction/\"role behavior\"/practice/method of carrying out works is assigned to the system's works, based on some patterns of system behavior during works, that is, achieving resultant environmental changes. So, even the oven changes its state from \"cold\" to \"hot,\" meaning it performs the work \"heat up well for the night of January 15, 2054, in room five\" only for the surrounding area to become warm (that is, to become warm in the oven's environment). Thus, \"oven\" (functional object) will be chosen as a specialized electric heater with a good convection radiator and sufficient power (constructive affordance—that construct chosen), not some isolated heat source well insulated from the room (e.g., we will not declare a \"thermos with a liter of hot water\"::construct as an \"oven\"). Further, one can debate whether to call an electric heater or a gas heater an \"oven.\" Is \"oven\" a \"role\" or \"construct\"? Since function is primary, \"heating,\" it is more likely today to call a \"wood-burning stove\" a \"heating stove\" or if the main use is cooking, then a \"stove kitchen plate\" (fully understanding the historical context of \"plate,\" indicating not function but the construct of a \"flat surface\").\n\nIn all these considerations, it is necessary to avoid definitions (cease the argument about terminology, names, etc.; these are just \"strings of symbols,\" they will be different in various languages, this is not so important) and discuss what place in space-time the discussed items occupy, \"ground\"/groun. The role/role object/functional object and the material/constructive object playing it will, of course, occupy the same place in space-time. At the same time, a role object can disappear from the physical world anytime its role ends—when the constructive/material object ceases to play its role. A material (that is \"an object made of matter\") object cannot be destroyed just like that—the law of conservation of matter acts, a material object can change, but it cannot just suddenly disappear; it just changes its states and roles it plays.\n\nFor instance, I can highlight in my life \"my favorite toy\"::role. Then choosing one affordance/construct out of many as \"my favorite toy\" occurs based on what results I expect from this construct playing its role, what changes in its environment (that is, in me) this construct-in-role will induce. So, \"favorite toy\"::role, its affordances were \"teddy bear\"::construct 55 years ago, \"toy airplane\"::construct 50 years ago, and today \"coffee machine\"::construct. In the interim, perhaps I was not up to games, and this role/functional object \"my favorite toy\" did not exist during that period. Physical individuals of constructs playing the role of the functional object \"my favorite toy\" changed several times, but the function \"priority involvement in my games, entertaining me\" remained the same.\n\n\"My favorite toy\" (incidentally, if you remove the highlighting quotation marks from the term—will you recognize it as a system in role? In real life, your systems will not have such cues!) at the moment it exists, it quite occupies space—you can knock on it, smell it, speak about it as a physically existing item. But, of course, you will be knocking and smelling the constructive/material objects playing this role at specific moments. If you wish to smell Prince Hamlet, you will smell only Vasya Pupkin, playing his role. Or the smell of Bogdan, if Bogdan plays. Or nothing at all if Vasya Pupkin or Bogdan are not playing this role—without a performer of the role (constructive!), there will be no Prince Hamlet. But indeed, the smell of Vasya Pupkin or Bogdan will be the smell of Prince Hamlet, as their appearance will be the appearance of Prince Hamlet, as their function::\"behavior during the game by role\" will be the sequence of actions of Prince Hamlet.\n\nWhy are role/functional objects needed? To separate in thinking the performing of certain actions (goal: to change one state of the target system to another) from the objects performing actions (creating systems with their tools). Actions (in the case of agents—work methods) are not that many in the world (one can compare their types number to the conditional number of verbs in the language—several tens of thousands), but functional objects suitable for actions (like nouns, of which there are hundreds of thousands in the language) are vastly diverse. Therefore, one can discuss the method/activity/practice/function of the work of an \"agronomist\" (role of engineer for plants::systems) or \"manager\" (role of engineer for organizations::systems) and accumulate knowledge about this method/activity/practice/culture/\"type of labor\"/engineering—regardless of who performs this role now, Vasya or \"AI-agent Thomas.\"\n\nSimilarly, one can highlight the object \"water pump\"::role and its function \"increasing water pressure\" and then use either a pump::construct with a certain serial number manufactured by Murom plant in this role (this will be affordance), or a \"water tower\"::construct, which will need to be built by some contractor or by ourselves (then it will be the affordance). The reasoning here is the same about roles and instances of \"homeland,\" \"tree,\" \"internet provider,\" and \"water pump.\" All role/functional considerations and affordance selection (affordance selection—invention! One must still guess to use an amplifying triode in key mode to create a computer, motorcycle engine as an aircraft engine!) are absolutely identical. And affordance selection is multi-level (remember the systemic levels! The reasoning repeats at each level, \"recursively\"). And this reasoning is the same for people, animals, and artificial intelligence systems (\"undead\"), as well as for inanimate systems.",
    "70f52c872c75a477699235f8111430ed": "---\ntitle: Production of Systems as Constructs in Their Potential Roles\n---\n\nEven highly intelligent system creators usually do not assign\nfunctions of arbitrary kinds to themselves; they take functions \"seen\"\nfrom culture --- these are behavior patterns, so repeatability is important\n(a pattern is observed in a series of behaviors, it's a \"template\"). So,\nmethod/way/practice/function reflects in some sense\n\"uniformity\"/template/similarity, following one\nstyle/culture/method of behaviors. And after that, roughly the same can be said\nabout the role. Then, either such a term for a function as behavior already exists in the language\n(heating --- heater), or it doesn't, in which case it has to be\ninvented (sepuling --- sepulka).\n\nThe hammer did not assign itself the role of nail driver, nor does it have\nthe function of driving nails. We can take a microscope and assign it\nas a \"hammer\" --- to drive nails with it. \"Hammer\" in this case is nothing more than\na role term for the microscope::construct (or stone::construct, or\neven hammer::construct), the name should not confuse. The behavior\nof the microscope in this named role, its function, \"playing the role of a driver\"\n--- driving nails. If \"driving nails\" refers not to\nthe microscope but to Vasya-with-the-microscope, then \"driving nails\" is often not called a \"function\" but a \"method/practice/way/culture of work,\" \n\"a type of labor/activity/variant/kind of engineering\". With\nfunctions/methods and the roles performing them, there can be many \"almost\nsynonyms\" even in the names of types, you must have noticed them already; we\ntried to use many synonymic series in the course for\nculture/style/type of labor/method/way of work (but not the work itself! In\nthe course \"Methodology,\" the difference will be explained: works imply \na resource-based view \"who works on what when,\" and methods/ways\nof work --- a substantive, \"how to do all this, regardless of when and with\nwhich exactly instances of objects\").\n\nOne can say \"the culture of driving nails,\" why not --- although\ndriving nails is not usually talked about this way, they will discuss \"the method of work\".\nBut some \"dancing tango\" easily can be called a culture or\na style of dancing, but rarely \"a method of work\" or even \"type of labor\".\nThe main thing is to understand that \"dancing tango\" and \"driving nails\"\nare objects of the same type: function/method/culture of the working behavior of a dancer and\n\"function/method/culture\" of the working behavior of a carpenter). The synonymy of the functions\nof driving nails for a carpenter-with-a-tool and\nhammer-or-microscope-without-a-carpenter (a tool and an agent-with-a-tool\nseem to perform the same function, but in fact their roles and functions\ndiffer) --- this synonymy will also have to be somehow removed. In large\nprojects with naming thousands and thousands of roles and functions/methods, there can\nbe huge confusion, especially since a hammer or a microscope might now \nturn out to have artificial intelligence, and this will further\nconfuse understanding others and choosing one's own terms.\n\nWhy is it important to take culturally prescribed terms rather than invent\nthem on one's own by occasion? For example, calling Vasya in the role of an engineer\nan engineer, and not \"a life improver\" or \"a creator of successful systems\"?\nFirst of all, it’s a matter of understanding: you won’t need to explain in detail\nwhat Vasya does as an engineer, you can reference the culture\n(that is, suggest to \"Google\" or ask an AI assistant). Interestingly, textbooks (or\nregulations, instructions, international and industry standards) on work methods might\nsurface, which you didn’t know about. Read them, our\nstudents were surprised to learn that many of their work problems were described in\ntextbooks, as well as ways to solve these problems --- they just\ndidn’t realize that their work wasn’t unique, many people on\nthe planet have been engaged and are engaged in this work, so there are patterns\n(methods/practices/cultures/styles) of work that can be followed to\nwork in a certain role with fewer problems. Solving tasks (when it's clear what to do, and you only\nneed to gather resources and perform the work according to the known method) is much simpler than overcoming problems (when it's not clear at all what's happening and what to do --- but further work somehow doesn't proceed).\n\nSo, try not to invent terminological bicycles and not\nto invent work methods on your own and not to redefine\nculturally prescribed roles. Of course, everything written in\ntextbooks/instructions/standards needs to be adapted to work situations,\nbut still, it is better to reach actual problems along the rails of \nsomeone else's explanations for certain work methods, \nused by already existing roles, before adapting them. Or, be prepared to face beginner's mistakes. \nYou can, of course, spend a huge amount of time learning \nto play a DJ console through trial and error, but going to DJ school \nor at least taking a DJ course through self-tutorials is a significantly shorter path. This reasoning also applies to management work methods and manager roles,\nalthough it is somehow less understood. \"Can you play the violin? No, but I think I can\" --- this joke\nturns out to be common thinking in management. A qualified agent, who has mastered\nthe craft of a thermal technician engineer or even an HR problem engineer, goes into operational management\n--- knowing nothing about this culture, although there are many textbooks on the subject. \nAnd the result --- a huge number of managerial mistakes, the \"invention of clumsy bicycles\". Therefore, remember: **behind every**\n**method/practice/culture** **of work, activity/type of labor/engineering** **there is a textbook**\n**(often in the form of a regulation, instruction, corporate standard, online course, etc.), and** **by signing on to a role in a project**\n**you should at least flip through such a textbook** **for your method** (unless you work at such a frontier where this method needs to be created, in which case you will write such a textbook yourself for those who follow in your footsteps, for example, your employees).\n\nIf the terminology with the \"function\" is chosen, then the function is performed by the role/\n\"a functional object\"/\"a physical object as a role\". Or, the same thing, just in different words: role behavior is performed\nby the activity role (method/practice/function --- this is \"role\nbehavior\", you must recognize in \"role behavior\" a mention of\nmethod/way/practice/culture/style/work method). Or\na functional \"object\" suddenly gets called a functional \"element\", \nignoring that \"element\" means something indivisible further into parts. Or in an organization, \nthey will not use terms from the textbook/standard method \"configuration management for\nmechanical production\", but instead for their products, they will\ntalk about \"the working process of completing\" --- and it will turn out to be the same as\n\"configuration management\"::method, only some problems\nfrom the textbook/standard \"configuration management\" are not\nnoticed, and all the terminology is thought up on the spot, \nnot taken from the literature. Naturally, problems can be expected: it would be good to understand\nwhere those discrepancies with the textbook method come from and what to do with\nthe problems that no one has noticed yet, but which will certainly soon\nmanifest themselves --- and they would be better prevented.\n\nWords-terms are both important and unimportant! Just try each time to understand,\nwhat kind of concept is indicated by the term --- and from which\ndiscipline/theory/knowledge of which method is this concept, which variant/type\nof the general method uses exactly this term.\n\n**Knowledge/explanations** **are transferred from situation to situation in the form**\n**of descriptions** **in textbooks, corporate regulations, industrial standards**\n**\"normative work methods\"/\"norms** **of culture\"/\"norms** **of behavior\"::\"prescribed**\n**behavior patterns\"** **for** systems::roles/\"functional objects\"** (system runtime in its\nrole), not norms of behavior for various** **constructive/material\nobjects, chosen by affordances for performing the role** **(creation and development time of the system, runtime of creators).**\n\nBut if you are a manufacturer of constructs and expect that they will somehow\nbe used (that is, they are used as affordance for some\nsystems::role), how do you name these objects? Say, you produce a pump. And\nthe customer chooses from different affordances of changing water pressure: buy\nyour pump or use a water tower and pipes (and then the pump for the tower will be completely different)?\n\nIn case of producing some \"potential affordances\", you can\nuse the technique where the target systems are named by the role of their\nmain method of work if it is an \"animated agent\", or main\nfunction if it is something not very intelligent (for the pump --- named by\nits suction function, for the compressor --- by the function\n\"compressing/compressing the gas\", etc.). Systems are primarily\nconsidered as role/functional objects at the moment when they perform their role, that is, they are ready and\nfunctioning/functioning/being used, bringing benefit, by changing in the process of\ntheir work their working/operational environment/environment.\n\nFor the customer, your \"pump\"::\"main expected role\" can easily be\ncalled \"the antifreeze pusher in the second cooling loop\"::role, if the role\nassignment/function --- pushing antifreeze in the second loop. The pump factory sells \"the pump\", but the engineer who bought the pump\n(also can be an enterprise! \"Engineer\" --- this is a role that can be\nplayed by an entire enterprise!) --- renames it briefly \"pusher\", and\nthat’s normal. **Systems thinking allows not getting confused with different\nnames of the same system, moreover, for manufacturers\nof constructs of subsystems and creators of target systems, these names are different, this is a typical situation.**\n\nOutside the context of using engineering abilities, Masha is simply\nMasha::\"agent in the narrow sense\"/\"almost universal creator\". Masha can be many things, like a microscope that can\nshow small objects, but can also be used to crack nuts, drive nails, be used as a paperweight. Masha can do many things, much more than a microscope! But at the moment\nof performing the function of an engineer (\"Masha-construct plays the role of an engineer\"),\nMasha will be called by the role --- \"engineer\". And that’s normal, although we would\nimmediately require clarification for such cases (refrigeration engineer, electronic engineer, software engineer\n--- these are very different engineers. And you must definitely specify the method that Masha\nis engaged in as an engineer: which specific type of engineering this is, the more specialization can be determined, the better).\n\n**Systems are usually named by** **their roles, defined by** **their primary** **purpose, that is, by**\n**their most frequently performed function, what they do in the surrounding world. Imagine there is no target system** **--- what important would not happen if it is removed from the world,\nif it does not work? What** **roles** **in the current culture** **usually perform this**\n**\"important action, impossible without the removed system\"? Name the system this way.**\n\nWhen we name the microscope, we primarily mean that it allows \"seeing small\"\nat the moment when it is fully manufactured and works. If we thought that the microscope's main purpose was to hit something (nuts, for example), we would call it a \"crusher\".\n\nAs in any language, the oldest names have unclear origins and often refer to form (hammer, little hammer --- but the hammer itself is from the method\nof threshing/beating-free\n[[https://en.wikipedia.org/wiki/Threshing](https://en.wikipedia.org/wiki/Threshing)]\nbeating, based on the verb \"to thresh\", that is \"to beat\") or something else.\nBut if we are developing systems or want to understand something about systems,\nthen in the name we should look for not the constructive/material object\nrepresenting the system, but the role --- and the indication of the function/actions of this role.\n\nBut if the system is suddenly a human or AI-agent, or moreover\nan organization of people, AI-agents, and various equipment, usually very little can be immediately said about the purpose/function of such a system in its\nenvironment, for with intelligent agents as universal\ncreators, everything is usually complicated. And with the role behavior/functions of people and\nuniversal AI-agents, you will always have to deal separately and\nspecifically. But **thinking about people-or-AI-in-role and** **some**\n**microscope-in-role will be arranged in the same way!**",
    "ecbbe392a55b83234b7bdd90bc3197aa": "```markdown\n---\ntitle: External and Internal Project Roles\n---\n\n\"Say 'system' --- I mean the presence of creators::system and their project roles that create this system, and creators::system creating this system as part of some supersystems. Say project role --- I mean the system that is being created or operated by this role\" --- this is the very basics of systems thinking (system in its environment) at its intersection with methodology (system-creator, \"working by some method\"/\"in some way\"/\"in some style\"). We can specify further which exact systems (target systems, creators somewhere in the creation chain, supersystems, subsystems), which system creation projects have to be considered, but this does not change the essence of the reasoning.\n\nA project role (performed by an agent-construct for this role) logically appears in this reasoning before the system: if there is no agent playing some role to achieve its intention, then there is no one to highlight the system with their attention from the objects of the surrounding world. Conversely, if the system is highlighted as an object from the diversity of surrounding objects, then for what and who outlined its boundaries in the world this way and not otherwise? Why was they interested in the system at all, what system characteristics are important to such an agent, for invoking what method in whose role of this agent?\n\nOf course, project roles are not played by just any people/agents/actors for whom the system is just \"interesting\" or \"curious\" (as observers, but without the desire to lift a finger later). No, project roles are those who will, in principle, act in the physical world if they need this system (or conversely, it interferes with some of its characteristics). These roles are performed by real agents (people, organizations, AI agents) ultimately changing the physical world, and not just the \"world of imagination\"/\"mental world\"/\"world of descriptions\". Just as an \"observer\" in commonly understood physics does not change the world, he is not an actor/practitioner, so other \"observing onlookers\" --- these are not project roles, they are just passersby, they do not need to be made objects of attention in the project. Project roles are \"acting figures\", they come alive when played by actors as \"performers\"! And they affect the target systems and systems of creation, whose important characteristics they are interested in. They must be identified in the project and kept in focus during the reasoning about the system and the project of its creation.\n\nDogs bark, but the caravan moves on: the dogs here are not project roles, they do not affect the caravan. But if the merchant does not pay for the passage of the caravan, the caravan will not move on. The merchant is a project role; he takes an active/operational position concerning the caravan. Passing agents --- these are not agents with project roles. Project roles are agents who will not pass by, these are agents whose roles the project will necessarily hook or who will necessarily hook the project.\n\nUsually, many projects are associated with a system, it does not have to be just one project in the sense of classical project management, i.e., the work of one team. In one project of one team, the system can be conceived, in another --- designed, in the third --- manufactured, in the fourth --- operated, then resold, in the fifth --- continue operating, then in the sixth --- modernized, in the seventh --- continue operating, in the eighth --- decommissioned, but then still discover that the system development project needs to continue --- and a ninth project appears. A project role can be in any of these projects, for example, we already consider the project roles of people who will later operate the system when conceiving and creating it: roles and subroles of operators, roles, and types of system users roles. If we make a video game, we consider the player's role immediately, although there may still be many years before the game's release --- and it is unclear who exactly (which agent) will play this role, and there may later be millions of players.\n\nIn systems thinking, we regularly think about the future \"as if it already exists,\" which is normal for 4D extensionalism. Saying \"I don't know what the system will be because the system is not there yet\" is an ignorance of human engineering experience. **All system creation projects start with the system not yet existing, but already being considered!**\n\nThinking about how (methods/\"types of labor\"/\"work processes\") and by whom (what roles, actors in which roles) the system, barely conceived in its MVP, will be operated --- not only is it normal, it is simply necessary, this is where you should start thinking about the system! If there is no one who needs or operates/uses the system, then why make it at all?!\n\nAnd if it will be operated, then by whom, what project roles, who needs it, and what important characteristics does it have for them? The identity of the role performer (which specific agent will play the role) is not needed, it is not so important here, but the role itself must be specified! Simply put, you need to describe everything about Prince Hamlet in the play or a hobbit in a role-playing game even before the play or the gaming event itself, and it does not matter who exactly will later perform this role (\"performer\"), the character traits of the actor or player, and not \"acting role\"::role. The role is much more important than its performer. Although the skill of the role performer is important, yes. But it would be worse if it were a skillful performance of a completely different role! Remember the joke about the pigeon, speech therapist, gastroenterologist: we cannot even understand the appropriateness of an agent in the project if it is unknown what the agent should do, i.e., the method of work is unknown and therefore the agent's role is unknown.\n\nSystem creation and development projects are usually collective projects, and in these projects, agreements about systems are usually made to best meet the interests of project roles.\n\n**System boundary** --- this is the boundary of the place in the physical world occupied by the system at the time of operation/use/functioning. The system boundary determines which parts are included in the system (and therefore need to be designed and manufactured in the system creation and development project), and which are not included in the system but are included in the surrounding systems (and therefore can be expected to be already deployed by other agents not included in the project team).\n\nThis system boundary is primarily determined by the team of agents (people or even enterprises with all their computers and factory equipment) playing the project roles of system creators. The best culturally determined understanding of the composition of project roles is given in the course \"Systems Engineering.\" There they talk about the roles of visionary, developer, architect, creator of the internal engineering platform --- and each role has methods they use in their work. Of course, different types of systems (hardware, software, organisms, individuals, organizations, communities) use different types/variants of systems creation and development methods, so the roles differ. For example, for creating mastery::system, culture creators, methodologists, methodists, teachers are needed, and also a dean's office.\n\n**Internal project roles** --- these are the project roles played by the **project team**, and **external roles** --- all others, primarily concerning external systems relative to the boundary of the target system, i.e., systems in the working/operational environment of the target system and systems in the graph of the target system creation. For instance, external project roles may be in the project of creating the interior, which includes decorative clocks, and internal project roles - in the project of creating the clocks themselves. External project roles in the marketing department can create a clientele for the decorative clock creation project --- bringing teams of various interior developers.\n\nIn English literature, the term stakeholder is often used for an external project role (and in Russian --- the calque \"stakeholder\"), but be careful:\n\n-   Sometimes stakeholder means only an external role, sometimes --- any project role.\n-   Sometimes stakeholder specifically means the role, but often --- the agent-performer of the role, i.e., confusing Vasya Pupkin with the Prince Hamlet he plays. Sometimes they specify: stakeholder and stakeholder role, sometimes for the role performer stakeholder representative, especially when there are many role performers, e.g., there are 1000 users of a device, thus the person responsible for expressing the users' interests will be called a stakeholder representative. But often no clarifications are made, and then Prince Hamlet is asked how he slept between performances, and Vasya Pupkin is asked what he thinks of \"To be, or not to be, that is the question!\". This confusion with the concept of stakeholder is very common, so in our course, we avoid this synonym for project role.\n\nThe project team determines what (which parts) are needed in the target system and what (which parts) are not needed in its composition so that the system can fulfill its role/function/purpose in the environment and not cost prohibitively (more than external roles can pay for its creation), and then manufactures these parts and sets up the combined work of the manufactured parts. And external project roles determine the system's functions/purpose in its environment. Usually, your external project roles are some project roles within the client organization, but there are roles \"without organization\" (e.g., a computer game player, or a lone hacker, they are here on their own) and roles from other organizations (e.g., \"security officer\" from some state oversight). You can, of course, rename them as you like, but we do not recommend doing so, i.e., it is recommended not to rename the roles \"financier,\" \"developer,\" \"security officer\" in the client organization as one role \"user\" in your project. It is correct to leave it as \"financier,\" \"client developer,\" \"client security officer\" (this distinguishes him from the \"state oversight security officer\"). And remember that besides the roles in the client organization, many other roles should be considered in the project --- regulators, representatives of the general public, and even hackers, thieves, terrorists, and other malefactors (their interests should also be considered, but inversely: so they cannot achieve their goals).\n\nAll performing these internal and external project roles people/organizations/agents/actors/org units (even if each org unit plays several roles or several org units play one role) show resourcefulness and inventiveness in satisfying their interests --- each based on their agency intentions, occupying some project roles (also in different projects), and agreeing on important/interesting characteristics of the system and the project of its creation and/or operation for their working methods.\n\n**System in the eyes of the beholder**: if no one::role observes, i.e., if for no one's working method the system is needed, then there is no system, no boundary, no assigned/role behavior/function. **The system is subjective** **and exists** **as an object of attention only** **within the agreements** **of a specific project**. An engineering project exists as continuous negotiations of internal project roles, as well as internal and external project roles regarding reaching an agreement on what system project participants are making and how this system, by operating, satisfies the interests of external project roles. It does not matter that agents performing roles change during the project: Vasya-engineer quit, Masha-engineer replaced him, everything continues. And the project description in terms of engineering methods of work and the engineer's role description remains unchanged regardless of the construct change.\n\nSome agents in some roles agree on the boundaries of the system as \"A and B are included, C is not included,\" while in other roles in the same project, or in another project, the same people/org units/actors/agents can quite highlight the system from the surrounding world with their attention within other boundaries, \"A and C are included, B is not included,\" and also demand other values for the important characteristics of the system if this better meets their interests in those roles. **And this is normal, there are no contradictions here; this is** **simply the initial stage of collective activity:** **all project roles need to agree** **on what the system is that we conceive, create, operate, modify,** **decommission.** **And since** **all project circumstances continuously change during the project, it's impossible to agree \"once and for all,\" there must be continuous agreements!** **Agreeing** **on accounting for their interests, including the question of what the system being created and developed in the project** **actually is,** **will have to be done by roles,** **even performed by one person-actor. Since there are always many roles, it will be necessary to make decisions regularly to reconcile these roles' interests regarding important matters of interest/characteristics of the system and** **the specifics of conducting** **the project** **on creating and developing the system.**\n\nNo appeals to \"objectivity\" will help here, agreements must be made considering that subjects of interest for project roles are usually common, but preferences in characteristics values are different. One needs the system to travel faster (characteristic: speed, preference: faster), while the other needs the system to be lighter (characteristic: weight, preference: lighter). The first, to satisfy his interest, plans to equip the system with a powerful battery, which has a lot of weight --- and the second realizes that he needs to act urgently to prevent this! They immediately start negotiating. All projects are continuous negotiations of different roles with each other. Roles, so eliminating particularly obstinate employees often does not help: the kindest employees take on the role of the fired project member --- and it turns out that nothing has changed, the role interests still need to be considered (the interests of Prince Hamlet, not Vasya or Petya who play the role).\n\nDisagreed --- and the project immediately falls apart. Agreed --- and the project is successful (remember that a successful system is defined as \"everyone agreed on this system\").\n\n**System success today is determined not** **\"objectively,\"** **but subjectively ---** **by satisfying the needs (needs)** **of customers, users, and** **various** **other** **project roles, including agreeing with them the internal roles of the project**^[<http://sebokwiki.org/wiki/Systems_Engineering_Overview> --- Systems engineering (SE) is an interdisciplinary approach and means to enable the realization of successful systems. Successful systems must satisfy the needs of their customers, users and other stakeholders.]. Agents (people and also AI agents and their various organizations), playing various roles concerning the system and the project of its creation, must be satisfied --- success in this. One cannot determine the success of the system by looking only at the system itself. Both the system (its boundaries!) and its success --- are in the eyes of the beholder. Different agents and even the same agents (in different project roles!) can have different opinions about the system's success. So the task of creating the system above all --- is to agree between the project roles (it will look like the agreements of role performers: \"Masha agreed with Sasha,\" but it should be understood correctly that it is \"engineer agreed with manager,\" it is preferable to discuss this in roles, not faces). The task here is to propose such a system or a working method about which they will not need to negotiate, for it will immediately implement all roles' preferences.\n\nThe systems approach, systems thinking, starting from the second generation --- is also about agents creating systems in their various roles concerning the system, and not just about the system being created. The system is created as a result of all these agents' agreements. Agents' behavior in systems creation and development projects is not arbitrary but patterned/templated, determined by their culturally determined (most often understood as \"profession\") role.\n\n**The only option** **for \"objectivity\"** **---** **is well-organized subjectivity**^[Statement by G.P. Shchedrovitsky.], when all project roles (external and team) agree on what their system is and what they will get from it.\n\nIf some project role is forgotten, not accounted for, or someone who plays that role is forgotten when creating the system --- there won't be a successful system: some parts of the system will not be discovered, designed, or manufactured, and some needed work for the system's success will not be done, and this will be found out after the project fails.\n\nProject failure (that someone's interests are not taken into account) is bound to be discovered: this dissatisfied \"someone in the role\" is not just an observer; he is an actor! Some agent (one person or a huge organization), whose work by the method of his role is affected by the system or the project of its creation and development, will actively and inventively play this role forgotten by the project team, and his actions will become quite noticeable to the project team. Even if this is \"nobody and his name is nobody,\" a role performer with unaccounted interests can find influential friends or organize a press campaign: ignoring the agent-in-role is usually impossible, agents are extremely inventive and may also switch their roles to achieve the satisfaction of some role interest.\n\nJoin some business game where you need to improvise while sticking to roles --- you will be surprised by your inventiveness. In life, it's all the same, only unlike the game, it is not paid attention to: roles are played unconsciously, but in vain! If you understand that you are playing a role, the inventiveness of \"playing by role,\" the inventiveness of \"actor's etudes\" can be targeted and consciously invoked --- and it usually greatly contributes to success.\n```",
    "e0e9817e1d2e691934e1b804a31a7c72": "---\ntitle: Methodological Modeling\n---\n\nGraphically modeling something in this situation is not possible^[The impossibility of graphical modeling is discussed in A. Levenchuk's book, \"Visual Thinking. A Report on Why You Shouldn't Be Deluded by It,\" 2018, <https://ridero.ru/books/vizualnoe_myshlenie/>]. Here is an example of an attempt at such modeling: we start drawing for agent-1 and his intention, then add the second agent and his intention, mention his strategy/method and action plan, a couple of important characteristics and preferences of his first role, then add the second role of the second agent, and here we understand that the diagram is already complex and continuing in this manner further will only lead to confusion. But we haven't even drawn the methods by which the roles act! And the systems that the methods work with are not yet on the picture! And even with the already touched upon agents, intentions, strategies, action plans, objects of interest, and preferences, we fall back to listing the difficulties from the previous paragraph, realizing that we have just begun modeling!\n\n![](11-methodological-modeling-20.png)\n\nBut these are all important objects in the situation that must be considered. This is how methodological thinking works, which finds objects of missing types in the situation and draws attention to them, forcing us to reason about them. Without that, there will be no systemic thinking either (remember that important characteristics/objects of interest are characteristics of the most diverse systems encountered in the project, all these roles manifesting their interests work with systems).\n\nWhat is the way out here? Perform all mental operations in the mind? That's not an option either, as you can't keep all the systems and all the agents with their quickly bloating descriptions in attention. Therefore, the solution is in tabular (or even textual) modeling. There are many objects and their relations in the real world, but there are not so many types of objects in methodology (agent, intention, strategy, plan, role, important characteristic, preference, skill, and for now, we will limit ourselves to this set of concepts in methodology. We will consider the method of work as such, work, position, later on), and these types will be mentioned in columns of rather long tables.\n\nHow does this look in life? This will be discussed in more detail in the course \"Methodology\". There, it will be shown how to make lists from graphs, and then present these lists in the form of conveniently editable tables. The key to solving the problem of systemic modeling is to understand that the objects of attention in the project have types, and objects of types from our courses (types of meta-meta-model). From project objects \"from life,\" one must transition to types \"from the textbook\" and then think using these types from the textbook to understand what to do with objects from life.\n\nIn the course, we denote the type with the symbol **::** (double colon). In everyday speech, this would often be either \"type of object\" (\"agent Vasya\") or \"object-type\" (\"Vasya-agent\"), but we do not rely on entirely everyday language and show the classification relationship with the symbol **::**, first bringing the object, then its type. We do not say \"airplane system\" or \"airplane-system,\" in life we omit the indication of type; this is the norm. But why use the type indication at all if it is not indicated in life?\n\nA type improves understanding (Ford::car, Ford::President of the USA, Ford::founder of Ford Motors::company—the types significantly ease the understanding of word meanings), but most importantly, types help in modeling. Modeling is creating a model, that is, an object that in some important respects replicates the behavior (often in thinking, in computation) of the modeled object. This means that the model significantly compresses information about the modeled object, pointing only to what is important. Thus, types are used to point to what is important.\n\nIn a project, for each object/entity/concept, you need to figure out its type. If it is about some transdisciplinary (i.e., systemic, methodological, etc.) reasoning from our course, then in life you need to find the missing objects, draw attention to them—and do this in writing, \"systemic modeling.\" This is \"engagement of systemic thinking\" (if you don't write, you don't think! If you don't model, you don't think systemically!).\n\nMethodological thinking, systemic thinking, and all other types of thinking are ways to manage attention in a complex situation, to find objects for which it is convenient to discuss cause-and-effect relationships, to build explanations. All material about methods, roles, and agents is precisely the material about types that are somehow connected in the course text, with relationships written between them.\n\nSo if someone in the project is doing something (if they are not doing anything, do not pay attention!), then they are engaged in work by some method. What is this method/practice/culture/style? Are there other ways to perform the work, to get expected results faster and cheaper? That \"someone\" is thereby an agent in a role! What culturally conditioned role is this? When you found the role, go further in reasoning: the role performing some method of work will have some important characteristics/objects of interest, in which the role will have its preferences/interests, that the work method for this role would like to see implemented.\n\nThat is, if you see that someone is selling something (and the sale can be implemented very differently! You still need to guess that some actions of the agent represent a \"sale\"::\"method of work\"). Thus, you see the agent/actor/\"role performer\"/organizational unit as a seller::role. If there is a \"seller,\" then immediately look for the object of interest (price) and preference (the price should be higher). Then you can already propose your strategies (methods by which to act further) and build plans to implement them. For example, look for the second role of the agent (Vasya, playing the role of seller), or go look for another seller, or propose cooperation (discover that you need not to buy from Vasya at such prices but to become his dealer and ditch your previous project, that is, exit one of your roles, or even the project, and implement a completely different strategy).\n\n**If roles with opposing** **preferences/interests** **in one important characteristic** **of the system or project are performed by one** **organizational unit/agent/actor, then such a situation is called** **\"conflict of interest,\"** and this is a very common situation. Let's recall the proverb \"let the goat guard the garden\": the goat itself believes that it will balance the preferences of eating the garden cabbage and guarding the cabbage from being eaten. People from the outside will think differently. Conflict of interest is poorly noticeable from the head of the one carrying this conflict but is usually well noticeable to other participants of the project. To oneself (or a representative of the organizational unit—a organization with many people, but in a conflict of interest) one seems like an expert deeply familiar with the various conflicting roles and therefore making \"balanced decisions.\" But no, these decisions do not seem \"balanced\" to other participants in the situation! The goat, guarding the garden, surely makes \"balanced decisions\" about how much to eat from the garden and how much to save from any encroachment!\n\nPositive preferences in their objects of interest for project roles are not mandatory. Simply, **preferences** **of \"antagonists\"** **and \"anti-clients\"** **are considered in projects with the reverse sign**—thieves are not allowed to steal, killers are not allowed to kill, terrorists are not allowed to commit a terrorist act. At the same time, remember that in one project someone will be \"a damned spy and traitor,\" but the same person in another project—a \"brave scout, risking his life in a holy struggle.\" That is, this \"positivity of preferences\" is tied to ethical reasoning, more on this in the ethics section of the \"Intelligence Stack\" course.\n\nProject/work/activity/organizational roles are precisely roles; they are played, not \"immersed into.\" Agents realize role skills: safely enter a role, safely exit a role, stay in a role for a prolonged time. They never forget that they can change roles, that this is \"role-playing.\" **Vasya Pupkin, imagining that he is not playing Prince Hamlet** **in Shakespeare's play but that** **he is Prince Hamlet** **is a madman; when changing** **thinking about** **Prince Hamlet** **for Vasya Pupkin** **to thinking about** **engineer-architect** **or cardiologist for Ksenia Samoylovna, fundamentally nothing changes here.** **If Ksenia Samoylovna forgets that she is playing the role of an engineer-architect at work and imagines that she is an engineer-architect everywhere and always (a character, role), we will consider her insane.**\n\nPyotr Petrovich plays the role of a husband in the project of one system, a buyer in the project related to another system (and at this moment he can either continue playing the role of a husband if the purchase is related to the husband's role or the husband can disappear for this time—just as Prince Hamlet disappears while the actor playing him plays the role of Othello in another play, or even just sleeps at home, resting from the theater), a patient in the project related to the third system. If Pyotr Petrovich really transformed into Prince Hamlet, this in the acting profession is a sign that Pyotr Petrovich has gone mad and confuses himself and Hamlet. The same applies if a person at work forgets that he is playing the role of an engineer or manager: he has gone mad if he thinks that he is an engineer or manager! Roles are played, not immersed into!\n\nProject role, activity role, functional role, organizational role, work role, team role, cultural role, just role: you specify the role of some agent with different epithets, but this is not so important. These are all synonyms, with different clarifications you will emphasize various shades of meanings, this synonymy is of the same kind as the synonymy of methods/practices/cultures of work. We will remind about this synonymy more than once. And the role itself is not that important. What is important is that the functional object is considered at the moment of its functioning. A role is a system as a functional object, for a functional object it is important what changes the role makes in the environment, that is what this role does, what function/method/practice of work this role performs. The role is always considered at the moment of its work/functioning, we evaluate the changes its behavior makes in the surrounding world (that is, we evaluate, for example, by some checklist, which objects in the environment of the system-role changed from one state to another).",
    "97ba97cbc0285855a60f9bb3ce279f55": "---\ntitle: Roles of analysts and engineers. Positions\n---\n\nThe roles of creators are performed by various org-link agents:\nactors/practitioners/doers/engineers/workers. They all make the world a better place by creating and developing various target systems. Doers are not “observers-witnesses” as commonly understood in physics! Even in physics, it is accepted that there are no observers who do not change the world. To “observe” something, i.e., measure it, the measuring instrument and the measured system must interact. In physics, an observer doesn’t necessarily have to be an agent in the narrow sense (a person or AI who can plan), but under minimal physicalism—a molecule that measures its environment^[We've previously cited this work, but to reiterate: \"Minimal physicalism as a scale-free substrate for cognition and consciousness,\" 2021, by Chris Fields, James F. Glazebrook, and Michael Levin <https://chrisfieldsresearch.com/min-phys-NC-2021.pdf>]. Moving forward, we will discuss situations where an “observer” or even “analyst” refers to an active agent who conducts measurements (“observes”) and even makes some judgments about the situation but does not take measures to improve it. Remember, the result of the observation by the observer or analyst (although they might be very active, e.g., climbing a tall pine to look at the world through binoculars) will be a description, an “analytical report,” after months of intensive work. This report usually contains an assessment of the situation but not a strategy (a method that helps improve the situation), and moreover—there is no constructive action plan for changing the situation (the “recommendations” part of the report is rarely included in the “analytical report,” often delivered verbally or in a separate informal document), and crucially—aside from the report and optional strategy recommendations as a method for forming action plans/works with realistic resources, there are no active actions by the agent to improve the situation (i.e., no actions to physically alter the system’s state, possibly along some creation graph); everything is limited to “projects” describing a possible future without actively working to make them a reality, and the descriptions themselves may well be utopian, with responsibility for implementing the utopias lying not with the suggesting analyst.\n\n**Observers/analysts** **typically** **do not change the world,** **though** **they may have** **a subject of their** **role-based** **interest** (**a characteristic they find important in objects they observe)** **at the level of** **“interesting,”** **and may even have** **preferences** **in this point of interest,** **but** **the observer role agent does not intend** **to be** **anything more than an observer, without changing** **the observed situation for the better.** **Observers** **have no intention** **of actively changing the world. They view projects as if** **they were happening** **on television. From the analytical work conducted by specifically designated agents-analysts, typically,** **nothing** **in the project** **changes, plus there’s the broken telephone effect in** **translating the thoughts** **of real** **doers by outside observers/viewers/analysts.** In football, many spectators watch the game from the stands with curiosity, but the results depend only on those running on the field and kicking the ball, as well as those who “made” these players (coaches, masseurs, sports doctors). Indeed, many of these “stand/sofa analysts” know better what the ball kickers should do and how to prepare teams! But their opinions hardly influence anything, though they produce most of the noise in the stadium, while players usually run silently and shout to each other very rarely. Coach’s shouts are barely heard.\n\nIn this sense, “analysts” usually resemble household “fans”: they don’t need to do anything, just understand something and prepare an “objective report.” In rare cases, they also make “suggestions” for subsequent “approval.” These “suggestions,” later approved by someone, unmistakably indicate that we are dealing with an analyst, not an engineer/doer. An engineer issues “project documentation,” not “release proposals” needing approval by another engineer acting as “manager”! If a matter involves a designated analyst rather than an engineer, then:\n\n-   The analyst has no “skin in the game,” they only “propose,” meaning their proposals are usually of lower quality than an engineer-doer who puts their skin in the game^[Nassim Nicholas Taleb, “Skin in the Game: Hidden Asymmetries in Daily Life” (2018)]. The analyst may be called an “engineer” by title, but we’re considering the work method, “what they do, what changes states in their work, how this state change occurs,” to define the role, not by title. Only the work method defines the role! If they “prepare proposals,” not \"implement accepted engineering solutions,\" or “design,” it’s an analyst. Have you “proposed” something approved before implementation? You’re an analyst.\n-   Analysts often closely observe a situation and then relay their extremely condensed description (model) to developer-doers. This leads to the broken telephone issue: how descriptions can significantly distort the situation, how model reading can introduce errors. Labor division matters, but “analysts” like “requirements engineers” vanished because the broken telephone problem was severe (more on this in the “Systems Engineering” course).\n-   It’s incredibly slow, tied to cascading communication awaiting responses from managers and subordinates at multiple levels. “Proposal-approval” instead of independent “solution release” on four levels, with a one-week review time for proposals adds three weeks to the project. If “give proposals” is mandated top-down, add three more weeks for four levels, totaling six weeks. Four levels—general, deputy, department head, and executor. Large organizations see even more delays, making it slow.\n\nSometimes, an analyst's declared lack of preferences in interests (an “objective,” investigatory view) signifies they lack an active intention to change towards a preference, lacking a combined **synthetic** role, if not implementing the solution themselves, then at least synthesizing its description. **Synthesis**—reverse of decomposition/analysis, typically means designing affordances assembled into a system, i.e., inventing and creating the system “physically” as per the synthesized project/design. Engineering includes both analysis and synthesis, without synthesis—it's not engineering! **In our “Systemic Thinking” course, we intentionally exclude “system analysis”!** **The course is for doers: engineers of various systems (cyber-physical, organisms, personalities, collectives, communities) changing the world for the better!**\n\nA classic “analytical report creator” analyst might need time and resources to “observe,” conduct “measurements,” survey people. For instance, running from the stands to interview players on a football field. This can be productive: they might accidentally ask something the player never considered—bringing unintended benefits! But often not, if this “analysis” is not followed by “synthesis.” If there’s “synthesis,” the role isn’t named “analyst,” but something else.\n\nTo turn an actor playing an analyst role into a truly proactive actor-doer/practitioner, simply assign them an engineering **position**. A position is the name of an org-link performing varied activities, implying resource allocation (e.g., a director manages diverse roles and resources).\n\nSimply renaming the “analyst”::position to “engineer”::position usually suffices. Detailing the culturally-conditioned name of the engineering/managerial role helps: reassigning the former analyst::position to a new “engineer-architect”::position or “engineer-developer”::position. Then the engineer (former analyst) begins not “proposing” to others assuming responsibility for his work, but independently “resolving,” making engineering decisions, and issuing them under his own name (not manager’s), assuming responsibility for implementation. Positions are about responsibility (meaning of “responsibility” varies). Positions also elevate status. Buyers prefer negotiating with a manager, not a salesperson::position. This was resolved by renaming “salesperson”::position to “sales manager”::position. In consulting firms, “sales manager” may become “vice-president” (as in IBM consultancy divisions, with numerous vice-presidents). Ignore titles; look at roles by work methods. What an agent does determines their work method, role. Name positions by core work methods of the main role agent is hired for, expressing \"responsibility,\" \"reward level,\" \"qualification\" with \"chief,\" \"senior,\" “leading,” etc.\n\nSeparate positions and roles: A person in an engineer position might spend days playing a manager role, and vice versa, a manager might handle engineering tasks long hours. Elon Musk claims he spends 70% of his time solving engineering tasks, playing a technical engineer role (cyber-physical systems engineer, commonly called “engineer” in lay terms)! Musk is an agent/actor, with founder roles as an engineer of new organizations and manager-organizer, operational manager roles (he’s CEO of Tesla, SpaceX, Twitter/X) taking less time than engineering cyber-physical systems!\n\nPositions are described by job instructions, roles by work method descriptions. Work methods are typically outlined in textbooks/regulations/standards, detailing theories and method tools usage. Which textbook (format—sector and corporate standards, instructions, regulations—is irrelevant) shapes the thinking of an engineer position holder? If it’s “operational management,” they play the operational manager role, their position matters only for administrative reasons like pay schedules. Positions matter for power: authority over own and others' work, equipment and resource allocation. But for intellectual effort, positions take a backseat to roles. **Agents think and act as actors in roles,** **so roles, while** **positions only** **“implement authorities.”**\n\nIf an analyst position holder says, \"I think the rocket should have three stages instead of two\" (a cloaked term for “proposals” needing subsequent “approval”), an agent/entity must make a decision on this opinion. If an engineer::position says, “the rocket will have three stages,” that’s a decision, needing no further approval. For analysts, approval is necessary. Do you feel the situational difference? “Proposals” vs “decisions”: how you name the boat determines its sail, the same averments have varying directive status based on the role and position cultural conditioning.\n\nCultural-conditioned—drawn from common meme complexes, not specifically invented. If you declare “analysts” as full engineers, don’t delude yourself, it’s like calling “white” genuinely “blue.” You may inform staff, but culture will override your naming by tomorrow morning.\n\nThe analyst role, combined with the decision-maker synthetic role within the combined engineering role conducting analytics and synthesis, becomes a full project role. If “analyst” proposes something as a recommendation—it’s not an “analyst,” it’s a “synthetic,” needing formulation, making engineering decisions (not just understanding), and that’s not analytical but synthetic work!\n\nPositions often derive from typical roles. If the position is “analyst,” don’t expect synthetic work. If it happens, it’s “despite” cultural agreements. This doesn’t negate “systems analysis” methods, but the role “analyst” should preferably be assigned to the same person doing system/module synthesis, enjoying engineering synthesis decision-making authority, not just “responsibility and authority for checks and understanding.” **Activity approach:**\n**“understood/explained—the** **take action, i.e., seriously treat understood/explained** **and change the world accordingly!”**.\n\nIf an actor playing a project/doing role dislikes or likes something in the system/project concerning the system, or any significant characteristic of interest/preference, they start acting proactively, “probing by action,” not merely “actively observing/measuring,” but realizing their preferences, trying to change the situation with their role methods. Additionally, an actor may switch roles, pursuing a strategy/activity for intention realization^[This refers to the “pragmatic turn” in philosophy,\n<https://plato.stanford.edu/entries/pragmatism/>]. If an actor in a role does nothing to realize their interest/preference in an important characteristic, they’re ignored in the project. They're a passerby, non-project participant, with no project role, performing no role-based actions, not working in a creation chain project affecting the target system or system(s) graph creating the target system. If someone walks past a design bureau window, they clearly have no project role, even if we see them (especially if unfocused, attention wandering to random objects). But if a potential system buyer passes the window, capable of contributing money to the project, we’ll try to attract and address their interests.\n\nUsually, agents (e.g., people) practice their usual activities/labor in habitual roles, when a new system appears or may appear in their life—this system offers opportunities (e.g., new “features” for users::role, or team members::role who welcome a new project to continue system development as a series of endlessly improving versions) or obstacles (playing competitors or political/religious idea supporters roles—they’ll actively play and creatively implement their preferences!). Agents encountering a new opportunity-system or threat-system retain focus on it—acting, changing the world, either utilizing the opportunity or eliminating the threat.\n\nCertainly, material on “analysts” vs “engineers” suits the “System Management” course more, but it aptly illustrates the relationship between work methods, roles, and positions. For positions and roles, Kozma Prutkov’s saying holds true^[[https://ru.wikipedia.org/wiki/Козьма\\_Прутков](https://ru.wikipedia.org/wiki/Козьма_Прутков)]: “If you read ‘buffalo’ on an elephant’s cage—don’t trust your eyes.” Then what to trust? By deeds (work methods) and used terminology in those deeds, we know the role. Position—uncertain what real authority accompanies a prestigious title. Even a “main doer”::position might lack real power, merely “proposing” for “approval.” Remember, guards wear suits now, and those they guard wear tees. Don’t judge by attire, not by titles; judge by work methods/cultures, assess terminology use of theory/discipline/knowledge methods in speech.",
    "a1df94f850d08eb788dc69f5d6b930dd": "---\ntitle: Cultural Determinism of Project Roles\n---\n\nWe are primarily interested in thinking techniques, and particularly in the preservation of experience — transferring experience from situation to situation, from project to project. Thinking occurs not so much with facts as with knowledge: abstracted from facts about specific physical objects, knowledge about the most important. The \"physical body\" abstracts a vast number of situations in which the laws of mechanics apply: from a spaceship flying to the Moon to a basketball being thrown into a hoop. \"Target system\" abstracts many situations in which some system is created and developed — from a smartphone launch project to the construction of a city block.\n\nWhen intelligence encounters a situation it hasn't seen before, it needs to highlight some focal objects of attention in this situation, which would allow it to latch on and try some familiar thinking moves that offer the highest expected probable effectiveness, and not just random moves with deliberately low effectiveness. These thinking moves should help find explanations for what is happening in the situation until new information can be obtained and adjustments can be made. Systems thinking is part of this general knowledge of the methods of the intelligence stack.\n\nKnowledge about working methods and the roles that utilize them (methodology), the normative division of labor, i.e., the normative division of engineering into separate engineering methods and assigning them to different agents in various roles during the creation and development of systems (systems engineering) — is also part of this general knowledge. This knowledge is significantly enhanced by a broad labor horizon — understanding how the project division of labor can be organized for different types of systems being created (the division of a type of system engineering into types of methods of this engineering and then assigning roles that perform these types of methods to different agents). For instance, in hardware and software engineering, roles such as visionary, developer, architect, and internal production platform engineer are distinguished. In education (personal engineering) — similar roles, but operating by slightly different methods, characteristic of creating and developing mastery as a target system. These roles include a culture bearer, author of educational materials, curriculum architect, and dean's office. In management (organization engineering) — businessman, organizer, org-architect, administrator, whose methods work with the organization as a target system. Of course, all these roles along with their working methods are further divided, into even more specialized roles and methods.\n\nKnowledge of an effective and efficient working method and the proper execution of this method in a professional/activity/project role, successfully tested by various agents in numerous projects — it is culturally conditioned, meaning it is not invented anew in each specific situation. The systemic approach directly appeals to the knowledge of civilization, i.e., to the culture accumulated by humanity. The term \"culture\" has two main meanings:\n\n- Method of work, \"culture as cultural behavior\" in a long synonymous series of \"method/mode\n  of work\"/culture/style/practice/activity/labor.\n- A set of human (and now more than human) knowledge about the world and material/constructive objects (\"material culture\"), of artificial (created by people, and now by robots) origin.\n\nHere we are talking about the systemic approach using the accumulated knowledge of humanity about working methods and the roles that follow them, not inventing everything from scratch in each project. If you do not know what methods are needed to achieve certain results and hence which roles of agents you will need — Google it or ask an AI assistant. For example, if you need to feed someone not at a restaurant but on-site — that's catering, and if you need to host a festival — that's event management, and universities even teach this. You can, of course, come up with something on your own, but it will be amateur catering, an amateur festival. The difference lies in the fact that professional role execution is stable and, despite various inevitable surprises, it will yield results, whereas amateur execution is unstable, sometimes matching the level of professional execution, but upon slight changes in the environment — completely failing. Professionals do not make rookie mistakes.\n\nUtilizing the systemic approach implies having some activity/labor/application horizon: if you are not familiar with the culture, you will not see which roles people play in relation to the project — their important characteristics will seem unimportant, and preferences will seem like whims, personal traits of the agent, and not recognized as civilizational, culturally conditioned, role-related objects of interest and associated preferences in the states of these objects of interest. If you do not know \"from the textbook\" that the roles of a developer and architect typically conflict, you will be surprised why \"production conflicts\" flare up around some agents performing these roles for various systems (although their positions may be named entirely differently). Depending on the communication style, these conflicts will either escalate into personal ones or not, but for those unfamiliar with modern systems engineering and management, these conflicts will be inexplicable. However, if you are familiar with the explanations of modern development methods and the roles therein, you will know what to do. If you know how to turn almost any customizable software into a universal modeler — you will know how to quickly and easily perform organizational modeling in an organization. If you don't know — success will be purely accidental.\n\nIf you encounter Vasya::agent, who is concerned with the structural strength of the system::characteristic (construction strength:: \"important characteristic\"/ \"object of interest\"), it is unlikely that Vasya is performing management::method/practice in the role of manager::role. Talking to Vasya about deadlines:: \"object of interest\" and budgets:: \"object of interest\" may not be productive, not the right project role and its method of work. Conversely, if someone refuses to discuss construction features but is willing to talk for hours about resources for work, these resources' cost, and approximate job completion times — that's a manager.\n\nA labor horizon should be enough to reliably recognize these roles in work projects, and at a fairly detailed level! Just as you wouldn't confuse a gynecologist with a dentist, thinking of them as \"just doctors,\" you shouldn't confuse different types of roles not only in medicine but in all other methods/practices/\"work cultures\"/\"types of engineering\"/activities. If you lack a methodological/labor/activity/practical/cultural/style horizon, you will have enormous difficulties in systemic thinking: you won't be able to figure out the roles in your project.\n\nProject roles (professional roles, i.e., by methods of work in the project, not by positions!) are not invented. They are culturally conditioned. **If one is not** **familiar with** **labor/production culture, it will be tough: the actions of people in the project will seem** **unpredictable and random. But it is not so. People's actions** **(i.e., work by** **some methods)** **happen** **\"in roles,\" they are absolutely not random, they are easy to predict.** **If you know Shakespeare's play, you won't be surprised that the Moor strangled someone after asking about evening prayers —** **the Moor is not a person but a person-in-role, he acts not out of inspiration and situation but according to his role. There is a pattern in his actions, and it will definitely manifest. If you don't know Shakespeare's play —** **you will be surprised at the very appearance of the Moor and then by every line of dialogue.**\n\n**Activity/practice/labor/engineering/method** differs from random individual operations and actions with objects at hand, randomly selected as preferred states. Activity/practice/labor/engineering/method — is targeted similar/repetitive/patterned actions/works of various agents, which we consider as actors with role (i.e., typical, by role) targeted behavior following their preferences in objects of their role/functional interest.\n\nEngineering here stands in the general synonymous line because it is associated with world-changing, i.e., creating new or developing/modifying existing systems. Notice that the word \"work\" is intentionally omitted here, and there \"activity\" is not synonymous with work, it's synonymous with \"actions.\" This difference between methods/practices/modes/cultures (how to do something) of work and the works themselves (the instance of doing it with its resources, separate from \"how\") was briefly discussed in our systems thinking course but will be elaborated in the methodology course. Activity/practice/labor/engineering are synonyms for the method, the mode of work execution; it does not refer to the use of resources during work; it refers to the behavior pattern, \"what types of objects interact and how to achieve desired states of needed objects as a result.\" Works are associated with \"operational management\" as \"enterprise operational engineering,\" and for non-living systems — operational engineering, where it doesn't matter how the system functions but its specific operating time, the instance of the system itself (if replacement during repair can be discussed) and other aspects of asset management, also a method of management. Works are logistics and resources (to ensure everything is on time and not lost), work methods are to ensure everything is done correctly, substantial engineering consideration.\n\nAlso, when discussing methods/activities, we still talk about creators in terms of creating some target system, often people, and with people, everything is highly complicated; agents are complex in conversation. When it comes to inanimate target systems, the discussion becomes simpler, and instead of long synonymous lines, people often talk about functions and functional objects. Sometimes functional objects also have synonyms, often called \"tags,\" because in hardware engineering, functionality tags are often attached to objects (e.g., such codes are taken from ISO 81346).\n\nTalking about agents as actors who follow the method in their roles (or play practical/labor/engineering roles — simply different lexical ways to say the same thing) is very similar to role-playing games, which are popular among rather narrow hobby communities of role-players^[https://en.wikipedia.org/wiki/Role-playing_game], although the first association is usually theatrical plays. The difference is mainly in the fact that in theatrical plays, all characters/roles speak lines written by the author at specified moments (following the play/script), while in role-playing games, characters/roles determine their actions and lines themselves based on the current situation and some principles (the same script, but defined more freely). In Shakespeare's \"Hamlet,\" all the lines of \"Hamlet, Prince of Denmark\" are known, but in a role-playing game \"medieval Denmark,\" the actor/player playing Prince Hamlet composes his lines himself based on the circumstances. In any case, his Hamlet will not be interested in airplane ticket prices to fly to England; that contradicts the principles of role-playing. \n\nThe principles followed to perform their method/activity/practice/labor by various project/activity/organizational/labor/professional roles are prescribed in textbooks and taught in universities. Sometimes these principles are written in international, industry, corporate standards. Sometimes even in regulations, protocols (for example, medical ones), work instructions. Usually, they don't train for a position, since a job position will require performing multiple roles! They teach executing work according to a specific method, playing a particular role, following a role's script/pattern! How these roles are then distributed across positions is another question.\n\nAgents performing the work methods of their project roles do not do whatever they want in projects; their actions are not arbitrary! They improvise, of course, but their improvisation is like actors' improvisation in the theater: whatever they do, it turns out that these actions are somehow conditioned by their role, not entirely made up; they cannot be \"any.\" If you think the engineer is wrong in their preferences, you will seek to replace the performer of this role — and it will be no surprise to find that the accommodating new performer of the role, after understanding the new project, suddenly states the same objects of interest and exactly the same interests in them as the previous engineer role performer! **The role proves more important than the personality of the performer!** **As the mastery of executing the work method used by the role grows,** **all agents-performing this role** **with the most diverse personalities** **become similar.** At low mastery, they simply do not follow the work method, i.e., do not play their role, hence making many rookie mistakes. Niels Bohr defined professionals as people who do not make rookie mistakes. And here the question is, what is a \"rookie mistake\": in the 17th century, doctors and chefs (agents performing their roles) were not required to wash their hands or work in sterile gloves, but in the 21st century — it is mandatory, unwashed hands — a rookie mistake, moreover, such a mistake should result in firing the agent from the profession, not allowing them to work.\n\nAbout methods/activities/\"types of labor\"/practices/ occupations/ cultures/styles of work, we think \"in classes/types,\" work by certain methods is performed by classes of agents (people/organizations/agents/actors in their roles), for example, people in the roles of engineers, artists, kindergarten teachers, lovers, astronauts, teachers, athletes. While playing roles, they engage in methods of work described in textbooks (instructions, corporate standards, regulations, codifications), realizing role preferences in important characteristics of various systems (both target systems for the project and creator systems). When these people engage in other \"methods of work\"/activities/practices/ occupations/ cultures/\"types of labor/engineering,\" they play other roles, manifesting different role interests in various objects of interest. If you want to get a response from some chatbot, you should not just ask questions but specify from which role concerning which work method you want to hear the answer. If you ask a manager how the project is going, you will hear \"we are two days late with the current version's delivery,\" and from the engineer, you will hear \"we are changing the second circuit pumps, they failed the tests\". We always remember: “\\-- What is two plus two? --- Are we buying or selling?”.\n\nIf you want to understand the \"objects of interest\"/concerns and associated preferences of some agent (person, organization, AI-agent), you need to know the culturally conditioned (meaning prescribed in textbooks, general for all, not anyone's specific!) objects of interest and preferences/interests in them for the role they are playing. This agent will perform some activity/practice/occupation/labor/method of work to achieve their desired preference in their object of interest. If it's a financier, they will strive to avoid a cash gap; if it's a manager, they need to get the product on time — and a potential cash gap will concern them only to the extent that they need to negotiate with the financier who doesn't want to take credit, which the financier will need to discuss with the businessman (e.g., his role may be played by one or even several \"founders\"), who doesn't want to take extra risks.\n\nYou should have a labor/activity horizon, be familiar with multiple work methods, recognize many roles that follow these methods/protocols/scripts in life, know their objects of interest/important characteristics of systems and projects and preferences/interests they will implement in projects regarding these objects of interest. Our courses in systems engineering, personal engineering, systems management (organization engineering) will help, but these courses alone are certainly insufficient. At the same time, \"industry experience\" may not help if \"twenty-year experience is a one-year experience repeated twenty times.\" Horizon diversity is essential, after all, having knowledge/explanation/theory about varied situations.\n\nA labor horizon will give you the ability to see in all agents not first and foremost people-actors with their \"character traits\" and \"personal peculiarities\" (or \"corporate cultures\" with some anthropomorphization of the organization's behavior, as if it's a person, or likening an AI-agent to a human), but specific work methods that these agents employ in their roles, ways agents conduct work. Only after understanding what the agent is doing, determining the role they perform, can one discuss whether the actor playing this role is suitable — whether it be a human, organization, AI-agent, or even a simple machine, thus evaluating the agent's qualification in the role.\n\nLiterally: first, you understand that it's about \"brewing coffee\"::method, next you say \"coffee is usually brewed by a barista::role\", then look at the qualification level of Masha or Petya as baristas (to what extent they possess the barista's skills, that in difficult situations they can brew coffee without making rookie mistakes).\n\nIf agents do not perform any work methods (do not do something according to role, \"by method\"), i.e., if they are inactive, they should not interest you: do not waste your attention on them. A \"spectator\" who does not play in your game, does not participate in your performance, does not want to pay but is keenly interested in the performance without any intention to participate — is not a spectator (an agent in the external project role of \"spectator of the performance\"), they are just a passerby.\n\nSystems thinking is managing attention, focusing on what is important, ignoring what is unimportant. Roles performing their work methods concerning the target system or creators of this target system — that's essential, and agents not performing work by roles' methods, so they affect the project (i.e., the system-creators in their project activity) and its target system during its operation — are not important, we ignore them.\n\nAdd ethical considerations here: if your system or project for its creation harms some agent, so that they are half-dead and cannot object, such an agent must be considered in the role of being affected by the system: for example, the role of \"poisoned by our system\" and the method of performing this role — \"suffering.\" Do not ignore the roles of those agents affected by your system and its creators! Culture/style of work “quiet death of all who passed by our pipe” will be less noticeable than the culture of \"a tough fight with the creators of those who passed by our pipe to make them move away everything they created from our pipe,\" but you must track such behavior, identify the role of the worker in this culture “affected by our pipe” (another expression for \"all who passed by our pipe,\" considering the transformation from \"passing by our pipe\") and take their preferences into account.\n\n**Positions, personal** **qualities, personal** **preferences-not-by-role, all this turns out insignificant compared to playing some culturally conditioned role, including the mastery of playing this role, the mastery of** **applying work methods** **by the role. Thus, you need to think first about the role** **and** **its methods/practices/\"work processes,\"** **and only then about the position and** **personal qualities of the agent on that position, playing the needed role.**\n\nSystems thinking is managing attention, managing figure-background distinction. You need to look at Ivan Ivanovich::actor yelling loudly and emotionally at the meeting, and perceive not his personal speech but his speech as reciting the role's text (yes, it's hard, you need to train Attention: to hear the role's text and respond to this text, not the emotions of Ivan Ivanovich in his shout. Of course, for the conversation you need to track the actors' emotions as well, but without a substantive review of the role's replies, you won't find a way out of the situation that caused the shouting).\n\nA labor horizon should be enough to recognize Ivan Ivanovich's role who’s shouting, attention should be enough to keep this role in focus, not Ivan Ivanovich's personality or position. This role vision should not wander, attention should reliably capture the role vision! And then you need to answer this role, not the person or position. This is even more challenging: looking at living person Vasya Pupkin and responding not to him but to Prince Hamlet, whom Vasya Pupkin plays — it doesn't matter how well he plays. You need to respond to the role! Systems",
    "d4291103c64e0041632ac8ccb8b19bd6": "---\ntitle: From the Target System Through the Method of Work to the Role of Creator, but Not the Other Way Around\n---\n\nFor simple systems, such as the construct \"hammer,\" the **veracity**::\"intelligence characteristic\" is extremely low (more details in the course \"Intellect Stack\"). For human and AI agents, the intellect is stronger/more universal, and the veracity is much higher (they do not need to be \"reassembled\" hardware-wise to change their construct; they can be taught certain behaviors by giving explanations—\"reflash the hardware to a new algorithm\" rather than \"rebuild the hardware anew\"). Additionally, such agents can utilize various affordances to include in their composition as a system; these affordances for performing methods of work by creators according to their algorithms/theories within the creator system are called **tools/tools** (in the case of measuring instruments—**instruments**).\n\nRecall that \"agent\" has two meanings:\n\n1. Broad—anything autonomous that is in a nonequilibrium stable state (from an atom or molecule to a cat, from a cat to an urban agglomeration with a couple of million residents and numerous buildings and structures filled with household and industrial equipment).\n2. Narrow—an agent in the broad sense but specifically one that is capable of planning actions that lead to a sharp deterioration in its condition to then improve its condition (say, spend all resources on purpose-oriented bow and arrow creation to hunt more effectively later). Usually, this word \"agent\" refers to people and/or technical systems with sufficiently strong artificial intelligence (AI agents). And here there are constant debates about whether the intellect of AI systems is sufficient to call them agents in the narrow sense, or they are agents only in the broad sense.\n\nWe will further talk mainly about agents in the narrow sense: humans and AI. And since we will now speak mainly about terminology, not concepts, the \"strength of intelligence\" here will not be very important. You will understand it yourself; it is simpler to talk about the function of driving nails for a hammer or the culture of driving nails with a hammer. Most likely, in the first case, the role will be the hammer, while in the second case, the role will be some agent that includes the hammer. But even for the agent, we can say that its role is to drive nails (whether by hammer, microscope, or electric nailer, it's up to their discretion). How to know what to say, how to understand the spoken word? From linguistic intuition. We just remember that \"function\" for \"agents\" most often sounds like \"method/way of work\"/\"type of labor/engineering\" etc. However, thinking about role and construct is the same! Role and its function—\"why does this agent need to be a system,\" construct—\"which system-agent as material/construct is taken affordance for the role.\"\n\nIt is always necessary to clarify which specific \"method/way of work\" is chosen to perform its role as an agent with strong intelligence: due to the versatility of the agent, there may be surprises. When we say \"surprises\"—it usually means \"an unpleasant surprise,\" a discrepancy with expectations. For instance, an inexperienced worker in the role of a carpenter will perform the method of \"binding boards\" without distinguishing screws, nails, glue—included, for example, driving a screw with a hammer (and in the first seconds after doing this work, it may even seem that the boards are securely fastened with the screw!). At the same time, no one will likely use a microscope as an affordance for a \"nail driver,\" but humans and AI will easily, even if they do not know how to perform work according to some method. Patient/sick::role at the doctor's::role:\n\n--- Hello, doctor::role, I have a stomach ache.\n\n--- What did you eat yesterday?\n\n--- I ate a pigeon.\n\n--- Did you eat a naked pigeon?\n\n--- Yes, I caught, plucked, and ate a naked pigeon.\n\n--- Did you eat the pigeon’s head?\n\n--- Yes, I ate the pigeon’s head.\n\n--- Did you eat the naked pigeon’s head?\n\n--- Well, I ate a naked pigeon’s head. So what’s the problem?\n\n--- Hm-mm.. Frankly, I am a speech therapist::role, but I helped as much as I could!\n\nYou cannot understand roles if you do not consider their functions::behavior. And let's repeat: the behavior regarding the way to achieve changes in the environment for different agents will be called very differently: functions, practices, organizational processes, methods, ways, types of labor, etc.\n\nIf \"the one called a doctor\" (i.e., an agent taken as a construct for performing a function/method) is skilled in speech therapy::method and not gastroenterology::method, the outcome of the situation will be approximately the same as in the joke. Do not forget to set types while roles are defined by their function, i.e., behavior that predictably changes the state of certain objects in the environment (in the case of agents' roles—this is the method/way/practice of work, activity, culture), not by construct/material (for example, an agent considered as \"just an agent\"). You can’t predict Vasya’s role if you don’t know which objects Vasya changes in the environment and by what method! **Without understanding what method the agent works with, roles cannot be understood!**\n\nAn additional source of confusion with roles is modeling subroles by two variations of hierarchy relations coded by the prefix \"sub-\":\n\n- Regarding composition for the role. For instance, a speech therapist is a superrole for a doctor (since the speech therapist also performs a doctor’s methods of work, such as any doctor, \"they all studied 'medical science' in university,\" but in addition, the speech therapist has a method of work for establishing speech, so the general composition/set of methods/practices/functions/ways of work of the speech therapist is larger than the methods/practices of the doctor; the doctor here is a subrole for the speech therapist. This conveniently extends to the agent’s skill: a speech therapist's skill consists of the skill to establish speech and the general skill of a doctor, so the doctor is a subskill. In skill, the same relations exist; the training of a speech therapist is longer than that of a doctor; here, the doctor is a subskill.\n- Regarding genus-species relation. If we take \"called a doctor\" (i.e., described by the classification \"doctor\"), the speech therapist appears as a \"specialization of a doctor.\" In this view of the skill, it is not specially discussed; all doctors have some specializations, and the speech therapist is simply a part of doctors specializing in establishing speech. Here, a subrole is a species, the doctor is a genus, and regarding specialization, the speech therapist is a subrole of the doctor.\n\nWe recommend relying on the line of reasoning related to the function/\"method/practice of work\" of the role object (role), the skill of performing this function by the constructive object (agent, e.g., a person or even an organization)—and therefore consider \"subrole\" as a node in the hierarchy relative to the composition/compound/\"part-whole\" for the skill. It is convenient for engineering (e.g., planning training).\n\nIn everyday life, you will often encounter classificatory descriptions where the term \"sub-\" indicates specialization. Another term, also multi-meaning, is \"meta-\", which has many different meanings regarding some levels^[<https://ailev.livejournal.com/1053878.html>]. We use it when talking about meta-modeling in the sense of \"a higher level of objects in the hierarchy regarding classification.\"\n\nFor the composition relationship, we use \"sub-\" as in \"subsystem,\" and \"super-\" as in supersystem. In particular, a subrole is literally a \"subsystem,\" and a \"superrole\" a supersystem (systems are usually defined by their roles in the supersystem, subsystems by their roles in the system, and roles by their functions::behavior). Should we use separate types of prefixes for specializations? You can use \"species\" to indicate a species for a genus, for example, \"a speech therapist is a species of doctor, do not confuse it with a gastroenterologist,\" \"a salsero is a type of dancer, another type is tanguero, do not confuse,\" but classificatory schemes are more or less arbitrary in highlighting important objects (but good for highlighting various, not necessarily important objects^[[https://en.wikipedia.org/wiki/Classification_of_Animals_(Borges)](https://en.wikipedia.org/wiki/Classification_of_Animals_(Borges))]), and we will rarely use them.\n\nBut in life, they are often used; in everyday use, modifiers \"sub-\" and \"super-\" are also used for them, which can cause confusion. How to understand? Only by context: encountering \"sub-\" and \"super-\", ask about what type of relationship they denote? What will be the skill for performing the practice—is it greater or lesser? Another criterion: when talking about specializations, they usually mean a choice of mutually exclusive roles—say, a speech therapist and a gastroenterologist. In composition/assembly, by definition, roles are added, functions are added: functions of a gastroenterologist::role and/or speech therapist::role are added to the function of a doctor::role. And the agent's skill of a speech therapist and/or gastroenterologist is necessarily added to the skill of a doctor (a doctor is someone who has mastered the academic subject \"medical science\").\n\nIf it is a specialization hierarchy concerning \"genus-species,\" nothing needs to be added; only a description is needed—and one can discuss \"choice\": speech therapist::species or gastroenterologist::species for doctor::genus. In any case, pay attention when working with subroles and superroles—does it mean the system (and there will be a composition relation, everything is physical) or a type of system (and there will be some descriptions of specialization, often showing contrast). \"Tiger\" and \"mouse\" do not enter the composition of \"beast,\" they are simply \"species of beast!\"\n\nIn Krylov’s fable \"Trouble, if the pies begin to bake the shoemaker and boots stitch the pastry-cook,\" it is a typical metonymy. Let's set the types to clarify what is meant: \"baking pies\"::method of the \"pastry-cook\"::role, \"stitching boots\"::method of the \"shoemaker\"::role. But in Krylov's fable, the shoemaker::\"agent with the skill of the shoemaker,\" meaning the shoemaker is not a role but a construct/material for the role of \"pastry-cook,\" mistakenly used as an affordance for \"pastry-cook\"::role. That is, the \"shoemaker\" is not a role! The same goes for the pastry-cook, who in Krylov’s fable is not a role but a construct/material for the role of the shoemaker.\n\nIn real work projects, there will be the same confusion between roles and constructs: a construct successful as an affordance for one role can be assigned to perform another role. And if the conversation in terminology confuses roles and constructs (this is probably inevitable!), problems will arise. A good step here would be to switch from the language of roles to the language of functions (well, or in the case of people and AI as creators, to the language of methods/practices/culture/style/ways of work, types of labor/activity/engineering, etc., the synonymy here is extensive).\n\nHowever, Krylov, the fabulist, does the same: he confuses roles and constructs but explicitly mentions the methods of work \"baking pies\" and \"stitching boots,\" indicating the subject of the method of work role (an object changing state during work by the method: pies, boots) and the name of actions to change the subject of the method (baking, stitching). And who performs these actions with the subjects? A role embodied by the construct/material.\n\nA function/method is the behavior of an embodied (when it is embodied/realized by some construct/material, i.e., during the use/exploitation of an already created in the physical world) system as a pattern of changing the states of some objects in the environment (and these objects sometimes call the subjects of the method). For creator-systems, in their environment, we find target systems of their creation methods (methods of changing the state of subjects in the environment, ultimately leading to the creation and development of systems). Speech therapy changes the state of speech skills, gastroenterology changes the state of the gastrointestinal tract, medicine changes the state of the body. Or, speech therapy::method changes the state of \"speech skills\"::\"target system,\" \"gastroenterology\"::method changes the state of \"gastrointestinal tract\"::\"target system,\" medicine::method changes the state of the body::\"target system.\" This is all clear without the concept of \"role performing work by method.\" This role is only needed when you are concerned with the agent construct/material that will embody the role. But if you start with an agent at the moment when the method of work and its target objects and actions are unknown, you will automatically end up in the situation of a speech therapist with a headache or a pastry-cook with boots: you have already chosen the agent, but what will the agent do—you do not know. Most likely, the agent's skill will not be the one needed to perform work by the required method when the method becomes known!\n\nTherefore, in the case of household services, you need to understand first whether it is stitching boots or baking pies, and in the case of doctors—whether you need to adjust speech or remove stomach pains. **You need to follow the line of reasoning** **\"target system—methods** **of its change—** **creator role—construct/material of the creator as an affordance (e.g., an agent with the** **skill of performing** **the method), but not the other way around!**\n\n**We identify the role by its method, not** **the method** **by the role!** **If besides the role name, it is unclear what exactly it does** **(i.e., which objects it transfers to what states by which method)—clarify!\nA role without a method/practice is** **nothing!** **The method/culture/style/strategy/activity** **is defined by the objects that change their state** **and actions performed with these objects to change their states!**\n\nIf we consider the simpler case of a non-living target system that changes systems in its environment during its exploitation, rather than intelligent creator-systems and their methods of creation as methods of changing the state of different systems that then output a target system, the essence of the reasoning is the same: **always from the** **target system as a role and its function in the environment** **to the selection of** **affordances/\"suitables for the role\" from some constructs/materials.** **And never the other way around!** **If you do not know what your system does during exploitation, then you will not know what to make it from and how to design it during creation.**\nOnly the term has changed, \"method\" to \"function\"—the essence of the reasoning remains the same, thinking about animate and inanimate objects has remained the same.\n\nOf course, these discussions about the target system and the systems of creating the target system can be extended to a chain:\n\n- **first understand the role and function of the target system in the environment, \"what it does\" (time of exploitation/use/operation of the target system)**\n- **then understand the construct/material that will be the affordance for embodying the role performing the function (time of creating the target system)**\n- **then understand** **the methods** **of making the construct/material (methods** **of changing the state of the construct** **of the system** **from raw materials** **to the state of a** **ready** **and working** **target** **system)**\n- **then understand what roles of creator-systems will perform these** **methods**\n- **then understand what agents as constructs/materials for the creator roles will perform these** **methods** **of creating the target systems.**\n\n**And never the other way around because if you do not know what you want to get in the end, i.e., do not know what and how the system should do with its surroundings, then you will not know what materials to take for making the system and how to process them, and if you do not know which materials to take and process you will not know who with the necessary skill and tools will be able to take these materials and process them to get a successful working target system.**\n\nWe just mentioned the \"mantra of system thinking,\" a constantly recurring pattern that guides the reasoning of a system thinker in a specific direction. Use this as a checklist, ensuring that all steps in your thinking about a work project follow this mantra.",
    "c47fab15f1a14ed9dfbb49e996bf944e": "---\ntitle: Second and Third Generations of the Systemic Approach\n---\n\nFor many years in the systemic approach, it was believed that systems were \"objective\" regarding their purpose. For example, an airplane — clearly, everyone understands what kind of system this is, what its purpose/function is! Or a radar — no disagreements on why it's needed and what its environment is! Or even a lab mouse studied by biologists — no need to specially discuss its purpose/function, right?!\n\nThe systemic approach was presented as a method to model the most important aspects in this \"objectively existing system\" — which also seemed obvious, except for a little clarification and numerical expression. Nothing subjective, \"pure science,\" quite formalizable. Textbooks on the first generation of the systemic approach were easily recognizable by their abundance of mathematics. If a textbook on systemic thinking/approach contains many formulas, it's a sure sign that it is an exposition of systemic thinking from no later than the 1970s. And the more biology and \"self-organization,\" the earlier the book.\n\nBut in the late seventies, systemic thinkers noticed that engineering, as opposed to simple physical and biological systems, always involve creators-humans in terms of their creation and development. This was mainly due to the shift from studying naturally growing (biological, \"natural\") systems to systems engineering — where radars and airplanes did not grow by themselves in the forest or field but had to be created by someone, by other creator-systems. And these creators had to make these systems for something needed by someone else (customers), that is also for people (there were, of course, no AI agents at this time). The larger the engineering project, the more people it involved, the more it was necessary to negotiate the \"why make this system,\" considering various human interests, making the \"objectivity\" of understanding the system's purpose cease to be obvious. The purpose of the system turned out to be the result of many people's agreements.\n\nPeople (individually, in teams, enterprises, and extended enterprises — that is, many enterprises united within the framework of a major contract for the creation and development of a target system, such as a nuclear power plant) gave systems roles in certain environments (larger systems), clarified the functions that these systems had to perform in their environment. Without creator-people there was no system, just some \"object\" without any clear definition (since no one assigned it, no one paid attention to it, no one needed it for their activities, no one could clarify its boundaries, and any fanciful descriptions of such an object could not be discussed).\n\nSystemic thinking cannot apply to systems that no one is interested in; there would be no one to apply it, no one interested! In \"hardware,\" software, education, and training (personality engineering), management (enterprise engineering), and various other projects, it turned out that their target systems are not \"objective,\" they are subjective! They are defined by agents (in a narrow sense, \"intelligent agents capable of planning,\" people, and AI agents) who play roles relative to the various project systems: constructors::role, users::role of these systems, victims::role of these systems, and more.\n\nThe version of the systemic approach that appeared from the mid-seventies to the mid-eighties of the 20th century, which accounts for systems being created and developed by other creator systems often involving people, was called **Systemic Approach 2.0 (\"second-generation systemic approach\").** **It involved less mathematics and more discussions about people. Besides describing the target system, it became important to describe the creator-systems of this target system.**\n\nThe roles of agents relative to various (target, subsystems, suprasystems, creation systems in their long chains and graphs of creation) systems turned out to be extremely diverse.\n\nThe role in participating (helping or harming — from the system's project role or from the system's project role) in projects of conceptualizing, creating, modifying, operating, or destroying the system was termed \"project role\" (stakeholder role, interested party, actor). These project roles are performed by agent-actors/actors/actors (a term from the use case method but also a widely used term). In systems engineering, the term stakeholders appeared often for agents::construct, though sometimes the term stakeholder is used to denote the role itself; thus, they confuse the stakeholder-actor and stakeholder-role, in which the actor is currently involved.\n\nThe activity, labor, cultural, practical, engineering (you may have noticed that there can be many synonyms here, \"project role\" is just one of them) roles, construct/material systems of which are generally cultural-conditioned — by their activity pattern/type of work/type of culture/practice/type of engineering/method/work mode/function, etc. It's unlikely that anyone would do the job by some method/style/practice/function for the first time in the world, so the method of work and role are probably named somehow already; hence, one should not invent new terms but use the existing names of the method and role from the language. For example, if someone::agent-construct (e.g. John Smith) engages in unauthorized data access, this activity is called hacking::method, and he is called a hacker::role.\n\nIn the early versions of this new (i.e. from the 70s) systemic approach, in which systems were made by people, and not \"objectively\" existed and evolved on their own, project roles considered were only those impacting the system and its associated project, so much so that it could not be ignored (e.g., ordering the system's creation, paying for the creation — neglecting such a role leaves no funds for the work!). Later, it was amended: those who are influenced by the target system and its creators in the project framework are also considered project roles — this includes not only those who may step on your foot but also upon whose foot you step (or may step)! Thinking concerning people in the systemic approach became more \"Newtonian,\" less \"Aristotelian\" (\"finger presses on the table, and the table presses on the finger\"): people interact with systems, not just act on systems!\n\nSimilar arguments about the \"observer\" in physics (we provided references to such research in the previous section) and arguments about active perception in biological systems developed by Karl Friston's group^[<https://www.activeinference.org/> --- an institute developing active inference ideas as practical/proactive reasoning/inference in various systems.] gave a new turn to this line of thinking in systemic thinking. It turns out, it's not just about human beings as \"conscious beings,\" but about a way of reasoning where systems can seemingly relate to other systems — and people, as rational beings, can indeed relate to non-living systems, other people, human organizations, and anything else, but this ability to testify (i.e., measure something) to the existence of other systems and even of one's own system (self-evidence, determining/measuring one's state, often examined in Fields and Glazebrook's works) seems, due to panpsychism in a minimal physicalist variant, inherent in all systems! **All systems can be regarded as (though in varying degrees) practical/proactive/agentive/reasonable and even intelligent/conscious!**\n\nThis \"all systems\" includes not only animals and further plants, bacteria, or some computer systems but also organizations (for ants, it's an ant colony — and we referenced work evaluating the \"consciousness\" level of an ant colony as a whole compared to that of individual ants, for humans it's a project team, an enterprise with many projects, and even communities and societies with many enterprises, and we mentioned astrophysics work considering humanity together with Earth as a \"living entity\").\n\nBiologists have long been discussing the \"problem of the individual\"^[<https://plato.stanford.edu/archives/win2021/entries/biology-individual/>], as it's not clear which system (or object not reductionist to a system, although usually a system or at least types of systems) in nature should be seen as the main subject of evolution: genome? The organism developed from the genome? Population/family/pride/pack (male and female — this is no longer an organism but a population)? Population in the habitat? These are very different systems! And all are alive (to some degree) and conscious (to some degree), so when considering the influence of some systems on others, it is necessary to account for not only the roles of individual people but roles of entirely different systems! The thesis is very unusual, but the literature shows that this thesis allows for productive discussions of such situations, which are otherwise incomprehensible if humans are regarded as exceptional in agency, the sole representatives of \"agents in a narrow sense.\"\n\nThe second generation of systemic thinking brought in human-creators because we moved from physics-biology to engineering, and without it, it was no longer possible, but if humans as agents were considered exceptional in the systemic approach, we would lose scalability in discussions. The Systemic Approach 2.0 (created from the mid-70s to mid-80s of the 20th century) counts a history of 40 years by the early 2020s — a significant term! But it proves to be a systemic approach of the scale of one organizational project and the lifespan of one human project. This greatly narrows the framework of system consideration.\n\nMore and more thinkers are transitioning to discussing universal creators, not necessarily humans and collectives of humans. An example can be the research program of David Deutsch on the development of constructor theory^[<https://www.constructortheory.org/>]. A feature of the English language: for Deutsch, it's creator/builder, not \"constructor\" from a design bureau or metal \"constructor\"! A creator::system changes the environment in a certain way while itself remaining unchanged and retaining the ability to change this environment in this way repeatedly. The simplest \"creator\" is a catalyst molecule, a more complex \"creator\" is a robot with a universal computer inside, and even more complex — a human, but even society appears as such a \"creator.\" Deutsch's creators can participate in creation chains (remember that in physics, systems were taken as already given, in biology, they ate-drank-grew by themselves, but in engineering, creators::system were needed to create target systems), and creators can, if they have the corresponding knowledge/program (a person and even a factory have a universal computer, theoretically equivalent to Turing's machine) repair and change themselves, not just the environment. Thus, Deutsch's creators are quite suitable:\n\n- For discussing physics (Deutsch's main idea was to propose a type of scale-invariant physical object allowing discussions of both the micro-world with quantum physics and the macro-world with gravity theory, where scale invariance is critical)\n- For discussing engineering (any machine — creator! And human — creator! And factory — creator! The difference being there are \"simple creators,\" but there are universal creators theoretically capable of creating anything not forbidden by the laws of physics, creating tools for creating this \"anything\" and creating similar creators to scale up their creations)\n- For discussing life as continuous system complexity (we mentioned Vanchurin, Wolf, Katsnelson, Kunin's work on this — the idea that dissonances between system levels lead to increased organizational complexity, called life)\n- For uniform discussions of creation chains and graphs in systemic thinking, where these chains can include machines, humans, organizations of humans and machines, and AI agents.\n\nCurrently, many works likely belong to **Third Generation Systemic Approach, Systemic Thinking 3.0**^[<https://arxiv.org/abs/2310.11524>]**.** Works on the third-generation systemic approach emphasize scale invariance in system sizes (from quantum to cosmological) and time (from femtoseconds to billions of years, to consider quantum-mechanical systems with their fleeting processes and cosmic systems with their billions of years, necessary for life evolution).\n\nThe trend is for humans not to be highlighted as something special in descriptions of the physical world. Explanations of humans' special role, such as \"human — that sounds proud!,\" or \"it's our species, we must be its patriots!,\" or \"only humans are intelligent, they are the kings of nature!\" — are poor, as reliable explanations of the surrounding world or the creation of truly complex systems cannot be built on them. Given the emergence of AI agents and the acceleration of genetic engineering on Earth, these explanations become obsolete. Science and the scientific method begin to be replaced by arbitrarily taken \"ethical\" statements.\n\nProblems with these explanations of the world as a \"picture of the world depending on its description precisely by living people\" lead to proposing more and more works discussing physical and biological issues based on scale invariance in systemic approach concepts. Terminology is being sought: people are replaced by \"agents\" (you've noticed this trend in our course text), and now, even \"agency\" turns out not to be primary — different systems have different capabilities in what was related to \"agency,\" meaning they are all reasonably conscious to varying degrees, with different memory capacities and modeling abilities, varying computational capabilities for action planning, different applicability. In any case, current attempts are to describe the physical world as scale-invariant in space and time descriptions of diverse systems, not \"a human world as perceived by humans as traditionally viewed last century.\"\n\nGoals of de-anthropomorphizing world descriptions in language and thought (final departure from anthropocentrism^[<https://ru.wikipedia.org/wiki/Антропоцентризм>]):\n\n- Moving thoughts and language away from specific system levels of \"human\" in the evolution of the universe. If we have multi-level evolution, a coherent language to discuss the problem of the individual in biology must be ensured, talk about individual multi-levelness, have a name for the \"evolutionary unit\" (discourse on genetic and memetic evolutions, replicators, genes, memes). And one can thus understand \"individual,\" \"agent\" (in the broad sense), IPU (information processing unit)^[<https://www.pnas.org/doi/10.1073/pnas.2120037119>] — it is the same! A molecule can also be an individual/agent/IPU, a human-as-one-organism, even a society!\n- Moving from parochial/parochial (specific, for the current situation of humans on Earth) thinking to a general physics-based view. Astrophysicists and mathematicians — are physical systems, albeit highly complex, and countries — are also physical systems, although more complex than astrophysicists and mathematicians (whose roles played by people, although occasionally by AI agents. These roles could be played by research institutes of human astrophysicists and mathematicians along with AI agents involved in these institutes).\n- Identifying transdisciplinary reasoning along the line of \"inert matter\"-being-\"rational personality\"-organization-community-society. In terms of simple physicality, these are creators/constructors, and in the realm of intelligent beings, these are agents and multi-agent systems. Terminology may differ, but definitely not \"human,\" while creators become universal creators, universal constructor^[<https://www.youtube.com/watch?v=40CB12cj_aM>], i.e. potentially anything (theoretically anything! Like Turing's universal machine can theoretically perform any computations if discussing something mathematically computable) transforming substance into target systems, if not forbidden by the laws of physics. Constructor theory, multilevel evolution, active inference, and agency approach in philosophy^[<https://plato.stanford.edu/entries/agency/>] mostly work in this direction.\n- Considering not only animals and humans but also cyborgs, artificial intelligences, along with their equipment for altering the physical world, extending to their organizations/collectives and communities, even societies and the whole \"agenthood\" (if within anthropocentrism, we would have said \"humanity\").\n- Transitioning to a new praxeology^[<https://en.wikipedia.org/wiki/Praxeology>] (a general theory of purposeful action, approximating methodology), sociology, politics, economics, jurisprudence: overcoming numerous issues arising when discussing dissonances between different systemic levels in society of humans and non-humans alike, including accounting for distributed computing and actions within firms, markets, working with resource pools (ownership and collective ownership), including computational/thinking resources and resources for improving the world (by varying standards of this \"betterment,\" recalling system contradictions of different systemic levels).\n- Unlinking the problem of attention (consciousness) management from specific human traits, discussing not only humans but those combined with animals and computers, including robots with sensors and actuators/effectors: narrow-sense agents as universal creators/constructors with certain capabilities for modeling and planning, of varying nature, including their organizations and populations: teams, firms, ecosystems, communities, societies, and also peer networks of agents in swarms and many similar settings, considering the heterogeneity of participants in these agent/creator organizations.\n- More productive discussions on ethics (extropianism^[<https://en.wikipedia.org/wiki/Extropianism>], transhumanism^[<https://en.wikipedia.org/wiki/Transhumanism>], bioethics, AI ethics, issues of society's subordination of people and non-humans, society's subordination to humanity, and the like) amidst infinite biological and technological development and the presence of many systemic levels with unavoidable contradictions between systems of these levels and mechanisms akin to \"frustration\"^[<https://en.wikipedia.org/wiki/Geometrical_frustration>].\n- \\... and much more, which becomes easier to discuss by moving away from strict adherence to a single systemic level \"human-individual.\" Such adherence not only yields a \"Ptolemaic model of man\"^[<https://ailev.livejournal.com/1390574.html>], but also a \"Ptolemaic model of the world\" solely around the human species, despite their declared extraordinary rationality. Moving away from this parochial \"for humans on Earth\" model towards a more general, non-anthropocentric, scale-invariant one, based on the continuous evolution of the universe (part of which is Darwinian evolution of life on Earth, and today's non-Darwinian techno-evolution) is necessary.",
    "c77065876030497e45505fba55c07e67": "---\ntitle: 'Thinking About Agents (Humans and AI): First and Foremost, They Are Role Performers'\n---\n\nOf course, in real life, we directly see primarily the performers::constructive --- specific actors::agents playing roles, not the \"roles\" themselves. But while discussing the play or role-playing game, we exclusively talk about roles, unless we're talking about the qualification of the agent, i.e., the quality of following the method of a particular agent, the quality of maintaining oneself in the performance of the role. Here, the agent's skill in executing the method is important, but so is the strength of the intellect, including the collectedness within the intellect to sustain oneself in executing the method the agent's role in the project must engage with.\n\nWho says the phrase \"to be or not to be\"? Prince Hamlet, or Vasya Pupkin? At the moment of playing/performing the role, they are the same object, just called differently, and we pay attention to different properties of this object based on this. When talking about the \"character\"/role, we focus on the text and plot (of the play, role-playing game, project to create some system, not much changes here when moving from a precise play \"by Shakespeare\" to improvisational role-playing with the Prince in a role-playing game, or the improvisational playing of a business architect in organizational development projects), and when talking about the \"performer playing the role,\" we focus on the quality of the performance and the availability of the performer::resource at the moment of the play/\"passing the game\"/\"flowing of the work project,\" that is, the moment of role-playing (hence, all these different concepts end up being the same indication of the time of role-playing, \"exploitation/functioning of the agent as a role performer\").\n\nWe can always point out to Vasya Pupkin that he misunderstood the role in the game or project (stricter in a play—\"poorly learned the role\"), or plays someone else's role and in various ways indicate, \"you're wrong, Vasya,\" if we know the play, or role-playing game, or the plot of the work project he is playing. If Vasya's plot and role are unknown, we can't understand whether Vasya is right or wrong in his actions, \"is it according to the role\" or \"that's not allowed!\" Helping a person hold their role and play it effectively — that is leadership. If the leader does not know the role and its method of work, no persuasion to \"work well\" will correct Vasya: he will do something very well, but entirely unnecessary for the project, and the leader (who doesn't know what is needed) won't track it. If a ship does not know where it's going, any wind will be unfavorable. If the leader does not know which role to persuade Vasya to work well in, and Vasya himself does not know this role and is incompetent in the method unknown to him, no persuasion will be effective. First, the leader needs to know the role of the actor he is persuading, understand the method of work for this role, and then leadership towards the agent-actor (role performer) will become possible.\n\n**System thinking** **therefore** **requires an activity-based** **horizon** **(a minimal horizon is given in courses \"Systems Engineering,\" \"Personality Engineering,\" \"System Management\") for recognizing work methods** **and roles** **of workers by these methods** **in work project circumstances.** In particular, discussing from which role the leader takes the understanding of the method of the role's work he \"persuades\" an agent to execute and what roles are generally there — exactly in these courses, while leadership as a method of leader's work is discussed in \"System Management,\" and the leader as a subtype of teacher is discussed in \"Personality Engineering.\"\n\nIn 1997, A.Tyukov highlighted the following activity areas: politics, religion, philosophy, art, science, education, healthcare, physical culture and sports, technology, design, commerce, finance, law, the army, material production, and \"yet-to-be-formed enlightenment\"^[<http://psyhoinfo.ru/programma-sozdaniya-obshchestvennoy-professionalnoy-sfery-prosveshcheniya>]. Since then, several decades have passed, and huge questions arise regarding this classification. It is clearly very anthropocentric and reflects some ideas about state structure. Previously, it was normal, but now it is understood that the bases for considering methods in their fragmentation into smaller parts and highlighting alternative options may be entirely different. However, the choice of a specific classification (what types and kinds of methods exist) is a \"terminological dispute\" and is not significant; offering other classifications is not very productive. Although we ourselves propose some \"typology\": we classify methods by the type of evolutionary complexity of systems they deal with: inert substance, cyber-physical systems, living beings, agents in the narrow sense, organizations (collectives of agents), communities, societies. Then one can unify the most diverse methods of creating and developing systems into methods of engineering, finding much in common in the methods of very different projects.\n\nFor example, it can be noticed that the work methods (activity/practice/labor) of a visionary in engineering projects, a cultural promoter in educational projects, and a businessman in organizational construction projects are very similar; these are all methods used by the theoretical role of \"Schumpeterian entrepreneur\" from the textbooks of the Austrian School of Economics (not to be confused with the everyday meaning of the word \"entrepreneur,\" but specifically \"Schumpeterian entrepreneur\")! And then it becomes easier to identify such a role and adapt its work method for a variety of projects. This approach of unifying all methods as methods of engineering (creating and developing successful systems) is what we apply in our courses.\n\nMore importantly for the horizon is that \"yesterday's horizon\" doesn't mean \"today's horizon.\" Many different new methods of achieving certain necessary world states have emerged and continue to emerge, while an enormous number of obsolete methods/practices/cultures/activities/types of labor have vanished and continue to vanish every day. For instance, one can hardly find cashiers who count on abacus beads in stores anymore, though it was once mandatory! And the role of cashiers as such is disappearing; the wallet is rapidly becoming the smartphone. In engineering, it's increasingly challenging to find design engineers working with 2D-designing, a clear marker of old production order reserves; such production should be seen as museum exhibits. Modern enterprises operate quite differently. **It is necessary to have not simply a horizon as \"extensive experience with old** **work methods, knowledge of the old set of roles,\" but a horizon of the modern state** **of work methods and active roles by them.**\n\nWithout a horizon in methods/culture/activities/engineering/types of labor, there is no systems thinking, as it is transdisciplinary, aiming to unify the role-based thinking for these separate activity areas. So one must be able to recognize these roles within projects.\n\nWe recommend having horizon knowledge of at least the following work methods in the modern multi-level world, sorted by systemic/evolutionary levels (called \"levels of organization\" in biology):\n\n-   Discussions on \"engineering for the entire universe in general\" are still purely theoretical (living gods creating worlds have not yet been encountered or found traces of), but we will state it for completeness.\n-   Civilizational engineering in the universe, including our and alien civilizations as a whole. There are activities already happening involving study and sometimes even projections of cosmic-scale changes (e.g., Fermi\n    paradox is actively discussed\n    [<https://en.wikipedia.org/wiki/Fermi_paradox>],\n    there are projects to detect\n    \"technosignatures\"\n    [<https://en.wikipedia.org/wiki/Technosignature>],\n    and even discussions of technical solutions for the energy issues of civilizations using the maximum amount of energy from nearby stars — this is genuinely cosmic-scale engineering,\n    construction of Dyson spheres\n    [<https://en.wikipedia.org/wiki/Dyson_sphere>]).\n-   Development of the \"anthroposphere,\" or in layman's terms, improving humanity, including its tools and the entire living environment. We::humans are still the only ones on a small globe and it would be good to change all of humanity for the better (including protection from asteroid dangers, extinction due to technological catastrophes, growth barriers due to ecological constraints, etc.). Unfortunately, there is nothing good to show along the line of conscious world change, despite organizations like the UN supposedly working on it, but techno-evolution and biological evolution continue — the Enlightenment, which began with Voltaire and Rousseau, still continues\n    [<https://ailev.livejournal.com/1574477.html>].\n    The most significant change here is the advent of AI agents, whose participation status is unclear, but due to which anthropocentric/parochial world descriptions now need to be replaced by less anthropocentric ones. In our course for 2023-2024, we carefully replaced \"people\" with agents, highlighting that the development of the anthroposphere doesn't necessarily involve only humans.\n-   Public activity, which is done by public figures, often called \"politicians.\" The methods of \"social\" (that is, with communities and societies) work based on\n    normative\n    [<https://www.encyclopedia.com/social-sciences-and-law/sociology-and-social-reform/sociology-general-terms-and-concepts/normative>,\n    <https://plato.stanford.edu/entries/logic-normative/>,\n    <https://plato.stanford.edu/entries/economic-justice/>,\n    <https://plato.stanford.edu/entries/rationality-normative-utility/>,\n    and so on.]\n    (that is, engineering) economics,\n    sociology, political science, or without these theories, using the method of \"trial and error\" (in the systems engineering course, it is mentioned that engineering can be both scientific and non-scientific). The subject of the work method (activity/practice/labor/engineering) at this organizational/evolutionary level is the society in which the worker/engineer/practitioner using the method does not know the counterparts by face, as there are too many of them, does not know the interests of these counterparts, as they can play very different roles. Yet, society can still be sufficiently organized, i.e., have some sort of management in the form of divided or combined legislative, judicial, and executive authorities, and these organizations through the subordinated armed organizations can force everyone else to follow the orders of a few agents (not necessarily humans!), i.e., can set norms of social organization and demand their enforcement. There can be a variety of societal engineering goals: setting boundaries on \"their\" territory (not necessarily on Earth) and counteracting their disappearance in aggressive environmental changes (say, wars with other societies) or changes in their organization (say, seizure of power by a religious or health fanatic, or dictator, and their subsequent conscious or unconscious work on destroying this society because of some irrational beliefs). The objects of engineering at this level also get mixed up: \"society,\" \"people,\" \"nation,\" \"country,\" \"state,\" \"citizens.\" Projects of communism construction, empire creation, just attempts to ensure prosperity at least on the level \"we have fewer starving people, there are more elsewhere,\" attempts to establish different variants of \"democracy\" with different divisions of power — these are precisely engineering projects of this systemic level.\n-   Cultural construction, community engineering, engaged in by cultural figures (including engineering culture, political culture, managerial culture, not necessarily figures of arts or hobby culture). A community as the subject of engineering/construction/development — definitions of subculture, counterculture, community, community of practice, learned society, school of thought from Wikipedia (look them up): all talk about one and the same thing, emphasizing different aspects in different languages, using different terms. We can also speak in different languages, emphasizing different aspects, but about the same object \"community.\" In Russian, this will be subculture, counterculture, community of practice, community of learned (figures, “learned/educated in some craft,” not \"scholars/researchers\"!); “invisible college.” But one can also talk about a tribe (very fashionable!), and a \"municipal formation\" like “a village where everyone knows each other,” fellow-countrymen of former (or even current) members of one community in another society. We orient ourselves to the Dunbar's number [https://en.wikipedia.org/wiki/Dunbar's_number (150, as much as human biological memory can hold), but with modern computer tools, human memory quickly grows, and discussions about this number are becoming less reliable. In Mordokniga, there is a limit of \"friends\" to 5,000 people as the number of acquaintances with whom a person can at least somehow be familiar and maintain relationships not only with their own memory but also with computer memory. But this can be a much larger number. For instance, the number of cyber-physical systems engineers who joined the International Council on Systems Engineering in 2022 is over 19,000, which means these people consider themselves members of the systems engineers community, thus about their role interests are roughly known, but it does not mean that we are talking about a traditional organization creating a specific target system. The staff headquarters, however, deals with community construction as a target system. It's easier to think about communities not as organizations of community members but as organizations where community members play their roles—if they all have the same activity, then they are in roughly the same roles in different projects, which determines their commonality. Then some \"project office\" as an \"internal consulting organization\" becomes the organization for project managers' development, develops the project managers' community. And then the Dunbar number is less significant. It should also be noted that promoting a product, service, some preferred work method with its knowledge and tools is community creation. Promotion (marketing, advertising, sales) as creating clientele (a community of clients) is here. On the one hand, to create clientele, one must perform personal engineering, giving knowledge on the promoted methods to individuals, but on the other hand—to approach a specific person with methods of personal engineering, it is first necessary to find this person, i.e., to approach an unknown circle of people first, i.e., to build a community, and this second part about \"perform personal engineering for unknown individuals—where to find them, previously unknown?\" here it is discussed, on the community level.\n-   Organizational construction/management/“organizational engineering”/“enterprise engineering,” done by managers/organizers/“organizational engineers”/“enterprise engineers.” The subject of their work methods is the organization, understood as a group of agents (most often people, but we remember about scalability and AI agents) with clear powers over each other's work and other resources. Organizational engineering at the operational/working/operational stage of the organization is operational management. There is a separate system management course, which in fact is an enterprise engineering course, an applied horizon course, the concretization of the fundamental scalable systems engineering course for the systemic/organizational/evolutionary level of organization (enterprise, association headquarters, non-profit organization, fund, etc. — a collective of agents).\n-   Education, psychotherapy, coaching, conducted by teachers, psychotherapists, coaches with such an object as an active personality. This is all \"personal engineering\" (although not said that way, we recommend thinking exactly so!). Should it include different variants of teaching \"intelligent robots,\" i.e., personalities not based on Homo sapiens, i.e., personalities as rational conscious agents-organisms at the level comparable to Homo sapiens (conditionally xGI, different types of general intelligence)? Why not. Therefore, one can consider both AGI (artificial general intelligence) projects and the creation of cyborgs (usually human and organizational, but here more human) in terms of exocortex and exo-tools/instruments (internal personal level parts of personality, individual and collective—we maintain that while the conversation seems to be about one level, it can easily be transferred to others. Say, \"education of an active organization,\" not only \"education of an active personality,\" but historically the level of one personality stands out quite clearly). Roughly speaking, \"memory and computation addition,\" because artificial vision, liver, etc., addition is already a lower systemic level, \"creatures,\" handled by other work methods. We have a \"Personality Engineering\" course, providing insight into the methods of personal engineering as an applied variant (specialization) of systems engineering methods.\n-   Methods/activity/practice/engineering of creating and breeding/\"serial production\" of living beings, \"organism-making.\" Done by practitioners/engineers of living nature like agronomists (plant-growing), farmers (animal husbandry and veterinary medicine), foresters (forestry), as well as doctors (medicine). Humans are also living beings! If concerned about the working capacity of the human body (a \"self-engineering\" course is being developed), and not just personality (\"Personality Engineering\"), these are specifically methods of living being engineering. These methods of creating and developing living organisms/beings include \"systems biology\" with \"systems bioengineers\" developing and producing fully artificial life, and \"genetic engineering\" modifying genomes of already existing living beings on the planet.\n-   Classical systems engineering of cyber-physical systems, done by classical \"hardware\" and \"cyber-physical\" systems engineers. It deals with systems that lack intelligence but already include a universal computer-controller. Rockets and airplanes, nuclear and solar power plants, smart (i.e., sensor-equipped with some actuating devices) homes, and other traditional objects for tech engineers. Software engineering is also here. To some extent, the \"Systems Engineering\" course is designed not only as a method of mind stack but also contains many examples of applied classical engineering methods, both \"hardware\" and software. It provides insight into creating and developing systems at this level.\n-   Substance (molecules, simple physical parts): this ranges from organic synthesis by chemical engineers to the engineering of soap dishes and electric bulbs by design engineers, i.e., the engineering of simple/inscrutable (without complex cyber/computer/computational) system components without complex control with controllers-computers in their composition.\n\nOf course, in life, you will encounter projects requiring simultaneous consideration of creating and developing systems at very different systemic levels — including various levels of evolutionary complexity of these systems. The contradictions between systems of different systemic levels manifest precisely here: liver cells want as many of them as possible, and the organism considers this cancer. Some citizens do not wish to support a “state” as the organizer/engineer of society in their residential area and are considered \"state traitors\" and punished. How to resolve such contradictions? Invent new and new engineering techniques.\n\nBut you need to somehow understand what kind of engineering methods will be required in your work project. The simplest way to do this is to list the specific types of systems affected by your project, assigning them system types from our course. For example, if you are creating a lactobacillus tablet as a dietary supplement, you will need to change (including persuading it to be taken—changing the state of individual human personalities as parts of the clientele) systems at the following levels of the stack:\n\n-   Consumer oversight::community and society\n-   Clientele::community (promotion)\n-   Client::individual agent (personality and organism)\n-   Stomach and intestines::being\n-   Tablet::substance\n-   Lactobacillus",
    "f7b9f9e087cfcc936793e028024e2961": "---\ntitle: Holes\n---\n\nThe object \"hole\" in language is defined as something non-existent, \"a gap.\" In a bagel, the hole is the place where there is no dough. But in the engineering world, a hole/gap/cavity quite exists as a distinct concrete object in the physical world: it can be made (drilled), it can be lined with some kind of coating. A well is a hole in the ground; oilmen often call it a \"hole\" in slang: it is valuable precisely because there is nothing in the well, so oil or gas can be pumped through it. A \"passage\" (for example, a cable passage^[[https://ru.wikipedia.org/wiki/Кабельная\\_проходка](https://ru.wikipedia.org/wiki/Кабельная_проходка)]) is a device with a hole through which some other engineering object can pass (in a cable passage, it’s a cable; in a roofing passage, it can be a cable, pipe, antenna, etc.).\n\nIf you remember that a hole occupies a certain volume, a certain place in space-time, then you can give it a name (engineers do this), and discuss some technological operations with it—manufacturing, accounting, inspection, repair, \"tuning\". Moreover, this is a good criterion for determining whether such a \"gap\" should be given a name: if there is some operation (work according to some method, leading to a change of state) with such a \"gap,\" then for accounting and checking the state of the \"gap\" after such an operation, it is better if the \"gap\" has a separate name.\n\nA hole/gap/cavity occupies a place in space-time, therefore, it exists in the physical world. The \"working cavity\" in a compressor is also a \"hole,\" the working space in a pipeline is also a \"hole.\" It is easy to think of them by imagining this space filled with molecules of gas or liquid or even a vacuum: physical matter is not important here. What is important is how to think about it, and we need to think about places in the physical world, regions/volumes of space/time.\n\nAn intermission is a part (in time) of a concert or performance when the performance is absent. You can reason about an intermission just like about engineering holes, but this will not be a spatial part, but a temporal part of the performance or concert as a material object, an embodiment of the system. The \"culmination of the performance\" can also be represented as a quite material part: this is a temporal (in time) part of the performance, where the maximum emotional intensity is reached. On the other hand, you can consider that this part takes an insignificant amount of time, and then the \"culmination of the performance\" will be an event—and the temporal parts will be important before and after this event.\n\nHow to think about intermission or culmination as temporal parts of the performance? These will be all the items of the performance (all the molecules of the items making up the performance—actors, props, audience) at some time interval.\n\nYou can also deal with strange objects that need to be accounted for by name (since you need to perform some actions with them), but which are difficult to isolate as separate from the physical object—for example, welds. A weld needs to be designed, made, and then regularly checked. This means that a weld instance must have an individual name; it is a specific physical object occupying a place in the physical world. If you understand that a weld is just a place in space (and time!), then there are no problems in thinking about such an object: it is the same part of the system as the pipe itself or the gear or the hole. They can have their parts (although the weld has molecules, and the hole has no molecules, but there is space that molecules could occupy!), they are parts of other material objects, they can have descriptions.\n\nThis somewhat contradicts the notion of a \"configuration of matter resistant to the destructive action of time\" as a system in physics. For example, if looking at a candle flame, researcher Karl Friston notes the impossibility of indicating the boundary of the system, since there is some chaotic exchange of molecules with the environment. But if you take an engineer, then for him \"flame\" is quite an object, the state of which can be measured (say, measure the temperature in the center of the flame and at its conditional boundary). And this flame the engineer will define by its spatial form in the environment and the need to perform some operations with this form: for the engineer, there will be the same reasoning as with a \"hole.\" And the flame will be quite stable for him, and the weld with its blurry boundary between the weld itself and the material at the molecular level will be even more stable.\n\nYou can further deal with similar changes of states and objects that change state during an instantaneous/simple event or a complex event that takes some time—depending on the consideration. For example, in 3D printing of rocket bodies^[<https://www.relativityspace.com/>] you can easily imagine a rocket body consisting of a continuous \"weld\"—in fact, it is a continuous deposition of metal. It is important to understand that the **time scale of consideration**/the scale of the temporal part of the system also matters. On a large timescale, \"there was no shell—now it is,\" and on a small timescale, \"we added one layer of metal to the shell, and so thousands and thousands of times.\" And it is important not so much the \"objects,\" perceived as \"usual solid objects,\" but the occupied space-time within some system boundaries. In time, such system boundaries (or system states) are **events**, in space—**form/place**. **Events and forms/places are boundaries of the system or states of the system.**",
    "126cb3d02f0e3f9c7559a6a1d0847862": "---\ntitle: Mastery as a System\n---\n\nIn order for a client to get the result of an organizational process executed by some organizational unit in its organizational role (for example, an internal client can get salary::money::system, accrued::organizational process::behavior and issued::organizational process::behavior by the accounting department::organizational unit as treasury::organizational role), the application/program/software::system needs to be configured, obtain source data for it, and train employees to work with this software as a tool (literally like teaching a child to hammer nails—not missing the target and hitting with the hammer, not the fingers). Then, **verify not as much** **the software, but the work of the entire** **organizational unit/service/provider** **as a whole, including the software** **assigned to this unit.** The software thus becomes part of the department like a hammer becomes part of an organizational unit of roofers who will use it to build the roof of a building.\n\n**In the modern world, the reverse can also happen, where the software acts as the organizational unit, and some people (operators, development team) are included in it, but the work will still require not only the software but also the people involved in it.**\n\nTo reiterate: no one cares about the excellent performance of the payroll program; what matters is the payroll itself (imagine it as dividing a heap of physical gold into portions to be distributed among employees)—and if payroll does not occur, it will be hard for the software development team programmers to explain to the unpaid employees that everything is fine with their software, and that the rest of the accounting department staff is at fault for incorrectly filling in the fields of this program and pressing the wrong buttons. Employees do not care whether the software is inside the accounting department or the accounting department is inside the software; they care about the end result of the software's operation!\n\nDo you hire an excavator to dig a trench and the excavator operator along with the excavator (the person who plays the role of the excavator operator with his excavator)? Or do you invite an excavator operator as a one-man unit, which includes the excavator? I think it's easier for you to view it as an excavator unit that includes an operator, the \"excavator control software executed by a live computer.\" What matters is not the operator but his excavator; the expected result is from the excavator! In the operating room, we usually care about the surgeon and anesthetist, but in the CT scan room—primarily the CT scanner, while the rotating teams of operators there are seen as part of the CT scanner unit, consisting primarily of the CT scanner with a few additional people.\n\nIf your company has AI agents or powerful server software that yields primary results, it is often unclear whether you ascribe this software (including AI agents) to the people, or vice versa—people to the software. **In this regard, people are also \"universal robots with specialized software inside them for working with other software or equipment.\"**\n\nIn software/application/digital twin development projects, there is often a need to develop not only the software (traditional or neural AI software) existing in computers but also the neural software that exists in people's brains as processors. This software/program, executing the algorithm/theory/discipline of some work method as a physical object, we will call the **mastery** of performing a certain \"role behavior\"::\"work method.\" \"Role behavior\" is the behavior of an **agent** (which consists of an **organism** and/or **equipment** in the case of live agents-people or not-so-live AI agents, as well as a **personality** and/or **software/tools** as a collection of all software/programs running on this organism/equipment), taken as part of the behavior of only mastery from the personality composition, which helps the personality play a role. Roughly speaking:\n\n-   Person::agent = organism + personality (personality as a collection of various types of mastery, \"all software, all brain programs\")\n-   AI agent = equipment + personality (personality as a collection of various types of mastery)\n-   Mastery::system = ordinary or neural program::system running on the AI agent's equipment or human organism, implementing the algorithm/theory of a work method.\n-   Method::behavior—generalized algorithm/theory by which mastery operates, and the tools needed to execute the method (say, for trench digging, besides trench digging mastery, a digger needs either a shovel or an excavator—tools enabling the application of mastery).\n\nIn a corporate software development project, there will necessarily be:\n\n-   accounting for **hardware** for this software (\"hardware\" or \"virtual machine\"—software containerization, considering that part of the software executes on a server in a data center, while another part may run on a phone with a tiny screen, etc.—everywhere has its OS, but hardware must be considered!). The program works as part of a **software-hardware complex**, not by itself!\n-   actual development of the target **software**, as everyone recognizes.\n-   creation of **mastery** in people's brains (training to work with the program: you need to \"create\" those parts of different people's brains in various roles, capable of doing something useful with the program—create the mastery of working with it). Note that you will also need to account for the people’s brains—if you are not given people, you cannot create mastery in them, just as with hardware for \"software-hardware complexes.\"\n-   Creation of **mastery** in AI agents (this is just emerging, but there are unique aspects: current AI agents cannot be programmed like software, nor trained like people, but mastery to work with your software will be required from them)\n-   Creating initial **data** (data engineering) and distributing them across various **carriers** which the program will work with. Moreover, the program will produce output data, which also needs to be known where and how to post.\n\nDo not skip these parts! They are physical; they also need to be \"designed\" and then \"created\":\n\n-   the software itself is \"developed\" during **software engineering/software** **engineering**,\n-   to create mastery within people's and AI agents' personalities, they must be **trained** (and develop methods by which this will happen, and methods of verifying training—in detail about this in the course \"Personality Engineering\"),\n-   additional classical software needs to be **configured** in terms of using its interfaces (and check whether everything is set up correctly).\n\n![](10-mastery-as-a-system-15.png)\n\nBut what about the people who work with the programs? Very often, the embodiment of the target system of a project is some part of the organization that needs to do a specific job—issue a loan, calculate payroll, manufacture a part. If it turns out that the program works \"correctly\" from the developers' perspective, but people in the organization cannot work with it for any reason, the program's work will not be considered proper. What is the point of the payroll program working if people cannot interact with it? If programmers want to receive payment for their part of the job, they must ensure that someone works with the people and that the jointly trained people and configured programs (and data for the program, which can be a separate problem and may require individual performers) are submitted to the customer. The payroll calculated, the quality part manufactured—leading to these important goal results, while the software is submitted within this organizational unit's (subdivision, project group) work.\n\nConduct similar reasoning for training people as for computer programs. Learning books, videos, computer courses (e.g., our course \"Systems Engineering\") are only documented outlines of desired post-training results. The goal of learning is a piece of a trained brain, let’s call it mastery::software::system, and it works (a system behaves in some way during operation!). Mastery as a system, upon entering the goal environment, is activated analogously to a computer program and performs the computations/problem-solving it was trained for. The brain is a processor, mastery acts as part of the processor. It doesn't matter which exact parts of the brain implement mastery. The important thing is mastery is implemented by the brain, not by the cosmos, extraterrestrial forces, embodied spirits, or other unlikely causes. Read books, watch videos—they merely set an outline of expectations from the brain later in real-world application situations. They train the neural network, increasing the likelihood of physical brain process (with state change!) computations in line with training outcomes.\n\n![](10-mastery-as-a-system-16.png)\n\nThe only thing is, you don't need to talk about neurons and training them; this is not the detail level (not the systemic level, not the system size discussed in training). But conceptualizing training results as a trained brain area \"mastery\" forces us to consider how this training is physically configured (the brain area must be located somewhere during training, data must be fed in and results computed), and how the training result behaves physically as a system (the mastery must have an appropriate physical environment for it to be applicable. For instance, being able to perform flips on land is inappropriate underwater but is useful in a circus).\n\nSuppose during mastery use, a person is in a machine shop, amid deafening noise from surrounding machines. Will mastery (software/neural network program/trained brain area) kick in without a reminder? Will it accurately and seamlessly produce the intended thinking trained (without prompting)? How much time will it take? What happens before and after this moment? Transitioning to a physical system (an area of the brain ready for action/thinking) proves productive even in training scenarios. There is much description in training, but they are not the main point. The main thing here is an end physical object: a system with prescribed properties and known behavior during use.\n\nWhat is the target system in a bridge construction project? The bridge, naturally! But to build the bridge, you need a project organization to carry out its creation, firstly in design (typically in a city, a design institute), then in construction (thousands of people in an open field!). Only then can you enjoy the bridge. This is the entire **creation chain: create the creator, then the creator creates the target system.** These can be not only chains but more branched graphs, with many links (creator of creator of creator). Imagine, for example, any of the programmer projects common within bridge construction. Why do they exist? Why all this software? For the bridge to ultimately appear!\n\nSystem thinking demands that we trace the entire chain from the software used in the bridge construction project to the bridge itself. If you do not trace it, the software proves unnecessary—even if developers want payment for it, particularly for its unneeded \"features\" of this software. If the software's capabilities are underutilized, they may not work as expected, but developers will still demand payment if the connection between software capabilities and target bridge implementation is hidden. If the target bridge has no use for this software or its capabilities, it means the software can be scrapped, the project dismissed, payment avoided. **System thinking tests if you are engaged in unnecessary work.**\n\nSystem thinking requires contemplating this from the start, not during the non-signing of project acceptance acts for \"software creation.\" **Usually, software** **as systems are not needed by anyone per se, they are needed only as part of other systems** **—and you need to ensure the development of those other systems in whole, and software** **only as parts of those systems** **or systems making those target systems** **—deal with all chains leading to reality, the physical world.** Do not confuse the photograph with the photographed subject, the book with the living world, the software with the real world described and changed by the software.",
    "ea39421e6a5514953ae7f4098da6bb13": "---\ntitle: 'How to Negotiate: Be Specific, Not General'\n---\n\nIf one person mentions the President of the United States and another mentions Donald Trump, are they referring to the same person? And if other people mention the President of the United States and George Washington – are they referring to the same person that the person in the previous sentence was referring to?\n\nIn engineering, strict logic is needed for such reasoning about whether different descriptions refer to the same object. The pump P-101 described by one person on a piping diagram and the PDR-15-NSH-12 pump described by another person in the installation specification – are they the same pump? And the PDR-15-NSH-12 pump installed in the turbine hall with serial number RKS456/4 – how does it relate to the first two? How to describe this \"in a computer\" so as not to confuse oneself and not confuse others?\n\nEven Descartes (1596-1650) wondered: how can we understand that people are talking about the same object if they see it in very different ways (i.e., classify it into very different categories)? For example, one engineer talks about a high-performance system, the other about an explosive one, the manager about a profitable one, and the financier about a cheap one? How can we understand that they are talking about the same system? Descartes' answer to such questions is still used today^[This story and many other aspects of this section are detailed in Chris Partridge's book \"Business Objects: Re-Engineering for Re-Use\", <https://disk.yandex.ru/i/2SgjvILB3PqJEZ>]: if the **places** **in** **physical** **space-time/extents** of two objects coincide (the forms of the objects and their location in space-time coincide), then it is the same object. Regardless of the primary or secondary characteristics, properties, and parts that different people saw in the object/system, or for what applications this object/system is needed. The names of those places in space-time that different people talk about with different subjects of interest in a given situation do not matter. If it's about the same place in space-time, then it's about the same system embodiment. If I talk about food, you talk about an apple, she talks about a commodity, he talks about a green physical body weighing 150 grams, and we all point to the same place/volume/form/extent in space-time/physical world, then it's the same object. If someone points in the physical world/space-time at a butterfly with wings and says \"butterfly\", and someone else points at an object changing over time and moving in space from egg-caterpillar-chrysalis-butterfly-with-wings and says \"butterfly\", then these two people have a chance to understand each other, even if they initially couldn't agree because of confusion in words/terms.\n\nImportantly, the \"move towards understanding\" here is to specific details (system embodiment, physical world), not to \"definitions\" (i.e., categorizing objects by their kind – \"Aristotelian definition\", \"as in dictionaries\", as in mathematics textbooks). **Issuing definitions,** **as well as** **demanding definitions,** **usually clouds understanding in complex situations.** **Only** **examples** **of system embodiments in** **the physical** **world,** **\"grounding\" –** **such examples end all term disputes.**\n\nIf a glossary was given in this systems thinking course, and therein a set of definitions, understanding the material would deteriorate: the formality of the presentation would increase, and the connection with the physical world would worsen. In our course, in its last section \"Instead of a Glossary: The Ontology of the Third Generation Systems Approach,\" we proposed another way to solve the problem of compactly describing a multitude of related concepts of the systems approach. If you really want to have a glossary, try instead of reading that glossary to read this section, and note: it unfolds into a rather long text if you refer to the literature listed there (dozens of quite large source texts).\n\nIf we do not require that all reasoning, all descriptions of systems that people make, are ultimately tied to system embodiments, we would not have the opportunity to verify whether people are talking about the same thing or different things. Moreover, there would be huge problems with verifying whether people are talking about the real world or expressing good wishes, or just fantasizing, or even consciously avoiding bringing their thoughts to reality. Emphasis on the fact that the description and documentation of the system concern the embodiment of the system in the physical world (and not something abstract that allows fantasies) allows to some extent ignoring the differences in terminology used by people. Ultimately, it is always possible to verify whether people designate the same concept with different terms or different ones: even if we are talking about abstract concepts, it is always possible to point to examples from the real world that specify these abstract concepts.\n\nThis does not mean abandoning descriptions: descriptions are needed to transfer knowledge about one place in the physical world (system embodiment) to multiple such places (to classes of systems). Descriptions of systems support abstract thinking, but **ultimately everything is decided by the activity** **of changing the world, that is, the activity of** **embodiment/manufacture/implementation** **of the system in the real/physical** **world.** Description helps to focus on important considerations regarding the physical world, but nothing more. The physical world is paramount, systems thinking keeps the focus on it, and for this, systems thinking uses the concept of system embodiment.",
    "923c95b2279caca3978a77016ec28362": "---\ntitle: Composition Relationship\n---\n\nThe main relationships in systems (system embodiments, remember physicality!) are “part-whole” relationships (part of), also known as **composition relationships**. Engineers often refer to this as the breakdown of a system. In systems, the main thing is system breakdowns. **The levels of this breakdown** **are the system levels. Breakdowns are made by attention; nothing in the physical world** **is specifically** **broken!** **If you divide a butterfly into wings, body, legs, and antennae, it does not mean you have torn off the body wings, legs, and antennae: no, you just highlighted these parts in the living butterfly with your attention!** Moreover, you also highlighted the butterfly itself with attention as part of its surroundings!\n\n**The main move in breakdowns** **is from part to whole, from system to environment.** The part is well visible, perfectly highlighted, but the whole in the environment often has to be searched for. Hence, system thinking is often called holistic (whole-oriented). Later, we will learn that this is not entirely true --- system thinking is oriented not only towards the whole but also towards the parts, so it is also reductionist (reducing to parts), and pure holism and pure reductionism without each other are evil, delusion, error, dead-end. However, the first thought of a system thinker is towards finding the whole when the part is known (that is, any system evokes the first thought of finding the supersystem outside the system boundary, not inside towards subsystems).\n\nWe are talking about \"true parts,\" i.e., physical parts, not everyday talk about \"part of the system description,\" \"part of the system characteristics,\" and other \"parts of informational objects.\" Thoughts on how exactly to extend system thinking to such \"informational parts\" are emerging now, we will touch on this a bit later. For now, we speak only of spatial-temporal parts, i.e., parts of the physical world, parts of some systems. Systems, recall, are physical/real.\n\nA wing and a fuselage are parts of an airplane, a fuel pump is part of an engine. The wing (all molecules of the wing) occupies part of the total volume of the airplane, i.e., part of the space-time it occupies in the physical world, the fuel pump occupies part of the engine. All molecules of the fuel pump are part of the molecules of the engine --- molecules are defined as such small places in the physical world. When talking about some nanocoatings a few molecules thick, we can reiterate the reasoning, moving to some quarks---quantum uncertainty nuances are irrelevant here, what matters is the principle of reasoning about parts of the material world.\n\nIf we assume that all systems exist not just in the physical space but in space-time, then all talk about different states of the system or its different roles turns into a conversation about parts over time. For example, an egg is simply a part of a butterfly over time --- while the butterfly is going through the \"egg\" stage, there is no other \"butterfly\" in the world occupying the place of the egg in the physical world.\n\nThus, states of the system or its roles (those states/periods of time when the system performs some function for its supersystem, i.e., plays its role) can be treated as separate objects, they can receive separate names. A butterfly at the egg stage is called an \"egg.\" Pyotr Sidorovich in a state of illness is called a \"patient.\" And \"patient\" here is simply the role/state of Pyotr Sidorovich. A microscope, hammer, or stone in the role of a \"hammer\" for a nail at the moment they are used for this purpose (they are affordances performing some functions).\n\nIt is convenient to imagine system embodiments as \"worms\" in time, where their place in the physical world traces some trajectory over time/\"temporal sweep\":\n\n![](04-composition-ratio-10.png)\n\nWith this approach, **simple/instantaneous** **events** are three-dimensional “slices” of the system at a given moment in time, such three-dimensional “systems as they are in moments of their stoppage,” “without time”. Before the event, there was one state/role of the system, and after the instantaneous event, there is another state/role. **Moreover, the system itself** **appears at some moment in time, and at some moment in time, it** **disappears, these are the events of the appearance and disappearance of the system.** An athlete in a photograph goes through different events (take-off, landing), determined by her poses at those moments in time. These poses, like \"three-dimensional photographs,\" are the events dividing different states of \"somersault,\" \"preparation for somersault,\" \"aligning after landing.\"\n\nFor example, in pose running^[<https://sportpriority.com/blog/gid-novichka/metod-poznogo-bega-chto-eto-i-zachem-on-nuzhen/>], the event is a \"running pose\" --- the entire body of the runner at a certain moment in time. The \"running pose\" is key to proper running, the whole run is based on the event of adopting the correct pose.\n\n![](04-composition-ratio-11.jpeg)\n\nDescriptions of very complex systems (from microprocessors with their state diagrams to enterprises with their work regulations) often rely on the associated event structure. **The easiest way to find out something about an unfamiliar system** **is to ask what events are associated with it, that is, which objects change their states from what to what at what times.** In the development of enterprise information systems, this method is called \"event storming\"^[<https://en.wikipedia.org/wiki/Event_Storming>] (event storming, by analogy with \"brainstorming\"). It is very convenient to build an ontology/meta-model of the subject area by asking what changes during its operation, \"what events occur, what noticeable moments\" --- these moments of change will be the events there, and then you are interested in the objects that changed from one state to another, thus finding those objects. Say, everyone is concerned about when the draft finally stops. OK, what happens at that moment? They close the door! OK, the door changes state from \"door open\" to \"door closed,\" we are talking about the event \"door closing.\"\n\nWhen talking about events, they are considered in the context of such large time spans where the duration of the event can be neglected. If a simple/instantaneous event is examined \"under a magnifying glass,\" we find a **complex event**, which takes some non-zero time. So, between two hours of \"door open\" (and a draft in the room, state of the room \"room airing\") and a day of \"door closed\" (before the next airing), there is the event of \"closing the door.\" The time of this event can be neglected. But if not neglected, we find 30 seconds during which an agent (human or robot) approaches the door and performs the task using some method of closing the door (suggest three different methods/styles/cultures of performing this task). This task transitions the door from the state of \"door open\" to the state of \"door closed.\" A project is the execution of tasks according to some methods, the result of which will be translating some objects from one state to another.\n\nFirst of all, we will be interested in how objects in the physical world change their states --- how the system changes state. For instance, speaking of tomato ripening, we can highlight the tomato itself as a whole, and its three **full parts** **in time/states/temporal parts** --- a green tomato, the event of reddening (turning a green tomato into a red one), and a red tomato. In most cases, when talking about a tomato, the time of the reddening event and all the intermediate states can be neglected; it is simply not considered: our subject of interest will be the green and red states of the tomato, that is, the objects \"green tomato\" and \"red tomato,\" while the \"intermediate tomato\" is of no interest, so we consider it a simple instantaneous event.\n\nHere is a **space-time map** (space-time map) from Chris Partridge's book \"Business Objects: Re-Engineering for Re-Use\"^[<https://disk.yandex.ru/i/2SgjvILB3PqJEZ> (those engaged in data modeling for creating corporate information systems must know this book).], which illustrates this:\n\n![](04-composition-ratio-12.png)\n\nAll three spatial dimensions are shown on one axis in this diagram, and time on another axis. The tomato (tomato specimen #91, we are talking about individual objects in the physical world, not types) occupies a certain space-time (a type cannot occupy space-time, only specimens from the physical world can occupy space-time), and inside it are individuals-states of the green tomato, red tomato, and the complex event of the tomato's color change.\n\nThe event \"World War II\" also lasted many years, but when considering the \"pre-war world\" and the \"post-war world,\" this event of war is considered to have occurred \"instantly,\" simply.\n\nThe mentioned book contains much curious information about such a 4D (4 dimensions, three spatial and one time) approach to describing the world, where **a huge variety of different relationships between objects are reduced to the key system thinking relationship of part-whole in the physical world**. \"State,\" \"event,\" \"role\" --- all turn out to be just parts of the system, which greatly simplifies thinking, making it universal and compact. **System thinking** **is, first of all, thinking about parts and whole, composition/breakdown relationships/is\\_part\\_of.** **The most important thing here is that with such an approach, considering various other** **types of relationships becomes drastically simplified: the description of the world becomes shorter, and reasoning about various phenomena is unified.** **And this approach is well-formalized, which is important for engineering applications**^[<https://ailev.livejournal.com/1653296.html>]**.**\n\nWhat can be confused when considering the true/physical \"part-whole\" relationship? Surprisingly, natural language provides a rich source for confusion.\n\nFor example, saying that roughness is part of the rich experience of perceiving a table. There are several pitfalls here: roughness is not a physical object. A rich perception experience is not a physical object. Therefore, all molecules of roughness will not be among the molecules of the perception experience. But the word \"part\" was used, and it does not sound odd! Here is the source of confusion: **inattentive (untrained in system thinking) people do not hold the part-whole relationship in the material world for several levels. They confuse the** **\"part-whole\"** **relationship with the classification relationship.** Tigers are part of animals. The word \"part\" here does not indicate that all molecules of tigers as an object are part of all molecules of animals as an object! No, we are talking about abstract objects/mathematical sets/classes.\n\n**Emergence** **of abstract/ideal** **“parts** **of systems”** **must be tracked and eliminated; these are errors in system thinking. Parts** **are always physical parts, physical objects highlighted by attention from the whole-environment of these parts.** I have an unwithering hand and infinite kindness towards students. You can't say that these are parts of me as a system! If you can still say that all molecules of my hand are among my molecules, as a whole, then about the molecules of kindness being part of my molecules as part of these molecules --- this cannot be said. Do not confuse!\n\nA separate source of confusion is **initially misunderstanding the embodiment of a system and its description, and then talking about parts of the description as parts of the system.** So, mustaches in my photograph can be recognized as part of me. But this is not true: all paint molecules that make up the mustaches in my photograph are not part of the molecules that make up me as a whole! This is a confusion between mustaches and the documentation of mustaches, mustaches, and the description of mustaches! Bridge documentation is not a part of the railway bridge! The molecules of the documentation (be they information models on servers in a data center, or traditionally, a couple of trucks of dead trees with paint particles) are not part of the bridge molecules. The bridge and its parts (supports, roadbed, etc.) --- this is one thing, and the documentation on the bridge --- is not part of the bridge, it is just documentation on the bridge. Documentation does not interact with other parts of the bridge as a physical object, it is not a true part of the bridge's construction!\n\n**Check yourself, can you restrain from the everyday use of** **\"part\"** **and** **\"whole\"** **words and limit the** **composition** **relationship only to the physical world, keep the physicality of breakdown for several levels up and down from the system in the center of your attention.** If you broke your description into three parts, it is not a system breakdown! It is just that you broke the description into three parts. These parts do not even interact with each other; descriptions are passive; they are not in the physical world. This is not about system embodiment; it is not about system breakdowns; this is about something else.\n\nModern research in physics discusses that the boundaries of physical objects and their parts are not random; they somehow turn out to be stable: a stone as an object in the world lies in the desert for thousands of years before finally turning into sand, but still, its shape and size in the physical world are more or less stable. This property of maintaining its shape and holding the state within some acceptable parameters for sustainable existence starts with the organization/evolutionary level of \"substance\" (a stone in the desert, a drop of oil in water --- if you poke them with something not too strong, they remain), but as the level of organization complicates to more or less living objects, maintaining shape in the fight against entropy as physically inevitable destruction becomes more and more surprising. If you poke even a hard object living being and injure it, there is a high probability that a small wound will heal. If you try to poke a reasonable being with a hard object, you may not be able to do so. If you poke even a large hard object like some factory, it will be restored in amazingly short terms!\n\nEven the system boundary turns from \"thought\"/abstract/ideal to something quite material, also occupying volume: cell membranes, ship hulls, house walls --- they also, in the course of the complexity of the organization of life (and technological life), evolve (and techno-evolve) to become full-fledged systems! More about the fact that the boundaries of systems in the physical world are not entirely random, but reflect fundamental natural laws that determine the stability of systems in the face of destructive time (physicists here mention the inevitable increase in entropy, which only life, learning to overcome it in the course of evolution, can overcome), can be read in works by Fields, Glazebrook, Levin, and other authors^[2021, C.Fields et. al, \"A free energy principle for generic quantum systems\", <https://arxiv.org/abs/2112.15242>, 2020, Fields, Glazenbrook, \"Information flow in context-dependent hierarchical Bayesian inference\" <https://chrisfieldsresearch.com/contextual-pre.pdf>, 2018, Fields, Glazenbrook, \"A mosaic of Chu spaces and Channel Theory with applications to Object Identification and Mereological Complexity\", 2018, <https://arxiv.org/abs/1803.08874>.].",
    "b0ae2c518851f3fccf8fd48add68a150": "---\ntitle: Target System in Software Development Projects\n---\n\nHow to find, out of all possible systems, the target system that programmers ultimately produce, the system whose creation will count as the project's success (\"everyone is satisfied, no one is offended\")? Often, even a working program ends up working with descriptions and documentation of some other system than the actual system that alters the physical world—and one must mentally trace the chain further until finding the system that indeed changes something in the physical world, not just in descriptions!\n\nTo start, simply go through the list of errors from the previous subsection. Although there may be many more errors, even this short list usually significantly advances understanding. Suppose, for instance, that your program is a digital twin, then you need to find its physical twin, and the system will consist of both the digital and physical twins. Accordingly, change the project: the delivery of the program should not be just an unconvincing demonstration of the program itself with its database as a digital twin (but this is precisely \"a demonstration of just the program, and nothing more\" that developers would like: \"the paper will bear anything,\" detached from life, the software is free to fantasize its results, the success of these fantasies is easy to show), but a demonstration of the proper functioning of the physical twin under the control of the digital twin. Demonstrating changes in the physical twin under the control of the digital twin is much harder than demonstrating a digital twin detached from reality. But only this will be a real success of the project, for which they will pay. It is another matter that when it comes to a rocket or a bridge, or even a patient in a hospital, the physical twin is obvious. But how to find it when it comes to a web of objects and their relationships in some enterprise? What could be the physical twin there, whose functionality needs to be demonstrated in tandem with the digital twin?\n\nThe first **mental move to find the physical twin is not to look at the algorithm (described by the source code) but at the data of this program (often stored in some database). This data describes some system (including processes of this system, i.e., changes in states of the system)—this system is usually the physical twin.** This system described by the data of your program will be the embodiment of that system with which all people surrounding the development will be concerned! This mental move does not work in 100% of cases, but it can be a good start for finding the target or \"our\" system when there are many programmers around. In a weaker version, this same move is good for information objects (reports, models, databases, etc.): what do these objects describe, which system? This system is of interest, and the information object itself is the main concern only for the development team, while others are interested only in connection with what is happening to the system described by this object.\n\nIf we are talking about travel accounting software, then the target system—the one described by its data—will change (be created, destroyed) as a result of the program's operation. This is a business trip. Yes, a business trip seems like \"riding and living of the business traveler,\" but it is assembled from different objects up to the sup-system in which this ride occurs (like a \"dance performance\" from \"dancing of the dancer\") and immediately it becomes clear how to describe and account for it in the computer. To do this, one simply needs to account for all objects entering into the business trip (relationship of participation/part-whole/composition)—people in the role of travelers, tickets as descriptions of journeys (\"travel documents,\" with different nuances regarding paper and electronic carriers for these documents), often including hotels and their descriptions—payment documents for accommodation, baggage with its payment and documented descriptions (\"baggage receipts\"), and so on.\n\nAnd here one must not miss because \"trip\"/\"business trip\" can mean different processes::behaviors or events::system (and you need to decide—do you consider these as processes, or as systems?):\n\n- The one who sends on a trip (conditionally: \"boss\") calls \"trip\" the work that needs to be done somewhere in another city. Part of this work is the agent has to get to this city first, but this is of little interest.\n- The \"traveling\" agent considers \"trip\" not so much the result of the work (for him it is simply a \"result of work\") but the \"trip\" itself: flying on a plane, traveling by bus, staying in a hotel, eating.\n- The \"accountant\" as an agent considers \"trip\" not so much the entire \"trip,\" but the \"accountable part of the trip\": not any travel, but only the one that will be compensated. Say, traveling to the city will be paid, and moving around the city—not, while the \"traveler\" considers it all a \"trip.\"\n\nSince different agents consider the trip as different processes or different systems—it is necessary to give them different names (say, \"remote work,\" \"business trip,\" \"accountable part of the business trip,\" and abandon the word \"trip\" as confusing) and teach different agents to use these names to avoid confusion in conversation. Then ask the question: the software that helps to \"arrange the trip\"—which of these three systems does it help to create?! Of course, it will be completely different software or parts of one software working as digital twins (or shadows, or models) for different target systems: some help the boss with \"remote work,\" others help the traveler with \"business trip,\" and third help the accountant with the \"accountable part of the business trip.\" There is a suspicion that for all so-called administrative processes there are at least three such considerations, which is why it is difficult to develop software for enterprise administration: everyone gets confused due to not distinguishing different systems under the same names! If you find different objects (pairs: systems and their behaviors) in the physical world (4D extensionalism) and give them different names—the confusion ends, and all project participants quickly agree.\n\nIf it concerns software for a CNC machine, then the target system is the part described by the data of this program. The program describes the work of the machine, and the machine is needed to obtain the part. The goal is the part, the money from it, and everything else is just a chain leading to this goal. If the software works well but the part turns out poorly—there will be no money. So with software (including **skill** as \"program for people and AI agents\" and even more so **personality** as a set of all kinds of skills of one agent) as target systems, one needs to be careful. This we will discuss in detail in our course, when we will discuss the target systems of the project.\n\nIn the world of software (and the whole world is gradually becoming a world of software, especially considering modern AI neural network software and software in people's heads: personality is software on the organism's hardware) there can be such strange system implementations as sessions—learning sessions, or gaming sessions. For instance, a gaming session consists of the player in the state of the game, the game server that remembers the state of the game world, the working program on the phone, which is controlled by the player on one side and the game server (via the internet) on the other side. All these objects mutually changing states—this is a gaming session. All employees of the gaming company will be happy with such a definition of the target system, because gaming companies sell these gaming sessions, increasing their total time! Notice that none of the other systems mentioned here will be sufficient for a full description of what is happening in a company trading computer games on their servers: neither the player in the state of the game, nor the server software, nor the software on the phone, nor the software of the payment system. Payment usually goes precisely for gaming sessions, with slight variations, and until you describe the working object \"what they pay for\"—the conversation with the company's businessmen won't flow!\n\nOften there is confusion when the software represents a \"marketplace.\" Not only is the software of this \"marketplace\" considered the target system, but they also ignore the data for this software, all the people servicing this marketplace, the clients of this marketplace, all possible intermediaries and providers who work with this marketplace to ultimately achieve an embodiment of a system for which someone will agree to pay. No one will pay for a \"marketplace,\" it is just one of the parts that will allow earning: the marketplace produces what is needed by the people around it, and the target system will be what is needed by these people, created whether by this marketplace or any other means—it is unimportant.\n\nFor instance, the marketplace can produce \"delivery.\" \"Delivery\" is not the process of \"delivering,\" but some product (a thing!), located directly on the doorstep of the place where this very delivery is intended. This \"delivery::system\" at the moment of its use, that is, \"the client took in hand the purchased product\"::\"process of use\" (to reiterate: not delivery::process, but the final state of the physical world: delivery::system as \"product transferred\"::state and processes of transportation already conducted to the owner's doorstep and transfer of the product into possession) is the target system, it's for this that they pay, it's embodied in the physical world, it's produced, and everything else is just chains of descriptions in the \"marketplace\" and other systems creating this target one. \"Delivery\" will bring irreplaceable benefit to the clients, and everything else will bring irreplaceable benefit only to the various developers—they will get money from clients for the timely received \"delivery.\" Notice, we didn't write \"timely performed delivery\" here, as this implies \"delivery::work::behavior,\" \"work\" is usually performed. Admittedly, there's also the usage \"performed\" with systems, for instance \"an artist completed a painting for the holidays\" means that he completed all work for creating the painting by the holidays. So \"completed the delivery on time\" could also be understood as \"completed all work for creating the delivery on time.\" You can speak in various ways if you track types. If you don't track types—you will confuse yourself and others.\n\nUsually, when **discovering the target system** some interesting assumptions are made in 30-40 minutes of discussion. But in a week or two, these assumptions need to be clarified; quickly identifying the target system usually doesn't happen. For instance, \"marketplaces\" as service providers for making \"delivery\" from a \"product\" somehow do not work if considering only \"delivery\" as the target system created by the \"marketplace,\" because transportation goes both ways: it's \"delivery for payment\" (the deal concludes when both payment and product delivery occur). The \"marketplace\" is only needed when it financially guarantees both the supplier and the buyer precisely this \"delivery for payment.\" If it doesn't guarantee, then \"just Google\" does an excellent job of mutual searching for buyers and sellers, and there's no sufficient competitive advantage over \"just Google,\" which is why the \"marketplace\" remains a utopian idea. So it's necessary to be very attentive to what the target system is in the project: the project's success is directly connected to the choice of the target system.\n\nCan it be considered that all typical cases of target systems related to software are listed here? No! The world is extremely diverse, there are countless types of target systems, new business models emerge daily, bringing new types of target systems with them. The physical world changes more and more intricately, and systems thinking allows us not to get confused in this sea of descriptions and yet **focus on the main thing: what changes in the physical world, what is the embodiment of the system, what is the goal of the entire large (and not just your small part) project, for what people will be willing to pay.**\n\nAll these considerations easily transfer from the world of algorithms to the world of data. Half a century ago, there weren't even personal computers (the first appeared in 1980), and some twenty years ago it was still assumed that the world would be taken over by complex algorithms that would cleverly process relatively simple data in databases. Today it has turned out that modern software is shifting towards working with simple algorithms over complex data. Even in AI algorithms, this principle worked: the simplest neural network algorithms over complex weight data of neural networks achieve huge success, provided there is enough computing power to execute these simple algorithms (hard lesson\nSutton's^[<http://www.incompleteideas.net/IncIdeas/BitterLesson.html>]).\n\nSince complexity is shifting from algorithms to data, system thinking interests not only software engineers but also data engineers. One should never forget that data are ultimately descriptions of some systems. Even in large language models, their data is a description/presentation/presentation of our material world as a system, only in a compressed model of the world—the result of a learning process. But at the moment of their processing by some program, they themselves become part of that program's system, they change their state, they can vanish, they behave like a \"thing.\" So data for processing by a program also needs to be \"crafted\" from primary descriptions. And when we are interested in how to get a useful result from the data, just like with programs, we need to learn to craft them from the original data—and we will, by analogy with DevOps, talk about\nDataOps^[<https://en.wikipedia.org/wiki/Dataops>].\n\nSystems thinking is thus needed by both programmers and data processing specialists, and considering that skill and personality are also programs, it is also needed by AI specialists and those who work with people. Due to deeper division of labor, it is easy to lose sight of the fact that the most diverse professions are engaged in the same thing, can be supported by the same ways of thinking.\n\nSystems thinking will help software engineers, data engineers, data center admin engineers, managers of all these numerous roles to negotiate with each other, and it will help find and train employees to work with their software and data, all those employees affected by this software and data. Software systems (at the moment of the programs' work), data systems (at the moment of data use), personalities, and skills within them—all these are systems, in the world of software systems thinking is applicable no less than in the world of iron systems, living systems, or organizational systems. **We must not overemphasize the programming part** **(software engineering and data engineering), always remember the subordinate role of software, and the primacy of the physical world that is described and changed by software** **in computers and heads, including data of this software—and everything in the project of creating information systems will then be in order.**",
    "3c1cfca97061271f49c2e7796bde42c7": "---\ntitle: Descriptions\n---\n\nBut why do we need descriptions, mental/ideal objects?! We will be primarily interested in:\n\n-   Symbolic/sign/linguistic descriptions as opposed to connectionist/neural network ones. We need collective development, meaning access for multiple agents to one description for both editing and familiarization. **Symbolic descriptions are easy to alienate** **(document), copy, and transfer in the course of collective development**. A description within an agent's neural network is hard to alienate—there instead of \"copying, transferring,\" \"learning\" works, a completely different mechanism of description transfer.\n-   Descriptions within the framework of theoretical concept theory (theory theory, objects and relations, the work of slow thinking S2), not prototype concept theory (prototype theory, work with metaphors and analogies, concept blending, the work of fast thinking S1). **The formality of the description** **is needed** **to facilitate verification.**\n\nWe need to document descriptions for (collectively arranged) thinking: they help keep attention on important objects in the physical world (the document/external memory keeps the focus of various system creators on the objects we described in it). These documented descriptions can also be used to transfer experience from one system creation project to others if they describe not instances of the system but their type (a set of a certain kind/type of system). If you've created an informational model of a stool, it will be an informational model of not just one stool; you can make a dozen stools from this informational model and use them in ten different projects.\n\nWhen people say \"description,\" they usually mean \"documented description\" and even \"document with a description.\" But be careful: sometimes \"description\" doesn't mean it's documented; sometimes a description exists (a concept, a mental object), but a document with this description (a physical object) doesn't. **When you hear \"description,\" determine from the context what is meant: the actual description, or the document with the description.** In our course, we will also use \"description\" to refer to a \"document with a description.\" But you must clearly distinguish between a description (a mental object), a document with a description (a physical object, usually with a symbolic description), and the system being described (sometimes through a chain of description of descriptions, but ultimately a system, a four-dimensional piece defined by a boundary from the global space-time).\n\nThinking in the creation of new systems, in the learning/learning and subsequent modification of existing/brownfield systems, usually happens not for individual system instances but for system sets or types. Of course, you can imagine a situation where a specific system instance is described in a specific environment instance at a specific time (for instance, in a pump breakdown database record at a substation, an earthquake database record, a patient's medical history, or an event in a country’s chronicle), but these are usually execution time records, not development time. **Development (designing,** **planning)** **is always done not for specific system instances,** **\"in general,\"** **that is, for a set/type/kind/class** **of similar systems, even if it's about creating one system (say, the Eiffel Tower or a new country).**\n\nA set/class/type/kind/sort is a mathematical/mental/conceptual object. In mathematics, a set of one object is not equivalent to that single object: the properties of a set differ from the properties of the object in that set.\n\nIn system thinking, it’s the same: we are interested in specific systems embodied in our physical world, but we model them using type/class assignment. Thinking captures something common in all situations; it happens not for specific systems about which we know different facts. Thinking happens mostly for **classes/types/sets/kinds** of systems/system_implementations/system_instances. And, of course, mental objects (sets, types) are easy to change: to modify abstract objects, no need to spend energy moving the substance of the system's embodiment; energy is only needed to change the substance for the representation of signs, a significantly smaller amount.\n\nInformation technology works with descriptions, so if you are dealing with computers and computer networks, be careful not to confuse a documented system description (an informational model on some physical medium) with the system’s embodiment. It's easy to understand that a person’s photograph is not the person depicted on it. It's a bit harder to realize that a paper sheet with rocket engine temperature data is a rocket engine description, and the paper itself isn’t important. But if it's about a small database describing the rocket engine's behavior in a series of tests, here's the catch: the database itself represents to its developer as some system, seeming to be the work's aim, the target system, the system's embodiment, a material/physical object, work's result. No, the database here is a documented rocket engine description, just in a less familiar form, documented not on paper. Even if you consider the engine control program along with this database and call it a **digital twin**^[<https://ailev.livejournal.com/1570630.html>], you would still be interested in the behavior of the **physical twin**, the rocket engine itself. When developing such a database and all programs around it, one must primarily think about the engine: the physical twin: the subsystem! If the developer doesn't keep the engine in mind, the database can easily diverge in its content from the real physical world's description and become useless or even harmful. The system here will consist of two subsystems: the digital twin::software (considering the hardware, software without a computer doesn't exist) as one subsystem and the physical twin as the other. If you don't understand which system you’re making and are only focused on the subsystem, you’ll face huge problems in the project: when the two subsystems start working together, the system won’t work—no money (and if it’s already paid, it might be reclaimed! Nothing works, what are we paying for?!).\n\n**The skill of** **understanding which system is described** **in physical reality when shown a description in form of some documented data structures in a computer—** **this is a key skill for anyone dealing with modern information technologies.** If you have a CRM (customer relationship management^[<https://en.wikipedia.org/wiki/Customer_relationship_management>]) system, then its databases describe the clientele as a whole system in the physical world, with parts of the clientele being individual clients (possibly grouped into segments, but that's not important now; what’s important is understanding the clientele as a system in the real/physical world, with the computer CRM system relative to this clientele being akin to a person’s photograph relative to the person, a document with descriptions and convenient document viewing tools).\n\nThis doesn't mean that at some point, we won’t be interested in the software system as a physical object. We will be, as a print book interests a printer. But we don't discuss the book's plot with the printer. Similarly, we don't discuss the \"plot\" with the data center administrator needed for the physical existence of the computer program. Be interested not in the program itself but in those system implementations described by the program’s data, whose changes in the physical world the program authors want to influence (in a CRM program, for instance, the authors aim to influence the clientele, not just the content of its database). If influencing the clientele through the CRM system doesn’t work, it may be unused in the project, not developed, or not made at all.\n\nWhen you find the system described by the software, one can judge how well the program authors succeeded in realizing their intent—how effectively the software helps manage the described system in its data.\n\nThus, shopping software describes real physical products in a store’s stock, potentially coming to you, arriving in the physical world. The software affects these products.\n\nIf the software does not affect the state of the physical world, it raises questions. A computer program by itself isn't needed; it’s only needed to change the physical world through its descriptions. **Don't be deluded by the physicality happening in print shops, data centers, or couriers.** **Keep the focus on the physicality described by information carriers.**\n\nMonitor your conversation partners' language: if someone says they are writing a report and their task is to \"submit the report,\" verify: do they truly mean they described not the courier’s work of \"delivering a package of papers\"? Likely, it’s about “using the report results\" for something changing the physical world. If this is missing from the conversation, your partner might be lying, deceiving, significantly mistaken, or poorly expressing their work's essence—and you need to ask additional questions to understand what’s going on with their work.\n\nThis requires having an extensive knowledge base and practical skills. If you make an ERP (enterprise resource planning) system, you need to understand: the ERP system documents and allows convenient viewing of various descriptions of resource flows (resources are raw materials, semi-finished products of varying processing stages and assembly, final products, “stuck” in an enterprise, that produces something—all are physical objects, occupying space-time). The ERP system exists as an informational model, a modern \"pen-paper,\" external memory for company employees, just reflecting the resource flow state, and with the planning module, also reflecting the future state of the resource flow. This is fine; the world is four-dimensional, and future physicality suits us.\n\nThe sole purpose of an ERP system is accounting for enterprise resources to plan the maximum throughput of these resources through the enterprise. The more raw material (real physical, not raw material descriptions!) passes through the enterprise and comes out as finished goods (real physical!), the more the counter money flow (real money, think of it as heaps of gold) will be. Without **decisions for physically altering the resource flow** (ordering new raw material batches, loading certain equipment, utilizing specific warehouses, shipping under certain contracts), the ERP program with its databases wouldn't be necessary; the physical world wouldn't change.\n\nPhotograph/design/documented description and any other \"information object\" as \"information carrier with information\" always describe some system. The ERP program makes a \"photograph\" of the enterprise’s resource flow as a system embodiment. The system embodiment that interests us isn't the ERP system's embodiment as a \"photograph\" embodiment. It's most likely banal, like a book's embodiment—all are somewhat similar, a couple hundred glued pages with ink particles on them. The difference is in the books' content, and with the software—the software embodiments are similar; the difference is in the software content, what the software reflects in the physical world, what it describes! **The system's embodiment** **in the ERP software case—** **is likely not the** **ERP software itself, but the** **company's resource flow, a physical object.** **If an ERP software programmer thinks their task isn't modifying the enterprise's resource flow but the** **ERP software itself (and in the worst cases of this error—the** **ERP software source code),** **the project is in trouble. Verify if the software developers understand what their software changes in the surrounding world—** **and if they check if this “what” changes in the world, not just if they test their software! Yes, this applies to you too!**\n\nIf you know nothing about the physical object needing change through your descriptions, you will be unsuccessful; no systems thinking will help. At some subtle point, your work with descriptions will become entirely fantastical, disconnected from reality. The descriptions will not correspond to the past, present, or future world states. They will be fictional, utopian descriptions. In engineering projects, this is unacceptable; resources can't be wasted on implementing utopias and fairy tales!\n\n**Systems thinking helps those who know their domain and whose knowledge extends to the physical world. Those who don't know their domain and don't mentally reach the physical world changes, nothing will help them. They will describe the bizarre, implement random changes in the physical world, or generally not affect the physical world with their fantasies.**\n\nOf course, producing fantasies instead of engineering work doesn't mean they won’t be paid. Kittens change little in the physical world but are always fed and cared for. People (and even robots, even AI agents), if they don't bite, will also always be fed, regardless of their work results, even if the results are disconnected from reality and do not change anything in the world. But sometimes, such utopian works cause harm (if only wasting resources that could be used beneficially) even if these works are well paid. So avoid detachment from reality!\n\nHow are the concepts of \"object in the real world\" and \"system embodiment\" related? A \"system\" is a type for objects in the real/physical world. These objects are characterized by being distinguishable from the world (system boundary, a boundary in space-time—you can talk about the object's shape in the four-dimensional world). Everything outside the boundary is the system's environment/surroundings. System and system embodiment are synonyms. Of course, within a system, you can distinguish other systems; they are subsystems. Of course, you can distinguish a system with an inside system—it will be called a supersystem. We will gradually unpack the concept of \"system,\" adding various connections with other concepts.\n\nIf we take a physical object, it usually has a type from the domain's subject area (a type from the meta-model/middle-ontology) derived from a domain textbook. For example, aircraft #45667 classifies as \"aircraft\" in the domain's subject area, logged as \"aircraft #45667\"::aircraft. The very concept of \"aircraft #45667\" will be a concept model corresponding to an instance of \"aircraft\" in the physical world (you don’t confuse the string \"aircraft #45667\"::aircraft” with the real physical aircraft? Strings can't fly!). We can record \"aircraft\" as a type and additionally in systems thinking record \"aircraft::system,\" adding the \"aircraft\" type from the aviation domain meta-model as \"system\" from systems thinking as the meta-meta-model. The symbol **::** will show the type used in reasoning (apple::fruit), meaning **classification relation** (membership in a set). This was thoroughly covered in the \"Rational Work\" course, but in systems thinking, we add that \"system\" and other systems thinking concepts are the types you will most often assign. You'll see the world not as a set of mere objects but objects::system (objects of type \"system\").\n\nWe can record or even simply say \"aircraft,\" without specifying the type—while clearly understanding that we just omitted the concept of the type \"system\" from the meta-meta-model. This is how systems thinking and life are connected, ensuring relevance to objects from project workflows: we mentally retain the types assigned to subject area objects (types defined by the meta-model from the subject area textbook) from courses of fundamental transdisciplinary thinking methodologies of the intellect stack (physics, semantics, concept theory, ontology, etc.)—everything needed for systems thinking, in this case, the concept of \"system embodiment\" as an assigned type. The objects with assigned types will be in the physical world, \"in life.\"\n\nTake China. In systems thinking, this will be \"China::system,\" in a domain textbook (e.g., geopolitics) —\"China::country.\" We can record \"China::country::system embodiment\" to show the full meta-modeling chain. But we can also simply write \"China,\" understanding it as \"country\" and a \"system\" (keeping these types in mind! Not necessarily writing! But necessarily understanding the type mentioned \"China\"!). **It's crucial that you always** **\"automatically\"** **should keep in mind three mutually agreed objects:**\n\n-   **object-from-life (sometimes it still needs to be found!),** **a space-time region in the physical world,** **(\"apple in life\"). This is a model, a description of the real object.**\n-   **object type from a discipline/theory** **of the method working in** **this subject area** **(“food,” or “counting object”—** **if apples are used instead of counting sticks, e.g., in a kindergarten),** **this is a meta-model, a domain model. This is taught in applied courses.**\n-   **object type** **from** **fundamental** **transdisciplines** **(e.g., \"system,\" \"physical body\")** **thinking methods of the intellect stack.** **This is a meta-meta-model, studied through education.**\n\nAnd you end up with \"life's apple,\" which can be either food or a counting object (food is eaten, counting objects in kindergarten are counted), but you can also assign the apple concepts of types \"system\" (discussing how to grow apples) and \"physical body\" (determining the apple's trajectory if thrown).\n\nWorking with types is a general principle for all thinking, not just systems thinking. You look at the world and already know a lot about it—this grants you the intellect, supplying you with types from the discipline of intellect-stack thinking methods. **These types focus attention on what's important, even if you are new to a situation. You can't say, \"I have no clue what I see.\" If familiar with systems thinking, you might say, \"I see systems\"—** **and a lot follows from that. For instance, systems have a function—a purpose outside themselves. And you can immediately be interested in these objects’ functions you see, not wasting time figuring out what to inquire about these unfamiliar objects.**\n\nAlways first search for the system's embodiment; systems thinking is primarily about the physical world and its changes, even though it deals with descriptions. But descriptions are nothing, what they describe is everything. **All descriptions** **are made** **only to change what they describe in the physical world;** **there can be many, but** **on their own, they are useless, only needed in connection with ultimately describing some system in the physical world!**",
    "5dc38e4416719cee99154ad437feba67": "---\ntitle: 'System Behavior: processes/changes'\n---\n\nSystem states change over time, and considering parts and wholes of material objects allows us to talk about changes---that is, to discuss changes/actions/**processes**/behaviors/procedures/activities simply as sets of interacting systems/\"system embodiments\"/things-in-the-physical-world as parts of a whole change/process. A process/behavior is usually called a verb or a verbal noun. There are many nuances here, and we will discuss them in a methodology course, where we will be concerned with describing methods of work, that is, describing the behaviors of creator systems (describing work according to some methods) in complex chains of creating and developing systems by other systems. For example, creating and developing an AI agent system by a team of engineers in a manufacturing company, and this team of engineers is created by a team of company development managers. During operation, the AI agent created by the engineers behaves in a certain way. The engineering team behaves in a certain way during its operation (i.e., during the creation of the AI agent). The development managers' team behaves in a certain way during its operation (i.e., during the creation of the engineering team). And this is clearly not the end of the chain, as someone also created the managers' team, and that is also a creator system. The methodology discusses the methods of creating and developing systems, and the detailed creation::behavior and development::behavior are examined in the methodology course.\n\nHere we will consider the way we can think about system behavior. It's easy to think about a hammer, easy to imagine it, easy to describe it. But how to describe the hammer's behavior?\n\nA process/process/behavior/behavior---is always changes in some states of systems (events happening), and there are many types of changes.\n\nThe most significant distinguishable types of behavior for us are:\n\n- **services as opposed to functions** (for any systems). This is a differentiation between a view of behavior from within the system towards the supersystem (service) and a view of behavior from the supersystem towards the system (function). We will consider this in detail in the current \"Systems Thinking\" course.\n- **works** **as opposed to** **work methods** of creator systems. This is a differentiation between viewing the behavior of creator systems as affordances/constructive objects (resources that could perform work) and creator systems as functional roles that possess certain work methods. This will be discussed in detail in the \"Methodology\" course.\n\nThe most general type of changes, related to a particular system, we will call **behavior** of this system in relation to the changing systems. Behavior is the system's interaction with its environment, that is, \"external behavior\". We do not consider how subsystems, which also behave in some way, jointly providing the external behavior of the system they are part of, mutually change. The external behavior of an electronic watch is displaying the time, for this, an internal battery works, some microchips and a screen, protected from external influences by the watch case.\n\nOf course, the environment behaves (changes) as well. For example, an agent looking at the watch changes their behavior. Moreover, the agent (e.g., a person) changes their behavior even to look at the watch (observation is an active action, one needs to plan it, then execute it, at least turn the head so that the eyes can see the watch). System behavior itself can be a response to external causes, not \"initiated by the system itself.\" For example, a watch may show the time after someone presses a button---the watch responds to external influences.\n\nOf course, there are many terms in the language to describe changes, many nuances of different behaviors. For example, \"if nothing happens, is it formally a change/behavior, or not? A space is also a symbol, right?\"\n\nSometimes all terms meaning behavior (verbs, verbal nouns) are considered synonymous, sometimes their meanings differ and some specialization or even classification is introduced.\n\nIn the current course subsection, we will not introduce different types of changes/behaviors/processes. We will leave the distinctions of services, system functions, and \"work methods\"/activities/\"kinds of labor\" of creator systems for later (the differences are more terminological there, the concept is the same---function/service/work method, in its difference from actual work). Let's just note that the word \"process\" is used both as a general name for \"all kinds of system changes\" (in physics) and as a synonym for methods (in process management). In management terms, \"processes\"/\"work methods\"::behaviors differ from \"works\"::behaviors. Method and work are different kinds of behavior (two ways of viewing behavior, with emphasis on different aspects):\n\n- method/way as a pattern of working with (functional) method objects (an engineering substantive view),\n- work---the employment of constructive resources to perform the method (an economic view).\n\nSometimes this distinction between processes/methods and works is emphasized by adding the epithet \"working\" to the process, and thus \"working process\" means a work method, while work is just work, not a \"working process\", a different type. More details, as we already mentioned, will be in the \"Methodology\" course. Just be attentive to the word \"process\": it can mean different things, as indeed any other words used to describe not only behavior but anything at all. Clarify what is meant, bring it down to earth!\n\n\"Changes\"::method::behavior itself (more precisely, \"change of state of some objects\"::method) are poorly represented by people and AI agents to discuss them in detail. For example, it's easy to imagine a nail, a microscope, a hammer, and to discuss the nail in detail. But how to imagine \"hammering::method of the nail::\"object changing its state during hammering\"\"? A gif/mini-movie appears in the mind, where a carpenter hammers a nail. Seemingly \"hammering a nail\" means just that. But how to discuss this in detail, how to explain it to others, how to introduce types for behaviors/processes/changes?\n\n4D extensionalism, which is the idea of the existence of things occupying space/form/extent in 4D space-time, can help with this. The four-dimensional approach allows reducing the number of relationships because a huge number of relationships turn out to be part-whole relationships, and then changes/processes (changing states of some object) become simply temporal parts.\n\n\"Hammering a nail\" is easily imagined just as an enumeration of physical objects/systems participating/interacting/mutually changing their characteristics over the time period corresponding to this hammering---i.e., \"hammering a nail includes the participation of a nail, a hammer, a board, and a carpenter\". Let's list the types: \"hammering a nail\"::process/change/behavior includes::\"indicating a set of\" \"participation\"::relationship \"nail\"::system, \"hammer\"::system, \"board\"::system, \"carpenter\"::system.\n\nThe relationship of **participation** (participation) in changes/actions/processes/procedures/activities---is simply a **specialization** of the **composition relationship** (composition, part_of/whole_to---depending on the reading direction, \"consists of\"/\"broken into\"---also depending on the reading direction).\n\nIt's very hard to find in real-life a \"nail hammering process\", the processes/changes as objects turn out to be invisible \"in one frame\". To imagine changes, one needs to imagine immediately a \"movie\"/gif, some complex pattern/rhythm unfolding over time, i.e. to find and imagine \"repetitions\", \"similarities over time\". If you switch to temporal parts, it is very easy to find mutually changing nail, hammer, board, carpenter. It's a bit harder to find them if a stone or microscope plays the role of the hammer, a wall plays the role of the board, and you yourself act as the carpenter (and therefore forget to include yourself in the process), and only the nail remains the nail---the similarity of all these \"hammering a nail\" processes undoubtedly exists, but you need to clearly understand how to discuss it. Discuss it like this: \"processes\" are discussed through the enumeration of physical objects mutually changing during their interaction. This reference to listing \"things\"/physical objects instead of actual \"behavior\" as a special object irreducible to things, remains a reliable method for finding works, actions, methods/practices/activities/labor, processes, functions, services, and other behavior in the physical world.\n\n**Look in the world for not actions labeled with verbs** **and verbal nouns** **, but objects labeled with nouns** **in the physical world (systems), which behave somehow in interaction, manifest in the world their** **(outer)** **behavior.**\n\n.\n\n![](06-behavior-of-the-system-processes-changes-13.png)\n\nIn many graphical modeling languages, **arrows with diamonds at the end** meaning the composition relationship, with the whole where the diamond is, and the part---where there is no diamond. The yellow \"chevron to the side\" is a stylized arrow, indicates that something changes over time, it denotes a \"process\". The blue circles mean physical objects participating in this process. The blue circles are parts of the process as a whole. In the end, you can consider that a \"process\" is simply such a compositional thing consisting of participating things---if the participation relationship is interpreted as simply a classic part-whole relationship.\n\nSo, a specific execution (instance, process, work) of dancing performed by a dancer starts to exist at some point in time and ceases to exist at another point---processes are not eternal, like any physical objects. If you enumerate all the objects of this \"dancing::dancer's process::system\", you describe a dance performance (which can even be considered a separate system that needs to be created to consider the dancer’s dancing in it). The dance performance as a system includes for the time of its execution\n\n- all the four-dimensional dancers whose behavior is dancing\n- the supporting segment of the four-dimensional dance floor (the parquet on which the dancers rely. This is important, try spinning on one foot for two turns on asphalt and on parquet---the dance floor covering is very important!), and also\n- the volume of air with oscillations in it, because these oscillations carry the music for dancing.\n\nWe consciously refuse to use the term \"dance\", as it is very polysemic, has numerous dictionary meanings, and therefore confuses:\n\n- Dance as dancing, dancer behavior (a dancer is a role of an agent, more about roles will be further in the course). This is exactly what we consider in this section. The dancer dances---that is the dance. The word is used in the most general sense of \"agent behavior\".\n- Dance as work performed by a specific agent at a specific time, \"performance\"/\"execution\"/\"appearance\". The dance of Vasya in kindergarten No. 6, which he will dance on the 4th of Marchember, 2029, from 14:05 to 14:07.\n- Dance as a dance style/culture/practice/method of dancing in distinguishing these methods/cultures/practices. Tango or waltz are different, and these are dances (\"tango dance\", \"waltz dance\").\n\nSo, we will say not just \"dance\", but dancing, dance performance, dance style---and thereby remove ambiguity. A similar confusion will be with many other behaviors/changes (for example, \"life\", \"rest\", \"evolution\"), implying some changes of some objects (instances and resource consideration of works, types and patterns/styles/methods/cultures/practices of works at least). We want to have these distinctions to:\n\n- be able to discuss different aspects of a situation with changes, for this, have different concepts for different types of behavior, to discuss the various peculiarities of the most different changes in the physical world and changes in descriptions of this world, as well as changes in descriptions of descriptions.\n- Not to confuse systems and their behaviors. Although we state here that within the framework of 4D extensionalism, the behavior of a system is the system itself during its changes caused by interactions as subsystems within the system (internal behavior) and the system with some systems in its external environment (external behavior), it is still difficult to think about four-dimensional systems-processes, easy to get confused, and we highly do not recommend doing it. It is better to think about systems and their behaviors, considering behavior a separate type from the type \"system\" and distinguishing behavior types for the same system.",
    "78e7232f145d6a29f532a35a1d315bf0": "---\ntitle: Computer programs as systems\n---\n\n**Program::system** **(\"systemic\" like** **OS or DBMS,**\n**software application/application)** **at the moment of** **their**\n**operation ---** **it is** **a thing, a physical object**, it occupies space in\nspace-time, it is material. A running program (the part\nof the computer that changes its state during program execution) can be\n\"knocked on\", you can poke it with your finger. A running program ---\nthe physical part of the computer that carries out the calculations of this program\nduring its operation. A program is described by its algorithm (description of the sequence\nof computations), documented in the form of program code in some\nlanguage (machine language in the computer's memory at the moment of program execution, programming\nlanguage at the time of program writing). But the algorithm does not change\nits state when it \"works\", because it is a description. However,\nthe computer interpreting the algorithm changes its state during\nthe execution of this algorithm --- and the part of it engaged\nin executing the algorithm is the program::system. Structured\ndata changes its state during program execution. The algorithm can also\nchange during program execution (one part of the algorithm can\ncompute another part of the algorithm as its data, and then this other\npart of the algorithm will also be computed). In any case, a program\n(the algorithm and data in memory, \"animated\" by a computer with some\nprocessor --- if we are talking about classical computer architecture,\nthough there may be variants with processor and memory separation, they are not always\nclearly separable) during its operation --- is an object that changes\nits states and thus behaves in some way, it is an object of four-dimensional\nspace-time, it can be considered a system.\n\nA program as a physical object at the moment of operation has different\nstates, representing the physical states of RAM and processor registers,\nreflecting the current state of the algorithm and the data changing during\nprogram execution. The computer is engaged in\nphysical processes/changes/interactions of its component parts (memory, processor)\nduring data computation by the algorithm as a\ndescription of the program. These processes in the computer occupy some place in\nthe physical world: the space in which the interacting\nparts of the computer are located, and the time during which the program\n(i.e., parts of the computer within it) performs computations:\n\n![](08-computer-programs-as-systems-14.png)\n\nOnce again, let's emphasize: a program should be considered an embodiment of a system only\nat the moment when it is actually running and working,\ndoing what it was written for. It is quite counterintuitive, but\n**the source code of a program ---** **is not the program** **(algorithm and its\ndata),** **but only a description of the program;** **the source code**\n**of the program** **in a version control system** **or just in a file on a\ncarrier ---** **is only the program documentation.** **Additionally,\nthere are data that the program will obtain after starting and\noutput after finishing.** **Do not confuse the \"description on the carrier\" with\nthe person themselves. A program ---** **is what reflects the\nstate** **of the data** **at the moment of its execution, it is what changes its\nstates over time during execution (not at the moment of creation).**\nThe source code does not change its states during execution, it does not contain changing\ndata, it is merely a description of the algorithm and data structures.\n\nTherefore, programmers who think that their engineering work\nis done at the moment of writing the source code (algorithm and data structures) --- these programmers are deeply mistaken, and it is a typical error. From acknowledging this error emerged whole movements like\nDevOps^[<https://en.wikipedia.org/wiki/DevOps>, there is\na similar movement, SRE and a more modern variant called platform\nengineering],\nSRE^[<https://en.wikipedia.org/wiki/Site_Reliability_Engineering>]\nand platform\nengineering^[<https://platformengineering.org/blog/what-is-platform-engineering>,\n<https://thenewstack.io/how-is-platform-engineering-different-from-devops-and-sre/>] --- programmers recognized that they must be concerned not only\nwith developing program code as an algorithm and data structures (time\n***Dev***elopment), but also with being operators of the running program on servers\n(time ***Op***erations). More about this in the course\n\"Systems Engineering\".\n\nThe source code is a description of the program (it is done \"in classes\", like any design, one source code describes many possible instances of the program). Before using/exploiting the program, it needs to be manufactured, using the source code as an \"description with sufficient detail for manufacturing\": compiled, assembled, placed in the RAM of the appropriate computer (possibly, before that, formatted into some container) and handed over for execution. Nowadays, even the source code in a language becomes an intermediate internal representation, as does machine code: the program description is done in natural language, and then the program's text is written and handed over for execution by an AI-agent, most often called a Copilot. These nuances of creating a program from some descriptions are not so important now. What is more important is the fact of distinguishing\n\n-   source code::program description (algorithm and data structures),\n-   File::document with program description (“information object”),\n-   running program::system.\n\nThus, **the program** **as a system** **leads** **the process**\n**of changing both its states and the states of the environment (for example,\ninput-output devices),** **performing operations on the data recorded on the** **computer/computer** **as** **the** **data carrier.** Execution::process::program behavior::system::“execution object::method” --- this is the work::behavior of this program on some\nrunning instance of a computer (or running instances\nof computers --- for example, client-side and cloud-based), at the moment when\npart of this computer (or computers) functions as a program,\nutilizing the \"execution\" method, that is, changing during the work the physical\nstate of those parts (places in space-time), which are\ninformation carriers of the algorithm and data of the program. It is clear that from the source code to such a working program on a computer is usually a long way, which previously was mostly done by the hands of programmers and computer operators, and today is done by the computers themselves (compiler tools, linkers/makers, DevOps tools are used).\n\nThe error that programmers make by considering their source code to be\nthe program is exactly the same kind of error that designers and constructors\nmake by considering their developed information models (and in the past, drawings) and other design documentation to be their system. The map is not the territory, the menu isn't the meal, you can't fly on drawings, the source code doesn’t store the values of its variables (doesn’t store changing\ndata) during execution^[There is a nuance related to Von Neumann architecture: the program can be considered both as data on a carrier and as an executable object. The same applies to the \"program in the brain\": whether it lies in the brain in its neurons as a description, or the neural network is \"computing\" something now, that is, there \"works\" a program-as-process in the physical world --- this is exactly the question of \"materiality of thought\". These are nuances, we do not consider them here. The advice is to consider the likelihood of whether it is a simple documented description of the program/thought or an executing program/thought in the process, taking this likelihood from the standpoint of purpose for some action. Discuss the most probable situation useful for your intended action. But this is a nuance, it is not essential in most situations. We remember that in systematic thinking we are not dealing with 100% formal statements poorly applicable to life, but with probabilistic reasoning, \"as in life\".].\n\n**So, the first mistake is** **to believe that the source code of the program is the program itself. No! The source code is** **a description of the program!**\n\n**The second mistake is** **to consider the program::system (even not confusing it with the source code)** **as the system that needs to be created and developed.** If you ask a program developer what system they and their colleagues are making, the usual answer is \"my target system is the program\". This is a mistake: considering the program as the target\nsystem when the program only contains a description of the target system in its data (for example, it is a part of the management system/digital twin, not having separate meaning from the controlled system/physical twin). For example, we have already seen that an ERP system as a program contains in its data a description of the flow of components through an enterprise, it is needed only to somehow cope with this flow, to optimize it.\n\nAs soon as the developer forgets that their program is only a digital twin of a physical twin and that they are developing a whole system of a digital twin and a physical twin, the project will fail. It is as if the aircraft developer is not interested in the entire aircraft but only in its control system. No, the operability of the ERP system is checked not by the fact that it itself works, but by how it manages the flow of components through the enterprise, the behavior of the physical twin is important. The operability of the aircraft control system (digital twin) is determined not by itself, but by the operability of the aircraft (physical twin). The behavior of the physical twin is important, and creating and developing a system from the subsystems of the digital and physical twins are crucial. And even in weaker versions **digital shadow** and **digital model**, this also applies: the digital twin is an automatic control system, the digital shadow is an automated control system --- it receives data from sensors of the physical twin, but then simply shows the state to the operator, and they \"manually\" control the system. The digital model also gets data \"by hand\" and provides management parameters for \"manual\" control. For example, a navigator in a car with autopilot is a digital twin, a navigator with a satellite sensor and voice indicating where to steer is a digital shadow, and if the navigator needs to tell you where you are and you will be told where to drive next, but you have to steer yourself, then this is a digital model.\nThe conversation about software today should take into account that this software is either an agent itself or a digital twin, or a digital shadow, or a digital model of some other system --- the physical twin (or the software is part of a network of software, **digital twin network**, and still, you need to think about the physical twin being controlled by this network of software).\n\n**The third mistake of “program as a system that we develop” is to consider the program itself as the developed system, not some subsystem in a situation where it is about supporting the work of some organizational entity with people or other programs.** If your salary issuance program works wonderfully, but you forgot to train the employees of the enterprise or AI agents (or even other programs within the automation) to master working with this program, then this means the program is not working: the salaries are not being issued! If the payment is only for the program, then you can argue for a long time about who pays for staff training or AI-agent training, or for reprogramming all related programs (which can be much more expensive than developing the discussed salary issuance program itself).\n\nIn the case of the error with the digital twin, the program and its data (for example, in databases) are interpreted as a book: we are usually interested not in the book itself, and not even in the content of the book (the book's text itself), but in the worlds described by the book's text. We are interested in the worlds described in the book, not in the beauty of the style (except for \"special connoisseurs\", if it’s fiction, writing for the sake of writing). It’s the same with programs: we are interested in the fragment of the surrounding world described by the program, not in the program itself (it’s no more interesting than a book and its text). If you have a dry-cleaning ordering program, you are interested in the clothes that will go from dirty to clean, the money that will be debited from your account, and the transport options for sending things to the cleaning and back. The programmer is concerned with the program, but that’s his personal issue: everyone else is concerned with how this program handles the actual dry-cleaning situation, and the programmer should also be concerned with that. If the program is excellent as software, but dry-cleaning is impossible with it --- then it’s a project failure! **Software is tricky if represented as the target system, it usually works with descriptions of target systems,** **look behind them for the physical world, changes in which matter!**\n\nIn the case of the error with \"our responsibility is only the program, we know nothing about people and organization,\" the inclusion in the target (or even \"our\") system is only software,\nbut not the organizational entity that performs some meaningful service (work that changes something outside this service), supported by the software. In corporate software development, clients expect as a result of this development not so much the correct operation of the computer with application::program, but the correct functioning of the part of the organization that this computer should support: **people in the organization** **must work together with the program according to some organizational algorithm, “workflow”, follow the work regulations, which include the use of the program ---** ** that is, they should have \"mastery\", and the program will be the tool of this mastery.** Software without people doesn’t work, it is necessary to demonstrate the work of the software-tool with people (although more and more people are being replaced by other software, including AI software), but the focus is not on changing the states of the program itself (program behavior as a development result, “payroll software works”), but on changing the states of something outside the program (\"salaries are issued\") by which \"people issuing and receiving salaries work together with the payroll software\", that is, both \"people work\" and \"software works\"). They will not accept a working drill. They will accept a worker who will drill holes in the walls with your drill: they need holes, not a drill! And the worker can use a finger if the holes appear! If there is a drill but for some reason there are no holes -- they will not pay for the drill because there is nothing to pay for. The same with software: the results of software work as a tool are needed, for that the worker needs to demonstrate the result of working with the tool.\n\nSuch a joint service of people and computers is usually called workflow (\"workflow\"::behavior), but no less often it is called an organizational process, \"work process\", drawing attention not to the actual instances of work, but to the method/mode of work necessarily including operations of the program in the total organizational process operations. The program-in-development is usually only part of the target organizational process-in-development. And the delivered running program won't be accepted on its own; its operation is of no interest by itself. The target organizational process-in-operation is needed, in which the program is only a part, and there also participate other programs, people, and sometimes other equipment, and all of them must interact correctly with each other. If the \"business travel accounting application\" works, but no one can go on business trips because no one knows how to use the program, no one will pay for the program's operation. They’ll pay for business travel, which will only happen when people and the \"business travel accounting application\" work together. No one will pay for the functionality of only the software! Software is usually only part of the system created and developed by the software development project!\n\nPeople find it hard to think about processes (including organizational processes, work processes). Therefore, the program here will be part of the organizational entity (department, project workgroup, service, service provider) that will perform the necessary changes in the end (through chains of numerous changes of descriptions and descriptions of descriptions) in the physical world. The program itself will be the personal affair of the programmer or a small programming team; keeping it at the forefront of attention as a full embodiment of some target system is reckless, it is usually only part of some system, like the motor in an electric car or the control system of a washing machine. The motor is an important part of an electric car, but usually, not the motor itself is needed, but the electric car. If the motor works well in the electric car, but the car doesn't run due to the motor being poorly coordinated with its design, no one will pay for the motor, they will pay only for the working electric car in its entirety. The same goes for the washing machine control system: it’s not needed by itself, a working washing machine is, and developers will be paid only for it, while developers of the control system will get a portion of this money to the extent they manage to control the washing machine, not to the extent the control system is operational by itself.\n\nThe matter is also complicated by the fact that programs/software/applications as informational objects (information carriers with descriptions of algorithms and data in databases) can form long chains, in which based on some descriptions, programs (or even programs-within-departments-with-people) change other descriptions, then third ones --- and only at the end of such long chains of \"descriptions of descriptions\" occurs the desired change in the external physical world. You can describe yourself for a long time, where to get your money, your intentions, record intermediate decision results by various other programs and people in a computer and/or phone, but only at the end of a long chain of booking airline tickets and checking tickets, as well as checking the presence of the plane on the tarmac, you will be physically allowed on the plane: hundreds of diverse programs and people, some of whom you are aware of, some even unknown, work to get in the physical world your state \"I'm on the plane, which is ready for the flight\". If this result does not occur, all these programs and people worked in vain. **Therefore, do not be lazy to unwind all these** **“descriptions of descriptions”,** **all the long chains of programs and programs-with-people ---** **until you reach the changes in the physical world for which everything is done. And make sure everything is in order in the physical world. Yes, it is difficult, but systematic thinking requires turning your attention in this direction. It is important:** **the output** **of software work discussions into** **discussion of changes** **in the physical** **world ---** **this matters, if reliable and expected changes in the physical world do not happen, the software development project might as well not be done at all, because nothing will change in the physical world!**\n\nFor example, this connection between software objects and the physical world\nis discussed in the DDD (domain-driven design) approach, where it is required that\nprogram objects directly reflect physical world objects in\nthe company’s domain of work (by the way, it also requires reflecting\nobjects of the mental world --- the world of descriptions, but this is not so important for us now)^[<https://en.wikipedia.org/wiki/Domain-driven_design>].",
    "ec43e685efa8f49a6f574ab1f6d33d00": "---\ntitle: Behavior is not a system\n---\n\n**It is bad to consider behavior and the system as the same object —**\n**you will find it extremely difficult to describe the behavior of the behavior: \"the state of dance during the dance by the method of dance\" —** **you will get confused right away.** **If you have chosen a verb or verbal noun as a system (\"dance\", \"life\", \"rest\"), it will generate** **both** **multiple interpretations and difficulty describing \"process states\" (not system states) —** **therefore, we will consider such a choice an error, no matter how you refer to works on 4D** **extensionism and declare,** **that \"systems and processes occupy the same place in space-time, therefore they are the same.\"** **Formally, yes, the same. But due to the peculiarities of language and communication, you will not be able to** **clearly** **discuss such processes-systems,** **clearly describe/model,** **so such choices** **\"process-is-system\"** **will be a mistake.**\n\nWe will distinguish between systems and the behavior of systems but, to clarify the boundaries of the system and the behavior of systems, we will still use 4D extensionism, describing the behavior simply by listing the things/physical bodies interacting with the change of their states. The method::behavior of eliminating a draft during ventilation will be described through the changes in the state of the door: first, the door will be in the state \"door open\", then the state \"door closed\". If it is necessary to understand what happened, we will list the objects involved in the state changes (foot and door, key and door, gust of wind and door). Various participants (relationship participate) in \"behavior\" items determine different types/classes of the method/process/practice/style::behavior of stopping drafts by \"closing the door\"::\"class method of stopping drafts\". For example, \"stopping drafts\"::method::behavior consists of smaller methods \"identify the cause\", \"eliminate the cause, close the door\", \"check that there is no more draft\", \"declare to those present that there is no more draft\".\n\nThe use of \"over-\" and \"under-\" terminology for methods/practices can be used in two ways:\n\n- As a temporal part of the situation of applying some work method (here exactly that — and we used the words \"smaller method\" instead of \"sub-method\" when describing the techniques/actions of closing the door)\n- As alternative classes/types of methods::type (for example, stopping drafts while ventilating by closing the door, vs. stopping drafts by closing the window — and other objects will already be listed there, including not the door but the window). In our course, we prefer to speak here of \"type\" or \"class\" (a reference to genus-species relationships), for example: \"type of labor\", \"type of activity\", \"type of culture\", to show different types/classes classified by the method/labor/culture::type. Although in this case, it is possible to talk about the specialization relationship (a method of preventing drafts specializes into stopping drafts by closing the door and stopping drafts by closing the window).\n\nSo when we talk about \"sub-methods\"/\"sub-practices\", be more attentive to which hierarchy the reference goes to. Classification, specialization, and part-whole relationships are very different relationships, be careful.\n\nAll these considerations of system states are needed for detailed (often — collective) discussion of some behavior as the transition of the system from one state to another.\n\nThus, an engineer thinking about dancing::behavior as requiring a set of objects existing in their mutual changes (\"dance performance\"), may also consider the source of air vibrations, and include a player (a smartphone as a player) and an audio system (the role of the audio system can be played by either stationary amplifiers and speakers, or portable acoustics, or a live rock band with all its equipment) in the performance.\n\nAnd you will also need to add spectators to the dance performance (since dancers like to say that \"without spectators — it's just movements, not a dance\"). Note that a dance::style or dance::performance, or dance::work — it's unclear, dancers themselves find it very difficult to talk about dances. This is one of the reasons why it's hard to learn how to dance: you are just poorly explained what to do!).\n\nNote that adding spectators to the performance (literally: spectators as a subsystem::\"physical part of the system\" performance::system) — is not an obvious mental step. For example, if two dancers dance with each other, that's enough for dancing; they are \"spectators\" for each other (spectators are roles, not some separate objects). Thus, spectators and dancers are participants (a participation relationship, a specialization of the \"part-whole\" relationship) of the dance performance, and here arises a fairly rich set of objects for discussing the performance situation. We can reason about the dancing of the artists more precisely, relating to physical objects, physical space-time.\n\nDancing of a dancer — is a process/action/activity, but when we add other objects to the dancer, and it becomes a \"dance performance\"::system (a set of subsystems, not \"dancing process\", as a lot happens during the performance besides just dancing::behavior of the dancer::system), thinking about both the dancer and the performance with his participation can already be roughly similar to a \"machine\", \"car\", \"hole\". Specifying what \"dancing\" is (concretizing/grounding) can be done by giving examples of this behavior/process embodiment in the dancer in different performances, rather than referring to dictionary definitions of the term \"dancing\" or \"artistic performance\". Referring to definitions leads to lengthy and fruitless \"debates on terms\", avoid such disputes. Clarify meanings through grounding.\n\nSo, even behaviors can be thought of more or less like whole objects (processes) consisting of object-parts (sub-processes), and this greatly economizes thinking.\n\nFor dance performance (within which there is \"dancing of dancers/artists\"::behavior just like within a car there is \"engine work\"::behavior, \"wheel rotation\"::behavior), thus, as with any other material/physical system embodiment, it can be conditionally \"knocked\", it can be conditionally \"loaded into a cart\", it can be conditionally \"pointed at\" — just these actions take place with a set of physical objects participating in the performance as its parts.\n\nThe conditionality of \"knocking\" or \"loading into a cart\" or \"pointing at a place in space-time\" lies in the fact that physical objects in systems can be inaccessible, too small, too hot for these actions, but this is irrelevant. These metaphors simply imply that we are talking about the physical world, discussing something embodied (occupying specific space-time, having shape and coordinates in space-time), and not abstract/ideal/informational/mathematical/mental.\n\nHowever, when we are talking not about the dance performance as a whole, but about the dancer's dancing within this performance, then you can knock on the dancer, and the dancing itself — will be a change/process/behavior, not a changing system. The dancer will change and something outside the dancer as a system (interactions, mutual changes are always happening) — the state of the air carrying music to the dancer as input information, the state of the spectators as a result of changes caused by the dancing. But if you want to consider all the interacting objects together — assemble a new system from them, for example, gather dancers, premises, music, player, and speakers, as well as spectators into a \"dance performance\"::system. To discuss in detail the \"rotation of the wheels\" as behavior of the wheels in a car, add the road, add the engine driving the wheels, add the car with its weight — you get a \"car ride\" roughly by the same logic as a \"dance performance\". The ride can already be considered a system within which various processes occur. But you cannot knock on the \"rotation of the wheels\" as actual behavior, unless you add objects. You will knock just on the wheel::system, which behaves in some way (rotates in this case). Remember: behavior always belongs to a system, and the behavior itself is not a system, but rather the behavior of the system (not even a property, just the behavior of the system, the change of states of the system)! By pointing to a system, you point to the system along with its behavior, but there is no such thing as a non-behaving system, as all ready-made systems operate, function, provide services, influence the environment, change within themselves — that is, **systems always participate in processes, always behave externally, somehow change their environment**.\n\nThe conditionality of representing such systems as \"a ride\", \"a play session\", \"an access session\" as a set of some subsystems in certain states is also in the fact that it is difficult to imagine how you \"knock\" on all these interacting subsystems simultaneously, and also during their continuous changes while interacting. Some \"communication session\" — is the interaction of servers and communication lines in different countries, and the physical configuration there continuously changes: when some physical cable breaks, the communication session continues to exist, and the interaction of servers simply starts occurring through another physical cable or even through a laser beam!\n\nAnd still, it's convenient thinking about such \"scattered in space\" systems, you just need to understand that all these various changing physical objects exist in the physical world, these are not descriptions::\"mental object\" and not documentation::\"description on a physical carrier\", and not actual changes/behaviors/processes. Processes as changes of systems are quite physical, the systems as separate changing objects participating in them (participate in processes, participate in changes, \"carry out changes\", for example, \"carry out service::behavior\").\n\nSay, we easily call a \"dance performance\" (like any \"event\") a \"system\", and the leading process/change there will be — dancers' dancing, and also providing music (musicians playing music, or the speakers playing connected to a player, and through Bluetooth — always remember there are alternatives that can be considered separately). Dancing — no, we won't call it a system, leaving it as the dancer's behavior. The system performing some behavior (work, function, service, practice) of dancing remains the dancer, and dancing becomes the behavior (work, service, practice, method, way, function — features of using different terms with varying meanings in system thinking will be discussed later) of the dancers, not the performance. The performance does not dance! It entertains, pleases, makes money, whatever, but dancers dance in it, they are inside the performance, part of it. **Parts of the system have certain properties/characteristics and** **behavior, while the whole** **has other properties/characteristics and** **behavior.** This appearance of new properties and new behavior in the system relative to its parts, is called **emergent property/emergence**.\n\nSystems always, during their existence (when they are ready and used, not when they are created and developed), produce some changes in the surrounding world (that is, they behave externally, participate in a process) and change themselves in the course of these changes. Therefore, the dancer — dances in the course of their work, the resting — rests, the living agent — lives. How to talk about this? To speak precisely, it is necessary to somehow collect a supersystem for the changing objects — and discuss the behavior of some system as a part of its supersystem.\n\nWhat mistakes are there? For example, to say that the dancer dances during/in the dance, and not in the course/of the dance performance. You won’t be able to clearly say what the \"dance\" consists of (is it the performance in general? Only the dancer's dancing, i.e., the change in some rhythm of the dancer's poses?), everyone will understand you differently. But you can easily agree on the \"dance performance\" and the dancer with his dancing during this performance, avoiding ambiguity in defining the dance as a separate system. To say that the resting rests during the rest, the living lives during life — it will also be unclear, as intuitively, it is not clear what things make up \"rest\" and what things make up \"life.\" Therefore, the situations of resting and living will need to be carefully specified, caution when translating processes into systems along the 4D extensionism line, you will have to present supersystems for systems whose behavior you are discussing, and also might be asked about the change of the state of state changes (that is, changes in behavior states — it will be very difficult to answer this question, but if there is a system — there will be its behavior, if the behavior is called a system, they will ask about its behavior, \"behavior of behavior\").\n\nYou can \"knock\" on the enterprise::system during its activity::behavior. But you are unlikely to knock \"on the activity of the enterprise\", you will have to present all the objects affected by the enterprise in the external world during changes — and then this \"enterprise activity\" will probably be some other object, with different properties (as \"dancer's dancing\" became completely different when it was included in the \"dance performance\"). Although the activity of an enterprise is much more complex than dancing, but essentially not much different from it, during this activity people, equipment, buildings, and structures, raw materials, and semi-finished products interact. You can knock on them. The enterprise exists in our world. Despite the fact that processes continuously occur within it, and it participates in processes in external environments, you can work with it as a \"thing\", although consisting of many other things involved in its activity::behavior.\n\nThe systems of an enterprise (**roles**, performing **methods/processes**^[Following ISO 29148, we recommend not saying \"business processes\" but \"organizational processes\"**work**, opposed to **services/units**, performing some **services/work**) when understanding this enterprise as a set of physical objects (buildings, materials, equipment, and even people) playing some role in it, become quite \"physical\", non-abstract, having spatial-temporal extent. All objects making up the enterprise are easy to imagine, easy to find by their descriptions, and easy to describe. To start, you just need to list the physical objects involved in the process — and it will immediately become clear whether you understand the process in the same way as others in the enterprise. But you cannot \"define\", you cannot define processes through assigning them to some classes of operations/procedures, this will only lead to disputes about terms. And you cannot consider the procedures of processes themselves: the regulations only describe the process! You cannot \"knock\" on a description-procedure (which is presented on a screen, or paper, or even in computer memory), but you can knock on a procedure document, process documentation. And this knocks on a completely different object than the process/work defined by the procedure. Knocking on a person and knocking on a person's photo — is knocking on different items! You can knock on a document, but you cannot knock on the process described by the document — you will be knocking on the system that performs the process.\n\nWe will often use the example of the system behavior of a dancing dancer — a dancer (as will be shown later in the course) is not as trivially broken down into parts as a pump or a bicycle. But dance performances with dancers' dancing are still much simpler than an enterprise with its workers' work, so thinking about dances is easier than about an enterprise. And it's not in vain that one of the classic (published in 1999) books by Peter Senge on system thinking for enterprises is called \"The Dance of Change\"^[<https://www.ozon.ru/context/detail/id/1378492/>].\n\nAnother example — intelligence, as a system implemented by the brain or computer apparatus. Its behavior — thinking. You cannot \"knock\" on thinking, but on intelligence (we understand it's part of the material system-computer) — quite, even if we don't know exactly which parts (neurons and other brain cells — which exactly, transistors of a classical computer) perform thinking::behavior.\n\nIf we talk about a single object-instance that needs to be made and for this to create an organization — this is a good system choice. An event (in our case — \"dance performance\" is such a micro-event, and a dance party — simply an event, dance festival — a large event, they are \"held\", \"conducted\") — is a normal system choice. It's clear how to think about it. But still, you will have to define what the event does with its environment and what is part of the event and what is part of the environment.\n\nIf it is a routine \"work process\"/method, or \"physical process\"/function (\"water flows\", \"the room is cleaned\", \"the company works — and it goes from dawn to dusk, endlessly\"), that is, talking not about something being created, but a method/culture/\"work process\"/activity, then it is a bad system choice, negotiating about such a \"system\" will be extremely difficult, formally everything will be correct, but the project will suffer from such a system choice.\n\nAgain: an event — OK as a created and developed system (as well as a session game, a deal, and other non-standard not very similar to a detail or factory objects, and for them, it's clear how to describe and think about them as systems), but a work method or work — not a system, but behavior of some system (a method is learned, a method is taught, a method is \"set up\", but not \"created as a method instance\" or \"released is small batches\". Compare: creating five game sessions sounds good, this is not \"creating five methods of conducting game sessions\", it's clear that the method is discussed separately, game sessions — separately. The game session here — is the states of the game server with the game world and the player, which are maintained together in the interconnection, it's clear how to reason about them as material objects, and not \"behaviors\". We will discuss such examples of \"non-classical/noniron systems\" later in the course).\n\nWhat to do when it's unclear whether it's good or bad? For example, \"let's organize the harvest\" — to create a \"harvest\" system, or organize a work process of harvest, how should it be? There are no strict criteria, no recipes (at the course level, without delving into the details of a specific project). Ontological choices (which objects of which types to allocate in the world) — they are always probabilistic, sometimes, after a year, you need to go back and redefine something in the project: what is chosen correctly as a system, and what is poorly chosen. During numerous discussions of the target system by students of our courses, they redefine the choice of the target system almost weekly, five to six times, and each time they think, \"this variant is the best!\". But when they \"hit the mark\" — everything magically starts explaining to the surrounding in a couple of minutes, project consensus is reached instantly. It's interesting that the name of the target system usually appears very early in the speech, but the named object is not considered a target system, and sometimes it takes a month or even a couple of months to realize that this is the target system. But when a successful choice is made — it brings great relief, \"the puzzle fit together\".\n\nHowever, just formally forming the system as \"all things participating in changes\", formally everything will be OK, but there will be no project agreements, because",
    "9c3174bf6e1e343beb17bec19d159a4f": "---\ntitle: Implementation, Description, and Documentation of the System\n---\n\nIn a systems approach, it is very important to be **adequate** in thinking: to understand whether we are talking about the physical reality of our world, tied to it, or just fantasizing about some abstract world of ideas that may not correspond to reality. If we want to reliably change the physical world according to our plans, if we are talking about human activity, then we need to somehow tie all our reasoning to the physical world, ultimately deal with the physical reality^[In philosophy, this tying of facts to reality is described as grounding, <https://plato.stanford.edu/entries/grounding/>].\n\nThe adequacy of systems thinking is ensured by the fact that when we talk about a system, we mean the **implementation of the system** (system realization—the same root as real, literally it is about existence in reality), usually **at the moment of operation**, when the system is working/functioning, interacting with the surrounding world.\n\nA system is always understood as a specific implementation of the system in the physical world—a unique, individual physical object. For example, this is the company Apple (all its buildings, structures, and employees at the moment they work there), fuel pump with serial number #12345, installed on the engine #5678, the performance (work of the dancers) of the dance \"Barynya\" on the stage of the Ust-Uryupinsk theater on the evening of October 24, 2029 (the implementation of the system in the future suits us perfectly).\n\nHow do we know that a specific implemented system exists in the physical world? We will consider that in the physical world there are (including in the present, past, and future—time does not matter here!) only those objects that occupy some place, **volume** of some convoluted shape **in** **our** **space-time**, accepting Einstein's idea of the existence of the physical world in four-dimensional space-time. There is a piece of space-time that we call **system** and distinguish with our attention from its **environment**, while the system has a **boundary** passing through space and time. Since this involves space-time, it doesn’t matter where in space (here or in a neighboring galaxy) and doesn’t matter where in time (for example, the system will exist for five minutes but a hundred years from \"now\").\n\nThus, a specific system has some extent in space (that is, shape—size, length, width, height, radius) and in time (that is, there is a moment when it began to exist and a moment when it will cease to exist).\n\nAnd this system also has changing **states**. Systems change as they interact with surrounding systems, which are also in the physical world, and within them, the interacting subsystems are also changing. For example, \"door::system is open\", \"door::system is closed\", \"door::system is broken down\"—these are all different states of the door. States are extremely important since different methods can lead to different states of systems. For example, \"open door number four at 3:15 PM on March 24\"::work can change door number four from the state \"door is closed\" to the state \"door is open\" (for example, \"open with a key, turn the handle and push with a hand\"::\"method of work\"), or \"door is broken down\" (for example, \"kick hard in the lock area\"::\"method of work\").\n\nA systems view of the world is physically/realistic. The concept of \"system\" comes from physics^[https://en.wikipedia.org/wiki/Physical_system]. Physics selects mathematical objects to express the properties of objects in the surrounding physical world, which behave similarly in thought experiments. Semantics is a transdiscipline that connects physics with its physical objects (objects), concepts as mathematical/ideal objects, and signs as patterns on some medium, which designate objects and concepts (signs are studied by the discipline of semiotics). You have already studied the basics of semantics in the course \"Rational Work\"; in our course \"Systems Thinking\" the application of semantics to the systems approach will be revealed, and in the course \"Intellect-Stack\" much more detail will be given about semantics, physics, mathematics, semiotics and their connections.\n\nThus, we clearly distinguish (and this distinction is the subject of study of the transdiscipline of semantics):\n\n-   **Implementation of the system** (system realization), occupying volume in the physical space-time as the subject of physics.\n-   **Description of the system** (system definition, often also called system definitions, do not confuse with \"dictionary definitions\"!) as an ideal/mathematical/mental/abstract/conceptual object. The behavior of descriptions as ideal objects is studied by mathematics.\n-   **Document with a system description**, as the expression of the system description on a physical medium. Methods of expression (patterns on a physical medium) are studied by semiotics, the \"science of signs.\"\n\nIn the physical world, there are some non-zero size sections of space, while mathematics deals with mathematical points, and semiotics deals with patterns on a medium, signs/symbols. Of course, there are distributed representations, which are studied in methods of representation learning (we translate learning in AI methods as cognition). But we will not deal with how intuitive fast thinking S1 is arranged, which uses distributed representations. We will work with local/symbolic/symbolic/sign representations, which are dealt with by slow thinking S2. In distributed representations, it is very difficult to find errors; they are not localized in the literal sense of the word. But it is much easier to find errors in symbolic representations. Therefore, engineering tasks are more reliably solved in compact local representations with a few signs, rather than in distributed representations (for example, neural networks—living in human brains or computer systems in AI).\n\nThe behaviors of mathematical objects and their corresponding physical objects always differ, which is why physics, in the course of its development, replaces some mathematical representations with others, which behave more similarly to how physical objects behave. For example, the sum of the angles of a triangle near Earth is slightly more than 180° not even because of the Earth's roundness, but because of the curvature of space-time by the Earth's mass. Therefore, GPS navigation cannot be realized if one relies on Euclidean geometry in the physical calculations of an engineering project. Thus, physics replaced Euclidean geometry with Riemannian geometry in the theory of relativity.\n\nTraditionally, the correspondence of descriptions as ideal/mathematical objects/concepts, expressed/presented by some patterns/patterns/templates/resemblance on some physical objects (documents) and the represented/represented by them other (described) physical objects/systems is dealt with by semantics. However, semantics can also deal with the description of descriptions (for example, you can describe the mathematical language in which you describe a physical object). But this chain of descriptions always rests on the description of real physical objects, otherwise, it will be impossible to agree on what all these descriptions mean; without grounding, you can’t work with descriptions.\n\nSemantics is sometimes considered a part of computer science alongside algorithmics; more on this can be learned, for example, from David Deutsch's book \"The Beginning of Infinity. Explanations That Transform the World\"^[<https://www.litres.ru/devid-doych/nachalo-beskonechnosti-obyasneniya-kotorye-menyaut-mir/>], where he discusses the relationships between physics, mathematics, and computer science. More explanations can be found in the course \"Intellect-Stack.\" **In systems thinking, it is essential that all descriptions in the world are, in the end, descriptions of systems, as we represent the entire physical world as implementations of various interacting systems.** The reservation \"in the end\" is if you consider that sometimes one description describes another description.\n\nThe descriptions themselves as mental/ideal/conceptual/mathematical/abstract objects have no place in the real world. One cannot say that the mathematical/mental object \"number 300\", defining the height in meters (implementation) of the system \"Eiffel Tower\", exists somewhere in the real world and has its own length-width-height. If you point to this \"number 300\" and say that it exists and has its own volume, you will not point to the number itself but to a **document** as the **information carrier**, which by its patterns/forms as material forms (patterns of paint particles, or transparency of the material, or somehow else) encodes this number. Thus, the place in the physical world is not occupied by \"300\" as a number, not part of the description of the Eiffel Tower (the number 300 describes the Eiffel Tower), but by the material object piece of **documentation** (system description as opposed to system definition) of the Eiffel Tower, that is, the information/document carrier with the information/description recorded on it. **A document—a** **abstract/ideal/mathematical/concept/conceptual** **description of the system, recorded on** **some** **physical** **information carrier.** **One or several documents are usually called the system documentation.**\n\nIn the documentation, patterns on the carrier encode concepts/concepts/mathematical/abstract objects, representing some (ultimately, because sometimes there are descriptions of descriptions) different properties of physical objects. Again and again, in different words, we repeat this trinity: sign, concept, referent.\n\nIn systems thinking, you will need confident knowledge of the basics of semantics (for example, semantics is taught in the course \"Rational Work\"). Woe to you if you poorly understand this material and confuse a car as a target system and a photograph of a car as a document-carrier of the description of this car. The photograph is material, but its materiality is important only as the possibility to carry the description of the physical object-car, the materiality of information carriers should not confuse us—this is not the materiality of the implementation of the depicted/described/documented system! **A common mistake is to consider the target system as some document with a system description.** If you are not interested in the content of the document (you are a printing house, or a courier, or a material archive: they do not care about the content, the information, only the physical form of the document), you can consider the document or even the entire documentation as the target system. If you are interested in what is described in the document, then the target system is definitely not that document; you are concerned with the description, not the document itself. So, look for what is described in the document and do not get distracted by the document itself!\n\nThe screen or paper of a photograph or even the computer memory with the photograph file is information carriers, not the \"photograph\" itself as information on it! Tearing a paper photograph (documentation of the photographed person::system) does not tear the person depicted in the photograph (implementation of the system), nor does it even tear the image of the person on that photograph (system description), because it may remain in hundreds of other physical and electronic carriers. It's tearing a piece of paper, not the image or the person! Punishment for \"burning the flag\" is punishment for forbidden thoughts, not for property damage!\n\nAbsolutely the same action—turning off the screen with the photograph or deleting the photograph file (this is not as symbolic as tearing a paper photograph, but in essence, it is the same.\nAbstract/mathematical/conceptual/concept objects do not burn, representing them on carriers is usually easy to copy, and the destruction of a document, even electronic—this is not the destruction of the object described by the document, and often not even the disappearance of the documented description, available in many copies of the document). The concept/concept/mathematical object \"number 1\" in the grand scheme does not even depend on the font and other display features, it is abstract, it can be expressed in many ways, many renditions of signs. And we remember that there are no concepts in the physical world; they are abstract/mathematical. Information models of systems (once upon a time they were called designs) are abstract/ideal/conceptual; they are documented in many copies and describe the implementation of a system, i.e., the physical world. The information engineering model of the spaceport, sending people on rockets to Mars, is an explanation of a possible physical world (since we are talking about a possible future).\n\n**System descriptions** are easy to distinguish from system implementations and system documents—they don’t occupy space in the physical world, they don’t have volume and coordinates in this world, they are **abstract/**“ideal”/immaterial/mathematical/conceptual as opposed to material/physical/implemented. Systems and system documents (documents about systems) are material, they occupy space in the physical world, but we do not confuse systems and documents with system descriptions.\n\nPeople ultimately are interested in system implementations (houses, airplanes, skill of the manager, game session, money), and system descriptions and documentation (information models, papers with writings, images on the screen) interest them precisely to the extent that without them the implementation of the system is difficult to make, especially when it comes to systems created by many people:\n\n-   Documentation is external memory, \"exo-cortex.\" We do not trust the biological brain; we trust what is written on some more stable carrier. Documentation is always in exo-cortex, not in neocortex (cerebral cortex). For AI agents, documentation can be with neural network weights, but it is quite copiable and stable over time.\n-   Documentation carries models (only the important in the description). This is already the result of thinking: it says not \"everything\" (which is impossible to discuss) about the system, but only \"something important\" (which can be discussed, checked for errors, adopted as a guideline for actions to change the physical world, and not just change of descriptions: changes to descriptions on carriers are not changes to the physical world, unless you are a printer or a computer monitor manufacturer).\n-   A designer from a connectionist/neural network (in the human brain or AI agent) model prepares a symbolic model of the system and places it on an external carrier (\"exo-cortex\") so that the production technologist can prepare a fabrication program considering the specific equipment of the production platform/factory. Division of labor: different agents think about the system’s creation, so agents need to somehow transfer the results of their thinking. This is done through system documentation, though today more often **documentation is computer models, and not paper documents, and documents in this case are not transferred/transported, but access is gained to them.**\n\nDistinction for the implementation of the system (physical), description (non-physical), documentation (physical as an information carrier, this is not the described system) is necessary, among other things, to prevent common mistakes of people who play the roles of design engineers in system creation projects:\n\n-   When people don’t even think about creating a system but are writing another \"concept.\" It is necessary to check whether the concept describes something existing in reality and not just outlines the creation of documentation while avoiding the description of the system's implementation. For example, \"the concept of regional development\": is this utopia? What are the tools for implementing the concept? Because \"region\" is an entirely material object. Who and what should do (perform works, having resources and authority to dispose of resources) to transfer the region from the state \"was\" to \"became\" according to the concept? Does the concept accurately describe the physical object \"region,\" which will exist in the future?\n-   When developers of project documentation believe that their target system is the documentation. Engineers from the design bureau or the project institute often confuse the implementation of the system when it is already operational with the information model of such a system, which they \"imagined\" without a chance for its implementation/realization/construction. No, the target system is always the implementation of the system; without the implementation of the system, it is not worth starting its description (result of thinking, mental object), documenting this description (resulting in outputting the description to an external stable information carrier). Without the intent to create a system, it is about \"artistic descriptions,\" there can be any mistakes, and there won’t even be a desire to check them. The designer should be asked what will be the result of his work. If the designer, for instance, answers \"a building,\" then everything is OK. If such a designer answers \"an information model of a building\"—sound the alarm because the designer's thought clearly does not extend to the implementation of the system, limited by the description and documentation.\n-   Developers of source code programs (this is the description of the system's implementation) also believe that their responsibilities end when they submit the documentation (source code with any number of errors) to the version control system (carrier—external computer memory storing the version). No, their target system should be—a working program (changing its state! Program variables change their state in computer memory! This is a physical process!), and not the source code on any of its carriers. Furthermore, we need to check whether it's a just working program or a working program together with people who can perform useful work with this program—then it will also be necessary to consider the \"soft skills in people's minds,\" which also need to be developed and then produced (someone must be concerned with the skill of the people working with the program's implementation at the moment the program is operational, not its source code).\n-   A manager who developed an action plan for some project (description of works, existing as the project documentation in project management software). The implementation of a system for a project (set of works) will be an organization with the necessary resources and authority, performing works according to the plan, not the plan itself. Moreover, the target system is likely to be the system obtained in the course of these project works, not the organization conducting the works! The plan's author should primarily think about the system obtained as a result of the plan's execution!\n-   ... and such errors of \"description instead of implementation,\" related to the inability or even unwillingness of designers to be responsible for changing the physical world for the better, not just articulating ideas about such changes, are numerous. One must always pay attention to the difference between a system, its description, and its documentation. In particular, if it is about the **work of an analyst versus the work of an engineer**, there is a greater chance to obtain a \"description\" (analytical report, very rarely—some \"recommendations,\" not even included in the analytical report but presented separately) as the final result without \"changing the physical world.\" Engineers change the world; analysts (by definition!) do not change the world. It is necessary to check if there is \"synthetic\" besides \"analytics\" in the project; the implementation needs to look for him. **If a project ultimately does not change the physical world, then such a project may not be done at all since nothing will change in the world!** **Or do it as artistic creativity, write off costs under the \"entertainment\" expense item.**\n\nThe result of the work of an atomic power plant designer ultimately is the implementation of a functioning atomic power plant, not the description of the atomic power plant, even documented in the form of an information model of the atomic power plant in dozens of computers. The result of a choreographer's work is ultimately the performance of a dancer (performed at a specific point in time and space in the universe), not the description of the choreography (sequence of movements) in the dancers' heads",
    "5bdedbf256fcec6e8676955f790abb9f": "---\ntitle: The Future and Proactivity of Activities\n---\n\nSystems thinking provides the ability to understand how to think about the future. The future is physical — it’s simply the entire physical world but concerned with its time slice not right now, but after some period. Of course, each agent is interested in something unique in the future, and this interest will stem from various roles. It’s not even certain that this is about current roles since the composition of roles will change in the future. For example, the role of a \"requirements engineer\" in modern engineering no longer exists; it remains only in outdated engineering methods, and the areas of interest of systems architects from ten years ago and the areas of interest of current architects differ significantly.\n\nThe possible future is determined not \"objectively\" but subjectively by various agents in their interactions. Current agents generate/imagine this future (construct via rendering, i.e., by adding many \"realistic details\" from generative world models that only contain some important patterns without details).\n\nThe opinions of agents about what they are interested in and what methods they would use in which roles also change quickly: because\n\n- the world changes, and the agents themselves also change physically,\n- agents' models of the world and themselves also change,\n- the degree of confidence in the accuracy of these models changes,\n- work culture also evolves, and the content of methods evolves too — the best method at a certain time requires interest in objects that were uninteresting to previous versions of the method.\n\nThus, for each intellectual agent (not necessarily a human), the entire future is not interesting, only what is usually interesting to the roles they play in their lives, and even those roles and interests change in the future, following changes in roles and state-of-the-art methods of those roles.\n\nAgents playing the role of homemakers are not interested in primuses and kerogas today, and you still need to find people who know what that is — yet fifty years ago, it was common kitchenware. The course’s author remembers well both preparing dinner on a kerogas and a primus — and this was during ordinary urban life. \"Pump up the primus\" was regularly assigned even to children, as there was a built-in pump!\n\n\n![](11-the-future-and-proactivity-of-activities-46.png)\n\n\nGas later came into homes, and state-of-the-art methods of heating food for home cooking changed dramatically. And just see how the methods of gas extraction and distribution have changed over those fifty years!\n\nThe future is represented to agents as an environment for their target systems, which these agents (e.g., people) will create and develop in their future project roles. The environment consists of various super-systems. Which ones? These are described by future needs. Which specific target systems will people create in the future? This is described by future concepts of use. We learn about the future from descriptions of its target systems and their super-systems — from concepts of use of certain future (i.e., currently non-existent, unknown to us) systems according to needs that do not yet exist.\n\n\"Future studies\" thus becomes system design. Design, in essence, is \"looking into the future.\" The concept of use is developed (development now, actual use will be in the future) by the sub-role of the engineer-developer: systems engineer, and there is also the sub-role of the production technologist, who relies on the internal development system of the future, and the operator-engineer, who will or will not be able to work in that very future, while the general characteristics of the system are defined by the systems architect, who is also concerned with the future, and then there has to be a visionary who agrees that the project will be profitable and not incur losses for the development team. This does not change for near-term (days and months), mid-term (a year to three), or long-term (beyond three years — today, it’s impossible to guess even for three years!) future. Engineers always look at the future with one eye, at the present with the other. All design projects/design and projects/project — they are about the future.\n\nPractitioners/engineers must be able to create **generative models** to foresee a detailed future, based on their (sometimes unconscious) abstract knowledge. A generative model is a model from which a reverse modeling action can be performed: generate some representations of the source modeling object, \"imagine\" world variants that would give the model when modeled. If it's a generative meta-model, then imagine/render/generate a model. If it's a model, then imagine/render/generate the world. And what other models are there? **Discriminative models**, they provide classification, answering the question \"here's a description — what type of object is this?\". Generative models respond to the request: \"give an example of an object that meets the description of its type\". A generative model from text (description) will generate an image (add details, remove abstraction). A discriminative model from text will tell the type of object described by the text (remove details, raise abstraction)^[<https://www.youtube.com/watch?v=hjsZSmL67Ck>].\n\nWhen you join a project for system creation and development after taking courses in systems thinking, methodology, systems engineering, personal engineering, system management, you cannot claim ignorance about this project! You know the most general features of all projects — this means you can somehow navigate this new project. If you find yourself in the future, you will also see some projects — and you can navigate them too! You have knowledge of the meta-meta-model, meaning you will quickly understand the meta-model (ontology of the subject area of your new project), the model (important about real objects), and then the modeled world itself. It doesn’t matter if this happens in a distant poorly predictable future (for example, three years from now), or right now, but in a couple of hours.\n\nFounders as engineers of an enterprise (often called \"entrepreneurs,\" but we avoid this term: everyone has their own set of roles under it, and some even think it's about \"the psychological makeup of an agent\") earn from sometimes finding themselves in the right time at the right place: predicting the future, engaging in successful (luck is important here!) envisioning::\"method/practice of work\" (determining in the role of a visionary, equivalent to Schumpeter’s economic entrepreneur, rather than the everyday understanding of an entrepreneur, what target system would be profitable to create, and what would not), and strategizing (determining which method/way of work will achieve the desired results). This is discussed in more detail in the course \"System Management\" (and materials on market economy are also provided there, since in a planned economy this all happens very differently).\n\nSuccessful founders correctly (or incorrectly in the case of failure — and there are many more failures, but no one talks about them anywhere) use imagination to generate a correct picture of the future.\n\nFor example, Elon Musk founded Tesla, predicting that electric vehicles would sell well. In his world model, he considered that the cost of battery storage for electric cars would gradually decline annually, and at some point, electric cars would be more profitable than internal combustion engine cars, and he was right — around 2022, the total cost of owning an electric car and an internal combustion engine car became approximately the same^[<https://www.leaseplan.com/corporate/~/media/Files/L/Leaseplan/2022-CCI-Report_final.pdf>]. Jensen Huang, when founding NVIDIA, figured that computers could be used for graphic-intensive games — and if this developed, there would be a need for video hardware accelerators. And it happened exactly like that.\n\nStrategizing as the selection of a collective method/strategy of a company’s operation is the leading method of:\n\n- serial entrepreneurship (founding companies, these people call themselves founders),\n- corporate entrepreneurship (sponsoring projects in project management, not only managers or founders but all employees of the company, especially in top positions, engage in this, that is, also engineers),\n- creative proactive decision-making in any other activity (entrepreneurship as taking initiative, research, and creative curiosity, active envisioning).\n\nStrategizing involves aligning the interests of engineers who can create a target system, marketers who can sell it, managers who can organize the enterprise, and fundraisers who can attract investments for it all. These are all different roles. The word \"entrepreneur\" can take on many meanings (including the very mundane \"rich person\" or even just \"a person with a risk-taking nature\"), which may involve performing some of the listed roles or even any necessary roles for a future company, thus calling an agent an \"entrepreneur.\" We taboo the word \"entrepreneur\" due to the ambiguity of its meanings. For **Schumpeterian entrepreneur**, we'll keep the term **visionary** for the target system and **businessman** for the creation system, more details on this will be discussed in the \"System Management\" course (and remember that in the case of a company, there are minimally three created systems:\n\n- The target system with its cost of creating and selling, which concerns the engineer team's role in the company. The profitability of selling the target system is here.\n- The client base (all the clients) of this system with the cost of creating and selling to the engineer team and the businessman — concerns the team of marketers: role (marketing includes promotions, sales). Unit economics is here, the profitability of this product.\n- The company itself with all its people and equipment. It costs something to create (investments), then it can be sold — and maximizing the sale price is the businessman's role. The profitability of selling the company is here.\n\nAll this, of course, ties together during strategizing and later during strategy execution as the method to achieve success for all these created systems. All this strategizing (defining strategy as the method to achieve success for all created systems), and then planning the strategy’s execution (planning work considering resources, potentially realizing that executing the strategy with current resources is impossible and adjusting the strategy accordingly) — this is work with the future, requiring generative/generative models and strict criticism from discriminative/discriminative models\n\nIn any case, during any project of creating and developing systems, various models must be developed, describing the target system (concept of use, behavior descriptions in tests for justifying the system's success, system concept, and project taking the concept to a detail sufficient for manufacturing, etc.) and the creation system (e.g., strategizing models — business model, organizational development model, interest alignment model).\n\nSystems thinking implies that you will have to model (think by modeling) considering multiple systemic levels and numerous systems at these levels simultaneously. For instance, if you plan to release electric vehicles, you must contemplate the target system in its environment (an electric vehicle with its surrounding network of roads and charging stations, as well as within the electric vehicle, its most expensive subsystem: batteries) and the creation system (an automobile plant, which is many times more complex than the car itself).\n\nIf you, as an engineer, have come up with a way to manufacture a product from one part printed on a 3D printer instead of assembling fifteen separate parts, thereby saving on logistics, assembly, and quality control of 15 initial parts, this is the same entrepreneurship-in-engineering, proactivity/active life stance, creative act. The systems engineer plans the system (concept of use), invents the system concept aligned with manufacturing methods (thus involving a production engineer), and the visionary assesses the market prospects of this solution — whether it will be cheap enough to manufacture compared to competitors or for sufficient sales volume to be profitable. The businessman decides that the company can invest in creating such a system.\n\nIt's not a given that creating a system occurs as a separate well-defined project within the company, let alone as a separate company. However, if work scope raises such a question, then perhaps a specific project might exist, and a person playing many of these roles will be called a \"corporate entrepreneur,\" and even a separate company might be created with the agent performing this engineering role also handling managerial tasks of starting the company from scratch, thus being an entrepreneur in the common sense of the term.\n\nWe will not say \"entrepreneur,\" instead we will continue to speak of engineering (target system) and managerial (creation system engineering) roles, including special **Schumpeterian entrepreneur** roles for the target system (visionary) and the company (businessman), detailed in the \"System Management\" course.\n\nFor any roles engaged in changing the world (proactive/practical/cultural/engineering roles), decisions on how exactly to act are based on envisaging a successful future. These decisions are made based on a generated\n\n- model (detailed description),\n- and/or meta-model (subject-oriented abstract description),\n- and/or even meta-meta-model (abstract transdisciplinary description at the level of general world views)\n\nof such a realistic image/vision of the future that the agent finds acceptable/profitable to implement, investing their resources (sometimes also others’: investors — these are external project roles).\n\nStrategizing develops hypotheses in the form of strategies as a set of models on optimal creator-system behavior (strategy — expectedly “optimal” method/work behavior description). Then resource planning is done, with hypotheses about plan feasibility too.\n\nGenerating strategies, producing decision alternatives, and subsequent making decisions on these alternatives is the fundamental thinking method — rationality, forming the basis of systems engineering: how to generate alternatives/options for decisions and then choose one to implement. More details are available in the courses \"Systems Engineering\" (rationality in engineering decision-making) and \"Intellect Stack\" (rationality as one of the fundamental thinking methods of the intellect stack).\n\nThe main takeaway: labor can be divided in making such significant decisions (say, decisions on building a nuclear plant or launching a spacecraft to Pluto), but rational behavior methods remain the same for any agents; only the thinking::calculation becomes more complex, more extensive thought volume involved, and it becomes collective.\n\nBut the same method of rational thinking::calculation applies when deciding to \"take a break from work and have coffee\". There's no labor division, the calculation volume is trivial, taking little time and involving few agents: you yourself generate/produce alternatives — take a break or not, drink coffee or tea or even have lunch, drink coffee without taking a break, take a break and just rest without coffee, etc. Then you gather information to make a decision (evaluate remaining work, check the time, recall the last coffee time, check kitchen for available coffee and tea types, etc.), and then you make a decision (this involves decision theory).\n\nThinking about the expected success of labor/activity/practice/engineering/methods of one's own and others' agents (both cooperating and hindering), is methodologically the same: producing hypotheses on successful methods/modes of action, choosing the most likely successful method/mode of action under uncertainty, resource planning, performing action, finding discrepancies with world models, and then refining these models and proceeding with the next iteration — generating smart mutations for hypotheses, and so on, often happening concurrently. The method remains the same for situations of:\n\n- engineering oneself (both body and personality) as a series of steps investing oneself into some activities, learning something, training the body, acquiring skills for engaging in various project types,\n- \"corporate entrepreneurship,\" where investments are made in creating some company-needed system (engineers and managers in big companies),\n- \"technological entrepreneurship\" (startups built around certain methods and their tools), where investments are made in creating systems that will achieve market success,\n- \"social entrepreneurship,\" investing in creating systems at community, society, or even humanity level.\n\n**All this relies on actions oriented toward the future:** **proactivity/initiative/activity/entrepreneurship as an essential part** **of labor/practice/activity/engineering/culture/work method, consisting of rational decisions** **regarding achieving an improved future state through certain actions: generating various future scenarios,** **based on best generative models,** **gathering information about these options, deciding on one to implement,** **and then investing** **efforts, money, resources, nerves** **(if speaking of human agents), time into realizing** **this** **optimal/rational choice by** **the potential** **benefits and risks** **ratio.**\n\n**A rational agent is willing to endure temporary deterioration of their state, depletion of their resources during some action —** **to end up in a world after that action where their state is better than expected for that same future moment when planning, without that action. A rational agent is enterprising, initiative-taking, proactive (though this was already stated in the previous paragraph).**\n\nThe most successful agents are those who creatively generate more options and then manage to rationally choose the optimal ones based on the most up-to-date accurate world models (including models of themselves!). **The defining characteristic in productive activity,** **therefore, is quality generative modeling** **of various model options,** **followed by quality differentiating/discriminative** **criticism, leading to a quality world model.** **The concern of systems thinking** **is primarily a quality world model (including the \"self-model\" for the agent as part of the world).**\n\nNearly all agents (humans, AI, organizations) engage in this \"entrepreneurship\" (remember, the word is taboo because it factually involves various methods adhered to by various roles), though not all choose to be company founders, business owners, thus receiving all possible profits and bearing all possible losses.\n\nThere are surprisingly many smart people, but surprisingly few billionaires: often, smart people soberly assess their chances and don’t play roulette with a continuously changing market, ongoing techno-evolution; it’s very stressful and arduous, and not everyone likes it, and even for those who do, not everyone succeeds. This will be more thoroughly examined in the \"System Management\" course.",
    "7db6b01a4fb59503ffffa5332c997129": "---\ntitle: Complexity and Measures of Complexity\n---\n\nThe concept of complexity has been intensively developed not only within the framework of **system studies** (i.e., studies on the development of a systems approach) but also in many other scientific and even engineering disciplines/theories. There is no final consensus on what complexity is, and none is anticipated: different types of complexity are interesting for different projects and different roles within those projects. Seth Lloyd compiled some examples of definitions for measures of complexity^[<http://web.mit.edu/esd.83/www/notebook/Complexity.PDF>]. He categorized all these definitions as attempts to answer three questions:\n\n**1.** **How difficult is it to describe the system?** This is usually measured in bits spent to represent the description. Complexity measures here include information, entropy, algorithmic complexity or algorithmic information content, maximum description length, Fisher information, Rényi entropy, code length (prefix-free, Huffman, Shannon-Fano, error-correcting, Hamming), Chernoff information, dimension, fractal dimension, Lempel-Ziv complexity.\n\n**2.** **How difficult is it to create the system?** Complexity as the difficulty of creation is measured in time, energy, dollars, etc. Complexity measures here include computational complexity, temporal computational complexity, spatial computational complexity, information-based complexity, logical depth, thermodynamic depth, cost, crypticity.\n\n**3. What is the degree of organization?** There can be two options here:\n\n**a)** **Effective complexity**, the difficulty of describing the organizational structure, be it corporate, chemical, cellular. Here are the terms in English: Metric Entropy; Fractal Dimension; Excess Entropy; Stochastic Complexity; Sophistication; Effective Measure Complexity; True Measure Complexity; Topological epsilon-machine size; Conditional Information; Conditional Algorithmic Information Content; Schema length; Ideal Complexity; Hierarchical Complexity; Tree subgraph diversity; Homogeneous Complexity; Grammatical Complexity.\n\n**b)** **The amount of information that needs to be exchanged between parts of the system due to such an organizational structure**: Algorithmic Mutual Information; Channel Capacity; Correlation; Stored Information; Organization.\n\nThere are also concepts that are not complexity concepts but are very close: Long-Range Order; Self-Organization; Complex Adaptive Systems; Edge of Chaos. There are also completely alternative complexity measures (for example, based on the speed of describing the assessed objects, rather than the volume of this description^[<http://people.idsia.ch/~juergen/speedprior.html>]).\n\nThe situation with the concept of \"complexity\" is very characteristic of the systems approach: the words used in it seem quite \"everyday\" and having clear and intuitively understandable meanings from childhood. But no, these words suddenly turn out to be terms behind which very different concepts are hidden, these concepts are worked on by very different logical or quantitative models of various schools of thought, quantitative measurements of very different characteristics of them are carried out for very different purposes.\n\n**Within our course, we will consider a system complex if it consists of a sufficiently large number of elements, large enough that one individual agent cannot assess all connections and interactions with accuracy sufficient for rational design actions.**\n\nFor example, if we are talking about human agents, in the project of creating and developing an organization, the system in this organization can easily be five hundred people. This is more than enough for one head not to be able to assess all the connections and interactions of these people, even if one head keeps records in their computer-exocortex. Such an organizational system is inherently complex.\n\nIt is equally difficult for one agent (even a collective one) to hold all connections and interactions in the system of a smartphone, in the system of a nuclear power plant, and many other engineering systems---expanded enterprises in such projects combine the work of very diverse individual autonomous enterprises. Someone designs the processor chip for the smartphone, someone manufactures the processor chip, someone designs the smartphone, someone designs marketing campaigns---a multitude of very different enterprises, with many smart people involved, all pursuing their own interests, negotiating some interests. This is all complex, extremely complex.\n\nFor our purposes of teaching systems thinking, this informal understanding of complexity is quite sufficient, but you should remember that there are also formal understandings of complexity, there are many theories of complexity from which these formal understandings have come.\n\nIn physical theories of the evolutionary growth of complexity in biological systems, the main definition follows another line: the number of operations needed to create a particular biological object^[Complexity is notoriously difficult to define precisely, and no single, universal definition has been agreed upon (24--26), although it seems to be commonly held that \"when we see it, we know it.\" The definitions of complexity that appear to be meaningful in biology involve, depending on the level of analysis, the number of evolutionarily conserved nucleotide sites in genomes and the number of genes or functional components in organisms or sub-organismal functional systems, as well as the hierarchical organization of biological entities, be it functional networks and pathways, cells, organisms, or communities (20--23, 27). Perhaps the most general definition, pathway complexity, deriving from the concept of algorithmic complexity in mathematics, includes the number of steps required to create a given object. It has been proposed that entities with a pathway complexity above a certain threshold can only originate from biological processes (23). And further by the references in the work \"Physical foundations of biological complexity,\" from where this quote is taken, <https://www.pnas.org/doi/full/10.1073/pnas.1807890115>].\n\nSystems thinking does not provide any \"objective answers\" to questions about systems. These answers always depend on which role from which interest is asking, and which role from which interest is giving the answer, which conflicts of which system levels we are trying to overcome, and what ethics we adhere to.\n\n**In systems thinking, there is no step-by-step algorithm that leads to the correct answer (and this is not surprising: remember the disorder: a huge number of very different answers give a huge number of approximately the same suboptimal quality solutions), there is no sequence of steps guaranteeing some acceptable result of this thinking, there are no \"typical cases.\" There will always be nuances that make the \"typical\" absolutely atypical.**\n\nSystems thinking is complex, it takes a long time to master---in this it resembles some kind of \"non-objective higher mathematics,\" more or less typical reasoning over a set of objects with types prescribed by the systems approach. Systems thinking does not even strive to give precise definitions to its concepts: different agents tend to adapt these concepts for their very different current interests of the roles they are performing.\n\nDespite all this uncertainty, **the concepts of systems thinking allow us to compactly and simply describe a complex world to manage collective attention in complex project situations!** Alternative options (for example, reductionism or holism---when you clearly do not use system levels to organize people's attention in the project) turn out to be much, much worse.",
    "0d81841ccfdacdfaba1471f2f7a69894": "---\ntitle: State Building and Public Projects\n---\n\nIf a child gets hold of a hammer, then all the objects in the house turn into nails — and this means that it's not the child who owns the tool, but the tool that owns the child. If agents performing the roles of a cyber-physical systems engineer, a teacher (personality engineer), a manager (organization engineer), a politician (society engineer) get the opportunity to obtain budget funds, they will certainly take advantage of it, because it is extremely profitable: in fact, money is collected from many people under the threat of punishment for non-payment of taxes for a project to create some kind of system that someone may or may not need, or that may even be harmful to many people, and given to that one agent (individual or collective, it doesn't matter). Why not engage in a profitable project?\n\nAnd there are also projects for building the state, maintaining various forms of power and the associated economies of power (i.e., forcible collection of taxes and their further redistribution for various purposes).\n\nIf a state-builder agent (it must be clearly understood that this very state-builder supports some kind of policy/strategy for the state, so he is a politician::role) becomes familiar with the system approach, systems engineering, personality engineering, management, he will certainly want to use them to increase the likelihood of achieving his interests to the detriment of all interests of competing politicians (remember that politicians compete with each other for the implementation of some shared ideas about the organization of society, competing for resources).\n\nSystems engineering in its classic form of \"hardware\" and \"software\" engineering, cyber-physical systems engineering cannot be used for state-building purposes; it is primarily intended for projects to create and/or modernize small-scale cyber-physical-human systems (compared to state systems, aerospace projects are very small-scale). The metaphor of a watchmaker (design — manufacture of parts — assembly) is inapplicable here; this is a system of systems, it needs to be somehow grown/trained. Although it can be \"trained\" very quickly: for example, say, \"pay taxes — and sleep peacefully” and threaten with prison for non-compliance. Everyone will learn quickly!\n\nIn the projects of classic systems engineering, even for large cyber-physical systems (airliner, submarine, rocket), the project roles in relation to \"traditional\" hardware or even hardware-software systems are clearly defined. Social engineering cannot be done using these methods; they don’t work with communities and societies — and these are the main systems handled by the state (regardless of the definition of \"state\": as a country; as all the country's officials, but without citizens; as all the country's citizens together with officials; as an object of international law, etc.). The methods of systems management as enterprise engineering will also work poorly: they will work well where the relationships of labor and capital management are clear, where bosses give orders to subordinates. In state-building, this means that you can organize management within a government organization, but you cannot establish \"citizen management\" along the line of management, i.e., you can only carry out \"state-building-without-citizens,\" which may not only be meaningless but also harmful. This immediately refers to ethics: can some people control other people without any voluntary contract explicitly signed by both parties, not an \"implied social contract\" or other convenient fiction forcing free people to obey some other people organized into state bodies just because they were born somewhere and sometime, without signing anything like a contract.\n\nIn state-building, they mainly deal with large systems of an indefinite number of people who are little known or completely unknown to the system creators — communities and societies. Note that the creation of such engineering projects as fully hardware-software systems for citizen surveillance, effective killing systems (usually called weapons, and remember, all defense ministries in the world call themselves defense ministries), systems of tax enforcement, etc. — these are directly related to state-building projects, and they are not so much about the creation and development of \"hardware\" and \"software\" as about the creation and development of means of direct (most often forcible) influence on people, this immediately involves questions of ethics::decision-making method, and this method should be driven by conscience::role. As with any other method, the role operates not by intuition but by some method (even if there is no understanding of what the method is called — it doesn’t mean the method doesn’t exist). Conscience uses the method/way/culture of reasoning according to the ethics, the skill of performing which the agent knows.\n\nHow often do we hear about considering the interests of conscience::role in public projects, discussions of advanced ethical decision-making methods regarding the possibility of certain actions? Considering that in super-large systems, where many people interact, the consequences of decisions are harder to predict — how often is this discussed explicitly in the course of state-building?\n\nThe creation of effective gas vans in Fascist Germany — was it a purely engineering task, \"nothing personal, it's business,\" or still related to people? It is clear that all these projects immediately raise ethical questions, as they rely on coercive (army, police, inspections without the ability to refuse inspections) methods of implementation. But inside the performers, this is just \"activity,\" ethical questions don’t even come to mind^[[https://ru.wikipedia.org/wiki/Банальность\\_зла:\\_Эйхман\\_в\\_Иерусалиме](https://ru.wikipedia.org/wiki/Банальность_зла:_Эйхман_в_Иерусалиме)].\n\nWho are the creators of systems from people, why do they consider themselves entitled to dictate to others how to live (or even force them not to live, as in the case of gas vans), using state machine violence — dictating their rules and threatening violence for disobedience?\n\nA brief piece of advice here — if you need to engage in state-building, use knowledge of ethics, political science, conflict studies, law, economics, sociology, and systemic thinking in its \"soft\" (soft systems) forms, but don’t use systemic thinking in the forms of cyber-physical systems engineering, systems management as enterprise engineering, as you are used to using it for thinking about systems at the levels of inert matter, creatures, personality, organization/firm. These projects are usually not even of the level of a small community but of the level of society, where you personally do not know the people affected by it (including those whose taxes were taken for this and then offered to sleep peacefully).\n\nThe state and the people in it are not submarine compartments, not medical equipment parts, not even a nuclear power plant along with its staff. A pilot probably couldn’t kill anyone in a personal encounter, conscience wouldn’t allow it. But dropping an atomic bomb on a city is easy because the city is far away, deaths are not visible. **People working with the state must remember that they will have to play roles that will reduce citizens' freedoms —** **the state doesn’t grant freedoms, it primarily restricts them. This is an ethical choice** **of people helping the state.**\n\nA project for the creation and development of systems always has quite specific external project roles that pay for this project: the project's customers (there may be many!). Who is the customer in state-building? Politicians? Officials? \"The people\" (e.g., described by public opinion polls or focus group results)? \"The elite\" (and who defines it)? Groups of experts (the \"expertocracy\" option — but how to choose the \"right\" one from these numerous expert groups, all experts argue differently and often contradict each other, substantiating very well)? Who to ask generally: it’s a terrible mess. Epistemologists laughed during the pandemic because they were confused with epidemiologists — journalists, and sometimes officials, asked for comments on what was happening. But this is a common situation, whenever encountering something unknown, one needs to find someone’s opinion. For example, you can ask a celebrity — and now famous actors and journalists (not famous sociologists) speak on political issues.\n\nIt must be clearly understood that **in the case of state-building** **and public orders** **it’s about politics**, not classic project roles in system creation. Don’t deceive yourself by saying, \"There’s an order, it's paid from the budget, hence the person signing the acceptance certificate is the customer.\" Officials usurped the right to formulate orders and spend money on behalf of \"the people,\" and their actions may be directly opposite to what people in that \"people\" would consider acceptable. It’s like if an actor from the Petrushka theatre came to Shakespeare's play \"Hamlet\" and portrayed his favorite role of Petrushka instead of Hamlet because \"I was appointed to play Hamlet, so I play what I know.\"\n\nAgent-officials, for example, may pursue their personal requests for enrichment, only simulating the roles of people’s representatives in orders, not playing the role of people’s representatives: they and their families might be interested in \"kickbacks,\" the project might interest them as convenient for \"cutting,\" and the results for actual state-building might not concern them at all; they won’t perform the project roles of the customer of the public project, they have completely different roles — in their personal and family projects, or even personal enrichment projects of their superiors (and then there will be a personal justification \"I was just following orders\" and \"it’s still going to be embezzled, so let it be me rather than someone else\").\n\nBut the fact that officials may not play the role of \"the people\" and pursue personal selfish interests isn’t the main thing. The main thing is that **it’s fundamentally impossible to play the role of the representative of \"the people\"**! State-building is primarily about politics, and what one person sees as success in the role of a politician will be a complete failure for another due to different ideological stances. Some believe that abortions are bad for ethical reasons, while others think they are salvation for the youth for the same reasons. Some believe that education should be free (that is, at the taxpayers’ expense), both basic, secondary, and higher, while others think that education should be paid out of pocket and not regulated in terms of content — otherwise, there will be no diversity in education, and this is bad for humanity’s development.\n\nThere are as many differences in interests (preferences for key system characteristics at some systematic levels) as there are various political groups in \"the people.\" Therefore, state projects will be unsuccessful by definition: they will never consider the preferences of all external roles, and even these preferences can’t be honestly and fairly identified. Let’s remind that according to the definition of systems engineering, a successful system is one that takes into account the preferences in the values of important characteristics/interests for all its external project roles.\n\nIf you think something in politics is honest and fair, be ready for others to accuse you of complete incompetence, dishonesty, and unfairness — they consider something entirely opposite to be honest and fair. Attitudes toward abortions, migrants, euthanasia, progressive taxation, support for certain economic sectors, excises — there are no such questions on which there wouldn’t be directly opposite opinions.\n\nAccusations of unethical, incompetent, dishonest, unfair behavior will always be mutual. Why do you think you are right and not the others? Why should your state project ideas be implemented by you, pursuing some goals, and not the other ideas that others want to implement something entirely opposite? From general considerations, \"the others\" received the same education, in general, are no more stupid, and clearly are not criminals. Why should taxpayer money be managed by you or your official customers and not your and your officials' political opponents? Especially since there are many different opponents, in politics there are many options for each possible project decision for the organization of society, and not just two options \"correct\" and \"incorrect.\"\n\nOf course, formally a public project may have a \"project passport\" signed by some officials (people in the roles of officials), a \"collectively reviewed technical assignment,\" and even a report on its \"successful\" implementation. But this will be a \"success\" from the perspective of precisely these document-signing officials, but not any other external project roles. Some officials will sign some papers on the project passport as a \"success,\" and other politicians will be picketing the same issue, writing articles in newspapers about the obvious harm of this project, and expressing their dissatisfaction in many other ways — in systems engineering and systems management ignoring all these roles is not considered the best method/practice/culture/style, such a project can’t be considered successful.\n\nWhen someone's money is taken as taxes, and then spent on someone’s project to which the taxpayer disagrees with even its mere existence — this is exactly it, ignoring the opinion of the main project role, the owner of his money, even though already taken into the budget. Taken, by the way, forcefully — no one willingly pays taxes, they pay only under the threat of prison, so the lack of success starts from this point, you can’t say that \"money doesn’t smell\" — no, budget money smells, it wasn’t paid for services, it was taken, to be paid later.\n\nThe main project role in state-building, in public orders, in projects related to state bodies is \"the people,\" therefore many want to say something on behalf of \"the people\" in the budget line and in the project passport, and also sign the report on behalf of \"the people.\" That’s why politicians and officials talk a lot about subsidiarity, participativeness, checks, and balances, but the fact remains: by any reckoning, there are no successful projects in the state.\n\nOpinions on success are always private opinions of some group of people with certain specific role preferences. Other people with different role interests will be very dissatisfied, and such other people always exist in \"the people.\" But since the authorities have police power and the money of these same dissatisfied taxpayers (this money also pays the police), they can’t do anything. **It’s all politics, it’s not systems management, not project management, not systems engineering** **of technical systems, not** **medicine or education.**\n\n**You will be building the state and organizing public projects not from your** **inanimate** **material, but always from others** **with their own brains: from other people.** **People —** **they are not iron, and not computers. Don’t believe that you will build something successful/useful/good** **for you or** **these other people by acting as a systems thinker (systems manager, engineer, or even just a programmer, or shoemaker, or cultural worker) qualified to build from people, realizing state-building ideas. These people** **as** **self-owned systems, from which you will try to construct systems of systems, are not your materials for construction, and they are not the materials of your customer-officials, customer-politicians. They are self-owned, they all belong to themselves.** And they just as much might want to build something from you — including something you won’t like. The golden rule applies here too: do not do to others what you wouldn’t want done to you.\n\nA security engineer can protect a system from enemies (anti-clients). A state-builder engineer cannot be a security engineer unless he is building a prison. Developers of state regulation are all building a prison; they are paid precisely for this, no one ever pays for deregulation, the removal of restrictions on free activity^[Formally, state bodies have numerous initiatives for deregulation, such as reducing the list of licensed activities, reform of control and supervision, but these are just for show, merely mentioned in ideological documents: the results of this activity are almost zero for many years, there is no real deregulation.]. Think about this before building another state block that will further acquire authoritarian powers and use them to expand and gain even more power. If the order for building gas vans is profitable, it doesn’t mean you should accept this order. And no, system thinking cannot be \"soft on ethics,\" ethics is present in all reasoning of systems thinking.\n\nYou also cannot assume that you can get help from the state in developing systemic thinking, systems management, systems engineering, systems biology, and other systemic methods (often referred to as \"industrial policy,\" subsidizing work using some methods to increase the number of agents with some degree of mastery in these methods). Officials do not understand anything in these fields of activity. Even if they allocate money for developing any methods in these fields, or creating courses — there is no guarantee these will be competitive methods, competitive courses. These will be any (not the best! Precisely \"any\") methods and courses chosen by people competitive in obtaining public contracts, not competitive in providing services.\n\nLet engineers and managers' problems be solved not by \"industrial policy\" but by the market, where everyone risks their money, not someone else's, not taxpayer money. The duty of officials is not to interfere in market decisions, not to support the market-weak, quietly let them go bankrupt, not to hinder the market-strong and let them earn money, and **not to confuse the market-strong and weak with administratively strong and weak —** **that is** **not to confuse** **market participants able to attract investors and clients** **with those able to attract officials**. The market effectively realizes techno-evolution, money carries signals about the viability of certain memes/ideas.\n\nOne must also be very cautious about examples of systems engineering from military projects and projects from other areas entirely regulated by the state, such as nuclear energy projects. Because in these industries the principle of budget financing \"cost plus\" (costs actually incurred during the project plus an agreed small percentage of profit) is adopted, only complete idiots would not gradually increase the cost of projects and timelines year by year, thereby raising the amount of profit. Look at civilian technology, its costs, growth of technical characteristics, development timelines over the past twenty years (take at least the same smartphones: twenty years ago, there were barely any cell phones, not to mention smartphones) and compare with military technology — development timelines and costs. The difference will be striking. Therefore, it should be recognized that in military systems engineering there are many interesting methodological findings, but **blindly copying this experience is not advisable: it is quite possible that you** **will also copy seemingly decent ways to increase costs and lengthen development.** In the free market, companies with such methodologies would not survive, but in allegedly military markets, entirely different patterns operate. And of course, every systems engineer decides for himself the ethical question: does he want to design and build machines for killing (this is precisely what military systems engineering does). In 2007, there was a SpaceX report at the International Council on Systems Engineering (INCOSE) conference^[<https://www.incose.org/events-and-news/incose-and-se-news/2007/12/17/space-systems-engineering-risk-management-symposium---registration-open>], but in 2020 there were no SpaceX at this conference, but many engineers from military and government projects were present. Frontier is no longer considered in INCOSE, systems thinking has gone to companies oriented towards the market, not military and government applications. Today, the state and war are associated not with progress and technical achievements, but with stagnation and inefficient spending on tools.\n\nAll the same applies to systems management: military management is clearly not an example of how management in the civilian world should be organized, although many leaders would like their subordinates to march in line. Therefore, read the books of military leaders carefully, don’t take examples from military culture at face value, don’t assume that the methods found by the military for dealing with people will work outside the barracks.",
    "bf09f3cb05fee4fd623abd60b6de5005": "---\ntitle: Systems of Systems\n---\n\nSometimes a system composed of other systems is called a \"system of systems.\" This is incorrect; it's simply a system, and the other systems within it are subsystems. It seems unnecessary to specifically emphasize the fact that any system consists of systems. Nonetheless, the term **system of systems** (SoS) exists, designated for a special case of distinguishing systems based on social characteristics of their creation and the timing of their creation, rather than purely technical aspects of systems nested within each other in their environment and operations during usage.\n\n**A system of systems is defined as such a system that** **has** (Maier's criteria^[<http://sebokwiki.org/wiki/Systems_of_Systems_(SoS)>]):\n\n-   independent creation/enabling systems for its subsystems (the SoS responsible party does not have the authority to mandate common development/modernization for the systems within the SoS)\n-   subsystems that can operate independently of the existence of the target system (no authority to direct the systems' owners on how to operate)\n-   emergence/system effect from their integration into a system (creator desires to achieve a function/behavior from the target system of systems that cannot be obtained by working with individual systems within the overall system, requiring collaborative operation of these independent constituent systems within the SoS).\n-   evolutionary development (understanding what will happen in the system of systems at each subsequent step of the creation program requires research and additional agreements, as there is no role that knows how the system of systems is organized at every moment—subsystems of the system of systems as autonomous systems change independently. Therefore, there is a sequence of upgrades, not a one-time project action. However, this is not much different today from \"ordinary engineering,\" as evolutionary development is also carried out with \"just systems,\" although in this case, the structure of the engineers' organization is fully known, and subsystems are not autonomous).\n-   geographical distribution of the systems within the SoS.\n\nThese criteria vary, of course, in different engineering and management schools, but the commonality remains:\n\n-   ordinary \"systems\" imply centralized \"ownership\" of the system—having project roles/stakeholders/\"interested parties\" authorized to make decisions on all parts of the system, authorized to manage everything within their system boundaries. This is the traditional case: a car with an engine and wheels, a railway bridge, and a computer—these are typical \"just systems,\" with their systems engineers fully determining their functions, design, operational capabilities, creating and executing plans for modernization and decommissioning. Each of these \"just systems\" has one owner, one proprietor.\n-   in a system of systems, each system within it has its own owner, and the constituent systems can operate/do/perform independently without being part of the system of systems. Examples include a city, a transportation network, the internet, any company—since the people within it are self-governing and not rushing to follow someone else's orders.\n\nThus, the difference between a \"just system\" and a \"system of systems\" is not determined by the particular structure or design of the system (defined during its use) but by the existence of independent creation systems (defined at the time of creation), describing and embodying the individual constituent systems within the system of systems, and then being able to use them independently. Therefore, metaphorically, we can represent a system of systems with a diagram showing that a system of systems consists of three subsystems (\"constituent systems\" of the system of systems), each of which is autonomous and in turn consists of its own subsystems, showing two system levels), but most importantly—figures with briefcases indicate the owner-agents who need to agree to combine autonomous systems into an integrated system.\n\n![](07-systems-of-systems-45.png)\n\nIn a system of systems, the owner-agents of part-systems and agents authorized to manage labor and capital resources (people, enterprises) are crucial, making the system of systems a special case.\n\nISO/IEC/IEEE 21841:2019 defines four types of systems of systems, distinguished by **their degree of autonomy**:\n\n-   **directed**, in which there is an appointed architect (an agent in the role of architect, responsible for dividing the system into constructs and ways of organizing connections between constructs) who can issue their architectural decisions to the constituent system project teams, and a manager (an agent in the manager's role) who allocates common resources.\n-   **acknowledged**, in which there is a recognized architect, but they can only persuade the owners of the constituent SoS systems to change their systems according to the architecture they developed (i.e., the architect does not have a governance relationship, just mentoring on their architectural decisions).\n-   **collaborative**, in which all constituent system owners agree with each other on \"every little detail,\" but there are no organizational units (agents performing roles) like an architect, project manager, or similar dedicated units engaged in creating and developing the SoS at the system level.\n-   **virtual**, in which the owners of the constituent systems of the SoS know nothing about each other, so the project development teams of the constituent systems do not visibly influence each other.\n\nGradually, through trial and error over a couple of decades, the primary method of working with systems of systems emerged as \"best practice\": joint step-by-step asynchronous evolution/\"continuous modernization\" of the autonomous systems within the system of systems—because ensuring consistency and synchronization of changes in these autonomous constituent systems \"by a single project from a single center\" is extraordinarily difficult.\n\nThe approval dates for modernization projects of individual constituent systems will vary, the appearance time of emergent functionalities of the target system of systems is therefore poorly predictable, funding allocated for the modernization of constituent systems will be provided at different times, and ensuring its sufficiency cannot be guaranteed. There was no one to lead the overall reform project both engineering-wise and managerially, not to mention the lack of a common goal-setting/strategy for everyone, as there was no single businessman coordinating it and then authorized to punish deviations from the strategy.\n\nOwners of autonomous constituent systems may have different opinions about the interaction of their systems with other constituent systems within the system of systems; they may resist changes since they may be satisfied with the autonomous operation of their systems in their other supersystems, and the desire of some influential performer of an external project role to combine autonomous systems into yet another supersystem as a whole system of systems might not be supported by them.\n\nTherefore, working with systems of systems requires leadership methods. Leadership is understood as a method of catalyzing cooperation among creators: these are \"directorial\" methods of staging a play (the time of creating a play!) in a theatrical metaphor, specifically the methods of persuading role performers to perform their roles in the play selected for production by the director. In a gaming metaphor—these are methods of organizing a game by a \"game master,\" concerned with ensuring that all \"players\" (agents) consistently and ethically play their roles in the scenario culture/style. Leadership is \"the method of helping to occupy a position.\" Of course, it assumes the ability of the \"persuaded\" to further act according to the method, having mastery of the game/work method that will be performed based on the leadership work results.\n\nToday, the SoTA leadership method is distributed/shared leadership^[<https://en.wikipedia.org/wiki/Shared_leadership>]\n(no single \"director,\" everyone performs the leader's role, each around themselves). But in any case, this relies on the humanitarian disciplines/theories of sociology, political science, psychology, conflict resolution, etc. There was hope that distinguishing \"systems of systems\" as a separate class would contribute to better organizing their creation. But nothing came of it. All achievements of \"systems of systems engineering\" methods turn out to be achievements of other working methods, mainly management. Partially, results from developing systemic architecture methods, which seek to ensure maximum autonomy of team operation in \"ordinary projects,\" are used. These results are also applicable in the creation and development projects of systems of systems.\n\nNo significant breakthroughs in working with systems of systems have occurred, and no specific methods for working with systems of systems have been found. The very concept of a system of systems reflected an understanding that in creating and developing systems, ideas of the second generation system thinking \"creator agents are extremely important in considering projects for creating any target systems, systems cannot be considered separately from their creators\" are indispensable. Therefore, **we will not dedicate special attention to systems of systems in our course.**\n\nIt can be noted that communities (where everyone is engaged in their own affairs, their own projects, unlike in an organization), societies, and humanity (\"agency\") as a whole are formally also systems of systems. Another matter is that it is difficult to imagine a target system that they create as creators—except for their self-reproduction/replication and maintaining some autonomy from other systems, that is, the conversation here is similar to that about biological systems, with the engineering approach only just beginning to be considered as possible. Furthermore, creators of such systems raise quite justified suspicion: history has already seen enough \"fathers of the people,\" \"leaders of the people,\" and other dictators, who formally declared themselves creators of some large communities and societies, but whether social engineering projects are successful projects is a big question.\n\nThe main argument against the engineering perspective on changes in communities and societies: \"people in these systems understand nothing, leave it to evolution, as in the case of human beings: do not engage in eugenics, do not improve the human breed, because even if it is safe, it will lead to inequality and other unpleasantness along the lines of justice and ethics.\" The main counterargument: \"evolutionary testing of Darwinian evolution mostly leads to mistakes, the results are extinction. Maybe we should avoid extinction, move to techno-evolution with smart mutations instead of ordinary ones? If we do not let sick and weak people die and cure/teach them, why not do the same with communities and societies, rather than leave their existence to chance?\"\n\nNote the impersonal statements in the previous paragraph: who will be the agent capable of engineeringly changing society, \"curing/teaching\"? A dictator with a change instrument like a \"small army\"? A sweet-talking politician? And if there are three such politicians, all saying different things, each with a small army—leave all three? But that is precisely evolution, and then only to choose—will it be Darwinian or techno-evolution. Unfortunately, there is no developed theory of collective agents that would allow predicting the results of evolution. Therefore, even the possibilities of system thinking in social engineering projects (systems engineering above the level of organizations, where the structure of labor and capital management is understood) are limited. But they are sufficient to avoid utopias (for instance, not to build socialism based on the claim \"all past attempts were bad because I didn't do them, but I will succeed, I am good and love the poor\").",
    "e89e4f7e1c0ced30b24c50c83f4de9ef": "---\ntitle: Creation Relationships\n---\n\nA simple creation graph can be metaphorically (i.e., quite loosely) illustrated with a diagram:\n\n\n![](01-creation-relationships-40.png)\n\n\nIn the diagram, the target system (denoted by a red circle, the \"origin\" for system descriptions) is located in its systemic environment/surrounding/environment, meaning it is part of a supersystem together with other systems. The supersystem is represented by an encompassing circle in the environment, which includes other circles with circles inside—systems in the environment of the target system with their subsystems. Remember, the target system undergoes techno-evolution. It has its own subsystems (circles within the red circle). Each level of grouping parts in a whole system (denoted as smaller circles within larger encompassing circles, and so on at several levels of nesting) represents a systemic level. The systemic level of the target system's subsystems—three subsystem circles within the target system's circle, two circles around the target system, and the target system itself within the supersystem—is the systemic level where the target system is located. We do not further detail these systemic levels but simply note separate supersystems.\n\nThe target system exhibits its external properties in the supersystem \"during\" its operations, denoted by the words \"phenom^[[https://en.wikipedia.org/wiki/Phenom](https://en.wikipedia.org/wiki/Phenom)] here.\" The word run-time is often used in software engineering to denote the functioning/operation time of a finished system. However, in the diagram, we labeled it with another widely used term—Ops-time, the operating time of system operators when the system is in working condition, functioning.\n\nTarget systems are not created and developed on their own (they usually cannot self-develop as they are not quite alive, and in classical engineering, they are often entirely inanimate) but by creators performing visions, development, architecture, DevOps/\"internal platform engineering,\" etc. Creation systems include agents with their tools. Agents in the narrow sense (autonomous intelligent reasonable agents) are depicted as circles with \"faces,\" while their clearly inanimate equipment (from screwdriver to data center) are circles without faces. Organizations are shown consisting (composition) of intelligent agents and their equipment and tools. Note that during operations, some agents enter the environment (for example, user::external-role-from-computer-supersystem::system enters its operational environment, unlike the computer factory, which will be the creator of the computer and will be considered during creation/dev-time).\n\nThese creator agents create and develop (meaning they often simply change the state, not create from scratch—say, paint, configure, add functions, repair) target systems, subsystems, and supersystems of target systems. Agents in various project roles are interested in various emergent characteristics of different systems at different systemic levels. They try to design and predict the success of the target system (in evolution—fit/niche conformity) by making \"smart mutations\" during the system's development. They collaboratively edit the system meme during its creation and development. This is denoted by the words \"meme here\" during creation time (for brevity, we skipped the words \"and development,\" but development is no less, often more important than the creation of an MVP) opposite the words \"phenom here.\"\n\nTechno-evolution, like biological evolution, includes \"species development,\" not just \"growth/manufacturing of one organism/product instance.\" At each step of techno-evolution, a design of the current generation product::system with a level of detail sufficient for manufacturing (e.g., instructions for CNC machines, as well as instructions for assembly robots in CNC and robot machine language). This design itself is developed by developers from inventive ideas (how functional objects are realized by constructive objects, their spatial arrangement, cost), which in biology are found in the genome, within the target organism (but in genetic engineering, also in the creators' memory, for instance, in laboratory computers!). In techno-evolution, the meme analog of the genome is stored by the creators, and during \"smart mutations\" (potentially successful changes in meme ideas), a target system is created with a set of its features in a finished form: the meme generates the phenome, just like in biology.\n\nWords for creation and development time from software engineering—dev-time (from \"development\"), often design time. When considering creators, we are not considering a functioning/exploited target system in the environment. Instead, we are looking at the system at the moment of its creation (conception/\"usage strategizing,\" designing, manufacturing, commissioning the system as an MVP, and then the flow of incremental functional and structural development). Other creation time methods (engineering justifications, architectural decisions) are also present but omitted for brevity; the main thing is clear: it is about the creation time, dev-time, not ops-time. Creation systems and systems of systemic levels inside and outside the target system are considered at different times/realms, reflected by a dashed vertical red line intersected by creation relationship arrows.\n\nThere is the time of cooking borscht (creators - cooks, the borscht recipe as a meme), and the time of eating borscht (target system - borscht with its properties as a phenome, the environment here being the dinner situation during serving, mouth-tongue-teeth during eating, and the stomach during digestion. But this is all ops-time, while dev-time is the change of state of fresh vegetables, raw meat, water by the creators of borscht in the kitchen, to the final state \"borscht is in the bowl, ready to use\"). There is the time of rocket manufacturing, and there is the time of rocket flight. At the same time, the engineers' work on the rocket is utterly different from the astronauts' work in the flying rocket. **In systems thinking, it is customary** **to clearly** **distinguish** **the time being discussed, and the main time here is** **the use/functioning** **of the system** **(all functional descriptions are** **in it). But** **there is also the time of system creation** **(all constructive descriptions are** **in it), it is not the main one, but it also exists!**\n\nOf course, there are problems and the unity of time consideration, the so-called **DevOps issue**, where system developers/creators are in no way connected with operators/users and therefore make a system that is unusable. This problem is primarily solved by organizational measures, but today often involves technical measures: operators and even users are generally excluded as people, replaced by robots, the so-called NoOps^[<https://ailev.livejournal.com/1367897.html>]. In any case, in systems thinking, it is customary to differentiate \"logical\" creation times (development, design, construction, implementation, enabling—everywhere the creators' work methods are at the center, and the target system is passive, not yet ready to work) and operation times (run, operation, use—functions/methods of the target system itself, while the creators are already passive here).\n\nOne can discuss digital twins here, but their primary role is \"automated control,\" replacing an operator for adjusting-setting the parameters of the already working target system with an automation or a composite construct of a human (turning some knobs or replacing unreliable structural elements in the physical world) and an information control system (indicating which knobs to turn, which structural elements have become so unreliable that they should be replaced—software engaged in \"predictive analytics,\" e.g., for \"condition-based maintenance\"). A digital twin operates during use, not during creation.\n\nBetween systems in the environment (target, supersystem, systems within the supersystem from the near environment, etc.—if the word environment/surrounding/environment appears, remember it's \"operations environment,\" i.e., considering working time) and their creators, there is also a creation relationship (development, design, construction, implementation, enabling), where one creator::system describes and/or changes another system. Such systems form a whole chain of creation relationships, and if you look at all such chains, it becomes a creation graph: nodes are systems (target and creators), and edges are creation relationships. Within one time—part-whole/composition relationships, across time/realm boundaries—creation relationships (X::system creates/alters the state of Y::system).\n\nThe diagram shows a variant of such a creation graph. For each creator, there was also his creation and his operation/use/work/operations. Therefore, the diagram presents several different \"times\" of consideration (realms), and what is ops-time for the creator is dev-time for the target system. And what is dev-time for the creator, for the creator's creator is ops-time.\n\nDifferent creators can be numerous, and the chains can be long. One can move quite far along the creation chains from the target system, as each creator also needs to be created by someone, and in system modeling, we simply stop at the chain length that allows a reasonably confident assessment of the target system's success.\n\nTop managers regularly work with creation chains of six to seven links in their projects—and when they take examples with three or even four links, they are surprised that the model poorly corresponds to reality. Say, you consider sellers, but do not take into account that you are actually in a situation of some dealer network and also with \"agents at the client\" rather than direct sales—and you call them all \"sellers.\" Everything, you lost one link of the creation chain, the model will be bad.\n\nThe diagram shows the gray \"creator of the creator of the target system\" not to forget about the presence of long creation chains, not just one creation relationship between two systems. The arrows are generally directed from left to right, a usual assumption to show time with the past on the left and the future on the right: first, the creator somehow appears, and only later—the system created by him. Together, all the creation chains form a creation graph, usually a directed acyclic graph^[<https://en.wikipedia.org/wiki/Directed_acyclic_graph>].\n\n**Creation relationships** **are not part-whole relationships!**\n**Enabling/construction** **is not** **composition/part_of!**\n**A pot in which borscht is being cooked—** **is not a pot as part of borscht, or borscht as part of the pot! It's a pot** **for creating** **borscht!**\n\nNow mark a cross on any of the circles in this diagram, which your small team (possibly just you) will work on as part of the larger project team—this will be \"our system\" (system-in-hand, engineered system, MySystem, OurSystem). And repeat all the arguments about the target system for our system—without forgetting for a second about the target system and the relationship between our system and the target system!\n\n**Confused? Record all these systems in some text editor or other modeler, like a chess player records a chess game. Think not \"in mind,\" think over the text, or outline, or table!**\n\n**Systems thinking involves the use of models/descriptions, the attention must be held not in the thinker's brain but in documents (today—** **electronic, including information and simulation models, yesterday—** **paper documents).**\n**Thinking—** **is always thinking with writing and written modeling!**\n\nOur diagram of the creation graph (a type of image in which squares or circles of object designations are connected with arrows to denote relationships) is used in the course solely for explaining a small set of concepts that are immutable and not tied to projects. It will not be modified during the project; it contains very few details. This illustration is for a textbook, not a working tool for system modeling. **We do not recommend diagrammatic modeling in working projects, but we insist on mandatory systematic modeling in projects in the form of texts, outlines, tables: formats that are convenient to change/edit, search within, increase volume without fear of getting lost in the intricacy of connections**^[For more on system modeling on the example of enterprises, see A. Levenchuk's report, 2022, \"How We Organized Teaching Organizational Modeling,\" video from 6:18:13, <https://www.youtube.com/watch?v=lpgpnCoV14w&t=22693s>, slides <https://disk.yandex.ru/i/ixpCGYY4kROrmA>. On the harm of visual modeling, see A. Levenchuk's book \"Visual Thinking. A Report on Why It Should Not Be Fascinated By,\" 2018, <https://ridero.ru/books/vizualnoe_myshlenie/>]**.**\n\n**Documentation in systems thinking is essential. Managing attention without records is unreliable. People are forgetful, so document/write everything (everything everything!).**\n\nHow to model changes of important objects in the project will be explained in detail in the \"Methodology\" course.",
    "c89ffc1a99f2d7b33c85bb5ee019c3a7": "---\ntitle: Examples of systems terminology\n---\n\n**A narrative about a target system always begins with its description as a black box, but in reality, it is necessary to talk not so much about the target system itself, but about its supersystem.** And this is not by chance: the systemic approach starts with defining the system by its role in the environment (a role/functional object among surrounding systems), by its role behavior/function (changes in the states of systems in the environment, which are carried out by the described system as a \"black box\").\n\n**From the boundary of the target system through systemic levels upward to the environment, to the supersystem---** **this is the first mental step in systemic thinking, this is the main imperative. No** **\"division into parts,\"** **no** **\"consists of\"** **until it is clarified what the whole, in which the parts interest us, is used for---** **first, this whole \"is part of\" and \"enters into\" and understanding what this whole does in its \"superwhole\"!**\n\nLet's give an example of using systemic thinking terminology in describing a simple mechanical system with electrical elements—a pressure pump.\n\n![](05-examples-of-systems-terminology-42.png)\n\nThe target system is a pressure pump used in a pump unit (supersystem), which in turn is used in a pump station (i.e., supersystem-of-supersystem—the pump station). Its role is a pressure (to ensure water reaches the upper floors of a building) pump; action/function—raising the liquid pressure. One of its subsystems is the rotor assembly (rotor with blades, it's a centrifugal pump).\n\nOne of the external design roles is the owner-operator of the pump station. The need is an uninterrupted water pressure output from the pump station. The need speaks not about the pump as a target system, but about the pump station as a supersystem-of-supersystem. The needs of external design roles most often describe supersystems of some levels. Although they can also describe creation systems, for example, \"the need is for you to manufacture the pump in three days,\" but here too, it is often easy to trace as \"needed for the supersystem\": \"otherwise, our pump station will not be able to start on time.\"\n\nThe need for uninterrupted water pressure output from the pump station is reflected in the architectural characteristic of the pump \"mean time between failures (MTBF)\" and raises the question of an emergency power source for the pump motor—but remember, the emergency power source, just like the pump motor, will also be in the supersystem for this pump. The pump unit consists of a pump and motor; the picture shows the pump unit, with the pump depicted as the green part. The rest is the pump's environment, part of the supersystem. Here’s a detailed breakdown:\n\n- Pump station (supersystem-of-supersystem)\n- Pump unit (supersystem)\n- Pump (system)\n- Rotor assembly as rotor with blades (subsystem)\n- Rotor (sub-subsystem)\n\nUsage concept: the pressure pump delivers up to 40 meters of pressure into the pipe connected to it, with a flow rate (water throughput) of up to 10000 liters/hour. Architectural characteristic: MTBF of 5000 hours. No preferences in important characteristic values (\"the flow rate/water throughput should be as high as possible,\" \"maximum MTBF\"), as these are already agreed-upon final values, and the preferences of different roles are already considered therein. The usage concept and architectural characteristics describe the target system (referring to different times: operational time \"in the moment,\" total operational time), and preferences describe the \"wants\" of individual roles. They address different objects: the usage concept reflects the system's success (a \"black box\" description performed as a reflection of roles' agreements about their preferences), while preferences reflect the roles. Roles are creation systems, and preferences characterize roles, not the target system. Roles will promote hypotheses about system success in a direction beneficial to them. For example, the design engineer demands a higher water flow for the pump \"for guaranteed performance with a margin,\" but the total cost of ownership will then be much higher—and the design engineer and the visionary engineer (responsible for whether it can be sold or the entire project becomes unprofitable) agreed that up to 10000 liters/hour would be sufficient, \"the least bad solution.\"\n\nSome systems in the near environment: motor, frame (they are part of the pump unit as a supersystem, but they are external to the pump), electrical wiring, pipes included in the pump station but not the pump unit.\n\nSome creators: the design bureau (which designed the pump), the factory (manufacturer of the pump), the designer and builder of the pump station (they participated in the creation: chose this specific pump, purchased it, performed installation at the pump station), the wrench (used to tighten the bolts that attach the pump to the foundation). It is unclear whether the pump unit was created by the builders of the pump station or if the pump was delivered as part of the pump unit (i.e., the design bureau and factory provided the pump unit); this needs additional clarification.\n\nAnother example: electronics with software islands—smart watches.\n\n![](05-examples-of-systems-terminology-43.jpeg)\n\nTo determine the supersystem into which (during operation) the smartwatches are included, we must consider the Western Christian tradition of people's attitude towards property. Personalities-as-immortal-souls are considered to own their own bodies, which are seen not so much as the person themselves, but as simply the carrier::hardware of their personality::software, belonging to the personality. The personality::software owns its body::hardware/equipment, it is its property, it belongs to itself, this is an expression of \"free will.\" A person in the Christian tradition = a personality-as-soul plus the body. This property of people is usually called **self-ownership**. Personal belongings of a person are considered simply an extension of their biological body. No one can take a human's body or damage it, just as no one can take or damage their personal shirt, personal watch—they are considered part of the person, literally (is_part_of/composition relationship). This is \"sacred private property.\" The body = biological body plus other personal belongings and even plus means of production (for example, an engineering plant) owned by the personality.\n\nThus, with some convention, we can consider the supersystem for the smartwatch to be the person-owner of these watches: we will consider the watches to be literally part of their body. For many personal items and tools, this is confirmed by neurophysiological experiments: personalities treat them literally as an extension of their body^[Brandon Keim, \"Your computer really is a part of you,\" <https://www.wired.com/2010/03/heidegger-tools>. The brain controls the computer mouse as if it is indeed an extension of the hand.], \"exobody.\"\n\nAnother interesting system of this kind, which includes people, is the **household**, which can include both the owners themselves, and the house, and household utensils.\n\nIn such systems, the people-agents included in them simultaneously play roles as actor-designers and also represent themselves as \"just a body/organism,\" which we deal with just like other materials, i.e., simply taking into account their physical properties—size, humidity, strength, etc. The person as an agent is physical/biological/material, so they consist of muscles, bones, and other tissues. In systemic thinking, both the reasonableness of the person-agent in terms of skillfully playing a labor role and their materiality as a body are considered.\n\nIn the example of the smartwatch, the supersystem is the person-owner of these watches, but not as a personality::software, but more as a body/organism belonging to the personality with everything worn on it: shirt, shoes, watch. The biological body of the person will be in the smartwatch's systemic environment.\n\nNeeds/interests of the owner's personality as an external role (owner of the body-with-the-watch): they must be informed about the exact time, but this list of interests/needs largely stays open. The role of the watch is difficult to formulate, as it involves a gadget with diverse behavior, i.e., a multifunctional gadget.\n\nThe usage concept will relate not so much to the \"watch\" as \"time measuring devices,\" but to various potential usage scenarios—it can be a watch, radio, player, pulse meter, and also the smartwatch is expected not to chafe the wrist (the wrist skin as part of the body-supersystem is in the environment of the smartwatch), they are expected to be successful if they are in a fashionable color at the time of sale, work at least 20 hours without recharging, weigh no more than 80 grams, work with an app store, and connect with an external computer (smartphone, tablet, desktop).\n\nSystems in the environment—hand, clothing (at minimum, a sleeve of a shirt or jacket), charging device. Subsystem—protective glass (e.g., from Gorilla glass—purchased separately from a contractor manufacturing custom protective glasses).\n\nSmartwatch creators: design bureau, factory in China, retail store in Europe. And if we consider the store as one of the creators in the \"seller\" role, we can learn a lot about the smartwatch. Expected store behavior (\"store with the watch inside,\" what the store owner wants from the temporarily owned watch, these are stakeholder needs for the target watch)—sales amounting to a considerable sum, easily translating to a hypothesis about the convenience of the watch's packaging for warehouse processing (hypothesis! It may not be necessary, or convenience may be defined incorrectly), colorful packaging and booklets for display, as well as good advertising (i.e., the store considers the advertising service part of the product—without a certain level of advertising, a good store may simply not take the product for sale). And **watch-as-product/packaging-with-watch** thus receives additional usage scenarios for the watch-as-product by the store to extract money from store visitors in exchange for the watch. In fact, we are introducing a new system \"watch-as-product,\" packaging with a watch, distinct from the watch, and a new role \"store visitor\" (who may or may not become a buyer, and the buyer may later become a user of the watch, but may not). The moment of using the watch::product, i.e., the operation type of using \"product\"—sale, i.e., \"delivery against payment,\" and the moment of using the watch—we look at it for time, set an alarm, take calls. Do not confuse product usage by the store with watch usage by the user! This mistake is often made by \"accelerator entrepreneurs\": they are so engrossed in the idea of \"selling\" that they consider their \"product\" used not as a product, but as a product! What will happen after the purchase does not concern them, the watch for them may not even operate, just a dummy, as long as it pays off. This is an error: watch::product/system and watch::product—are, in fact, different systems, with different users, referring to different times (creation time, sale time, use time of the watch), different creator roles, different project team roles.\n\nIt is very important to identify a variety of external design roles, identify their interests, determine needs (agree on acceptable and desirable properties of the supersystem with external design roles, sometimes even propose these properties—executors of external design roles often don't know what they would like, or don't consider what they want possible, system developers can offer something to them), and then derive a complete usage concept describing the behavior of the target system during use/operation/operations/functioning. Sometimes it is necessary to introduce a new system (in our case, watch-as-product) and not confuse it with the target system (they have different usage times, different functions in relation to the environment, so important characteristics and structure—are different).\n\nThe usage concept with various usage scenarios of different capabilities/features of the target (or any other) system will describe the system, helping to define its boundaries: what the system will do and what it will not do. For example, these smartwatches will show the time, and these smartwatches will show the time and blood pressure (then, in the system concept, think about how to organize it so there is an acceptable price for sale). In the case of watch-as-product, it is clear that the target system includes packaging, advertising booklets, and even broadcasted advertising through some channels. Including some additional app software for these watches can also be considered part of the watch itself. The app store for these watches can be considered a creation system for some watch features/capabilities, but this cannot be considered with packaging.\n\nThis example shows that for different roles, it is convenient to describe the (existing or planned) target system differently, sometimes introducing additional systems. For the store, this very packaging-with-watch-and-advertising/watch-as-product will be target: it needs to be designed (merchandiser!), manufactured (procurement! Logistics!), used (sold!). And the watch itself? Not needed. Needed is the packaging-with-watch/watch-as-product!\n\nModern engineering often deals with **cyber-physical systems**, which include sensors, actuators (machines frequently but including lighting devices or electrical switches), and a computer (cyber- managing portion), managing entire system operations. An example of such a system might be an aerial photography drone.\n\n![](05-examples-of-systems-terminology-44.png)\n\nThe supersystem—a construction site (an under-construction building plus a deployed set of creation systems around the building, \"construction event\"). One of the external roles in the project—the developer-customer, whose need is the controllability of construction progress. The drone-photographer (defined by its role)—the target system. Function::drone behavior—producing a stream of high-resolution photographs of construction from angles of interest to the developer-customer. Fragments of the usage concept: flight and photography duration of at least 1 hour, images of the construction site obtained at an optical resolution of at least 20 megapixels, recharging between flights takes no more than 1 hour, the drone approaches for charging itself. Subsystem—camera, sub-subsystems of the drone (camera subsystems as part of the drone)—camera lens and matrix. Systems in the operational/working/operating environment: charging station, construction site with buildings, structures, and equipment (cranes), considered in the air as obstacles (for example, the crane cable).\n\nDrone-photographer creators—design bureau, manufacturing plant, retail store, repair workshop, operational service with drone-photographer operator (this service is more like upgrading the drone before and after flights: checking, refueling, tuning, cleaning, repairing. Therefore, we consider this service not in the systems environment but in creation systems—it works not at the time of use/\"benefit\"/work/functioning of the drone).\n\nThe same narrative would apply to less classical systems than the traditional electromechanical (pump) and cyber-physical (drone, smartwatch) systems.\n\nFor example, skills. A separate course, \"Personality Engineering\" is devoted to engineering skills (personality—a set of agent skills). In fact, this is a course in \"skill creation skills,\" typical for systemic thinking.\n\nFor example, let's take **system thinking skills**—this is a target system which, during work, performs thinking::computation with the concepts of the systems approach, and this system is implemented by some constructive parts of the brain or AI program computer, playing a skill role (but we don't even know exactly which parts of the brain or parts of the computer). Subsystems of systemic thinking skills: skills of thinking about systemic levels, skills of thinking about creation chains. Supersystem of systemic thinking skills: intelligence, as general thinking skills across all fundamental methods of the intellect stack (again, we understand they are also implemented by some parts of the brain and/or agent computer, but we do not understand exactly which parts—which does not prevent us from reasoning about this skill as a material object).\n\nMoreover, in case of team systemic thinking, it can be several brains and computers plus communication means between them). Systems in the close environment of systemic thinking skills: ontology thinking skills, concentration skills. Skill creator—a systems thinking course (an online course as a program on data center servers and optionally course instructors—their presence may or may be not necessary). Creators of skill creators, i.e., creators of the systems thinking course—the author of the textbook and model templates (Anatoly Levenchuk), dean's office (managers, programmers, operators) from the School of System Management with their LXP Aisystant.",
    "f6fdc61290f6654de3689cbbe12bc9f4": "---\ntitle: System Concept and Architecture\n---\n\nVery often, those who describe a system want to specify not only the external properties of the system, to describe not only the boundaries of the system and its behavior as a black box, but also to indicate some details of the internal structure of the system: to define the parts of the system (subsystems), to point out the process of subsystem interaction. In this case, the system is referred to as a \"**transparent box**,\" where some subsystems, their properties, and behaviors are considered known. This can be considered specifications for the system concept: what behavior is expected from the internal parts of the system (their operation time, functions of the subsystems), which parts of the system's design (subsystem design) can realize this behavior, while also taking into account spatial aspects and total cost considerations. **System concept** describes the \"transparent box\" — these are at least four interconnected mandatory types of system descriptions, but more often these types of descriptions cover more areas of interest.\n\nIn any case, we should start with at least two: functional and constructive descriptions in their interrelation. Suppose you are preparing to make a door, and suddenly your external design roles say: \"The lock in the door must be made of titanium.\"\n\nThe word \"must\" indicates a requirement, not a hypothesis, and this is alarming. What if you find better material? Why did this need to be specified, what in the door's behavior scares the one describing the door? What broken telephone effect occurred here, who set the usage scenario, resulting in this requirement? Why is there even a lock in the door, as you didn't suspect that the door needed to be locked and unlocked: this was not part of the usage concept. We understand that this describes a **restriction** on the developer's freedom: one developer::role indicated to another developer::role what should be inside the system, so this restriction could be taken into account in the system concept development. Question: Where did the developer::role come from in the external project roles? Sometimes developers of the target system on the client's payroll are called \"client engineering,\" and they are paid precisely to create such restrictions on the freedom of external developers — for example, to prevent external developers from being tempted to overly cheapen-simplify or price-raise-complicate the system design.\n\nUsually, the project organization (for example, a group of several teams) agrees with the external client on the functions/behavior that the target system should perform as a black box, the properties of this black box, i.e., the developers agree on the usage concept (most often not the entire concept but certain usage scenarios for specific \"features\" to be implemented by a particular team), and the system architect agrees on the architectural characteristics and their acceptable values for all developer teams. It's not a fact that these hypotheses about the system concept and acceptable architectural characteristics are formulated by the client! This is joint work with the client. How the system is arranged inside, i.e., what functions the subsystems perform and with which physical objects the system design is realized — this is determined independently by the project team, the client usually being more interested in the supersystem, which for them is a \"transparent box,\" whereas the target system is a \"black box.\" Moreover, this often doesn't happen in one go, but over a long period — and continues even after the first version (MVP, minimal viable product) has been produced and started being used. Often, the most interesting ideas from both client agents in their various roles and from agents-executors of this order come up after the MVP's appearance, during the system's subsequent development.\n\n**Architectural decisions** about how the system is divided into structural parts (modules) and how these modules will interact to keep the architectural characteristic values within acceptable limits (for example, the system, during improvements, remains easily modifiable) are called **architecture.** Note: Architecture is decisions on the system's arrangement in terms of structure (modules/constructs and their connection method), and the system concept is also about the system's arrangement but includes functional objects, and structural ones as affordances for functional objects, as well as spatial (layout/location/allocation) aspects and leads to the overall cost of ownership, and may also include other important aspects (for example, separately highlighted ethical and legal considerations or aesthetic and artistic considerations, which may feature distinct aspects in each project).\n\nThe system concept is not architecture (although a decade ago it was considered that architects develop the system concept), and architecture is not the system concept. The system's functionality in the supersystem is determined by the system concept decisions, whereas important characteristics such as \"system's ability to evolve, ease of design changes\" are determined by architectural decisions.\n\n**Architectural decisions/architecture decision** **records** can be formatted in many ways, for example, structured descriptions on several pages as **architecture decision records**. Architectural decisions are presented as a list of such records or some table with material from these records. Architecture is not a \"diagram.\" Diagrams in the project are mostly not architectural, and if found in some architectural decision, they are used purely for illustrative purposes and do not express architectural decisions. Don't confuse **system architecture** with **building architecture**, where the primary focus is on the building's exterior, and the main skill for the architect is drawing.\n\nMore about architectural decisions and their recording is discussed in \"Systems Engineering,\" but the main thing to remember is: **you cannot say anything about a \"transparent box\"** **(neither discuss the system concept nor the system architecture) until you find out about the \"black box,\" i.e., the system's behavior in its environment.** **If you don't know what a sepulka does, you won't be able to say anything about how it might be arranged!**\n\nThis is the main thing to remember in systems thinking: the first consideration of the system is the usage concept, not the system concept, nor the system architecture. First, look from the system boundary into the surrounding world, in the environment at the moment of operation (if you are developing the system, you must imagine this, as operation will be in the future), and consider the system's behavior/function. Only then start looking at the transparent box. If we begin examining the gears in a mechanical clock, then suddenly look at the clock's environment, we might see that these clocks are located in a rocket and should count milliseconds while operating properly with 30G acceleration, because everything vibrates near the engine where these clocks are mounted. Forget about the gears from that moment, it was wasted time! **First look around, from the system boundary outward at the moment of operation, then inside the system at the time of operation, and only then inside the system when it's being created!**\n\nIn any case, all these system descriptions (usage concept, system concept, and architectural decisions) are hypotheses, be prepared to change them, negotiate, propose your options, and carefully listen to the options proposed by external project roles. Always substantiate your arguments. \"Because I want so\" is not an argument, because today you may want one thing, tomorrow another, or \"you misunderstood me, I wanted something else,\" or another agent in your role might want something different — this \"want\" should be an informed opinion of the role, not just the agent's simple desire.",
    "daf890939bf85ff5cd6e306aae6a56df": "---\ntitle: Division of Labor and Systemic Levels\n---\n\nHuman roles, and now the roles of AI, as well as the roles of collective agents (organizations) in projects for creating and developing various systems, specialize in different systemic levels: recursively, at each systemic level, the thinking of an engineer who assembles an acceptable target system for the supersystem (higher level) (current level) is applied, using emergence from the interaction of assembled subsystems (lower level). Each agent playing the role of such an engineer specializes in the emergence of one level, because his skill cannot be limitless: covering two levels with skill of equally high quality is much more difficult, and three even harder. Moreover, for different systems (e.g., growing canola and steelmaking), expertise in the methods of creating and developing these systems is very different, and it cannot be quickly learned and mastered to the level of fluent application. As a solution to this problem, **division of labor** appeared: different agents specialize in different methods/ways of working tied to fairly narrow types of systems tied to rather narrowly defined systemic levels. Labor works with some subject areas, and the subjects turn out to be closely tied to systemic levels, because when the systemic level changes, the properties of objects change, and thus the method of working to change systems, to obtain or remove the properties of this systemic level, changes. The more knowledge about a subject area, the harder it is for one agent to achieve expertise in this subject area: thus, one subject area is defined more narrowly, some types of systems, some additional systemic levels within them, some individual emergent properties in them are divided, and separate agents begin to specialize in achieving these emergent properties. This is called deepening the division of labor. For example, with the deepening of the division of labor, instead of one role \"engineer,\" a set of very different roles suddenly appears---visionary, developer, architect, internal development platform engineer. Each of these roles has its own preferences in subjects of interest, so agents performing these roles will need to negotiate, and if in a very small project someone will perform all these roles together, doubts may arise about whether he has enough mastery for the good performance of each of these roles, and there may be a suspicion of a conflict of interest (many roles with conflicting interests concerning one subject of interest for one agent performing all the roles. For example, in the course \"System Engineering,\" it will be explained in detail what the contradictions between the roles of visionary and developer, developer and architect are, and they are in productive conflict. And for one engineer-agent performing all these roles, there will inevitably be a conflict of interests).\n\nThe division of labor is ubiquitous. In the group of methods of bodywork, doctors treat body tissues, trainers create types of bodily/motor behaviors (types of movement methods) and their styles (method variations), and train adepts at the level of the body's work as a whole, cultural ambassadors take care of the cultural diversity of movements at the community level (multiple organisms performing some movements), and \"body therapy\" is generally about trying to solve mental problems through bringing the body into some states (usually relaxation and spontaneous movement). And this is clearly not all the systemic levels mentioned; in our example of social dances, there were clearly more of them!\n\nThat we speak of different roles and different agents will perform these different roles concerning moving human bodies---this is the division of labor. Such division of labor continues at lower systemic levels and at higher ones. For example, geneticists can identify people with special cellular metabolism, which allows selecting people for participation in competitions who are resistant to lack of oxygen in advance---and they will not be limited where it will be difficult for other athletes due to a lack of oxygen in muscle cells during exertion. High-achievement sports are increasingly becoming a competition of molecular biologists and geneticists rather than trainers, but a competition of pharmacologists is already beginning---there is a movement for sports with permitted doping, enhanced games^[<https://en.wikipedia.org/wiki/Enhanced_Games>], a technical solution to the problems of human body limitations. To create an athlete, the knowledge of a molecular biologist and geneticist, and the knowledge of a pharmacologist, but also a trainer's knowledge, are needed.\n\nChanging the properties of lower-level systems leads to changes in the properties of higher-level systems---through emergence. And each type of emergence requires mastery of achieving these properties: understanding what affordances can be used as constructs to achieve desired behavior, performing the desired function in the supersystem.\n\nSystemic thinking turns out to be deeply connected with the division of labor: at each systemic level, there are specialists skilled in achieving the systemic effect of this level---they obtain it, knowing how to assemble the system (target or \"our,\" we are talking about very different systems) from its subsystems. But this is not enough; they also know where their assembled system can be used so that similar specialists at the higher level can use their system as a subsystem. **Each agent as a skilled master-builder understands their systemic effect and, with their work, connects three levels of systemic division---and all together, the specialists can create and develop a very complex target system and all the necessary elements for its creation and development described by the graph of creation system-creators.**\n\nThis is true for engineering, but it is also true for other fields of activity, which are also \"engineering\" in fact, although not quite conventional. Nevertheless, we recommend thinking of them \"engineerally,\" as this often considerably simplifies the understanding of what is happening in projects for creating non-technical systems.\n\nFor example, in the field of bodily practices (movement methods in sports, yoga, martial arts, dance, stage movement, etc.), the engineering approach significantly speeds up understanding, eliminating numerous metaphors and artistic distractions from the essence of the matter, and providing normative/cultural/engineering division of labor. Just as hundreds of people today create a film \"in an engineering way,\" so too can many people (and more broadly---agents, since not only people) help someone become a full-fledged participant in a dance subculture (in common parlance---make someone a good dancer, though we remember that a dancer is not yet an artist, and an artist is not yet a community participant practicing some subculture). A dance performance turns out to be multi-level, and its complexity can be overcome by using systemic thinking in relation to it.\n\nLabor is a synonym for the method of working on creating and developing a system. Divided labor is a broad method divided into narrower methods/practices/\"smaller types of labor,\" whereby different project agents perform work using different narrow methods of one broad method. For instance, engineering labor (broad method of work) turns out to be divided among different agents who perform narrower methods, together making up engineering labor---visionary work, development, architectural decision-making, internal development platform engineering (more about engineering as a broad method of work and narrower engineering methods will be covered in the course \"System Engineering\").\n\n**Division of work** is when tasks are distributed among agents equally skilled in some method (or even sub-method) of work. For instance, fence painting work needs to be done, 100 square meters. The method chosen---painting with a roller, the role performing the method---\"painter.\" Division of labor is when the \"painter\" role is singled out from the general role \"builder\" and assigned not to any builder but to someone skilled in painting. Division of work is when ten agents skilled in painting (with roller painting expertise) are taken, and each agent paints not 100 square meters but only 10. Only the work is divided, but the method of this work remains the same, each agent performs the entire method/practice/activity, not a part of it.\n\nDivision of labor is an evolutionary process. Labor divided among agents is usually more efficient than labor of one agent, and one can simply observe how techno-evolution works, how the culture deepens the division of labor---the division of labor optimizes collective creators, the best solutions for the division of labor are remembered and then replicated among agents. But this raises the problem: how to unite divided labor into a common labor of creating and developing a target system in one project so that the system is successful?\n\nSystemic thinking allows uniting divided labor: it gives an understanding of why the division of labor happens, how to explain the professionalization of agents in one or another \"type of labor\"/\"method of work.\" Thus, above all, the division of labor happens for labor/methods of work associated with objects of different systemic levels. If we highlight the \"engine as a black box\" in an airplane, transparent box solutions for it may be handled by others at a lower systemic level, the \"engineers\"---at each systemic level, some subject specifics, new properties appear, often requiring changes in the specialization of engineering roles.\n\nIf this happens at many levels with the most different systems of each of these levels, we will increase the system's success chances: not achieving the ideal (this is impossible! Techno-evolution allows only reaching some quasi-optimum, \"local optimum\" each time), but an approximation to the ideal. Usually, it is enough for us if the system is not perfect, but slightly more optimal than the competitors' systems (\"to escape from the lion, you don't have to run faster than the lion, just faster than the slowest person fleeing from the lion\").\n\nWhat is important is that after creating and beginning the operation of the initial system, all this continues: continuous development of new and new possibilities of the system, new variants of technical solutions, realization of new features, continuous introduction into operation, \"continuous everything.\" Previously, requirements were satisfied once, now the system is created and then continuously developed further, often not by one team, but by very different teams specializing in creating and developing very different types of systems. Division of labor helps cope with complexity: there's no need to pack all the knowledge about the system and work methods for its creation into one agent's (either individual or collective) expertise.\n\nModern dancers' or figure skaters' performances are immeasurably more complex and interesting than they were a hundred years ago, and learning to dance or figure skate to a comparable level today can be done much faster because methods for creating and developing mastery have improved immeasurably over a century. Spacecraft (those didn't exist at all a hundred years ago), computing equipment, software systems, medical robots---creating all of them requires many different kinds of mastery among agents, but with the division of labor, one can rely on the fact that this mastery can be learned quickly (with sufficient intellect).\n\n**Division of labor related to gaining competency** **in working on three adjacent systemic levels (understanding what and how to do at the current target system level,** **knowing what to do and where and** **how to use it---** **understanding supersystems, knowing** **how the components are built---** **understanding subsystems) gives an opportunity to build long chains of activities** of very different people, breaking the overall super-complex activity at all systemic levels into many not so complex ones at each systemic level.\n\nBut it should be noted that at higher evolutionary/systemic/organizational levels of complexity than organizations/collectives of intellectual agents, there are problems with systematic descriptions and engineering approaches for people with both division of labor and descriptions of the best methods for social engineering (as opposed to \"letting things take their course,\" i.e., relying on evolution). The frontier of systemic thinking goes along the line of mastering the creation of collective-level systems of community and society levels. Engaging in systemic thinking in such projects should be done with caution, understanding its application to simpler systems. The level of the individual is already extremely complex; an organization of many individuals is even more complex, but engineering copes with that. However, talking about the division of labor (apart from saying that \"market forces are at work\") at the community, society, humanity level---is very difficult. There is not enough knowledge about creating communities, societies, humanity/\"agentality\" in sufficient quantities to break it down among different agents and specialize them in different types of mastery---such knowledge is currently lacking. Although politicians have \"headquarters,\" where some division of labor can be observed. But be careful with projects aimed at creating communities, societies and humanity (\"agentality\": including both societal levels and community levels, and comprising AI agents in addition to people, hence \"agentality,\" not \"humanity\").",
    "b2eec83fbb85bfbf7da4b244e0640f81": "---\ntitle: Intelligent Agents in Systems\n---\n\nA human, as well as an AI-robot within systems, is considered complexly because\nthey **simultaneously** can be\n\n-   a target system (\"product\")\n-   a supersystem, where it is often more convenient to consider not the whole\n    person, but a part of them—part of the body::hardware or skill as part of the personality::software,\n-   material \"equipment\" like a machine in the composition of the creator (if\n    they make something with hands/manipulators, and various hammers and chisels,\n    and even modelers here are just extensions of their hands or\n    brain/computer),\n-   constructive/\"material body\" with its weight and inertia,\n    moisture and hardness (as, for example, in considering inertial\n    movement in bodily practices or robotics or in the example with\n    wristwatches),\n-   a project role, or even a whole set of project roles: we may not\n    consider the opinions and interests of animals (although that is also bad), but we\n    fundamentally cannot ignore the opinions of people in roles, we are forced\n    to consider AI decisions and even just computer programs (remember\n    \"I would help, but the computer doesn't allow me\"), and also decisions of organizations\n    as \"legal entities.\"\n\nPeople and organizations also have subordination/leadership relationships and\nproperty relations concerning things, and people (and organizations, and also\nAI agents) hold certain positions. And they also \"belong\" to some\nstates. With agents, everything is immediately complicated: agents are complex, their behavior\nis poorly predictable, they are difficult to describe. Before dividing\nthe complex thinking of the project among different agents (today it's not only\npeople!), we recommend modeling and documenting what you\nknow about agents to avoid getting confused and forgetting something. About people,\ntheir AI systems, teams, and collectives (teams of teams), organizations\n(enterprises and expanded/extended enterprises) you will think and write unexpectedly a lot, thinking about intelligent agents and\ntheir groups is not the simplest. At even higher levels\nof complexity, these will be levels of communities (including\nbusiness ecosystems), societies, and humanity (given the variety of\nagents, it would be more correct to call it \"agen-ciety\") as a whole.\n\nPeople can negotiate with each other for the most unexpected reasons and\nundertake actions based on these agreements that are most unexpected for the\nproject team, though with the best intentions. For example, you\ncommission a manufacturer to make a copper heat exchanger based on your 3D engineering model.\nThe engineers of this factory suddenly find that there's too much copper, and they\nremove some copper with the best intentions—less material consumption, thinner\nwalls, better heat exchange! And they manufacture an \"improved version, our improvements—it's our bonus to you.\" You turn on\nthe heat exchanger, the thin walls under the pressure of the liquid start to hum\nlouder than a concert organ! The heat exchanger became a vibration generator,\na noise source! What a bonus! \"They meant well, but it turned out as always\"—this is quite a\ncommon phenomenon in projects for creating and\ndeveloping systems, hence any changes have the status of a \"hypothesis,\"\nyou must always be prepared for the \"hypothesis not being confirmed.\" And yet\nwithout \"initiative from below\" projects will not thrive!\n\nThe best management and engineering methods (for example, the culture of architectural\nwork) are just such that inevitable errors, inevitable mutations do not\nlead to the loss of system functionality, and the need\nto redo the system from scratch. These methods/ways/practices are examined\nin detail in the courses \"Systems Engineering\" (especially concerned with the method\nof continuous architectural decision-making during an engineering project)\nand \"Systems Management.\"\n\nAgents, including collective agents, usually participate in\nseveral teams simultaneously, each occupied with several projects for\ncreating and developing systems. We remember that in the area of interest (a set of\nobjects of interest in some one subject area) for each\nrole performed by an agent, there are not just\npreferences for certain interesting characteristics, but the agents performing these roles\nwill change their roles, change themselves (developing both body and exo-body,\nand developing personality, mastering new types of skill), changing\nthe surrounding physical world to realize these preferences. Agents\n(people, AI agents, their organizations) are devilishly inventive in achieving\ntheir preferred state of the world. They will influence the course\nof the system creation project and the resulting system in the most\nunexpected ways for each other. Someone::agent will engineer the target\nsystem without losing functionality, someone will arrange additional funding, someone will negotiate such a change in the supersystem that the target one will be cheaper. And someone will pull off a fraud hoping that either no one will notice, or will notice—\nbut will not be able to do anything without significant damage to the noticer. Agents\nare inventive and active. Look in the mirror: you are such an agent,\nall the others are hardly worse!\n\nAn example of a system with included people was already discussed in our course—\nit's a dance performance/output. **The process unfolding in\ntime** **of changing states of the performance** **is set** **at the\nsystem level below** **as a list** **of changing states**\n**of interacting physical objects included in it,** **and these objects are highlighted by attention** **during the performance.** It is not necessary to stop the interaction of parts-subsystems of the\nperformance and disassemble the performance::system into constructs during\noperation/functioning (trying to imagine an\nexplosion diagram), it's not necessary to disassemble the system, but to highlight parts with attention in the working system.\n\nA dance performance can quite be imagined as a system, only it should\nbe imagined in space-time, not just in space.\nThe main functional parts-subsystems here will be dancing::function\ndancers::roles/subsystems. In the performance, people-agents act both as\nmaterial/construct (physical bodies changing shape in space-time),\nand as functional objects—project roles of dancers. Dance performance doesn't possess the complexity of an enterprise and\nthereby doesn't require consideration of complex issues of corporate\nmanagement, strategizing, operational management/operation management.\nDance performances can be solo, and social\n(pair, for each other, not for spectators), and group/ensemble.\nApart from the dancers, the location of the performance needs to be considered (venue or even\nstreet for street performances), spectators, sometimes judges (dance\ncompetitions), music, and sound equipment. Even non-people dance sometimes,\nsometimes it's cyborgs (such as a dancer with additional four robotic\narms in a backpack^[<https://vk.com/wall-179019873_1747>]).\nIt's an excellent example to practice your systems\nthinking^[Texts about dancing and systems thinking\nare published in <https://vk.com/buffdance>].\n\nEvents are also classic examples of systems with people.\nMethods of event management (event\nmanagement^[<https://en.wikipedia.org/wiki/Event_management>])\nhave even become a university discipline—creating and developing\n(for example, conducting a concert tour) a concert or an annual rock festival\nis difficult but nothing unusual today.\n\nIt is quite possible to consider thousands of people as part of the event system,\nyou can consider a series of events (for example, an annual festival) as\nmanufacturing continuously developing versions of a system in\nmechanical engineering or releasing software versions. We deliberately use\nengineering terminology (\"manufacture a concert,\" \"release a festival\"),\nto show the commonality of thinking for various systems. Of course, in\nevent management different terminology is used, but the choice of words/terms\nis not that important here. What is important is that when thinking about\nevents, you choose system thinking types and use\nthe understanding of how they manufacture successful systems from systems\nengineering. The very methods/practices of work (work culture, work style,\nactivity, method—the terms here are not important) in event management\nwill be given in applied courses, but linking together all this thinking about various\nsub-projects (for example, negotiating with sound engineers,\nnegotiating about ventilation, etc.—purely engineering\nsub-projects) can be based on using system thinking.\nIt's important to pay attention to the general style of reasoning in all projects\nrelated to creating systems involving agents (people, AI-robots,\nand even organizations) as subsystems.\n\nA household, where there is a house with utensils and its residents (including\nrobots), and the previously discussed case of a clothing and gadgets consumer—these\nare all examples of systems with human agents.\n\nThe most complex systems involving people and AI agents are such group\n**creators/enabling/constructor** **systems** as enterprises, project workgroups,\nextended enterprises (extended enterprise,\nenterprise with its contractors, dealing with some big target\nsystem, for example, a nuclear power plant, or mass production\nof complex transport systems—aircraft or cars).\n\n**Systems with people** **(including their organizations)---are**\n**necessarily** **systems of systems because people have\nthe property of self-possession.** **Therefore, you cannot work with systems with people in them** **using simple engineering methods,** **with which** **you can construct a simple mechanical or mechanical\nsystem with electronic elements, manufacture its parts, and assemble them into a functional whole.** No, **the metaphor of the watchmaker** with fabricating parts and assembling them does not work. With people (as with any other living\n\"grown\" systems, and also trained AI systems) they rather use **agricultural** **metaphors:**\n\n-   in small systems of systems of a **gardener** (who has control\n    over what is being created, manages to take care of every sprout in\n    every flowerbed, knows the position of every tree and cares for them),\n-   in large systems of systems of a **forester** (who does not have\n    control over their forest—where which tree or bush will grow, but still,\n    a forester has enough influence to prevent some\n    serious negative events: can prevent a fire, feed\n    animals in winter, drive away poachers).\n\nIn especially large systems (a large community, society on the scale of\na state, all of humanity) sometimes they don't just talk about the\n**complexity** of the system, but of **complexity thinking**^[See literature in P.K.Hrechko \"Complexity Thinking: Methodological Prospects. Paradigmatic heuristic of complexity in modern social-humanitarian knowledge\",\n<https://journals.rudn.ru/philosophy/article/view/11283/10713>],\nwhich does not allow actions with predictable results—\nthe outcomes of projects dealing with a large number of people are always\nto a significant extent uncertain, they are described probabilistically, although\ndeterministically (deterministically means there is no place for “randomness,” there are always causes, but predicting the outcome is not possible^[Distinguishing random and deterministic in physics:\n<https://arxiv.org/abs/1507.03287>]). One must always\nremember that evolution creates complexity, generates ever higher levels\nof organization, and the driving force of this evolution—\nconflicts between system levels, leading to\nturmoils^[<https://elementy.ru/nauchno-populyarnaya_biblioteka/434505/Konflikty_kak_osnova_slozhnosti>].\n\nIn especially large and complex systems of people, robots,\ntools/equipment, that is, in communities (including communities of\nenterprises—ecosystems), societies, humanity (considering all\nother agents, \"agen-ciety\" suits better than \"humanity\") as\na whole, everything is so strongly interconnected and so unpredictably\nthe realization of one agent's intentions resists or assists\nthe realization of other agents' intentions, that \"unexpectedness\" is\nthe norm, the absence of surprises is practically non-existent, \"best\nsolutions\" do not exist, there are only \"the least bad of known bad\nones.\"\n\n**It's important to remember that one cannot design an enterprise or even a team and then fabricate them like a** **computer chip** **or a water tower. Systems with** **agents** **must be discussed using system thinking, but conceiving, creating,** **developing,** **operating, and eliminating them with classical** **\"iron\"** **or software engineering methods is ineffective, there it's necessary to use methods** **of training: engineering of personality for individual agents, systems management for collective** **agents (developing enterprises** **is essentially training new work methods for\ncollective agents).**\n\nIt's hard to imagine that the left booster on a rocket will conspire with\nthe right booster to fly not to Mars (where they should go), but to\nthe Moon—because it is more reliable and faster, there is certainly enough fuel, and it is less troublesome. But in a system of intelligent agents, this happens\nall the time. **Be careful with the application of technical engineering methods** **for \"iron\"** **and \"software\"** **to systems with people** **and AI. At the same time, be cautious about the reverse situation—** **the non-application of common systems engineering** **methods, which are a generalization of precisely** **methods** **for working with** **\"iron\"** **and \"software\"** **to systems** **at all evolutionary/systemic/organizational levels (levels of complexity), including not only enterprise engineering, but also social engineering of the community, society, and even humanity as a whole.** Discussion of the consequences of this non-application can be found in the works of John Doyle^[<https://ailev.livejournal.com/1622346.html>].\n\nReasoning on the topic of systems with artificial intelligence (AI), starting from\na certain level of agency of such systems (the ability to generate\npredictions of future states of themselves and the world, ideas for improving such\nstates, choosing the best of these ideas, and then planning and realizing\nplans to bring these ideas to life), discussions about people, people in their\ncollectives, people in their collectives with AI (for example, enterprises)—are\none and the same reasoning, system thinking is scale-invariant and\nnon-anthropocentric.",
    "df740ee457050d63e794ba35c0c0d28d": "---\ntitle: Concept of Use\n---\n\nKnowledge of the existence of different types of systems (supersystems, subsystems) in their relative position to the target system in the system partitioning (mention of system partitioning—this was an indication of the time of use) allows us to more strictly/accurately identify the target system in the world. The concept of a system in physics precisely means some part of the world, separated by a boundary from the rest of the world (environment), and when more talking about descriptions/texts, the word **\"context\"** is used.\n\nWe will distinguish a system from the world with attention, considering **the boundary as the boundary of our attention, and not some material medium.** Thus, we focus on a computer along with its case (the case is not the boundary of the system! The boundary goes where the molecules of the case end and the molecules of the air around the case begin, and this boundary is immaterial, it is \"in the mind,\" it's the boundary of attention), a house along with its outer wall, a cable along with its sheath, a cell along with its membrane.\n\nNext, we introduce the concept of a **\"black box\"**: it is some system that we imagine without knowing its internal structure—we can only describe the function::behavior of the \"black box\"::system, manifested at its external boundary, i.e., at the boundary of the space it occupies in the physical world. We know nothing about the internal structure, about the subsystems of the \"black box\". And if we look inside the system's boundary and talk about how it is arranged, we will call this a **\"transparent box\"** (sometimes called a \"white box\"). There is also a **\"gray box\"**: we know very little about how the system is structured inside its boundary, but we do know something.\n\nWe describe the system as a black box at least four times; this is \"system consideration\":\n\n-   **Functionally:** as a role (functional/role object) and its function in interaction with the environment during operation/use/functioning. A hammer—applies force from the hand to the hammered sharp object.\n-   **Constructively:** as the construct we create and develop during creation. A hammer—this one, which we bought in the store (and will implement the hammer during use).\n-   **Spatially:** as the place in space that this black box occupies at the time of use. That object lying in the top drawer of the cabinet near the right wall, and at the time of use at workplace number five in room number four.\n-   **Cost-wise:** As the total cost of owning the black box. This thing costs 1000 rubles to buy and practically nothing to use.\n\nIt is important that all these considerations are about the same object-system and are consistent with each other, that is, they non-contradictorily describe the same system (this is done through 4D extensionalism—it is verified that the described object occupies the same space-time), and they do not delve into the system (in this example, we do not talk about what is inside the hammer—we do not mention its parts: the handle and the hammerhead).\n\nIn system consideration, we additionally account for:\n\n-   **Creation graph:** in addition to considering the system as a \"black box\" at the moment it works, we consider that someone will create and develop this system.\n-   **Evolution:** we consider not only the one-time initial creation of the system but also its development: the \"black box\" will evolve/upgrade, it is not about a one-time event of its appearance. No, there will be an MVP and many increments, **\"no version of the system is final.\"**\n\n\"Describing the system\" is either:\n\n-   \"straightforward engineering,\" i.e., designing in terms of inventing what kind of system is needed within the supersystem.\n-   \"reverse engineering\" already existing systems if such a description is unavailable but needed for something.\n\nIn \"straightforward engineering,\" don't think \"we know nothing about the system until it is created, we can't see into the future\" (we only mention this because we have heard it from many students). Almost all engineering—is designing systems that do not yet exist, but this does not prevent describing a non-existent system, i.e., hypothesizing about what non-existent system will be successful.\nTo describe a non-existent system, one must hypothesize what this system will be like in 4D—come up with a system that would perform behavior leading the supersystem to performing some important function in the future. Thought about a building to be constructed next year is quite possible—builders did this even a couple of thousand years ago; there are no difficulties in imagining a system working in the future that hasn't been created yet. In straightforward engineering, they describe a system that does not yet exist in the present, it is the usual case, any design—is hypotheses about what the future will be like!\n\nThe very first system consideration—is considering the system as a black box for performing a function (\"bringing irreversible benefit\") in the supersystem during its operation. The ontological modality of this consideration in both reverse and straightforward engineering is the modality^<https://en.wikipedia.org/wiki/Modal_operator> of belief/doxastic modality, i.e., it is a hypothesis. It can either withstand checking by logic and experiment or not, this is dealt with within **methods** of **engineering justifications**:\n\n-  **Check with logic:** **we show that there are no logical contradictions in the description of the system.** If it is said that our \"black box\" is white up to mirroring to better reflect sunlight and avoid overheating, and at the same time, it is said that our \"black box\" is a fashionable dark green color to look aesthetically pleasing, this is a clear contradiction, the description must be changed to eliminate the contradiction (again: it doesn’t matter whether we describe an existing system or a future one). Engineering is about people **agreeing and eliminating contradictions** in such situations.\n-   **Check with experiment:** we can take some measurements in the real world and check if these measurements on an already existing (manufactured/embodied) system match the design values for it within some confidence interval.\n\nIn any case, both in straightforward and reverse engineering, we invent the description of the \"black box\" as a hypothesis (we believe it is correct), then criticize this hypothesis and, in case of errors, improve, improve, and improve this hypothesis about the \"black box\"—work with this description, ensuring its consistency and accuracy in experiments (reverse engineering) and predictions (straightforward engineering, but here there will also be an experiment—creating the system and measuring on the produced system to confirm the hypothesis).\n\nThe description in its functional part should demonstrate that the system \"brings irreversible benefits\" by working within the supersystem, in the constructive part—that it is implementable (can be made!), in the spatial part—that the system can fit where it should operate, in the cost-wise part—that building and operating the system will be profitable.\n\nAn \"entrepreneurial hypothesis\"—this is precisely it, a hypothesis that our \"black box\" will be useful and cheap, therefore will sell well and investing in its development and production now will yield profits later. This is **visionary work**::method/practice (we avoid using the word \"entrepreneurship,\" although it strictly refers to \"Schumpeter's entrepreneur,\" but few understand \"entrepreneurship strictly as Schumpeter,\" and everyone fantasizes about something of their own. So we taboo the term \"entrepreneur,\" the practice of \"entrepreneurship,\" and break down the everyday understanding into several roles. A **visionary**::role is indeed \"Schumpeterian entrepreneur,\" but this is neither a firm founder, nor a person with a special mindset inclined to risk, nor a rich person, nor an inventor, nothing from the usual associations with \"entrepreneur.\" But this role will evaluate whether the project will be profitable and will hypothesize about it. And if the role thinks there will be no profit—there will be no project).\n\nIf we change the modality of the system description of the \"black box\" from doxastic (belief) to deontic (prohibitions and permissions, prescriptions), the description of the black box is called **system requirements**. Previously, in the end, system requirements were developed, but now they develop **concept of operations** refined and detailed to **use cases**—they primarily differ in this ontological status but not only. **In the concept of operations and further in use cases, they describe the behavior of the system as a \"black box,\" i.e., they describe the system's functions, its role in the environment—** **describing with the status of a hypothesis that this is the correct behavior of a successful system.**\n\nUntil about 2015, systems engineering even had a separate method **requirements engineering**, now it doesn't. Check: until 2015, almost a dozen textbooks on variants of the requirements engineering method were published every year, and then it abruptly stopped—by inertia, they still release a book a year, but these are just \"old-timers\" satisfying the demand of other \"old-timers.\"\nMore about this transition from requirements engineering to the development of the concept of operations is told in the course \"Systems Engineering.\"\n\nThe main points here:\n\n-   Performers of the requirements engineer role (often called **analysts**) stood between developers and external project roles on the ground that \"we must not distract developers from development, these developers also don't know how to talk to clients, specially trained people must do it.\" It turned out that these \"specially trained people\" (analysts) just created a broken phone situation (the client says one thing, the analyst hears another, documents a third, the developer reads a fourth from the requirements), the harm of which exceeded the harm of \"distracting developers from their work,\" and the time **\"reading from the client\" and \"reading from the requirements\"** was about the same. Additionally, there was a time delay in transmitting information through an extra link and a loss of context and justification for the appearance of certain requirements.\n-   Requirements arose precisely from concepts of operations that gradually detailed. The most different requirements for certain features were slowly collected into a huge, strictly agreed \"monolith\" (as architects say now), approved—and then this \"monolith\" was passed on to development for \"unconditional fulfillment.\" This \"collect everything, approve, pass to work\" turned out to be terribly slow, although it was much better historically than the previous situation when the system design proceeded without any requirements. Then everything was so bad that it's better not to remember. \"Much better with requirements than without them\" was the pure truth! But even with requirements, it wasn't so good. The first delay was from reconciling heterogeneous requirements among external project roles, requirements engineers, developers, and architects. These requirements were approved, and everyone understood their great value, given the huge labor invested in them, so they should not be changed—they were agreed upon with such difficulty! Therefore, when obvious errors in the requirements were discovered, or when the situation changed, requiring the requirements to be changed—they preferred not to change the requirements. They made the system inevitably worse than it could have been. The fact that \"we have procedures for changing requirements\" was fiction and an excuse, these procedures were prohibitively expensive in time, and violating requirements carried punishment, but meeting crooked requirements couldn't be punished, so requirements were sacrosanct.\n-   After the requirements reached the developers, they tried to understand what would be truly useful to external project roles, whom the developers had never seen—the analyst had seen them. The problem was not only in the difficulty of changing requirements when errors were found but also that developers themselves believed that they should work with these requirements once, and the tests were planned not to demonstrate the system's fitness for the client (later they figured it out, called acceptance/validation), but to show that \"requirements were met\" (these tests were called verification). The problem was that the design, development, manufacture, and testing (both verification and validation) were considered one-time actions, which led to the impossibility of improving the system: neither quickly adding a new feature nor quickly excluding an unnecessary one. Not quickly and extremely nervously—it was possible \"there are procedures for changing requirements.\" But quickly—no, it wasn't. Just hear: \"we have an incorrect hypothesis, let's quickly fix it\" versus \"they gave us wrong requirements, let's not follow these requirements.\" Systems made based on concepts of operations and detailing to use cases **proved to be better** because both the concept of operations and further use cases could somehow be corrected during development, \"in working order,\" if problems were found, while requirements were \"approved\" and hence could be changed only \"in a special, slow, and laborious manner.\" Well, seasoned old-school engineers didn't mind this \"slow and laborious manner,\" while new-school engineers just smirked and quietly said, \"for a crazy dog, seven leagues is not a detour,\" then demonstrated incredible speeds of development to the \"old-timers.\"\n-   Working with concepts of operations and use cases, without developing requirements, used directly by developers, also proceeded faster: various use cases were amended and implemented by different teams of developer-people, while architects monitored the integration of these works. This means teams didn't have to wait for each other until all requirements were gathered and approved into one \"monolith.\" No, everyone expressed their hypotheses in the form of concepts of operations (described the system as a black box), criticized them, checked by creating parts of the system implementing use cases, then improved these use cases—and so the system was created and developed continuously, the bottleneck \"collect all requirements together and demand their one-time fulfillment\" disappeared, and system creation work was parallelized not only in design but also in understanding what should be designed—what behavior (functions) the \"black box\" should perform.\n-   The refusal of requirements led to the active use of A\\|B testing^<https://en.wikipedia.org/wiki/A/B_testing>, where several hypotheses (requirements usually demand something single!) are presented and checked together, then the one found better by some criteria is chosen. **If you have \"hypotheses,\" not \"requirements,\" you handle them differently: not just \"meet\" but \"check and gradually correct.\"**\n\nThe concept of operations (previously requirements developed on its basis, now abandoned) primarily contains information about the system's functions in relation to its working/target/operational/functional environment, so it consists of various models that describe the system's behavior at its boundary in interaction with external systems (systems within the supersystem). The most detailed behavior models are use cases. In some schools of systems engineering, use cases are considered separate from the concept of operations (as they are developed later from concise descriptions of functionality in the concept of operations), in others—they are included in the concept of operations, which gradually changes during the project: it is specified, refined, detailed, including more and more detailed use cases as the system develops. We adopt the second approach: use cases are part of the concept of operations, one of the types of models included. More about this—in the course \"Systems Engineering\" and the literature offered by the course.\n\nWhen talking about the concept of operations as a \"black box\" description, we mean describing the time of use in terms of obtaining the required function from the system. The system **should** **be** during operation in terms of its behavior either meaningfully flashing lights, or providing some computation result, or heating, or leaving a furrow of correct sizes: everything assumed the system will do (hypotheses!) so that at the moment of its use people would say it does what is expected and doesn’t do what is not expected, that is, describing the expected behavior of a successful system. **The expected behavior of the system is** **a prediction of what should happen during use.** **In the case of requirements, it was therefore said functional requirements** **(deontic), but now it is just hypotheses** **of functionality** **(doxastic), so there is no \"must,\"** **only** **\"should be\" (and life will show if the hypothesis is justified).**\n\nThere were no \"non-functional requirements\" though the term was often encountered in the literature, usually explained as incorrect to use. More often, they spoke of other types of requirements—like quality requirements (-ilities, types of availability, repairability, reliability), which interest not only the developer but also other project roles, mainly the architect. It is now clear that architecture deals with architectural characteristics (mainly those -ilities), related to the system not in terms of its applied functions but its general behavior at the moment of work/operations (such as reliability characteristics), or even at the time of creation and development (such as ease of change during continuous improvements, evolvability). These characteristics though different, are more or less the same for very different types of systems. For example, scalability: how easily the system’s performance can be increased, if needed—will it just require adding some additional modules (say, adding another wheel for each new ton of the trolley’s capacity, or does everything need to be redesigned from scratch—because increasing load capacity requires changing not only the trolley’s frame and wheels, but everything?) Architectural characteristics describe the system's behavior under unusual conditions or not at the time of operation: ability to work under high load, repairability, affordability (remember, total ownership cost involves both consumables and maintenance during operation but also includes manufacturing costs apart from material costs, affecting systems in the creation chain too), ease of installation. The course \"Systems Engineering\" deals in detail with the architect’s work, architectural characteristics, ways to achieve acceptable values for metrics measuring architectural characteristics.\n\nOf course, many models intersect both the concept of operations (what the system does at its outer boundary, fitting into surrounding systems at work, bringing some benefit to this world) and architectural characteristics (reliability, ease of modification by developers, destruction resistance, and other characteristics not directly related to the system’s functions) and **system concept** as a description of the internal structure of the system, a \"transparent box.\" As the concept of operations becomes a set of use cases, so the system concept becomes the system design.\n\nIf talking about a similar set of descriptions but at the supersystem level (e.g., describing not the concept of operations of a gear in mechanical clocks, but the concept of the clock with the gear in its composition as a system concept), it can be noted that the concept of operations of the gear is essentially part of the clock's concept because the gear’s role in the clock mechanism matters regardless of the gear’s own construction.\n\nTerminology for all these descriptions of the black and transparent boxes can change, especially if looking not at descriptions but at documents expressing these descriptions: easily, the concept of operations of a pump, describing its behavior, can be called a \"questionnaire\" sent to suppliers with the questions \"can you manufacture a pump with these characteristics?\" There will be no words \"concept of operations\" nor the older term \"requirements\" in the \"questionnaire.\" If there are hints on what should be part of the pump, there won't be words \"concept of the system.\" Architectural characteristics (like reliability) may or may not be indicated, the document's name will still be \"questionnaire.\" You should be able to look at such a \"questionnaire\"—and determine the type of description: \"questionnaire\"::\"concept of operations\" of a pump (and if there are architectural characteristics, note them too).\n\nWhy is it necessary to separate the description of the black box as a concept of operations (what the system does externally from the system’s",
    "003d5721c98f19765ba5904db0a4c16a": "---\ntitle: Systemic Ethics\n---\n\n**Ethics** in systems thinking is regarded as a method/practice/culture of minimizing conflicts between intelligent agents concerning their actions that affect the interests of other agents. Ethics also easily extends from conflicts of intelligent agents to various conflicts of agents at higher systemic levels, consisting of intelligent agents: organizations, communities, societies, and humanity/agent-community as a whole. Sometimes these levels are referred to as \"social,\" meaning related to many people.\n\nEthics is a method among the methods of the intelligence stack, and systems thinking views ethics as the leading way of reasoning about the success of systems in conditions where there are interlevel conflicts. A worker created a cannon; that's good for him — he got a salary. The enterprise received payment for the cannon. But this is a weapon of murder! The pacifist community believes that creating a cannon is absolute evil. The community of state enthusiasts thinks that the cannon may never be used, but its presence will deter potential invaders. The community of state detractors thinks the cannon should be used immediately since it exists. Most other people in society don't care about the cannon and its use. Somewhere in the UN, they try to reduce the number of cannons on the planet, \"arms reductions, strengthening global security.\" At the country's level (its governing institutions), the presence of a cannon is \"an increase in arms, strengthening national security.\" At the levels of communities within countries (different! Communities of some countries have opinions both about their country's cannons and about other countries' cannons) — the opinions sharply differ. What should be considered the success of the cannon's creation and development project? What is success from the perspective of some roles is a complete failure from the perspective of other roles!\n\nIn work/activity/practice/culture/strategy/engineering/method, working without ethics is impossible, and it would be better to be familiar with ethical arguments from modern (not outdated, e.g., where \"infidels\" can be killed freely) books than to \"vote with the heart\"^[Materials on ethics in Russian in some quantity can be found here, but the multi-level nature of ethics is not discussed: <https://vk.com/reducing_suffering>].\n\nFor instance, in 2022, it was decided to test how well an AI system, developed to predict the influence of molecules on the nervous system (intended for positive outcomes like drug development), works. This AI system, as well as proposing medications, suggested new neurotoxic chemical weapons (including the reinvention of already existing ones) after being asked to maximize negative effects on the nervous system^[<https://www.nature.com/articles/s42256-022-00465-9>].\n\nThe question of the ethical use of AI, like any system, extends to uses (including self-application, by own initiative) not only of artificial but also \"flesh\" intelligence, human, as well as any mixture of these intelligences, and collective intelligence of groups of people and their computers. We remember that conflicts between systemic levels always exist; there are many. But there are also conflicts between competing intellectual systems of the same level. What some communities want might not be liked by people from other communities, society as a whole may have a different \"average\" opinion, and each individual member of these communities and societies will also want something for themselves, not willing to sacrifice their interests for the community's, society's, or even humanity's as a whole — and optimal solutions are nonexistent here.\n\nEthics views distributing harmful ideas as an evil — some meme-viruses lead to extremely unethical consequences when thoughtlessly executed. Here are two options: either not restricting any ideas (allowing recommendations to be of any content, \"complete freedom of speech\") or introducing recommendation censorship, i.e., banning the distribution of certain ideas — pyramid scheme ads, racial hatred, drugs, and the list can go on, quickly leading to political bans. In some countries, criticizing the incumbent president is regular politics, while in others, politics doesn't even exist, and criticizing the incumbent president is prohibited.\n\nIf recommendation censorship is lifted, the output will be all meme-viruses — they would be selected by recommendation algorithms based on their \"infectiousness.\" Media and social networks choose news that isn't beneficial to people or society as a whole but is beneficial to the organizations providing these media and social networks, i.e., increasing news consumption. News like \"A child with three heads was born in Africa\" will undoubtedly be recommended by most \"censorship-free\" algorithms based on how many people it interests compared to the news \"Another Physics Nobel Prize was awarded.\" But what if a call to kill all redheads is excellently written and becomes viral? Should such a meme be filtered or left for \"freedom of speech\"?\n\nIf harmful (for some) ideas are banned and useless ones limited, then should beneficial ideas be promoted instead? For instance, providing a news feed that filters out all fakes and suspicious \"useless news\" but offers a fascinating feed, like popular science news reformulated into captivating stories by AI? Yes, say educators. Psychologists say this is manipulation; you'll get people addicted to reading, irrespective of the content, stimulating \"binge reading\" — but when to work?! Whose recommendation to follow — educators' or psychologists'?\n\nConflicts, conflicts everywhere! Evolutionary theory discussing frustrations (multiple equally quasi-optimal system configurations with easy transitions between them) due to these conflicts says there will be no stable solutions, just endless searches for compromises satisfying no one, with many different compromises of approximately equal quality and rare improvements, often associated with the emergence of another systemic level — complexity will keep growing.\n\nEthical consideration should similarly be without any individual, racial/religious, or even species bias. De-anthropomorphizing ethical thinking will be beneficial even for humans. Is death ethical? After all, programmed death^[<https://arxiv.org/abs/2207.04886>]— is a property of all life! One answer — no, never, by no means, and another answer — yes, because evolution needs it!\n\nMaybe then not death, but \"evolutionary modernization\" via transhumanism? Transition from biological evolution to techno-evolution (genome stored outside each organism in a genetic engineering lab)?\n\nFor such an engineering solution, extending beyond narrow species/parochial ethical priorities, we face the intersection of engineering active (self- and world-changing) thinking and ethics. **Ethics in engineering thinking is always present, it cannot be discarded —** **and systemic engineering cannot exist without ethical consideration.**\n\nIf you're creating simple dining fork, spoon, and knife, they can also be used for killing — used as weapons. The next question lawyers love to ask: what is the intention? Dining, \"dual-purpose,\" or specifically \"to kill easier than to eat\" (disguising a \"combat blade\" and \"combat fork\" as dining knife and fork)? The knife example isn't accidental; even manicure scissors can sometimes be taken away on a plane as \"potential weapons\" (something the manufacturer probably never considered!).\n\nAnother example: children can stick their hand or an iron nail into an outlet — should we ban 220 volts in home networks? Not all children will do this, only a few, and electricity is very useful for lighting and washing machines? Well, \"we\" (who are \"we\"? where are the boundaries of this \"we\", who is included in \"we\"? who expresses the opinion of this \"we\"? why shouldn't the holders of the opposite opinion be included in \"we\" and the opinion of this \"we\" reconsidered?) won't skimp on the price, children's lives are more valuable! Switching to 12 volts, although we understand that the losses on such voltage will be higher, and the wires will be inherently thicker! But children, children with their nail in the outlet!\n\nThere are countless examples. In social networks with billions of posts, adults can write something wrong from the point of view of some people (but quite OK from the viewpoint of many others), and then random people (like children accidentally putting their hand in the outlet) can read this wrong post. The solution: ban all billion posts in the country's internet so no one can accidentally read these few wrong posts! What, social networks are somehow useful? \"We\" (the same questions about \"we\"! Always ask them when you are spoken to on behalf of \"we\"!) won't skimp on the price, the wrong 100 posts per day outweigh all the benefits of the remaining 10 million. posts per day — and deleting billions of already written posts, millions of people who wrote these posts will calmly survive this!\n\nTurning off ethical thinking (as well as systemic thinking, which directs thinking during the target system's use, even if the consideration is during the creation of the system) is unacceptable since any engineering object can be considered \"dual-purpose\", and besides ethics, there is no other method of comparing benefit and harm (even discussing if benefit and harm can be compared — the question of utilitarianism^[<https://plato.stanford.edu/entries/utilitarianism-history/>], and whether we should judge actions based on those actions — deontics^[<https://plato.stanford.edu/entries/ethics-deontological/>], or involve consequences discussions by cause-effect line, consequentialism^[<https://plato.stanford.edu/entries/consequentialism/>]). The key question here is whether your reasoning about ethical methods is mundane, or do you understand the arguments for this or that solution because you have studied some theories/explanations/knowledge/disciplines on this line, and not just \"voted by heart\", made intuitive decisions. And do you understand that there will be no \"absolute solution\" or \"correct answer\" in ethics, as system frustrations (analogous to geometrical frustrations) are unsolvable, the system's complexity will only grow during evolution, different variants of ethical solutions will increase in diversity, but substantial improvements will be as uncommon as desired (all laws of evolution and techno-evolution apply to ethics too).\n\nIf interests of different systemic levels are not considered, it's not modern ethics. Systemic ethics takes into account that one person's interests conflict with the team's interests (he wants to go to the toilet, but the team is holding a meeting, so he has to refrain from going to the toilet — or vice-versa, not refrain, and the team becomes displeased), the team meeting itself may be disliked by some community since the team will discuss \"counterculture,\" and the community preserves culture. Community members know that every culture was once a counterculture; it's written in all culture books! Thus, a conflict between the community and the team exists. Society may find the community's culture unacceptable — but hold on: who exactly represents \"society\"? Community members may have widely differing opinions about the community and its supported culture (the community stands out from society because each member practices some work method, activity/culture/practice/style), and a significant part of society may not care at all. Reiterating: **an answer to ethics question \"what is good and what is bad\" is not valid if there's no systemic reasoning, i.e., considering events at different systemic levels, uncovering interlevel conflicts.**\n\nThe place of the ethics method/culture among other fundamental thinking methods of the intelligence stack is discussed in the \"Intelligence Stack\" course.\n\nHere are several examples of conflicts leading to ethical disputes between objects of different evolutionary/organizational/systemic levels:\n\n-   Humanity — we're alone on this small globe (humanity with all its people and computers, but not all agents will be humans, then transhumanistically call it \"agency\" or something else), but planning to spread across space. Is this ethical? Or will we \"pollute space\" and should commit suicide according to \"green\" slogans (in the case of barren Mars — \"red\")?\n-   Society —\n    catallactics^[[https://en.wikipedia.org/wiki/Catallactics](https://en.wikipedia.org/wiki/Catallactics)]/economy,\n    polity^[[https://en.wikipedia.org/wiki/Polity](https://en.wikipedia.org/wiki/Polity)]\n    (including the state). There are plenty of people eager to tell what is or isn’t ethical to do with society (including who should do it — who or what is the agent of such changes, and by what means this agent will work) on issues like state division, trade restrictions, etc., in any bar, in any pub, not to mention media editorials where journalists with their extensive readings of fiction literature hold enlightened opinions on these matters, and bloggers are absolute pros at this! Linking to territory is also discussed, and the answer is not so obvious^[text\n    A.Levenchuk 1999 about contract jurisdictions,\n    <https://old.computerra.ru/1999/320/196008/>, a more recent overview\n    of panarchism/contract jurisdictions/private jurisdictions ---\n    [https://medium.com/libertarian-state/контрактные-юрисдикции-краткое-введение-8153668ed268](https://medium.com/libertarian-state/контрактные-юрисдикции-краткое-введение-8153668ed268)].\n    Or issues like health (sanitary state: lockdowns and quarantines at any suspicion of an epidemic, compulsory vaccinations, and other medical procedures prescribed without valid reasons — but who and how will determine the reasons? Courts? Experts? They lie more frequently than expected. That is, they don't lie, but two experts — three opinions, called \"noise\" in decisions^[There is a book on this topic:\n    <https://www.litres.ru/daniel-kaneman/shum-nesovershenstvo-chelovecheskih-suzhdeniy/>,\n    but it can be doubted that the measures proposed will solve the problem.]).\n-   Community — disputes between different cultures and subcultures occur here. Once, the ravers (a community whose members practiced attending raves and nightclubs for collective dancing) and breakers (a community whose members practiced street dances and activities with battle contests) of Moscow disliked each other and went to each other's events to fight. This greatly displeased event organizers (a different systemic level than event participants with different goals, different views on the ethics of specific actions). They came up with an idea: leaders of both ravers and breakers unilaterally released declarations for their communities stating, \"We consider it below our dignity to pick on these not-quite-people, we won't even notice them!\" The texts were identical, well received by each community, and fights ceased — communities demonstratively ignored each other. This is social engineering at the community level.\n-   Collective/organization working — these are projects\n    (organized collectives, i.e., with clear roles and responsibilities for each). The organization is interested in paying fewer taxes, paying employees less, charging consumers more for their goods or services. And that's just part of the contradictions.\n    One worker \"set up\" another (allowed the realization of the inherently failed project of the second worker, but the failure occurred, the one responsible was punished). How to regard this? If the first worker didn't allow the realization of the failed project — how would the second relate to him? Another example: workers make an inherently non-competitive system, everyone knows this, but no one refuses to work. The system is made, doesn't work (as expected), no money obtained for it (salaries paid from a loan), the company went bankrupt. Are the workers right? Why did managers punish the owners of this enterprise? Or did the workers simply steal their salaries? But they did work! Then it's fraud?!\n-   A person who is today a rational/reasonable cyborg human. This raises countless issues, starting from relations between genders (no romance between teachers and students! Students are dependent! It's unfair love, even consensual! And no age-divergent love either — teenagers can have sex with each other, but not with adults!) to self-deception (often fully aware! Type \"I'll easily quit smoking/eating at night/going to bed at dawn if I want to quit, I just don't want to\"). And questions themselves: who to consider a person, competent. Children — from what age or acquired skills? Disabled — who to consider disabled? The problem of psychiatric patients (no \"objective\" tests in psychiatry, mostly arbitrary assessment), and just appointments. The problem of convicting criminals (or not criminals? Different communities, different societies may have different answers for the same action. Even in the same society, one year carrying a mask could get you fined for disguising your identity, another year fined for not wearing a mask during an epidemic).\n-   A being — breeding beings (like, there are more cows on the planet, bred for slaughter, than might be expected in the wild), preservation of different genotypes (combatting evolutionary extinctions!), genetic engineering (\"we can't wait for evolution's grace”), and here comes “the good of all sentient beings,” including the intelligence of computer agents at the ant's level: is it ethical to turn off such intelligence, or would it be “killing an agent”? Is it ethical to step on an ant? And to wash hands with antibacterial soap? It's genocide, exterminating living/sentient beings based on genome differences! Okay, what about abortions: there is no rationality/reason in human embryos yet! Even in infants, not much, what makes them so different from cats or even cows?\n-   Substance — it can be used harmfully! So, working with certain substances must be banned. Uranium-235 without questions, but also gold, it’s uncontrolled currency challenging paper money! And drugs, of course, but not alcohol, or alcohol too, or not for alcohol after all. And steel, if it’s in the form of a gun, or even a knife, or it has a suspicious price in large quantities, it’s “dumping.”\n\nOf course, this is a tiny sample of examples. Essentially, all social (individual-organization-community-society) life as a competition of engineering projects revolves around possible answers to these questions, attempts to optimize conflicts^[<https://trv-science.ru/2022/03/vsya-nasha-zhizn-zadachi-po-optimizacii/>].\nBut remember, due to multi-level frustrations, many possible solutions have comparable optimality, improving this optimality (successful solutions typically agreed upon at several systemic levels) is rare, the variety of solutions is vast, and there cannot be a “correct” unique solution. Plus, the level of complexity constantly increases, humanity should not be the last here, and unlikely that aliens will arrive to complicate the situation, but transhumanists can well manage this complication (actually, even the existence of two sexes or several main human races already raises questions on how many different humanities live on the planet).\n\nSay a cell in an organism wants to reproduce uncontrollably. For the cell, it's \"good and ethical,\" but for the organ and even the organism, it's cancer, \"bad and unethical\" — and here everything seems clear, as the cell and even the organism are denied reason. A person in a project wants to sleep in and not go to work, and for the team and further the collective, it’s a project failure and no salary for everyone. But should the cell obey the organ’s and further the organism’s demands (obey whom? who determines “ought to”? how does the organism decide that this hypothesis, that this must be done, will definitely be realized? Can such language of “ought” even be used regarding relations of not very rational entities?), and should analogously the person obey the team’s and further the collective's requirements (here it’s all the same, but the word “ought” suddenly gains a very definite meaning)?",
    "24c3fd1eb20578e8f4aed8e06d109fb7": "---\ntitle: Recursive consideration in systems thinking\n---\n\nIf you consider the supersystem of our target system as a black box, it will be the target for the team of the project's key external roles. And describing the supersystem as a black box will be a concept of using their target system for these external roles, which is the target for the team.\n\nWhen requirements were still being derived from the concept of use, this description was often called: **stakeholder requirements/stakeholder needs, not to be confused with system requirements, simply called requirements**, omitting the word \"system.\" However, to reduce confusion between this description of the supersystem-as-black-box and the target system-as-black-box descriptions, it is now commonly called **needs** (stakeholder needs, needs of the external project roles), and even more frequently referred to as **role interests or preferences**. For example, if we::team make a gear for clocks, the target system of the team is the gears. Needs/requirements are for the clock::supersystem, and the scenarios in the concept of use will be for the gear::\"target system.\"\n\nThus, in a project, usually **two \"black boxes\" are described in the concept of use**:\n\n- **Supersystem** — described by interests/preferences in certain characteristics of the supersystem important for the external project roles (needs, stakeholder needs). Different preferences may exist concerning the supersystem's areas of interest, for which you need to hypothesize values that satisfy everyone and then don't hesitate to adjust it during the project. Assume the supersystem is not just \"something given,\" unchangeable, \"descending from the heavens.\" No, the environment of the target system is also created by creators, constantly changing, and hypotheses can be made on how it should be arranged. Modern engineering bases itself on continuously refining the understanding of the world, the knowledge of the target system's use situation, awareness of the capabilities of teams that create the supersystem to adjust the target system's environment, and how to better meet needs through modifications to the target system so that it improves the supersystem's performance. You need to consider the various preferences of external project roles regarding the supersystem as the environment of the target system and possible changes in these preferences.\n- **Target system** — described as a \"black box\" primarily through gradually detailed usage scenarios. Essentially, the same consideration applies as for the supersystem; in ISO 15288:2023, this is termed **recursive application of systems thinking**.\n\nAdditionally, **two \"transparent boxes\" are described, one in the concept of use and another in the system concept**:\n\n- **Supersystem** — primarily described by the concept of using the target system, with emphasis on the target system's role/function within the supersystem. It shows how the presence of the target system within the supersystem satisfies the interests/preferences/needs of external project roles. This is the important \"organization of the supersystem,\" the transparent box. The concept of use is, to some extent, the concept of the supersystem (recursive application of systems thinking! The same happens at every level) with sufficient precision to describe the target as a black box performing functions in the supersystem, making the satisfaction of external project roles' interests understandable. For wall clocks, the supersystem is the interior and people in the interior. You need to describe what surrounds the clock and how it interacts (e.g., does the loud ticking disturb people at night).\n- **Target system** — described by the system concept, including the architecture as additional system construction solutions (with expected architectural decision influences mainly on architectural characteristics/object of interest, rather than functionality). The system concept and architecture demonstrate how the interests of not only external project roles (more described by the use concept) but also internal/team project roles — the visionaries, developers, architects, and engineers of the target system's production platform — are satisfied. For example, for clocks with specified accuracy on their outer edge, decisions must be made on their internal structure: whether to use precious stones in the clock to reduce friction and thus increase accuracy or if using them in wall clocks is a luxury and accuracy will be achieved using hard alloys for axles and pivots. Or, perhaps, making the wall clock electronic to achieve the required accuracy.\n\n![](04-recursive-consideration-in-systems-thinking-41.png)\n\nIn the diagram, the target system and its subsystems are shown in red circles, and the \"part-whole\" relationship is depicted by the inclusion of circles. The environment — blue circles, nearest supersystem — a large blue circle encompassing both the target system and several other systems. Of course, there are additional systems in the environment that do not belong to the supersystem. There are many systemic levels both inside the target system boundary and outside it.\n\nExternal project roles at usage time are shown as blue characters, but these are not people. These are roles, which can be played by people, people with computers, teams, and firms with all their people and equipment. In operations considerations, these external roles, such as \"users,\" we recommend always replacing the major type \"user\" in our meta-meta-model with a role type from the meta-model (the target system’s domain) — in games, a player::user, in accounting systems, an accountant::user and auditor::user. However, external project roles can also be malicious actors/hackers and external inspectors — anyone interacting with the target system in operations time. These roles are shown in circles to emphasize that they are also systems in the environment (a role is a role object played by an agent as a constructive object).\n\nIn the creation time consideration (construction time) of creators::system, we do not draw circles and their nested/internal parts.\n\nAcross the entire diagram, the relationships of creation (between the right and left parts of the diagram) and interactions between systems of the same level during their operation (between circles of the same level) are not shown. The fact that systems can be divided in various ways (e.g., functionally and constructively: like a spoon — the handle and scoop are two functional parts of the spoon, but the constructive part of a cast or wooden spoon will be a single fabricable \"part\"-constructive) is also not shown, although multiple coordinated descriptions within a single system description will be critical in the system concept. Different coordinated decompositions (including placement and price decomposition — what we manufacture ourselves and what we outsource) are usually considered. Out of all coherent variations of different decompositions, keep only the \"least bad coordinated variant\" because \"the best option\" is unattainable in evolution, always achieving only a local optimum.\n\nWhat’s essential for this illustrative diagram is that the \"blue\" external roles during creation and development engage in the \"blue\" (supersystem) part of the diagram, whereas the \"red\" part is a \"black box\" for them. Yet the \"red\" internal project roles (project team roles) must explore the \"blue\" area first, then go inside the \"red,\" considering initially the \"black box\" environment (the nearest supersystem as a \"transparent box,\" but also far supersystems), then make the \"black box\" transparent — form hypotheses about not only the functionality of the target system as a black box (concept of use) but also about its construction (system concept, including initial architectural solutions).\n\nThe project team for creating and developing the target system forms its concept. Concept development often starts with functional division, gaining an understanding of what happens inside the system in terms of subsystem roles (subsystems as role/functional objects), as well as subsystem functions. For example, \"to show the time on the clocks at night, we'll make constantly glowing hands, which won’t be visible during the day, but will be good at night\" or \"to show the time at night, we’ll set the illumination to activate when the surrounding light drops\" or \"to save costs, we won’t accommodate nighttime viewing, if needed, they can use room lighting to illuminate the dial.\" These descriptions will be the concept of subsystem usage (recursive application of systems thinking!), with the subsystems yet to be designed, manufacturing methods devised, and materials found (affordances that turn into system constructs). For instance, in the \"night clock\" example, deciding what to use for dial illumination — LEDs, incandescent bulbs, phosphors. Some options will fit (an affordance is a \"suitable thing\"), some won’t, to perform an expected subsystem function within the target system.\n\n**Systems thinking is recursive, applied similarly at every system level by every system creators' team. Each team has its own **\"system coordinates\" **around their target system** **and \"their systems,\"** **so the most critical thing is to agree on what these systems are!** **Agreements occur by describing the system's behavior regarding the supersystem** **(first upward through levels!), striving to describe the system as a \"black box\" to later test various system configurations as hypotheses, considering different system \"transparent box\" options** **(downward through levels — later!).**\n\nIn this section, we explain recursion using two levels (system-supersystem), but recursion applies to all levels — systems with subsystems, subsystems with sub-subsystems down to elements, supersystems, and the supersystem’s environment at multiple levels. At any level around any system, a complete system review can (and should) unfold roughly as it does around the target system.\n\nSystems thinking holds that the concept of use (formerly needs and requirements) describes two different systems (supersystem as a \"transparent box\" and target system as a \"black box\"). But the techniques/methods to identify external roles' interests/needs/preferences in important supersystem characteristics and form the concept of use, how not to miss these in conversations with external roles, not lose them in collective project participant attention, how to trace (trace, correlate) target system behavior to needs (emergence of new properties), what additional methods are needed for creating and developing systems successfully — that’s covered in the \"Systems Engineering\" course, beyond the system thinking course's scope. The system thinking course covers understanding that \"if you want to describe a system as a black box, you aim to develop its concept of use\", setting up important objects needed in thinking.\n\n**How exactly to develop the concept of use, which method to use? What are the results of using different methods/styles (many options)? That's all in the systems engineering course and may be specified in applied engineering courses for various systems (robots, expertise, organization, etc.).**\n\nOur course is about conceptually focusing on systems and system descriptions, not how to make systems (methods/practices/work cultures), but how to think about systems while making them. In our course, we describe types of meta-meta-model objects of work methods, such as \"system,\" \"system description,\" \"system concept.\" The \"Systems Thinking\" course is about what to systematically model in a project, about thinking via modeling: what objects in life to model and what is important in them (what models are needed).\n\nBut how to model, when to model, who (roles!) should model — that's in the systems engineering course and then in applied courses (e.g., if your system is an organization, then in the system management course, if it’s expertise, then in the personal engineering course).\n\nFrom the systems thinking course, you should only know that **the concept of use** **is linked** **to the boundaries of the target system and the supersystem respectively, and they** **should not be overlooked, they** **must** **be present in the project!** **Also, the concept of use** **must mention** **architectural characteristics (not the responsibility of developers::\"internal/team role\" creating the concept of use, but architects::\"internal** **team role\"). All these model::system descriptions** **are documented.** **Of course,** **without** **developing a concept of use** **a system can be made** **(Egyptian pyramid builders built them, unlikely documenting a concept of use), but success may be a fluke** **(e.g., don't ask how long the pyramids were built, their cost, or how many dissatisfied died in the project. Governments still dislike documenting use concepts, unsurprisingly).**\n\nRole performers conceiving (concept of use, detailed throughout the project), designing (system concept, detailed throughout the project), manufacturing (system realization, covering the project's entire time — not only creation but also development), and decommissioning the target system (rarely, but happens) or parts of the existing working target system to get a new feature/capability — that's the \"project organization\"::creator (people, AI, their equipment and materials). These internal project role performers are often called the project team, project task force, or simply the project. Be mindful of types: here it is not project/design but project/project, and not project::behavior but also project::organization. The everyday confusion between objects and their behavior for roles and functions is traditional for projects. Check: is your \"project\" a \"project team\" or \"project team behavior\"?\n\nAn organization is defined by subordination: how it collaborates and works together, but its external roles as a \"collective actor\" with its props are significant. An organization (team, teams collective, enterprise, cooperation, task force, using different equipment, etc.) is an **orglink, a collective actor.** Commonly for mechanical target systems, the creator is the organization. In creation chains, one organization may create another (often termed as \"orgproject,\" \"organizational development project\").\n\nExternal project roles? Those who aren’t directly subordinated while performing their roles to project team role performers. There are intermediate situations: a contractor team from another firm engaged with our target system is internal roles performers because they formally work on our target system (e.g., making a subsystem or providing a service helping the target system creation) but also considered external due to partial subordination under a contract. The client team roles are external, project creation team roles are internal, and contractor team roles lie in a grey area (considered internal, but life often forces careful consideration of their role interests much like external roles — \"trust in Allah but tether your camel\").\n\nThe previous paragraph clearly tied role/agent subordination relations (who’s the boss versus merely a client, inspector, etc.) to what roles are considered internal or external. Yes, **modern systems thinking** **starting with the second generation** **addresses not only** **target systems but also creation systems, including people and** **AI,** **collective creators.** Thus systemic thinking applies in managerial reasoning concerning collective systems of agents (including humans, AI, computers, equipment — enterprises, organized markets, self-regulating organizations, etc.) beyond just technical or software systems.\n\nSystems thinking applies universally, even at any level. However, the higher **evolutionary/system/organizational level, the harder it is to agree even on the** **concept of use, let alone** **the system concept as a means of implementing the use concept.** **Conflicts amongst levels' systems and conceptual discrepancy cause this.\n\nPhysical evolution theory says achieving a true/global optimum is impossible. Each attempt hypothesizes reaching a new level of quasi-optimal/\"local optimal,\" acquiring the least bad engineering solution, seldom significantly improved abruptly (require multi-level work — major evolutionary transition), but always aiming at quasi-optimum. Life development is endless; technical systems too, part of techno-evolution — there's always room for improvement, no final fix.**\n\nSystems thinking is fundamental/transdisciplinary: **it productively mediates conflicting (different interests!) roles of target system engineers (visionaries, developers, architects, production platform engineers/internal platform), creation system engineers/managers (businesspeople, organizers, org-architects, administrators), involving various roles from impacted project activities, harmonizing in collective thinking, creating systems collaboratively.**\n\nProjects are universal; it's applicable to every type. System thinking serves in both execution::\"teams’ behavior for results\", defining project aims, primarily — formulating the target system. For example, system thinking is essential in founding enterprises, unclear target system assigned to a team (market hypothesis), thus engineering a company from scratch (\"business engineering\", including business model proposition) that designs \"iron\" or \"software\" systems, refining an initial guesswork on the system’s nature.",
    "db8341d69707dbb612025d7edbd4e600": "---\ntitle: 'Minimum thinking requirement for modern humans: learn once, use in all projects'\n---\n\nMastering thinking methods at the top of the intelligence stack usually requires a certain level of proficiency in the methods below. If you don't know what concept theory is, aren't familiar with logic, or ethics, then studying rhetoric will not be available to you. Let's recall the sequence of levels of today's intelligence stack (the set of methods can change! Development does not stand still! Moreover, there can be alternative versions of the intelligence stack even today, evolution implies the existence of many types, including many types of theories/explanations/disciplines):\n\n-   Systems engineering\n-   Methodology\n-   Rhetoric\n-   Ethics\n-   Aesthetics\n-   Research/knowledge\n-   Rationality\n-   Logic\n-   Algorithms\n-   Ontology\n-   Concept theory\n-   Physics\n-   Mathematics\n-   Semantics\n-   Focus\n-   Conceptualization\n\nA barely crawling person will not be able to jump or dance; one must first build muscles (tools), and the brain must master muscle control techniques (discipline). Preparation for action, mastering the method, and gaining skill is required. Immediate action won't work. Only after preparing the body for action can one learn patterns of complex sports and dance movements.\n\nEducation, in particular, and training in general (**education** --- is a specialization of training aimed at enhancing fundamental/universal/general intelligence, i.e., teaching thinking methods of the intelligence stack) is arranged similarly: it provides for some sequence of learning (curriculum learning), knowledge accumulates piece by piece, not \"in one big chunk at a time.\"\n\nArithmetic is studied before integrals, without knowing the multiplication table you cannot master higher mathematics --- arithmetic here is a prerequisite for higher mathematics. First, readiness and automation/fluency of thinking for more basic thinking skills, and then readiness and automation/fluency at more applied levels of thinking --- and so on at several levels.\n\nFirst, one needs to be able to express thoughts in words somehow (conceptualization), then to maintain focus on thoughts (focus), then to distinguish the thoughts themselves, objects of the world, and words about them (semantics), then to understand physics and mathematics --- how they differ and why they are indispensable, then to understand types of objects and relationships (concept theory), maintain a multi-level object task while highlighting it with attention from the background (ontology), and so on.\n\nOf course, there can be a huge number of educational routes (study programs/curriculums), during which intelligence is enhanced, i.e., some sequence of mastering thinking techniques from the intelligence stack methods is needed. Thus, to master systems thinking, you need to be familiar with not one, but all the thinking methods of the intelligence stack. For example,\n\n-   In conceptualization, you learn that there are objects that we can name,\n-   In focus, you learn to record the results of your reasoning,\n-   In concept theory, you learn that the world must be modeled through typed objects and their relationships,\n-   In physics, the type \"system\" will be given,\n-   In ontology, a hierarchy concerning composition will give system levels,\n-   In methodology, it is told that one system creates another system by some method/labor/practice/culture/activity/style,\n-   In engineering, it will be clear by what means we create these systems.\n\nWe have once again repeated a small piece of how from the knowledge/theories/transdisciplinary methods of various thinking methods within the intelligence stack, the knowledge of systems thinking is formed.\n\nSystems thinking is given \"in types\" of high-level abstraction, it is scale-invariant, universal in terms of applied subject areas, and not anthropocentric. Therefore, systems thinking is applicable to projects for creating and developing such diverse systems as rocket plane parts, airliners, pedigree sheep and hectares of forest, chefs and roboticists, diaper-producing companies and internet provider firms, Tolkien enthusiasts communities, and \"invisible colleges\" in science. Sometimes a society is created as an \"individual country\" or this society is modified without changing the country but becoming completely different (\"revolution\"), and sometimes super-intelligence is created as a hybrid of computer and human intelligence.\n\nIn various projects, different people work on different methods/practices with their different disciplines/theories/knowledge/algorithms, using different tools and different materials for these jobs. You need to think a bit about many of them to better understand your own project: each project itself includes many applied works on applied methods, and when problems arise, it also requires the work of intelligence methods, but there are never \"spherical projects in a vacuum,\" a project meets countless methods of other projects’ work. Each outsider working in the project does their thing: external counterparties, material suppliers, buyers, managers, intermediaries, standardization organizations, new people appear in the project every day, and meaningful discussions with all of them are necessary. One must somehow understand what they all do to build substantial discussions with them. **Thinking and activity in all this diversity of activities** **of the project itself and the projects surrounding it** **are arranged similarly, and this compact thinking can be learned once and then applied in different works of one project, or even in different projects.** **Enhancing intelligence, including mastering systems thinking, is precisely dedicated to this compactification of thinking: you learn to think once and then apply in all projects. You turn on strong thinking once and then** **never** **turn it off.**\n\nThere is a legend that the talent for thinking (of whatever kind) is inherent. Yes, genetic predisposition to a certain type of thinking happens, just as athletes have a predisposition to certain sports. But it’s not so straightforward: hundreds of genes related to intelligence exist, genetic factors won't take you far in thinking.\n\nTherefore, we recommend relying not on genetics but on training thinking: thinking techniques are not embedded in the brain; they need to be mastered and trained. This means that a trained \"non-talent\" will easily outdo an untrained \"natural talent\" in one type of thinking or another, who will remain \"perennially promising,\" just not knowing how to think correctly. A potentially genius Mowgli, raised by wolves, won’t even know how to speak, let alone reach strong thinking. Inborn IQ doesn’t have significant importance (examples have been given), good education (that is, training in the methods of the intelligence stack) in life means much more!\n\nIntelligence stack — a set of **the best** **to date in our** **civilization** thinking methods, based on the best explanatory theories. The best (state-of-the-art) in civilization as of this year, not some 2011 (new dawn of artificial intelligence using deep learning on neural networks began in 2012, in 2011 computers still couldn’t converse or see well!) or even the ancient 1980 (year of the first personal computer IBM PC).\n\nThese decisions about selecting particular thinking techniques from all known to humanity variations are aimed precisely at thinking abstractly, adequately, consciously, rationally, systematically, practically/proactively/actively, and not \"savagely,\" ignoring all accumulated civilization thinking experience. And these decisions on selecting scale-invariant (universal for different sizes of systems and different time scales of existence) and non-anthropocentric (non-specific to humans) thinking techniques involve written designations of used thinking models, initial data, intermediate and final results of thinking, and also entry into the real world. Conditionally, computers here are also \"in writing.\" And \"entry into the real world\" — modifying the physical world, taken to actions: from \"approach to check out\" to \"go talk\" and \"change, so it does not interfere.\"\n\nDecisions on choosing thinking methods/techniques are made not only by thinking techniques \"inside the head,\" purely informational/computational work without the body. This is quite a proactive and active method of thinking work going into the world (into other people’s heads, other data centers) and then improving both the world and the deciding thinking agent.\n\nDoes a civilization-cultured intelligence, which conducts thinking using the fundamental methods of the intelligence stack in their modern versions, restrain or, on the contrary, stimulate creativity compared to live \"savage\" thinking? The civilization experience shows that educated and mentally trained people usually win over the ignorant despite their allegedly \"template thinking.\" Genius self-taught savages are extremely rare. At the same time, upon inspection, \"self-taught savages\" often turn out to be more than well-read and educated, albeit their education wasn’t linked to an official institution and the patterns of their \"genius self-thinking\" they also took from literature and well-educated teachers, not invented on the go. It is a popular legend that self-taught individuals never studied anywhere. They very much did study, just on their own and not \"officially.\"\n\nSelf-educating one's intelligence needs to be \"pumped up\" and \"developed\" just like muscles and joints to prepare the body for movement — after all, the brain is also trainable, it’s plastic, physically changing during training! And this is why thinking training isn’t quick. Just like with regular muscles, you won't get quick results in one or two thinking workouts, it takes months and years, for slow biological processes in the brain are involved.\n\nDuring human thinking using fundamental knowledge, neuron synapses grow, and brain blood circulation improves. Intelligence as a physically realized on the brain calculator/“thinking machine” for thinking methods develops slowly, this is months and years. A good comparison here is sports: in three months of training you won't become a champion, but in three years --- not yet a champion, but you’ll differ dramatically from \"people off the street.\"\n\nBut there is a trick: a person doesn’t rely solely on the biological nature of their thinking, but also employs a computer. Even if it’s not a full-fledged computer but just paper and pen, it becomes easier for the biological brain to manage attention, utilize a larger memory, and exchange thinking results. And also, human intelligence uses the body, and it’s not just about the fingers moving when writing or eye muscles working when reading. In the \"Rational Work\" course, which provides basics of conceptualization, quite a lot is said about the connection between mind and body focus (for example, ontological jitter can be recognized by body sensations).\n\nThinking is proactive, it goes out into the physical world, the body is also significant here, including the body's extension in the form of tools — telescopes, microscopes, cars, rockets, humanoid robots.\n\nHuman thinking has an external nature; it occurs not only in the brain but in the entire body, and goes beyond its limits (the 4E thesis^[Overview of approaches to thinking as going beyond the body boundaries, including criticism of such approaches, see at <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7250653/>]), so systems thinking is trained not only as a mental exercise but also involving computer modeling tools — from merely writing in a text editor or complex spreadsheets editor (like notion.so or coda.io) to sophisticated mathematical multiscale modeling of simulations (multiscale, at different levels of structure/organization of the simulated system as a physical object, with different types of models for different scales).\n\nWe emphasize that one cannot speak only of fundamental disciplines, that is, pure theory/knowledge/explanations. You need to talk about methods/ways of working, where discipline/knowledge/algorithms are supported by tools that enhance the skill of the \"naked thinking brain\" (or \"naked thinking computer,\" referring to AI). People (and now also computer neural networks and robots) have long not worked \"just with hands,\" they use tools. In thinking, people haven't long thought \"just with brains,\" they use computers (and computers use other computers to assist themselves, or even people, or even long-dead people — for example, they read the results of thinking in the books of long-dead authors).\n\n**If you find yourself deeply pondering without** **making any notes, without creating any** **computer** **models —** **you’re clearly doing something wrong. Thinking today involves writing and modeling, relying solely on the human biological memory of a single person is not an option. Systems thinking is no exception here.**\n\nProlonged fundamental education is needed not just to think civilly, but to think fluently, using thinking tools (conversational partners like AI and other smart people, notes in modelers, notes in natural languages). It’s like in sports: in three months you won't become a champion in any sport, but in three years you will dramatically differ from \"people off the street.\" And in ten years you can already think about championship: most of your potential competitors simply won't get to the point of comparing your and their skill if you train/study all ten years. And recreational training for kids in sports schools is very different from rigorous training of the Olympic reserve. In education, it’s the same: if you have fun-learning for three months — your intelligence is unlikely to be strong. If you work hard for many years, you will dramatically differ from all \"people off the street,\" and if it’s about ten years — you can talk about interacting with the smartest people on the planet, and not only will it be interesting for you with them, but it will also be interesting for them with you!\n\nTrained to fluency, thought patterns enable you to quickly conduct typical abstract, rational, adequate, conscious, systematic, practical reasoning as if along laid-down tracks in the brain, without expending thinking efforts, i.e., intuitively, \"on autopilot\" --- including reasoning \"step by step\" thinking by textbook patterns, which, after training, do not seem extremely hard.\n\n**Only if these** **\"thinking tracks\"** **suddenly turn out to be somewhere not laid,** **only** **when encountering something truly new, can you switch to effortful** **“just thinking, doing our best,”** **engage other, exploratory** **thinking mechanisms,** **\"naked biological intelligence,\"** **sometimes somehow using trial and error external tools like computer modeling.** **But such** **departures** **into unfamiliar thinking —** **are an exception, not a rule. You are very lucky if you** **find yourself** **on such** **a frontier, rejoice that you are among the vanguard of human civilization.**\n\nBut not necessarily you will be able to come up with something on this frontier, to add to the stock of effective thinking patterns of humanity: evolution with trial and error is very effective, but most trials are failures, and you may simply not have enough time and resources for successful trials.\n\nThese culture-derived accelerating thought patterns are used both in the most basic types of thinking (general logical reasoning) and in more complex ones based on them (general engineering thinking), and in rapidly changing even more specialized and complex types of reasoning, including a mixture of knowledge/thinking and some routine applied reasoning on already well-known material.\n\nThought patterns are used in the work of an aerospace engineer, manager, investor, dolphin trainer, dancer, primary school teacher, politician (they can be people, but they can also be robots, and even organizations of people and robots). Thinking should be cultural/practical/stylish/active — it should follow the method/way. This means that intelligence should somehow repeat the same thinking techniques if these are the best-known techniques. Weak thinking techniques you invent each time \"for the problem\" — no guarantee they will cope. To be smart, one needs to know how to be smart. Strong thinking patterns need to be learned. This is done in the form of studying thinking techniques from the methods of the intelligence stack.\n\nFluent thinking should be achieved in any thinking, thinking needs to be trained, like any other behavior, like any other method/practice/culture/style/activity/strategy.\n\nBesides the fact that learned and then trained to fluency cultural/stylish/practical/“by some method” thinking patterns provide a speed advantage over savage thinking, they prevent gross thinking mistakes. Once you learn multiplication — you use it all your life. Once you learn that a system needs to be considered functionally at the moment of its work within the super-system and also considered constructively at the moment of its creation and development — and you use it all your life.\n\n**\"Payment is for the coordination and satisfaction of external project roles' interests, not for the** ** “system concept implementation\" and especially not for** **the \"requirements implementation,\" which already no longer exist in modern engineering, the** **very idea of \"requirements\" is outdated\"** --- **this material is presented in the systems thinking course, once for all systems.** If you have not learned and applied it in life, you can be left without money! It’s better to learn this once to avoid making mistakes all your life! Knowledge of systems thinking techniques is very practical, saves time, and prevents mistakes.\n\nAn \"educated person\" should master the same compact thinking on the methods of the intelligence stack, and it will be useful for him in various activities and projects. After all, a person will have to play many different labor/project/professional roles in life, dealing with methods of various engineering of different systems — growing flowers, children, manufacturing gears, programming AI assistants, arranging a hotel room, setting up a tent in the mountains, catching snakes, designing femtosecond lasers, negotiating with AI about material output format, etc. Here there will be both working methods and methods/ways/culture of behavior as a family member, parent, voter, politician.\n\nA person (though not only a person, but also an enterprise, and even a computer system with AI, or even without AI) in life plays many roles, behind each of which are some sometimes large (\"aerospace engineering\") and sometimes very fragmented and small (\"bearing production\") applied methods for creating systems of a certain level of organization needed for them. Each of these applied methods involves its specific applied reasoning patterns, but when faced with new and unexpected turns in the project to solve problems, you will need to connect general/fundamental methods of thinking of the intelligence stack.\n\nWhether you are a founder of a company in the sex toy market, a project manager for space tourism, or an engineer of quantum computers — you will need for the implementation of many applied methods for these employments to be focused, use logic, coordinate complex system models with your colleagues, maintain attention on many of your and others' systems that your project affects and are affected by your project, you will use computers with universal (AI) and not very universal (ordinary corporate software) algorithms. In the next project, everything will repeat on entirely different project content: your entire intelligence will be required again, no matter what you do: no project, where everything is known and only by rules, exists. And if there is some entirely familiar action, it won’t even be called a \"project\"!\n\nThinking as an activity of intelligence to solve problems, to understand a complex and continuously changing world --- is universal; it will always be with you, and **systems thinking is part of this minimum thinking requirement of civilized individuals** and civilized AI. Though one can say that systems thinking is part of the minimum thinking requirement of a civilized organization: systems thinking is collective; it unites intellects in an organization, enhancing the intellect of the entire organization.\n\nIt is essential to take into account that we are talking about the best to date (state-of-the-art) thinking techniques. Basic thinking techniques are relatively stable (their change time can be measured in hundreds of years: how many centuries did Aristotelian logic last before it ceased being used?), but in the 21st century, even basic techniques can change during a long human life, so you need",
    "d1465b2f81aa232e6434706f6000f2f3": "---\ntitle: Intellect Stack and Systems Thinking\n---\n\nAt the top of the stack of fundamental thinking methods, the very\n\"trans\" transition occurs: fundamental/transdisciplinary methods of the\nintellect stack help in thinking and acting with applied engineering\nmethods to change the world.\n\n**Systems thinking** can be understood as mental techniques of several\nmethods of the intellect stack as disciplines/theories/explanations/knowledge,\nsupported by tools, primarily by modeling tools. These systems thinking techniques engage\nthe concepts of \"system,\" \"system level,\" \"emergence,\"\n\"disarray,\" and other concepts of the **system approach**. One could\nsay not just \"systems thinking,\" but also \"ontological systems thinking,\" because systems thinking is based on the transdiscipline of ontology,\nand \"methodological systems thinking,\" because the principles of the transdiscipline of methodology are substantially engaged, and \"labor systems thinking,\"\nand \"activity-based systems thinking,\" and \"engineering systems thinking,\"\n\"rational systems thinking,\" and so on.\n\nSystems engineering --- is engineering, whose method descriptions are based\non systems thinking. But one could simply say \"engineering,\"\nthe systemacity of modern engineering thinking would not be reduced by this. One\ncould add ontology to this title: \"ontological systems\nengineering,\" as they sometimes say --- ontology based systems\nengineering^[<https://www.sciencedirect.com/science/article/abs/pii/S0166361518307887>].\nYou could add ethics, \"ethical systems engineering.\" Or\nrationality, \"rational systems engineering.\"\n\nSystems thinking, as part of the intellect's overall thinking (thinking according\nto all the methods of the intellect stack in their entirety) does not turn off in the course\nof applied method/“type of work”/activity/engineering/practice/strategy tasks. Systems thinking ---\nis part of fundamental thinking, which will always be engaged\nwhen something in life is encountered that is not described in the\ntextbook/regulation/instruction/standard of the applied method and its\ndiscipline/theory/model/knowledge/explanations, for example, in a management\ntextbook, a medicine textbook, a law textbook.\n\nThe mere comparison of the textbook content (regulation, standard) on\nthe applied method of thinking with life already requires the\nengagement of fundamental thinking. For example, in the regulation (\"employee's manual\"),\nthere will be a statement: \"Loans are not issued to underage clients.” To understand this phrase, you need to think hard:\n\n-   What is \"underage,\" if a foreigner has come and in his\n    country a different age of majority is accepted --- are you infringing on his\n    rights?\n-   What is a \"client,\" if the person is in the middle of processing their\n    client status?\n-   What is a \"loan\" out of a dozen very similar-looking banking\n    products, and some of them are \"borrowings\"?\n-   What is \"loan issuance\" and at what point can it be considered that it has\n    occurred or not occurred?\n-   This was all a translation of the initial phrase from Tamil: how to ensure\n    the translation was accurate?\n\nAnd now try to explain this not even to yourself, but to a dumb computer,\nwhich needs to implement this organizational norm/business\nrule^[<https://ailev.livejournal.com/693597.html>].\nIt will not be possible to explain this to a programmer, because these are not\nquestions of information technology, these are not issues of his specialty \"software\nengineering.\"\n\nAnd ontological thinking does not disappear when systems thinking is in\nprogress, there are pieces of ontology in the very systems thinking. For example,\nhow we consider that differently sectioned parts of an object are\nindeed the same object --- is a traditional question of ontology.\nFor example, scissors consisting of two halves and a screw at the factory, and scissors composed\nof a blade block and a handle during their operation --- are the same scissors, because these two different objects occupy the same place in\nspace-time. This explicitly mentions the principle of 4D extensionalism,\nyou should know it from the course \"Rational Work.\" Let us remind you that for\nthe course \"Systems Thinking,\" satisfactory completion of the course \"Rational\nWork\" is a mandatory prerequisite.\n\nFocused attention as attention management does not turn off, when ontological thinking takes place, you are writing everything down, and not just \"mentally focused, remembering everything\"! All these thinking methods (the intellect stack and even the applied thinking of applied skills) run practically\nsimultaneously in close intertwining, and only our (often supported\nby computers and well-trained) attention can highlight in this\ncoherent and continuous process of intellect thinking certain\nmoments associated with different specific kinds of thinking conducted\nby specific types of skills.\n\nThis simultaneous consideration of very different methods of thinking as reasoning with\nvery different objects of attention is quite easy to understand: when you\nlook at a tree swaying in the wind, discussing the angles of swaying\ndepending on the strength of the wind, but this absolutely does not exclude that in\nthis tree right at the same moment during the discussion photosynthesis continues, and in the hollow of this tree unknown birds are hatching chicks.\nNo, all of this is present in the real world. It's just that when your attention\nis focused on the image of the swaying tree as a whole, you can examine in detail\nspecifically the object \"swaying tree as a whole,\" but objects of other sizes,\nincluded in the physical object \"swaying tree as a whole\" and surrounding this\nphysical object, will not be examined. But they do not disappear from life, just\ntemporarily (and sometimes forever) remain hidden from you.\nTemporarily hidden until you pay attention specifically to them. Forever\nhidden, if your attention never turns to them.\n\nBut now you have paid attention to photosynthesis, while the swaying\ntree in the strong wind, and what is in the tree's hollow — all of that instantly\nlost value, the attention is switched to photosynthesis and we\nhold attention on photosynthesis, engaging focus. But\n\"disappearance of objects in consideration\" is solely the work of our\nattention, nothing happens to the tree! In life, the tree exists in\nits entirety, neither photosynthesis, nor the bird, nor\nthe swaying in the wind, go away. It is just convenient for us to consider and discuss all\nthese things sequentially, not all at once. And we are active during this: deciding\nwhether to consider this tree at all (and not a bicycle), maybe even\nto approach the tree, or to simply reproduce its model right \"in the head,\"\nwithout doing anything with the body at this time (not forgetting that\n\"thinking/reasoning/calculating\" is also body work, whether human, or robot).\n\nThis reasoning about highlighting different **whole**\n**objects** **with one focus of attention, and** **tracking**\n**parts** **of these whole objects** **with other foci of attention for\nthe convenience of considering complex situations, and then reliably holding these **whole** **objects** **and their** **parts in attention without wandering from these different focal points\n(use of focus to work with parts and wholes of these parts) — this is typical for systems thinking, this is the very essence of the approach,\nwhich is why systems thinking was developed, although you can safely\nconsider this to be some synthesis from conceptualization (highlighting objects, naming them, to then distinguish and talk about them) and focus\n(holding in attention), physics (highlighting parts in isolation from\nthe surrounding world), concept theory (part-whole relation), ontology\n(understanding hierarchy in part-whole relations as a basis for highlighting\nsystem levels).\n\nYou choose the right **part-whole level** **of consideration for solving your tasks\n(scale of size in lengths, scale of time in durations,\n** \"organization level,\" \"evolutionary level,\" \"techno-evolutionary level,\" \"system level\" — ** for living\nsystems, to be crude, molecules, cells, organs, organisms, populations, and\nsimilarly “by size” attention will slice it for techno-systems).\nThen you solve your problems at the chosen level of part-whole consideration, directing attention up or down these\nlevels depending on what you are reasoning.\n\nIf something is not discussed in enough detail, you can always come back and\ndiscuss it further (and to avoid losing attention, we write everything down, not\njust reason \"inside the head\"). **We discuss parts, without losing sight of the whole. We discuss the whole, without forgetting the parts.** Discussion engages\nour attention to some level of the parts of the whole object, and then\nto parts of those parts. The object itself remains in its natural wholeness, and\nparts and whole objects on many levels are highlighted only by attention.\nAttention can work in the opposite direction: for some parts\nof the whole object, it can be directed further \"up\" by system levels, that is, to the whole object. And then this whole object can be declared a part, and the attention will find an encompassing whole of an even higher system level.\n\nThe intellect stack as a set of thinking methods cannot be regarded as a classical\nsystem from physics (methods are behavior, the system could be attempted to be called the thinking object itself, that is the intellect, although there are nuances), but the work of attention to individual thinking methods, and in the very\nmethods of the intellect stack attention to concepts of individual transdisciplines and supporting them separate reasoning support instruments by the\nthinking techniques of these transdisciplines (mainly modelers)\nare arranged similarly: from a dense unbroken tangle of concepts and their relations\nwe highlight with attention, and then hold in attention and discuss in detail\nindividual thinking methods, and within them disciplines and tools, and further\ndismember attention methods into individual thinking techniques, and even individual parts of these techniques (with all the uncertainty\nof the conversation about \"parts of operations/techniques/procedures,\" although we will explain further in the course how to try to sort out behavior/activity/behavior to more precisely draw boundaries between different behaviors).\n\nThinking is inseparable in its fundamental and applied methods, it\noccurs as a whole and applied, and general labor/engineering, and\nintuitive-conceptual (conceptualization deals with this), and algorithmic, and\nontological, and methodological, in it are present all applied\nthinking methods and all fundamental thinking methods of the intellect stack.\n\nIf we reflect on thinking itself (the intellect stack is just for this!),\nwe highlight by the power of our attention in thinking methods certain parts and\nfor some time think only about them to overcome the\ncomplexity of thinking, to better understand how thinking is arranged, how to\nteach it. **Some** **attentively highlighted parts** **of full thinking** **on knowledge** **from various** **methods of the\nintellect stack,** **dealing with concepts like \"system,\" \"system\nlevel,\" \"emergence\" and other concepts of the system approach —**\n**that will be** **systems thinking.** **The course of systems thinking you are now taking was created to teach these parts of\nfull fundamental thinking from the entire intellect stack.**\n\nSimilarly to how rational, semantic, logical, etc.\nthinking uses in their composition techniques of systems thinking based on\nthe concepts of the system approach, so rational, semantic,\nlogical, ontological, and many other fundamental thinking methods are engaged in systems thinking: concepts of theories/disciplines\nof fundamental thinking methods are strongly interwoven with each other. Without mastering the thinking methods of the full intellect stack, you will not become\na good systems thinker.\n\n**One** **course of systems thinking** **is not enough to think systems-wise. The systems thinking course gives** **only one slice, one** **sampling** **from all the knowledge needed for** **full-fledged** **intellect enhancement. Students** **in universities** **often fail the** **systems thinking** **course** **not because of ignorance of system approach concepts and inability** **to use them in thinking about\ntheir work projects,** **but due to poor preparation** **in areas of\nsemantics, concept theory, ontology, logic**^[<https://ailev.livejournal.com/1465753.html>].\n\nFor instance, consider a discipline/theory like semantics: a typical\nmistake when it is unknown — is the failure to distinguish between a concept and its term. As soon as you relax — in systems thinking, the concept “needs” as a psychological need\nto drink-eat-reproduce, and “needs” as the interest of external project\nroles to their systems (super-systems for target or creation systems in their chains) are already confused. The word-term is one, the dictionary nests are different, the concepts\nare different — but this is often not tracked, terms and concepts are not\ndistinguished, because there is no knowledge in semantics. In the systems thinking course,\nthere is no opportunity to explain semantics in detail, it is already used here! Courses teaching\nsemantics need to be completed before the systems thinking course!\n\nFor example, the \"Rational Work\" course is arranged roughly similarly to the systems\nthinking course: knowledge/theories from various thinking methods of the intellect stack are taken,\nbut the emphasis is different: on focus, semantics, concept theory, ontology, logic. Concepts of systems thinking are touched upon in the \"Rational Work\" course,\nbut they are not the focal point, there is no detailed exposition. Therefore, only the \"Rational Work\" course is also not sufficient to enhance one's intellect, just like only the \"Systems Thinking\" course or only the \"Methodology\" course.\n\nAnother example: the inability of an agent to work with types in thinking. Methods\nof this work with types are described by concept theory knowledge, one of\nthe transdisciplines of the intellect stack's methods. If you write, \"System\nX — is a system of relations between buyers and sellers,\" then you cannot\nafter three lines write that \"System X — is a software platform,\"\nand after three more lines that \"System X — is a project for\nproviding service.\" This is the same kind of mistake as writing \"X —\nis a cucumber,\" three lines later writing \"X — is a fur-bearing animal,\" and three lines later\nwriting \"X — is a system of values.\" The type of error here is the same, but for\ncucumber and fur-bearing animal common sense is enough\nto notice the mistake, but that the \"system of relations\" is nowhere near\na \"software platform,\" and a \"platform\" — is not a \"project\" — this\nis already an insurmountable task for a poorly trained person in type work. If you see this in a student's text, you clearly understand that\nthe concept of the target system as a physical object is not in the student’s mind, but\nthere is a sort of \"cloud of meanings,\" not brought to some\nphysical implementation.\n\nWorking with types also concerns the capability to conduct reasoning about\nobjects from the textbook on objects from life. If you understand that your\ntype \"physical body\" in the physics textbook flies along a parabola when thrown in the presence of gravity, this is reasoning about types. In life, you still have to figure out that the thrown ball is precisely that physical body from the textbook! Further, you need to refer to the physics textbook material and take\nfrom there that the flight will be along a parabola. Then return to the ball and deliver\nthe judgment that \"since the ball is a physical body, it will fly\nalong a parabola,\" and even estimate what place abstract objects\n\"parabola\" and \"trajectory\" have around the ball in the real world. This reasoning is the same as about some target systems. If you\nproduce \"accounting systems,\" then you still need to realize that\nthe word \"system\" here — is a type from the theory/knowledge of the systems approach,\nrefer to the material of our course, then find this system in\nthe surrounding world (what kind of \"system\" is this? Is it a type for a set of accounting rules?\nBut you clearly do not produce them, and they do not resemble systems from the course. Moreover, the course clearly says that sets of rules and system equations —\nthese are not the \"systems\" of the systems approach. Further question: Is it\nsoftware? Is it the \"accounting\" department that uses the accounting software? This\ndepartment, which uses the software and all the people who are forced\nto supply data to the department, which feeds this data into the software? At what\nmoment in time can you say that \"we have released the accounting system?\" Why do different people in the\ncompany disagree on what we are releasing?).\n**This is all about type operations** — **if this is not figured out, it is impossible to find important objects of attention in life, a lot of which will be known immediately as soon as you identify them with\nobjects from our course.** **The course does not give knowledge about specific systems\nin specific projects. But the course gives knowledge about all the systems in all\nprojects. You just need to know how to assign types from the course to objects from the real\nworld, from your real work project.**\n\nParticularly here, one can mention poor handling with verbal\nnouns (thinking here can also serve as an example). Thinking\nonce can be a process (and in our course it is just that), implemented\nby the intellect/computational thinking/cognitive skill, and the second time among the same people and sometimes in the same phrase — is a part of the brain,\na synonym for intellect, not its behavior (and in our course it is not that)! And that thinking as a \"verb\" and thinking as a \"noun\" can be confused — people\nwith poor training in concept theory do not notice. They will have everything very, very bad\nwith the concept of a system because functions in the concept of a system are assigned\nprecisely by verbal nouns, and these are behaviors, not things, and confusion here is inadmissible.\nAll these questions that are not covered by the systems thinking course but are addressed in other courses on intellect enhancement, primarily in the \"Rational Work\" course.\n\nHere you can also add overgeneralizations, this also concerns\nworking with types as ontological work. Instead of some object, it is very poor to indicate its super-super-super-type/class, very high\nstanding in the classifier, and count on everything taken from inheriting the type properties. For example, instead of \"tiger\" always\nassuming \"beast\" — and then being surprised why other people insert in the conversation their \"mouse\" (this is also a beast!), after which the phrase \"mouse is dangerous for humans\" surprises them and they do not understand where it comes from. And such a phrase appears because\na \"tiger\" should be called a tiger, not a more general class \"beast.\" Overgeneralizing\nis unnecessary, excessive generalizations often lead to errors! If you\npoint out a drill as \"equipment\" and give it a characteristic \"rotation frequency,\" that seems normal.\nBut then someone adds such \"equipment\" as a hatch, and the hatch gets the characteristic\n\"rotation frequency\"! This is a simple logical consequence of \"hatch —\nis equipment.\" Because you were thinking of a \"drill,\" but wrote \"equipment\"!\n\nAnother logical obstacle for systems thinking as\nconcept usage of the",
    "6f017695b15de6b61816af1019146333": "---\ntitle: Does Systems Thinking Replace Applied Thinking?\n---\n\nOne of the misconceptions is that you can have strong general intelligence, including the development of systems thinking—and significantly outperform professionals in their specific fields. To put it bluntly, you become very smart, and then you'll have an advantage over, say, a less intelligent pianist or even a welder. Unfortunately, this doesn't work. A person with systems thinking will have an advantage over a professional in how quickly they understand the overall project, how swiftly they come to an agreement with other project participants, how well they can stay focused on the main tasks of the project, and not get distracted by less important things during the work. They will also be able to learn something quickly. But they won't have an immediate advantage in solving practical tasks! No systems thinking will help you instantly start playing the violin, or using a welding machine, or even diagnosing patients if you've never done any of it before. Not immediately—yes, you will learn all this faster, but simply becoming smart and believing that this gives you an advantage in some applied discipline over a professional in that discipline is a mistake. If you become a professional in this applied discipline, you will be more of a professional than your less intelligent colleague. But if you don't become a professional—you will be \"generally smart,\" \"eternally promising.\"\n\nMoreover, errors in systems thinking can arise from ignoring various transdisciplinary intelligence stack fields. If you have a good understanding of how to build a hierarchy in terms of composition, but poorly understand the classification relation, your systems thinking won't help; you'll make thinking errors for other reasons, and you'll need to get more into ontology (for example, to retake the \"Rational Work\" course, which is a prerequisite for our systems thinking course).\n\n**Systems thinking does not replace applied/subject-specific thinking,**\n**nor does it guarantee good thinking across all fundamental**\n**thinking methods of the intelligence stack. For instance,** **systems thinking**\n**does not guarantee rationality: it's not a fact that** **if you think systemically, then** **you** **will**\n**necessarily** **make good decisions, utilizing modern decision theory!**\n\nTo see the error in \"2\\*2=5,\" you still need to know arithmetic; no systems thinking will help here. If you don't know how to repair a toilet, and you need to, a systems thinking course won't help you, a plumbing textbook will. However, systems thinking enhances, guides, and complements applied thinking, as well as thinking within the framework of fundamental methods. For example, systems thinking will help you choose the modern/best plumbing textbook from many available, understand the overall situation of toilet repair. Maybe the toilet doesn't need repair at all, and the problem lies elsewhere: the toilet here is a \"symptom,\" not the \"disease\"! But fundamental systems thinking does not replace practical plumbing thinking. You will still have to get educated in the engineering of toilet systems, master the applied engineering method/culture/practice of this work, i.e., acquire plumbing knowledge as an educational discipline/explanations, including knowledge of using the tools there (for example, knowing how to use an adjustable wrench, a cable with a brush to clean pipes, push rods with various attachments for different types of clogs).\n\nIf you plan to solve problems in some applied subject area without knowing the state-of-the-art (best known knowledge today) methods of work in this subject area, relying only on wit and ingenuity, we call this tinkering^[Here are some examples of tinkering: <https://vk.com/club45696675>].\nTinkering is folk inventiveness, without relying on modern methods of work with their contemporary knowledge and the use of modern tools. Tinkering is like folk healing, but in engineering.\n\nSometimes tinkering works and gives a \"working system,\" but such a system cannot be marketed widely. A \"working system\" as a result of tinkering is not necessarily the best in its class in terms of characteristics, reliability, cost-effective operation, and ready for mass production. You cannot ignore the achievements of human culture, thinking that \"creativity\" is when you invent everything yourself. The point is, quality creativity should be inherently better than existing options. Hence, it's necessary at least to know about existing engineering ideas to compare your inventions with those already in the culture.\n\nYou should at least google applied knowledge/explanations, ask intellectual assistants and co-pilots about it. Even better—master the applied method from a textbook, even more reliably—complete training courses on the applied method. A professional is someone who does not make novice mistakes (knows about them!), not someone who just knows a lot^[This definition is attributed to Niels Bohr.].\n\nIt's bad to always act by trial and error, relying on \"freedom of creativity\" and saying, \"there's no time to explore the issue, no time to study, work has to be done.\" \"To invent something on the go\" is exactly trying, hoping it works out, such a techno-evolution method is ultimately very costly unless you have millions of years like natural evolution does. Of course, the trial and error method is used in engineering, it is recognized in engineering, but it is not the main one. If the tinkering method were the main one, engineers wouldn't need education.\n\n**A systems thinker is not one who ignores textbooks, standards,\nor regulations on applied work methods.** **On the contrary: it's someone who can quickly choose the necessary textbook** **or find the modern work standard, understand its**\n**contents, and take into account the peculiarities of the current situation using all other applied** **work methods** **in a complex team project.\nSystems thinking aids applied thinking,** **not replaces it.**",
    "3d8a6110ee9db6ae7d2ef6b6815a88e8": "---\ntitle: 'The Place of Systems Thinking Among Other Thinking Styles: Intelligence Stack'\n---\n\nThere are differing opinions on whether applied thinking (for example, the thinking of a rocket engineering developer, or teaching people using the pedagogical method of blended learning, or repairing toilets on spaceships) can be considered as thinking. According to one opinion, agents always think, but according to another opinion, thinking is only the function of generating a new applied method with its knowledge/disciplines as potential algorithms for changing the world for situations with a newly encountered problem and tools for these changes, while calculations/reasoning by applied methods no longer require actual thinking, these reasonings run \"automatically.\" The work of a calculator is not called \"thinking,\" it calculates something \"hardware-wise,\" and that's it. According to another opinion (which we adhere to), in situations of applied method (even the work of a calculator, for example, a child painfully multiplying three-digit numbers column-wise on paper), we will still talk about applied thinking. In some given applied field, it is possible to understand well what to do in a typical situation---and do it \"automatically,\" without thinking about the method of work, \"not thinking.\" But in this applied field, there could be many objects, so one will need to:\n\n-   independently develop some method for solving\n    (explanations/knowledge/algorithms and tools to support them)\n    a specific problematic situation, even without going beyond the specific field (sometimes the development of a method for a specific problematic situation is called strategizing, and the found method is called a strategy),\n-   then plan the work (the method is only a way to perform the work, the strategy does not provide a plan with set deadlines and resources), based on available or expected resources (and if resources are insufficient, adjust the method by replacing it with one for which there are enough resources, or provide work for some methods of obtaining the necessary resources), and then only carry out work according to this method-strategy, and also\n-   monitor whether the results of the ongoing work satisfy the needs, or if the method needs to be urgently adapted, as either the situation with initial data or required results has changed, or there were errors in previous steps.\n\nThus, for some elementary operations/actions in the world, thinking seems unnecessary, but thinking is needed to select some explanaied sequence of actions (this is the method) longer, when it is necessary to account for many incoming circumstances, keep attention on a huge number of changing objects at each step of following the method of work---and here we tend to talk about applied thinking, and not just the automatic execution of separate operations. To strike a hammer, that is, just move the muscles with the hammer---it doesn't require much intelligence, but to strike safely, at the right time, in the right place---this already requires thinking, you need to somehow discuss the method of hammer blows, the knowledge/disciplines and the tools of this method.\n\nIt is not possible to immediately master applied thinking to solve problems/work difficulties in the work field, let alone combining these various applied thinkings for different methods of work in complex projects involving hundreds of people. But even after mastering narrow applied thinking by one method, it must be acknowledged that without the support of applied knowledge on fundamental/transdisciplinary knowledge, it is not possible to act well in the real world. At the junctions of work by any applied methods, there will be situations not described in any textbook, nor in any work regulation or standard! People are simply obliged to use the fundamental knowledge/explanations of human civilization, because only they allow connecting knowledge of various applied methods and knowledge of work on the civilizational frontier: solving problems for which no one on Earth has yet developed typical solution methods, so these solutions cannot simply be Googled, understood---and then applied without thinking. Although you can ask AI for a problem-solving method, there is no guarantee that this AI will be smart enough to provide something sensible (ask AI today: how to become immortal? There is no guarantee you will get a suitable method description for solving this problem).\n\nIf we at least partially know something about the structure of the world, this reduces by several orders of magnitude the number of intelligence calculations/amount of thinking in areas we partially know. Is it a lot? Let's say, we can solve some problem P with the human brain in ten thousand years. This is longer than the existence of human civilization, although you can reduce this time to ten years if a thousand brains work, and you have the resources to support the life of a thousand people, and you know how to effectively organize the division of work among a thousand people. So, it's better to make some non-random, already known civilizational assumptions about the structure of the task and its domain. In our example of problem P, they will allow reducing the calculation volume of one brain by ten thousand times; the task will be solved by one person in a year. This is roughly the difference between the speed of work of uneducated people and educated ones: **uneducated people (savages) know little** **of the general explanations about the** **structure of the world, while the educated ones know a lot. One must learn to quickly solve tasks with** **one's own brain.** **Another option: one must learn to shift this calculation volume onto the brains of other people and computational tools (including AI).**\n\nCivilization with the help of science, relying on the written accumulation of explanations/theories/knowledge/models, gives us hypotheses about the structure of the world ready for study and teaches us to formulate problems (which are unknown how to solve, the subject of intelligence work) and translate them into tasks (which are known how to solve, the subject of applied craftsmanship). These guesses are the basis of education.\n**Education is the enhancement of intelligence through training in the** **methods of thinking of** **the intelligence stack.** **Therefore, education is** **the specialization of training (education::training).** Let us remind you: training is a method of creating mastery in performing work by the target method being taught. Education enables faster finding of applied methods to transform a problem into tasks, i.e., translating the situation \"I don't know how to approach this\" into \"I know which method to work to achieve the result---which knowledge and tools to use.\"\n\nThe intellect::mastery acquired during the education process allows solving problems tens of thousands of times faster than this could be done by uneducated homo sapiens' natural innate intellect. A civilized brain is not \"wild,\" it is a trained brain, it is fast in thinking, and the modern brain also uses the brains of other people (collective intellectual work) and computers (classical and with AI programs) to enhance its thinking speed. Moreover, computers can be used in minimal options not due to computer calculations, but simply through the help in organizing memory and keeping attention. The computer as \"pen-paper\" is also extremely effective for thinking! An intelligent and lazy educated person with a laptop can do much more than a crowd of active but uneducated fools-savages!\n\nThe acquisition of new mastery does not come to a person through \"natural ingenuity,\" but through \"refined by education ingenuity,\" through knowledge/models/explanations/theories/disciplines about the world's structure, the structure of problems and tasks, and also knowledge/explanations/disciplines about available tools (for example, computers as universal modelers for systemic modeling of all sorts of objects).\n\nThe same applies to AI. Computers made at the factory for AI are dumb; they can perform only the simplest operations like matrix multiplication. But after learning from a huge amount of knowledge already accumulated in written form by civilization, these computers acquire the mastery of reasoning based on this knowledge, \"large language models/LLMs,\" otherwise known as \"foundation models,\" referring precisely to their transdisciplinary nature. This is akin to \"education\": training in thinking and some engineering horizons. And then such fundamental models are easily either fine-tuned to applied knowledge or connected to such models in the form of tools (say, connecting Wolfram Mathematica for solving mathematical tasks).\n\nSkill and mastery are references to an agent mastering the execution of work by some method based on theory/knowledge/explanation/algorithm/discipline, with the execution of this method/work supported by some tools. Intelligence is the mastery of fundamental thinking methods required for discussing methods in conditions when it is not clear which method to apply (possibly, such a method does not exist yet---or there are no knowledge or tools, they still need to be created).\n\nIntellect::mastery works with applied methods (and thereby their knowledge/disciplines/algorithms/theories) as objects of its work. One can say that intellect as a fundamental thinking mastery creates and further develops applied methods, it is necessary for cognition, for the infinite growth of knowledge (knowledge evolution) and tools to support working with these infinitely growing knowledge. More knowledge and supporting tools---more translation of various problems into tasks. Infectious diseases were a problem, but knowledge about microbes and soap as a tool with the method of hygienic handwashing significantly solved these problems; combating infections became a set of tasks, not a problem: it is known what to do, one only needs to find resources and then just do it.\n\nIntelligence in its innate part allows people to be smarter than cats and monkeys, and in its learned/educated part---this is an education-received machine for acquiring applied disciplines. Intelligence is an evolutionary acquired tool of cognition, a machine for developing problem-solving methods---transforming problems that are not solved by any known methods into tasks performed/solved by known applied methods. This applies to natural intelligence, artificial, hybrid, and collective.\n\n**Trans-disciplines/“fundamental disciplines” are** **explanations/theories/knowledge/models/algorithms about the structure of the world. They are convenient for high-speed thinking about the world, keeping** **attention on** **calculations/reasoning/thinking** **about the important, preserving** **brain or computer resources** **from wasting on thinking** **about the unimportant.** And this thinking by trans-disciplines' knowledge/algorithms is then needed to create methods for changing the world for the better.\n\nWhat takes a very ingenious savage half a life time, a person trained in fundamental disciplines can accomplish in a few hours or even seconds---especially, if considering that the knowledge/algorithms of thinking methods include knowledge on exploiting other tools of thinking (often these are modelers). The same applies to computers with AI; only these computers do not have biological constraints on computing speed and volume for one agent, which is why they are feared about as much as genius villain scientists are feared in Hollywood movies.\n\nIntelligence is the mastery of agile use of a whole stack/stack/layer cake of supporting each other fundamental methods of thinking. This set of thinking methods (relying on engaging fundamental disciplines and using support tools) is what we call **intelligence stack.**\n\nIn fundamental **methods** of thinking, the disciplines/theories/knowledge will be only the \"algorithmic\" part. We will boldly consider these disciplines/theories/knowledge also as \"algorithms\" (descriptions of using the method in various circumstances/situations---just as algorithms can be used for calculations with various inputs):\n\n-   There are many indications that constructive mathematics is in fact a transition from declarative (objects and relations) descriptions to descriptions through operations for constructing objects. This can be extended to all working with concepts (mental/mathematical objects).\n-   In computer science, results have long been obtained that allow considering the most different representations of algorithms, and not only \"step-by-step execution of imperative programs\" (including the Curry-Howard correspondence between imperative algorithm and set of logical statements). We interpret this result quite broadly.\n-   We should consider not the knowledge itself, but what the processor does with it---in this case, the mastery of executing a method using knowledge for computing (thinking) or even altering the world (thinking and using tools). In Constructor theory, there is a generalization of the concept of an algorithm to describe transformations not only information and superinformation (in quantum computers, represented not in bits, but qubits), but theoretically any physical transformations.\n\nThinking methods, like any other methods, use not only concepts from theories/knowledge/explanations/algorithms/disciplines (including trans-disciplines), but also **tools,** understood as a set of tools/apparatus/equipment that extends the agent's body's capabilities. In the case of trans-disciplines of thinking, the tool is usually a **modeler** (simplest one is pen-paper, or a modeler program for a computer), and the consumable material for the modeler is coffee for the human-modeler and electricity for the computer embodying the model. Other tools in fundamental thinking methods of the intelligence stack are rare, though they occur. For example, in the conceptualization, the body is used, sensations are sought that later need to be translated into thought, the role of the conceptualization executor---\"the poet.\"\n\nDespite the practical nature of thinking, intelligence needs more to model the world, i.e., to engage in cognition/learning, creating models, rather than directly changing it in action—but remember that these models are needed precisely for changing oneself and the world for the better. Intelligence decides in case of difficulties whether to change the model of the world, the model of oneself, oneself or the world---and dependently.\n\nOverall, cognition ultimately occurs through trials and errors, i.e., not only by verbalizing \"mental\" guesses-explanations and mentally criticizing them but by actively probing the physical world, making guesses and observing the results---whether successful or not. This applies even to the boundary between the agent itself and the environment---what can be simply commanded, what can be significantly influenced, what can be influenced insignificantly, and what cannot be influenced yet. The agent continuously does something to the surrounding environment to understand the boundaries of their influence---and changing the environment for the better (for themselves, for their genes, for the population---this is a separate question).\n\nIn the transition to applied engineering (as changing the world) via the \"trial and error\" method in the old and well-known field to this agent or even a new little-known field, the agent engages a variety of the most different tools and applies the most different initial materials: machines, chemical reagents, trained animals, sunlight, pond water, clocks, ballet barre, quantum computer, etc.\n\nThere is some cunning in thinking by fundamental methods being purely a \"mental act.\" Input-output in the processor (e.g., the brain in humans) is quite material and requires tools/equipment (printing, online courses, messengers for receiving problems and sending solutions), and the processor itself is quite a physical object. As David Deutsch loves to remind, a mathematician and astrophysicist---quite physical objects, \"mental labor\" requires physical labor! In the course, we use the concept of \"constructor,\" which is a generalization of a computer capable of executing a computing algorithm to a constructor system from constructor theory, which can execute knowledge/algorithm method as an \"algorithm for changing the physical environment.\"\n\nThe method of work executed by the constructor includes a knowledge part (which is software-hardware implemented in the constructor by the mastery of executing methods' algorithms/explanations/theories) and a hardware part (mastery in supporting it with the body of the agent can also be attributed to this hardware part, and further goes tools as sensors and actuators, and also “exotella” as a platform for all these sensors and actuators, that is, equipment/tools that help the mastery do additional calculations and actions by measurements in the physical world and changes in the physical world). For universal constructors (intelligent agents), one can talk not just about computations, but immediately about thinking, and also consider situations when, during the method execution, the constructor first builds additional tools---bootstrap.\n\nConstructor theory generalizes the concepts of\n\n-   algorithm (the term remains the same) as descriptions/theories/disciplines,\n-   measurement (input, physical interaction to obtain data)\n-   change (processing in case of information, in case of substance---transformation)\n-   output (in the case of constructors, this operation is not separately considered, included in transformation)\n\nSo, we can further discuss transformations not only of information but also of physical objects, and also the concept of **computer,** implementing \"information processing by some algorithm\" method, expanding to the concept of constructor, implementing \"transformation of the physical world by some algorithm\" method.\n\nA universal computer with enough computing resources (memory and time) can fundamentally perform any computation that a Turing machine can (known computing theory), while a universal constructor with bootstrapping (for example, starting with smelting metal from ore, obtaining pure silicon for a semiconductor from sand) fundamentally with enough resources (memory, time, initial set of tools) can perform any transformation of substance--and \"any\" is understood as in mathematics, referring to theoretical possibility. Practical possibility will be limited by resources and the risks of some catastrophe (say, an asteroid flies in and destroys the constructor which has all necessary resources---and it does not have time to complete its work.)\n\nIt is particularly emphasized that a constructor is capable of performing multiple calculations by one method (algorithm/theory/explanations/knowledge and apparatus/tools), remaining unchanged---just as a molecule of a catalyst (a simple constructor) can perform multiple acts of catalysis, remaining unchanged.",
    "099702e2a0998e62ec8c64efc8792374": "---\ntitle: Emergence and Division of Labor\n---\n\nIn the last paragraph of the previous subsection, the concept of **emergence** was introduced — the appearance/emergence at each systemic level of properties in systems that did not exist in systems at the previous systemic level. A clock can show the time, but the gears, springs, and case of mechanical clocks — no, the transistors in electronic clocks — no.\n\nNew/emergent properties make it necessary to use a specific applied discipline/theory for explanations at each scale/size/systemic level. Systems thinking allows one to unravel the intricacies of segmenting the world into systems from different systemic levels (\"segmentation\" should not be taken literally; it is \"segmentation by attention,\" highlighting systems as figures from the background). Thus, at the core of intellect's effort in creating and utilizing different applied methods of working with their disciplines/theories/knowledge, serving to understand what is happening at various systemic levels, lies systems thinking. The methods/approaches/practices/styles of systems thinking help navigate the complexity of the surrounding world remarkably effectively.\n\n**Division of labor** occurs when different intellectual agents (people and AI) specialize in methods of working with a particular scale of systems. For example, an agent in the role of a therapist deals with the human body as a whole, comprising organs. In contrast, an agent in the role of a pulmonologist specializes only in treating lungs. The division of labor is based precisely on systems thinking: systems of different scales are divided by systemic levels and then studied by different sciences and altered by various types of engineering.\n\nOne agent cannot deeply master the alteration of all systems of the world at all systemic levels; they simply won't have enough computational resources for prolonged learning. If it takes a year to learn a method of work to a professional level (a very conservative estimate! Try to learn to play the piano professionally or become a professional organizational architect in a year!), then in thirty years, one can learn only 30 methods of work — and by the time one reaches the thirtieth, it will turn out that the first learned method is hopelessly outdated. But there are thousands, tens of thousands of work methods! One agent's lifetime is insufficient to master them all professionally.\n\nTherefore, division of labor occurs, with different agents specializing in different methods of creating and developing various systems. **To understand what mastery in which work methods agents in your specific project should possess, you need** **first** **to segment the world into systems, select those important for your project, then choose a method for working with these important systems, and only after that select an agent who can work according to the chosen method. And** **this is where systems thinking comes in handy; here a universal and scale-independent intellect should work, since one needs to think about systems, methods of working with systems, and agents who will work with systems (i.e., translate systems from one state to another).**\n\nBefore diving into systems thinking study, it is essential to understand **general** **criteria** **of strong** **thinking** as strong intellect thinking. These criteria are also applicable to systems thinking. Additionally, one must answer the question: what is the difference between **systemic** **and systematic**, as they are often confused.\n\nThere are many variants of systems thinking in the world, based on different versions of the systems approach, so it will be necessary to understand which variant we teach in our course and why we teach precisely this variant.\n\nFurther in this section, there will be some explanations about the course:\n\n- how to treat terminology (words-terms are important, and not important!),\n- how to choose the degree of rigor/formality of systems thinking,\n- how to ensure that systems thinking helps rather than hinders creative freedom (the course provides templates for effective thinking that work excellently, but is there \"template creativity\"? Yes, of course, creativity can and even should be by the template! Without a template, it is much easier to produce banality rather than something new!).\n- can thinking be taught at all, or must one simply be born intelligent? Of course, it can be taught.\n- what stages are there in learning to think?\n\nAnd only after discussing all this in the next section will we begin to study the basic concepts of the systems approach and related thinking techniques of the most diverse fundamental methods of the intelligence stack.\n\nLet's immediately say that the material presentation text (\"textbook\") from our course is like a bicycle riding manual: reading the course as a book will tell you a lot about systems thinking, but it's not guaranteed that after reading the course as a book, you will become a systems thinker. Practice is necessary! Even systems thinking exercises have their specific features. Moreover, in the process of learning, you also need to start using thinking in real life, which is even harder than learning to solve tasks. A task from the course you just solve, but in life, you first need to formulate the task and then solve it — and formulating tasks is harder than solving them.\n\nThe prerequisite for our course is the \"Rational Work\" course. After it, you:\n\n- have learned not to confuse words/terms and concepts,\n- have learned to distinguish physical objects from their descriptions,\n- do not forget to record modeling results,\n- do not require definitions for concepts,\n- find objects of the given type in the surrounding world,\n- keep your attention on found objects when the usual hustle and bustle of everyday life surrounds you, and the world around is flickering, and you have no time to concentrate,\n- find the type for objects of the surrounding world from the proposed ontology if their type is unknown.\n\nBut if the \"Rational Work\" course was about various types of different objects, in our \"Systems Thinking\" course, we will explain that the main objects one should focus on are objects of the type \"system\". For questions on how to think about types, head to the support chat for \"Rational Work\"; for questions on how to think about systems (which are also type!), head to the support chat for \"Systems Thinking\"; for questions on how to think about systems of the type \"rhetorician\" (master of persuasive speech methods — rhetoric::method/culture/approach/practice), head to the support chat for \"Rhetoric\" (but not to the systems thinking support chat or the modeling and composure support chat).\n\nThe continuation of our course will be the \"Methodology\" course, where the concepts of the systems approach will be used to discuss methods/activity/practice/engineering/culture/style/technology of creating and developing one system (creators) by other systems. Living systems \"grow on their own,\" but if we are talking about creating something by intellectual agents (people with AI and their organizations), then it is necessary to discuss how to describe patterns/templates/methods/practices/cultures of works on creating systems. A company founder creates a company that creates a machine that creates a part. Course authors write an educational course (\"textbook\" with \"problem book\"), and then the teacher creates some applied mastery in the student (person, cat, AI). How to describe this collective engineering, how to think about it? This is what methodology is concerned with.\n\nFurther, systems thinking and systems methodology will be used in the course (scale-independent, for all types of systems) of systems engineering. And then there will be courses on personality engineering (in fact, a course on engineering through teaching: changing students for the better by teaching them) and organizational engineering (course \"Systems Management\"). This is roughly half of the \"Organizational Development\" educational program, three semesters.\n\nOf course, systems thinking is used by agents to accelerate understanding applied work methods. This is part of the behavior of strong intellect. Therefore, we first teach systems thinking and methodology and only then move on to studying courses on applied work methods with \"hardware\" and software systems, personalities, and organizations.\n\n**Mastering systems thinking** **is** **another step** **in strengthening the intellect,** **that is** **another step in learning** **fundamental/transdisciplinary** **thinking methods** **of the intelligence stack.**\n\nTo repeat: don't get stuck on the content of these first two sections, or even subsequent sections and the course content as a whole. Progress through the course materials, spending reasonable time on each subsection, always completing assignments — understanding usually comes not immediately after reading the text of a subsection but slightly later. In the next section, we will discuss the peculiarities of presenting educational material in our courses. The main idea there: our course is not a Wikipedia, not a reference on systems thinking, and it is not arranged like a mathematics textbook with a couple of definitions for each topic and ten practice problems for those definitions. We are training not the classical logical computer in the heads of our students but the neural network in the brain (or even not in the brain, but in a data center, because our texts can also be read by AI agents).",
    "e7f203d93bc46907fc79dea2548faf1d": "---\ntitle: Criteria for Strong Thinking\n---\n\nIn this world, intelligence solves problems concerning inanimate objects, living beings, intelligent beings (humans), organizations of these people, communities and societies in this world, as well as models of the world in humans and computers. Thinking here is quite active and initiative: it involves the actions of people and robots and their organizations and communities with the world and models of the world. To think about something, one needs to look at it, and for that, to turn the head. These actions \"turn the head and look,\" and sometimes even \"fly to the Moon and look\" or even \"send a robot to the Moon and look through its instruments,\" we also include in thinking. Thinking as proactive cognition includes bodywork as well as exo-bodywork.\n\nThinking is the behavior of intelligence at the moment when it tries to find ways to solve problems it has not encountered before^[François Chollet, On the Measure of Intelligence, <https://arxiv.org/abs/1911.01547>]. Thinking is a practical/active calculation/reasoning that can lead to changing the physical world. Intelligence is thinking craftsmanship, a part of a personality. Intelligence is embodied in the brain and body or even jointly working brain and computer (exocortex), body, and tools (exo-body), a generalized computational device, a \"brain with eyes, ears, legs, and arms, computers and tools.” We shall further call such a computational device \"creator/constructor.\" A computer primarily processes information using some algorithms/knowledge from methods/ways of calculations, while a creator uses some algorithms/knowledge from methods and tools/instruments/equipment, ultimately not only \"reasoning\" but also \"acting,\" i.e., changing the physical world. If we talk about a part of the creator that implements the computational part of the algorithm, we call it **mastery** in the method of work. Intelligence is sometimes considered solely as mastery in thinking, working with information about the surrounding world, and sometimes as mastery in changing the surrounding physical world (i.e., it includes not only the functions of creating applied methods but also the functions of these applied methods themselves). We will often talk about intelligence as mastery working with world information/descriptions to create other skills, and when it comes to changing the world, we will talk about a whole agent (including the personality consisting of numerous skills, including intelligence within these skills, and also the body/organism with tools). Nevertheless,---a computer— is also material, information processing takes place in the physical world.\n\nWe consider Intelligence::computer to consist of two parts:\n\n- **Innate/hardware**, determined by the biological features of the human brain and body or the design features of computer hardware implementing artificial intelligence (AI). The brain and body provide significant capabilities (compare human intelligence and that of a chimpanzee, a pocket calculator and a datacenter with an AI program), but they also significantly limit these capabilities (compare a human’s intelligence in tasks like multiplying and dividing large numbers and a completely non-intelligent electronic calculator; a well-trained artificial neural network can communicate well but poorly multiply and divide large numbers unless it refers to a separate calculator program).\n- **Learned/acquired/software/“virtual computer”** during familiarization with human culture. This also pertains to AI, since AI learns from vast arrays of knowledge accumulated by human civilization. In more or less intelligent AI implementations, it’s about text collections with a total volume of tens of trillions of characters. This “learnable” part of intelligence includes proficiency with a limited range of thinking methods, having as their subjects the surrounding physical world.\n\nWe do not make assumptions about how intelligence is physically structured, from which parts of the brain and body it is composed, and how they are connected, although we do speculate here about the fundamental thinking methods of the intelligence stack. This is discussed in more detail in the first section of the course \"Intelligence Stack.\"\n\nThe ability to think using thinking techniques from the fundamental methods of the intelligence stack distinguishes the intellect of a modern highly educated person (and not only a person but also AI) from the intellect of a savage or the simplest AI systems of past generations. The “hardware” of intelligence in the bodies of a prestigious American university professor and a jungle savage from the Amazon is the same. But as explanations of how the world is structured accumulated, people (and AI as well) gained the ability to enhance intelligence through learning: both knowledge/explanations/algorithms of thinking and tools changed—thinking is now performed not by just the bare brain (just as work is not performed by bare hands), but with the use of models and other means expanding the brain's hardware capabilities.\n\nThe intelligence of an uneducated savage is significantly lower than that of an educated person precisely because of the lack of training in the intelligence stack’s thinking methods. If the savage is educated, he too will be smart! Without education, a savage cannot **quickly** solve even one-hundredth of the tasks an educated person can solve. Moreover, an educated person will also have time to use means to speed up problem-solving: laboratory equipment for obtaining experimental data, Google, or ChatGPT for “loading” the missing knowledge.\n\nThe key word of the previous paragraph is: **quickly**, because while solving a problem, time can be added for the savage’s education, which the educated person received. If an educated person solves a problem in 10 minutes, the savage can solve it within 10 years of education plus those 10 minutes. **Intelligence** is **largely** **learnable** **and can be enhanced instrumentally; a small part is innate!** This largely explains why high IQ as a measure of the biological brain's capabilities for calculations/reasoning does not strongly affect productivity in business, engineering, and science^[<https://www.quora.com/What-was-John-von-Neumanns-IQ-Was-he-smarter-than-Einstein>\n--- the comparison of Albert Einstein and John von Neumann, both were geniuses. Neumann was recognized by everyone as very smart and fast, clearly smarter and faster than Einstein, with an obviously higher IQ. He also had countless scientific achievements. But Einstein was recognized as a slower but deeper scientist by everyone. Depth and novelty of ideas were taken into account, not the speed and quantity of produced ideas, which often would not pass the test of criticism and experiment. The IQ of another physics genius, Richard Feynman, was 125, <https://www.quora.com/Was-Richard-Feynmans-IQ-really-125>. It turns out it’s not about having a high IQ, but about how you use your brain! If you use your brain correctly, a small IQ is enough to make a mark in history. If not, even a high IQ won’t help change the world for the better. And IQ certainly does not determine how good a person you will be.].\n\nAnd remember, as a savage becomes frighteningly formidable when holding a grenade, so too can he enhance his intelligence if he has a computer artificial intelligence and other tools obeying him. But a savage will not be able to work with a complex computer and challenging tools, so he still has to study to enhance intelligence—you won’t become smart just by using a computer, you simply won’t be able to use it. To enhance human intelligence, both human education and a powerful computer with AI are needed!\n\nIn the course of human civilization development, it became clear what useful properties we demand from thinking produced by someone's intelligence: **thinking must be** **systematic,** **abstract, adequate, conscious,** **rational, and this is not the entire list!** As already mentioned, there is a quite large list of thinking methods; some techniques can be selected from these methods, giving desired useful thinking results and avoiding techniques that do not provide these useful results.\n\n**Systematic thinking** means that the whole world is thought of using system approach concepts as consisting of interacting systems nested within each other in \"part-whole\" relations, and several different ways of distinguishing parts from wholes can be proposed (functional parts, structural parts, spatial parts, value parts, etc.). If we agree on how exactly the world is divided into which systems, we can change the world collectively, and if we don't agree, there is a high chance everyone will change the part of the world they like, but together these changes won't yield the desired result. The concept of the system is discussed in the intelligence stack in physics, the part-whole relationship in ontology, ways of dividing into parts needed for activity in methodology, engineering work techniques in scalp-free systemic engineering. This system engineering further specializes for systems of various system levels/organization levels/evolutionary levels: management as organization engineering, personal engineering, social engineering as community and even society engineering. All these different kinds of engineering need to present their target systems as well as creating systems as systems, requiring systematic thinking.\n\n**Abstractness** is the main criterion of thinking. In thinking, we need to abstract from the unimportant and focus on the important. Thinking models the world, not reflecting it with all unnecessary details. Thinking must separate the wheat from the chaff and deal with the wheat. Thinking must know how to disconnect from individuals and think in types, prototypes, abstract concepts: we require some generalization leaving out details unnecessary for the subject of thinking, substantially simplifying mental calculations and learning to think. We need abstractness in complex situations; we want to be able to plan and design ahead, we want to work with whole classes and types of situations. Without abstractness, we cannot transfer experience from some situations to others, we cannot effectively learn, we cannot create languages serving collective thinking—languages allow us to exchange the most important ideas about contemplated situations, clearing communication from irrelevant details. Abstractness is discussed in concept formation, mathematics, ontology, logic.\n\n**Adequacy** is the ability to check whether our abstract thinking and the descriptions of situations it generates are connected with the real world or if it was detached from the tangible/physical world, and we lack ways to verify its results, relate its results to reality. Are our mental representations of situations adequate to the real (i.e., existing independently of us, material/physical) world? Or does thinking deceive us and offer some inadequate representations? We need practical thinking applicable for action, we want to be adequate and not detach from reality. Adequacy is discussed in semantics, physics, ontology.\n\n**Consciousness** is the ability to understand how we think, how we reason. If we simply \"have intuition,\" this won't satisfy us. We won’t be able to teach others to think, to teach them to repeat our reasoning. We won’t be able to notice an error in our thinking, we won’t be able to improve or change it, or learn another way of thinking since we won't notice it, won't be aware of it. We won’t be able to focus attention on thinking since one cannot focus attention on what one is unaware of. We won't be able to present our unassumed thinking for critique from logic and rationality, we won’t be able to consciously decide that in a particular situation, an intuitive guess from thinking is enough, instead of strict rational reasoning. We want to know what we are thinking about and how we do it, we want to be able to choose—to think about something or not, we don't want to be unconscious thinking automata. We want to be conscious in thinking; we must consider not just thinking but also the existence of the thinker themselves as an intellect generating thinking::calculation. Consciousness is discussed in concept formation, collectedness.\n\n**Rationality** is the ability to make decisions based on reasoning by rules, logical reasoning. It is the ability to detach from one's biological and social nature, avoiding related mistakes. Rationality is the ability to verify results of fast intuitive thinking generating guesses for errors and rule violations, the ability to use human experience in reasoning. It is the ability to explicitly (at least in a dialogue with oneself, being aware) discuss these rules of good thinking developed by civilization, discuss the logical bases of thinking, discuss the permissibility or impermissibility of using certain thinking techniques. We do not want thinking errors, so we must be rational; we must be able to recognize thinking errors in ourselves and others; we must be able to express thinking results so as to minimize errors in the perception of our results by others. We aim to be rational, we need to be able to divide tasks into parts (ra·ti·o after all means \"division\"), we do not want sheer intuitiveness or sheer emotionality-spontaneity, though we do not deny their necessity, but above all, we need civilization in thinking, using the best achievements of civilization in how to think. Rationality is discussed in logic and also in a thinking method called \"rationality.\" Rationality as a thinking method studies generating guesses-options in decision-making based on some models, and also includes decision theory studying making the best activity decisions. All decisions are about changes in the self-model, world model, degree of confidence in the accuracy of the self and world models, self, or world changes, which is studied by the active inference approach^[<https://ailev.livejournal.com/1611838.html>, <https://ailev.livejournal.com/1612513.html>].\n\nAll other **criteria for strong thinking** are usually particular variants or combinations of the presented criteria. Thus, **\"strong thinking\"** is generally reduced to high characteristics by all criteria (thinking of strong intelligence), **\"wisdom\"** is simply other words for adequacy and systematicity, **\"creative thinking\"** is correct abstracting and making hard-to-criticize guesses about important objects, **\"reflection\"** is consciousness, but not in the current situation, but the past.\n\nIt’s easy to come up with some other selection of \"thinking\" as particular thinking methods from the full set of intelligence stack methods—similar to how \"systems thinking\" was selected. Remember: method/practice/culture/style is theory/knowledge/algorithm/ \"academic/scientific discipline\" as thinking techniques about some important objects, with thinking techniques supported by mastery calculations and also by tools, such as modelers for recording representations of thinking objects and operations with them.\n\nYou can easily imagine such a selection of thinking techniques from the complete set of intelligence stack methods as \"actionable thinking.\" **\"Actionable thinking\"** will mostly include rational thinking with an emphasis not so much on cognition as on going into (engineering) projects for changing the world, using applied methods of systemic engineering in its application to some specific types of systems. It can also be called **“entrepreneurial thinking,”** in the common sense of the word \"entrepreneur.\" In actionable/entrepreneurial thinking, one system decides how to change the world, including itself—\"undertake something,\" create or change some system, undertake an engineering project, or \"explore the possibility of beneficially changing the world,\" which can also be described as **\"research thinking.\"** Actionable thinking can also be called **\"labor thinking,\"** it will also be **\"practical thinking,\"** **\"proactive/enactive thinking\"** and even just **\"engineering thinking,\"** because every engineer takes a step into the unknown, planning a useful future world change\n(entrepreneurial/proactive/creative/research/action/cultural step), then performing the actual change (\"working\" part of engineering, \"manufacturing\"). Why all this is more or less synonymous will become clear while studying the course; these are all references to the discipline of methodology, the doctrine of action.\n\nThinking is not \"passive\" or \"analytical\"; the result of thinking is not a \"computer output\" in the form of an \"analytical report on thoughts.\" No, thinking is proactive/actionable/practical/labor/engineering, and this also applies to systems thinking. **We don't have a \"systems analysis,\" but a \"systems thinking\"; thinking changes the world, not just \"understands the world\"!** **If your systems thinking is not aimed at changing the world for the better, then it is hardly systems thinking!**\n\n\n![](06-criteria-for-strong-thinking-1.jpeg)\n\n\n(image by Dan Reynolds^[<https://en.wikipedia.org/wiki/Dan_Reynolds_(cartoonist)>])\n\nWe do not mean that an agent (a person or AI, or human-computer cyborg, or even an organization) with strong intelligence, capable of thinking abstractly, adequately, consciously, rationally, and systematically, can solve any task. No, for this, they need to have not only the thinking mastery of the intelligence stack but also the mastery of **subject-specific/applied** (domain-specific) **reasoning**—for applied (i.e., used in work projects) methods/“types of (engineering) labor.” To survive, both as an \"organism\" and as a \"species,\" an agent needs to be practical/actionable/entrepreneurial/creative/proactive/enactive. This reasoning can also be applied to the whole ecosystem since all species evolve interdependently; this applies to both Darwinian biological evolution and techno-evolution.\n\nEach type of labor/activity has its specific subject-specific/applied reasoning and actions performed by that functional part of the brain and body we would call applied mastery in relation to thinking mastery. Applied mastery is important; it allows reasoning quickly and without typical errors for beginners in these types of labor.\n\nIn general, systems thinking gives a small set of types, which allows quickly orienting in a situation. It is such a high-level (high level of abstraction, meta-meta-model) model of the situation, a “map.” The map does not tell where to go, but knowing the map helps not to get lost, not to step into a swamp. The map, of course, can be used to look at it before bed, many people like this, they collect atlases. From a meta-meta-model perspective, these are analysts, who do not act, do not change the world. They are just “couch analysts.” No, systems thinking is used differently:\n\nYou focus attention on some objects in the world, the types of these objects are set by the meta-meta-model. Essentially, you have a map, and you “navigate the terrain”: identify the objects in the terrain with objects on the map. Hooray, now you know where you are (and if some objects are not found, but they are on the map—you know where to look for them).\n\nBut now you should know where you actually need to go. And you can generate a dozen routes, criticize them, and choose the best. This is rationality.",
    "2af8ebe6b005700ac16b71e8902828fc": "---\ntitle: Systemic thinking as strong/universal/general\n---\n\nLet's continue with a brief summary of the material without lengthy explanations and examples: we simply provide this as a reference material so you can assess the set of concepts in which it is convenient to discuss systemic thinking among other types of thinking. Of course, later in our course, there will be detailed explanations and examples, and in subsequent courses on these topics, there will be exhaustive information and references to primary sources. Do not get stuck on a detailed understanding of the synopsis content in this section—use it for a general acquaintance with the topic.\n\nThinking can be **strong/universal/general** (intelligence thinking, not limited to a subject area) and **narrow/non-universal/applied** — thinking about objects of some narrow subject area (growing oilseeds in general and sunflower in particular, performing optical computations, learning horse riding). These concepts are close to how intelligence itself is defined: strong (comparable to human, potentially universal in relation to the subject area) and applied — and here are the debates about whether to consider narrow intelligence as true intelligence or to refer to it simply as some kind of applied skill. This is not important to us right now, as we define intelligence as a set of a special kind of skills — the skill of conducting thinking through a set of **fundamental/transdisciplinary** thinking methods, which ensure the universality of intelligence. Therefore, the discussions about applied skills (skills that can conduct thinking based on applied theories/disciplines/knowledge) follow the same line as fundamental thinking skills, that is, intelligence.\n\n**The set of thinking methods followed by** **strong/general** **intelligence constitutes the** **intelligence stack**. Stack (like in “stack of paper sheets”) means that each thinking method and its knowledge/theory/“scientific/academic discipline” and tools (usually modeling tools—modeler) higher in the stack is easier to explain using methods lower in the stack.\n\nHere are the fundamental thinking methods of the intelligence stack from top to bottom, named by “scientific/academic disciplines”/“explanatory theories”/“kinds/areas of knowledge”: **engineering,** **methodology, rhetoric, ethics, aesthetics,** **cognition/research, rationality, logic, algorithmics, ontology, theory of concepts, physics, mathematics, semantics, coherence, concept formation.**\n\nThinking methods (and their knowledge/theories/disciplines) of the intelligence stack are **fundamental** (that is, they “underlie” the applied thinking using the concepts of applied thinking methods' disciplines). The fundamentality of the thinking methods of the intelligence stack and the concepts given for them by theories/disciplines grows towards the bottom of the stack. The lower in the intelligence stack, the more fundamental the thinking methods and their disciplines are, their concepts are more abstract compared to the concepts of applied disciplines, and it is harder to understand their influence on a particular situation. But this is the secret: these fundamental thinking methods are helpful when facing **problems** — situations where it is unclear what to do: what and by what applied method to change in the physical world to improve it, it is unclear what to think about, objects of which subject area. The most abstract thinking about objects, about methods to change objects, about organizing collective thinking and collective work is needed.\n\nSuch situations, when it is necessary to employ intelligence and thus methods of thinking from the intelligence stack are common. Problems do not exist only for those who do nothing, but only at first. In the second moment, idlers will receive their unpleasant surprises from the surrounding environment; the surrounding world never sleeps.\n\nTheories/disciplines of the intelligence stack, enhancing intelligence (that is, making it more universal in thinking subjects and faster by using improved algorithms on which thinking relies), affect the work with applied methods, helping to understand their concepts.\n\nThe visible part of a master's thinking, as the work of all his skills (including applied, intelligence, self-care), is applied thinking. Someone knows how to build a house, someone knows how to repair a synchrotron. The results of applied thinking are recognizable, well visible! But there is an invisible part in thinking: this is the manifestation of the strength of intelligence as the ability to quickly and universally solve previously unencountered problems, **“translate problems/problems** **into tasks/tasks.”**\n\n**A task** is a unit of work with a known method/way of this work and known required resources that can be assigned to one creator with access to the resources and proficient in the method. A significant part of strong intelligence is the mastery of **strategizing**: a method for finding a suitable strategy to overcome the problem :: \"work method\", and after creating a strategy (selected method for overcoming the problem)—the mastery of planning as drawing up a plan for using resources-constructs to implement the strategy in the form of a set of tasks, the execution of which implements the strategy and thereby overcomes the initial problem.\n\nSystemic thinking belongs to intelligence thinking; it shows in overcoming problems, not obtaining any clear results. With mastering systemic thinking, you **will** **become** **smarter** (your **intelligence will become stronger**), but this does not mean you have learned to do some specific work: being a good manager, singer, or heat engineer. No, you will simply overcome problems you encounter more quickly (including problems you will encounter in management, singing, heat engineering), but you will have to learn the applied working methods separately.\n\nYou will learn some general working methods (systems engineering, personal engineering as training, organizational engineering as systemic management) in our next courses. At the same time, we will clearly distinguish: if your question is about how to make systemic descriptions \"in general,\" this is a question for the course on systemic thinking. If the question is how to make systemic descriptions of an organization — you need the systemic management course, if you need to describe a skill systemically — you need the personal engineering course. But if so, why the systemic thinking course? It tells about the very type of \"systemic description\" and what should be there. This is a course in type meta-meta-models, and applied courses (including software engineering, personal engineering, organizational engineering) are courses in type meta-models. In life, however, to solve problems and check for gross errors, it is necessary to typify the concepts of a meta-model (subject area) with types of a meta-meta-model, that is, types of fundamental methods of the intelligence stack. If your organizational model suddenly stopped being systemic, you will not learn this from the systemic management course, nor from the software system architecture creation in the software engineering course (although we do touch on this matter in the systems engineering course, we refer to the literature specifically on software engineering). Do not expect answers to questions about applied working methods from fundamental courses, including the systemic thinking course.\n\nFundamental courses serve other purposes. **Thanks to systemic** **thinking, completely unfamiliar situations will become somehow familiar.** People not familiar with systemic thinking will see a web of closely interconnected incomprehensible and hard-to-distinguish-from-the-environment objects, but you as an adept of systemic thinking will see a set of slightly familiar, but systems (this type is from the meta-meta-model of our course), linked not “somehow” but more-or-less comprehensibly (with understandable relationships: composition, creation). And then you will understand faster, as if an unfamiliar situation will be partially familiar to you: you will know the types of important objects of this situation, and therefore you can reason sensibly.\n\nIf you have a managerial problem, you use organizational engineering, and organizational engineering engages systems engineering, which engages methodology, and as a manager, you will use a technique and solve ethical problems, think rationally and logically. Rarely does anyone note that the activity of an agent in the role of a manager involves organizational engineering. It is not emphasized that the personality of this agent thinks logically and is guided in their decisions by the latest achievements in ethics. But this doesn't mean that everything happens like that in life. The agent-manager with stronger intelligence will be the better manager: they will simply learn the necessary applied methods when encountering problems. Systemic thinking will help with this. An agent was usually an adult (not a three-year-old child), but today such an agent can be AI, or it could be a whole organization of people and artificial intelligences.\n\nThus, thinking methods of the intelligence stack (physics, math, logic, methodology, etc.) are used in the most diverse applied fields, from musical composition to robotics. We will be less concerned with full methods of thinking of the intelligence stack (including not only theories/knowledge/disciplines but also tooling to support thinking). Therefore, it is often said not about the thinking methods of the intelligence stack but only about the disciplines/theories/knowledge of the intelligence stack. Moreover, methods are mostly named after their theories/knowledge/“academic/scientific disciplines,” and not tools/equipment (although there are exceptions like “microscopy”)^[[https://en.wikipedia.org/wiki/Microscopy](https://en.wikipedia.org/wiki/Microscopy)], and this is not accidental. The tooling supporting the theory/discipline of a method can be easily replaced (for example, one modeler replaced with a completely different one), while the supporting theory/discipline remains.\n\n**Systemic thinking defined by intelligence stack methods** **is universal,** **fundamental,** **scaleless:** **engaged in** **thinking about the most diverse** **applied** **subject areas.**\n\nMastery in thinking according to the methods of the intelligence stack is necessary for solving problems that the owner of intelligence has not encountered before. Applied working methods help solve tasks that the owner of intelligence has already dealt with. But as soon as a situation in life somehow differs from the situation described in the applied method or its explanations/disciplines (be it plumbing, instrument engineering, or genetically modified fish farming), it will require employing intelligence — to figure out what the difference is and how to solve the emerging problem.\n\nIntelligence, enhanced by fundamental knowledge/theories/disciplines, **is universal**, since it helps to cope with problems in the most diverse applied subject areas, from animal husbandry to rocket engineering. Therefore, explanations/disciplines of the intelligence stack practices are often called **transdisciplines**, these are “disciplines for reasoning in the course of engaging applied methods” (trans-— “lying beyond” applied disciplines, more precisely, disciplines of applied methods). An overview of the modern content of transdisciplines will be in the \"Intelligence Stack\" course.\n\nThese fundamental knowledge/disciplines are **scaleless,** unlike the knowledge of applied disciplines which are tied to certain scales in space and time. The term “scaleless/scaleless/scale-free” came from physics and is used concerning disciplines/knowledge/explanatory theories, where their applicability doesn't depend on the size of the discussed objects. Fundamental disciplines allow reasoning about elementary particles, people, airliners, mountains, quasars, and galaxies. Systemic thinking within these fundamental/transdisciplines is not only universal in terms of subject areas dealing with different properties of physical world objects but also scaleless in terms of reasoning about the most diverse situations in the physical world, considered at different size scales — from the microworld of subatomic particles to the cosmic world of galactic clusters, as well as the most diverse time scales — from femtosecond light pulses in lasers to the billions of years that biological evolution lasted.\n\n**Applied** **disciplines/knowledge/explanatory theories** use the concepts (types of the meta-meta-model) of transdisciplines of the intelligence stack to discuss methods of working with systems as physical objects, divided into levels of some specific scale/size. These levels “by scale/size” are called **system** **levels**. Small molecules make up larger cells, small cells make up big organisms, many different organisms make up huge populations — this is the division of living nature systems into system levels. From screws and metal parts, we assemble avionics, from avionics, fuselages, and wings — airplanes, from airplanes and airports — air transport. These are system levels in engineering.\n\nDifferent applied working methods deal with the laws of behavior of systems from different system levels. Molecular biology deals with proteins, motor engineering — with motors, aircraft construction — with airplanes. These are the system levels dealt with by applied **methods/practices/styles/cultures** of engineering. **Engineering** changes the physical world for the better, applying thinking about certain types of systems to changing the physical world for creating and developing **target systems** — motors, airplanes, cows, enterprises, and even societies. For instance, classical systems engineering — is the engineering of cyber-physical systems (robots, airliners), medicine — is the engineering (now mainly repair) of human beings, training — is the engineering (mainly development/modernization) of a personality, management — is the engineering of organizations.\n\nStrong intelligence implements the ideas of \"saving\" **agents**, who, with their engineering, change the world to eliminate problems now and prevent them in the future. Intelligence can be present in anything (agents in a broad sense), only to different extents. But so far, intellectual agents are only educated people and modern AI systems are approaching them. People also form organizations together with AI agents. Humanity has processed about 50 kg of material per each square meter of the earth's surface, to avoid starving, freezing, suffering from diseases, being eaten by wild animals and even being destroyed by fellow tribesmen. Not dying from hunger and cold is more of a task now, not a problem. With diseases, it depends on the disease, treating some diseases is still a problem, others already a task, but biological immortality is still a problem. Elimination by fellow tribesmen is also still a problem, although the situation is much better than a couple of thousand years ago.\n\nThe meaning of life is to \"be saved\" in the evolutionary sense of the word. **Live now and in the future, for this, arm yourself with knowledge** **of the most diverse work methods** **and** **then conduct work using the knowledge and** **tooling** **of work methods in engineering projects to create various systems.**\n\n**Systemic thinking** **is** **thinking based on knowledge/theories/disciplines** **of methods** **of the intelligence stack,** **which** **are responsible for thinking about problems, translating problems into tasks** **and** **in this thinking about problems and methods of their solving** **using the concepts of a systemic approach.**\n\nKnowledge for solving tasks usually exists, knowledge for solving problems does not. Intelligence provides thinking using “knowledge about knowledge,” “transdisciplinary knowledge about applied disciplines.” We remember that often methods/ways/cultures/styles of work are discussed apart from their tooling — as their applied knowledge/disciplines. The systemic approach is part of such knowledge, that is, part of the “knowledge about knowledge.” Systemic approach as explanations based on a set of meta-meta-model concepts is contained in the discipline/theory/knowledge of intelligence stack thinking methods. But we also understand that bare hands and bare brains do not work, tools are utilized. Therefore, systemic thinking requires not only mastery in using the brain as thinking hardware but also mastery in using tools — modelers working with various system descriptions.\n\nThe systemic approach turned out to be so important in engineering that in its most general variant engineering began to be called **systems engineering**. Indeed, modern methodology can be safely called “systems methodology” because it also substantially employs the idea of the systemic approach, and physics uses the concept of \"system\" as one of the main ones, and the term itself came from there. The other thing is, physics is not called \"systemic,\" systems are familiar there.\n\nBut \"systems biology\" is the engineering of artificial life, the word \"systems\" there basically meaning \"created living objects,\" because **in everyday life, the word “system” is often used to mean anything that is sufficiently complex, and it has little to** **do with the term from systemic thinking. “The system cat went behind the system corner”** **is everyday language, not the language of systemic** **thinking concepts.** The type \"system\" can be easily removed, it adds nothing here.\n\n**So:**\n\n-   **Intelligence** **is the mastery** **in methods** **of turning problems, which it is unclear how to overcome, into tasks that just need to be done.**\n-   **Thinking** **is a function of intelligence, its behavior, what intelligence does.** **Essentially, thinking** **is the computation of intelligence, so that computation can be done according to some thinking methods. Thinking methods that lead to intelligence enhancement** **make up the intelligence stack.**\n-   **Systemic thinking** **is a subset of thinking,** **dealing with** **the emergence** **of new properties of a whole object-system** **(emergence)** **resulting** **from the interactions** **of parts** **of these whole** **objects.** **Systemic thinking is based on the concepts of a systemic approach.**",
    "39920381157f594cf9b351b7543576de": "---\ntitle: 'What the Course \"Systems Thinking\" Teaches: Ontology'\n---\n\nHumanity has broken free from the realm of nature. Today, the mass of humans is 300 million tons. This is twice the mass of all large vertebrates that lived on Earth before human civilization appeared. The mass of material processed by humans is estimated at 30 trillion tons, which is more than 50 kg per square meter of the Earth's surface^[Zalasiewicz et al., “Scale and diversity of the physical technosphere”, Zalasiewicz et al., <http://journals.sagepub.com/doi/full/10.1177/2053019616677743>]. And this is a consequence of the fact that people in humanity over the last couple of thousand years have enhanced their intelligence and accumulated a critical mass of explanations, allowing them to effectively \"escape\" from various external threats.\n\n**In the first three subsections of the course, we will provide** **a small** **ontology (objects and relationships), which** **will help to discuss** **the place of systems thinking in overall thinking.** **It will be said many times in the course that relying on exact definitions is** **only in mathematics. But several subsections will resemble \"issuing definitions\"; reading will be somewhat like reading dictionary/glossary entries.**\n\n**We do not expect you to understand everything in this small ontology right now, just like in mathematics—** **complete understanding will come later, the main thing here is not to get stuck on each subsection and to persistently move forward in the courses (we will repeat and explain each concept in them, give examples, and show mistakes in their use).**\n\n**All these concepts are expanded upon** **not even in our course \"Systems Thinking\", but** **in the courses following** **\"Systems Thinking\"** **(primarily courses like \"Methodology\", \"Personality Engineering\", \"Intellect-Stack\").** **Nevertheless, to understand the place of systems thinking among other types of thinking, we need to figure out what thinking is—** **although, as mentioned, we do not expect that you will understand this from the texts of the first three sections. Just continue with the course, understanding will come!**\n\n**At the MechMath department of MSU, there's a saying among lecturers: \"The student doesn't understand, doesn't understand, and then gets used to it.\" That's the same here—** **we understand that you are not a computer, so you won't be able to load three pages of definitions of different concepts into your brain at once to operate freely with them. But you will get an idea of how intelligence, thinking, mastery of thinking, and thinking methods are generally discussed.**\n\nFor us, the main thing here is to show the place of systems thinking in overall thinking, not even of a human—but of all agents (and we believe you already know what \"agent\" is from the \"Rational Work\" course, but we will repeat this many times later). The text of the first section also shows an example of using systems thinking itself, as well as the reasoning of methodology as \"the science of work methods\". We do not expect you to immediately understand what is written here, but by the end of our series of courses, it will all seem natural and won't require additional explanations.\n\nSo don't get stuck on this ontology, don't get stuck on the first three subsections, but also don't \"pass by.\" The last section of our course is about the same **synopsis** (a brief presentation of ontology without explanations and examples), it is titled \"Instead of a Glossary: Ontology of the Third Generation Systems Approach\" with a more or less formal presentation, it is dedicated to the content of the third generation systems approach. But in the first section, we offer a different ontology as a set of concepts and relationships among them to discuss the place of systems thinking among various other fundamental and applied types of thinking.\n\nThe following text significantly utilizes the knowledge about types of objects and their relationships obtained in the \"Rational Work\" course.\n\n**\"Intelligent Agent\"**/\"agent in the narrow sense\" can be a human, AI-agent, organization. An agent is a **creator**::system, performing universal physical transformations of other systems. A creator is a system that performs all possible transformations of physical world objects. The concept of a creator is built as an extension of the concept of a computer/computing machine, which performs information transformations. Just as a universal (Turing-complete) computer can perform all possible calculations given sufficient memory and time resources, a universal creator can perform all possible transformations of physical objects—given the necessary energy and time. We can consider that the creator includes a computer/computing machine, which sets the program of transformations. A human is a universal creator, in which the computing machine is mainly realized by the brain. All this will be discussed in detail in our \"Systems Thinking\" course and subsequent courses of the curriculum.\n\nAn agent \"consists of\"/\"composition relationship\":\n\n**Organism** (\"hardware\" of the agent—the body, “hardware part”), this also includes **exobody** with **exocortex**, and even resources **owned** by the agent, such as some **toolset/tools/instruments** **(set of instruments/equipment/hardware),** enhancing the hardware capabilities of the agent. If it is a collective agent, then it refers to all bodies together.\n\n**Personality** (\"software\" of the agent, \"firmware\"/\"program\") consists of a set of all of the agent's **skills**. Skill with the involvement of the organism performs **tasks** by some specific method **/way** for this skill. Personality consists of:\n\n**Life skills,** including\n\n**Intellect** consists of\n\n**Skill**::computing machine, executing\n**method/practice/way/culture** **of thinking** 1 (e.g., conceptualization::method) from a set of methods of strong thinking (further this set of methods will be called **\"intellect stack\"**). Method/practice of thinking 1 consists of\n\n-   sub-skill of thinking using concepts from the **theory/discipline** of this thinking method 1\n-   Sub-skill utilizing **toolset** (set of tools/tools/instruments/equipment/hardware, most often in the case of a skill within intellect—it's a modeler) for this method/practice 1\n\nSkill of thinking by method/practice 2 from the methods of the intellect-stack 2 (e.g., skill of thinking semantics)\n\n...\n\n**Skill of self-care,** consists of\n\n-   sub-skill of thinking using concepts from the knowledge/theories/disciplines of self-care (how to sleep, how to eat, how to treat illnesses, how to start a family, ...)\n-   sub-skill of applying self-care tools/instruments/equipment/hardware (how to use a toothbrush, ...)\n\nSet of **applied skills** as computing machines capable of achieving some specific results in a specific applied subject area (e.g., aviation, management, trampoline jumping)\n\n-   Set of applied sub-skills of thinking using concepts from the knowledge/theories/disciplines of applied subject areas\n-   Set of applied sub-skills of applying the applied tools/equipment\n\n**Thinking** can be understood in two meanings (we will use both):\n\n-   In a narrow sense—it is the computations of intellect (i.e., computations of the set of skills in the methods of the intellect-stack)\n-   In a broad sense—computations of the agent-creator by any type of its skill (including applied skills).\n\nThe concept of the method/way/practice of work in its distinction from the work itself—is the subject of a separate course, \"Methodology\", the science of method. Discussing the method is difficult because different types of relationships get mixed up. Thus, thinking is the method/function/practice of intellect. But it is appropriate to ask: \"What method of thinking did you use?\" This is not a tautology “what method of method did you use”, but an attempt to express in layman's terms a metonymy: it means work of thinking::method and an attempt to find out which variant/type of this thinking::method was used.\n\nWe distinguish between work (achieving some result) and method/way/practice of work. We also distinguish between method/way/practice of work, theory/knowledge/discipline/algorithm of this work, and tools/equipment/hardware for work. Method/practice of work is the way the work progresses (behavior patterns), not the description of the way of work. The theory/explanation/algorithm is the description of the way of work, usually not too dependent on the used tools/equipment/hardware but closely related to it. To reiterate: for all these nuances there is a whole course \"Methodology\", you will take it next.\n\nThus, in the narrow sense—**thinking** **is calculation::function/process/method** **of intellect’s work::\"part of personality\"::\"set of skills by methods of the intellect stack\"::\"set of** **computers, working by methods/practices of the intellect stack\".** This set of methods is discussed in the \"Intellect-Stack\" course, and we will briefly list them below in the text.\n\nThe feature of thinking::calculations of intellect as distinct from calculations of various other types of skills is the focus on solving new and new classes of problems. Thinking in the narrow sense (calculations by methods/ways of the intellect-stack) is aimed at **knowledge** as creating new and new explanations/theories/knowledge for new and new methods, allowing agents then, both individually and collectively with the help of various tools of these new methods to change the world for the better, participating in endless **techno-evolution** (and even interfering in **biological/Darwinian evolution**).\n\n**Systems thinking** **is the use of** **concepts of a systems approach** (system, subsystem, and supersystem, emergent property, system level, etc., we will discuss them throughout the course) in thinking in the broad sense. These concepts help to model the world as consisting of **important objects**: interacting nested **systems**. These systems are **physical** **objects**, stable in relation to the impacts of the continuously changing and not always friendly **environment**. The systems somehow maintain the **boundary** between themselves and the environment, they do not mix. Over a long **time scale**, these systems also **evolve**, achieving greater and greater stability to the unpleasant **surprises** from the environment.\n\nModern intellect is a human-machine computer, and often it is collective, meaning thinking is conducted by a group of people supported by computers. And even without computers, human biological intellect is enhanced by external reliable memory in the form of notes on paper or paper books. Systems thinking implies the use of records; thinking doesn't all happen in the biological brain. **Don’t write/model** **in the computer or at least on paper—** **not thinking systematically.** Now, not only humans can think systematically, but also a computer with an artificial intelligence program if they are trained to do so. Even an organization can think systematically (i.e., use concepts of the systems approach in thinking and related modeling), although what \"thinking\" is for an organization and what kind of thinking intellect it has is still a matter of debate.\n\nAnother dispute is whether intellect’s abilities are “computations” only, as the skill of thinking by the methods of the intellect-stack includes methods of working with tools/instruments. This may include in thinking some physical processes, which physicists might reduce to informational interactions (meaning it can loosely be said that it's \"computations\"), but in everyday life and even in engineering, they are no longer thought of as such. For instance, to verify thinking about what is happening on the far side of the Moon, one could create and send a tool there: a spacecraft that will measure some characteristics—and then the thinking continues. To include or not include the creation of tools (a microscope, a rocket, a synchrotron, a multi-story building, a genetically modified tomato, a thermometer) in thinking is unclear. A creator—this is an extension of the concept of a computer to an agent that changes the world, so it is quite easy to equate \"pure thinking as computation only\" and thinking that includes the use of tools for changing the surrounding world. A tool can be a shovel, a computer, a robot, or even another person trained to perform some work by chosen methods specifically for this purpose.\n\nThe main point is that modern intellect is based on fundamental (from the intellect-stack) methods of thinking, relying on knowledge/theories/disciplines permeated with concepts of the systems approach. With the addition of these knowledge tools (in the simplest case—an exocortex in the form of any way of taking notes, even pen-paper), intellect manages to reason about systems of various scales/physical sizes: from elementary particles to quasars. Intellect also manages in cases when some creators (e.g., humans) create other creators (e.g., robots, or organizations of people)—and since these are all systems, discussing such situations of \"creators creating and developing creators\" also uses concepts of the systems approach, this will also be systems thinking.",
    "52e193a301f02e63cd40027df197f41b": "---\ntitle: The Composition of Thinking Methods in the Intelligence Stack\n---\n\nHere is a brief description of the thinking methods in the intelligence stack in reverse order of their transdisciplines (the methods themselves are usually named after their disciplines/theories, rarely by their tools), from bottom to top, to clarify how explanations/theories of some disciplines use concepts already introduced by other disciplines:\n\n- **Conceptualization** teaches one to distinguish figures from the background and make them objects of consideration. The role of the agent engaged in conceptualization is the **poet**, the \"namer.\" Some of these objects will later turn out to be systems.\n- **Concentration** teaches one to maintain attention on \"objects\" already discussed in conceptualization and provides an understanding of consciousness. The role here is **\"concentrated\"**, but in the case of a person, a cyborg, as we do not trust the bare brain's attention; we support it at least with pen and paper, but preferably a computer. If you don't write, you don't think.\n- **Semantics** teaches one to separate physical objects (handled by physics) from mathematical/abstract/mental/ideal objects (handled by mathematics), thereby dividing objects in the world and objects in their more or less formal descriptions. But these objects can already be held in attention, and for their designation in thinking (concentration has already shown that everything needs to be recorded), signs/symbols are introduced (handled by semiotics, the study of signs). Thus, modern semantics is, in fact, semiotics, the study of meaning and sense of signs, only supplemented by references to mathematics and physics, not just focusing on signs as done in semiotics. Role — **semanticist**.\n- **Mathematics** teaches about the types of abstract objects and their relationships, the behavior of abstract objects. Semantics has already talked about their existence. The best systemic descriptions are based on mathematical representations. Mathematics continuously evolves, offering interesting types of mathematical objects that had not been used before. The role utilizing mathematics as a method of mathematical thinking — **mathematician**. These new well-studied mental objects will resemble the real behavior of physical objects in their mental behavior, and mathematical objects will be used by physicists.\n- **Physics** teaches the behavior of physical objects represented by mathematical objects. Semantics has already explained that physical objects are represented in thinking by mental/mathematical objects. Physics also addresses questions of the physical-mathematical theory of information: how mathematical objects are represented in the physical world (\"mathematician and astrophysicist — physical objects\"). It is in **physics** **that the concepts of** **system** **and many other concepts of the systemic approach are introduced for the first time.** Role — **physicist**. Vitaly Vanchurin further distinguishes philosophers and physicists: a physicist gives explanations (since they rely on mathematical objects) where something can then be measured and calculated-predicted, thus verified. A philosopher is free from this, so a physicist can't really make up nonsense, but philosophers can, their reasoning might be entirely disconnected from reality, there can be storytellers among philosophers but not among physicists. The tie to reality in reasoning is paramount for physicists.\n- **Theory** **of Concepts** teaches that all objects are similar to one another in some sense, described by types/classes or prototypes. And that we can judge objects by their relationships with one another. Common examples of types of relationships are classification, specialization, and composition. Physics (and the theory of information within it) has already mentioned how all these descriptions are represented in the physical world on information carriers. Ordinary human thinking is \"imaginative\" thinking based on metaphors. Essentially, modeling is also a metaphor, metaphors are needed to construct convincing speech, and for this, one must understand how to work with prototypes for discussed objects. However, critique requires representations of objects and relationships so that ontology, algorithmics, and logic can then work with them. For this, it is necessary to install a \"type machine\" in the brain (or AI program) to perform type assignment operations. Role — **typologist**. Naturally, a type is a mathematical object, and maintaining focus on the assigned type will require concentration, for which everything needs to be written down.\n- **Ontology** teaches how we multi-level describe/model the world: how we determine what is important and what is not (modeling as the creation of \"knowledge graphs\" corresponding to concepts and their relationships from the theory of concepts), how we use knowledge graphs for reasoning and explanations. We deal with multi-level meta-modeling (descriptions as abstractions are not arbitrary; abstraction is managed by a higher-level abstraction). Formal ontologies/knowledge graphs expressed with recognized mathematical objects (e.g., logical predicates) and less formal ontics/frameworks expressed in natural language texts utilize concepts (theory of concepts is used) and express properties of the physical world. Role — **ontologist**.\n- **Algorithmics** is a natural/experimental science that discusses ways of reasoning with informational models (i.e., methods of computation) we already know from ontology. These reasonings/computations involve objects in different physically universal (all correspond to Turing machines, an important theoretical result of algorithmics) computers (brain, electronic computer, quantum computer, optical computer). Role — **algorithmist**. There are universal algorithms that can be trained to approximate some applied algorithms infinitely closely. These are the algorithms of artificial intelligence, i.e., algorithms dealing with thinking/learning/cognition!\n- **Logic** explains what methods of reasoning over models exist so that the reasoning results (also models) with correct premises and proper reasoning rules somehow match the real world. Ontology has already explained how we sliced the world into objects, describing this slice with some models, so reasoning works with models, and \"works\" means computations follow, as we know from algorithmics. Role — **logician**. Basically, modern \"mathematical logic\" seems part of mathematics, but we use a more traditional understanding of logic, substantially intersecting with including semantic questions in logic and venturing into pragmatism, \"taking seriously\" — it is important to us that non-contradictory reasoning should underpin actions, and contradictory reasoning should invoke further intellectual engagement rather than action based on knowingly illogical arguments. Therefore, the main question we discuss here is \"so what?\", i.e., ignoring errors like \"2\\*2=5\". If you know that there is an error in reasoning, such reasoning cannot be the basis for action! One cannot be illogical!\n- **Rationality** as a fundamental method states that logical reasoning based on models/theories/explanations/knowledge is needed for actions that improve the world. Therefore, reasoning about cause-and-effect relationships in a specific situation is needed, which involves obtaining information about the world, deciding what to observe, observing it, and then deciding on an action, including whether to observe anything else or if the actor can make a decision to act to change the world in conditions of uncertainty (\"a tiger is attacking you: gather more information and observe, run or attack, or come up with and implement other options?! You have about three seconds for all decision-making\"). Decision theory will be the core of rationality. Role — **reason**.\n- **Research/cognition** as a separate method. This method is actually part of the methods relying on \"theory of cognition\"/epistemology, rationality as \"scientific thinking\" — the second part of epistemology. Epistemology is not the theory of any method of cognition, but of those whose results are alienated (written culture of science! Presentation in words and formulas in formal languages!) and collectively verified. It differs from \"theory of knowledge\"/gnoseology, which includes artistic and religious irrational \"knowledge\" of the world in the form of non-alienated personal sensations. \"Rational research\"/\"scientific cognition\" explains how rational agents obtain useful theories/disciplines/explanations that they **take** **seriously**, i.e., begin to act on them hoping to \"escape\" unpleasant surprises the Universe is full of. We speculate about a good explanatory (causal) predictive/generative model/theory, then criticize this guess for non-contradictory outcomes of reasoning over this model and for better matching predictions of this model with experimental results. All necessary concepts for describing research are already known from conceptualization, concentration, mathematics, physics, semantics, ontology, algorithmics, logic, rationality. Research as a discipline/knowledge/theory/model explains how they are all utilized in the course of endless cognition. Role — **researcher/scientist**.\n- **Aesthetics** provides criteria of beauty (in research, it is customary to speak about **elegance**) in the outcomes of thinking and applied labor. Aesthetics explains what impact the objects created by engineers/actors (including artists, performers, other \"creative professionals,\" and now AI) have on their physical environment, as is usually the case with systems, but what changes they cause in the models of self of other agents, changes in their physical \"selves,\" changes in world models and belief in the reliability of these models. It is not a fact that modern aesthetics only discusses, for example, the emotional impact of some products of labor and descriptions on human agents. No, modern aesthetics considers humans, AI agents, and artificial life. Role — **aesthetic**.\n- **Ethics** tells us what we should strive for in life: what goals are acceptable for an agent and what means should be used to achieve them. Should people die, or would it be better to make them immortal? Is it normal if people change their worldview and flee to other societies, causing their original society to die? What is better: to kill and burn a group of people infected with a deadly virus and thus save humanity, or not to kill because \"thou shalt not kill\" is a commandment — and to hell with humanity, it will somehow survive? For ethical reasoning about this, we already understand what rationality is and how research is structured. Modern ethics is multi-layered, and for this, we can more or less fully utilize the concepts of the systemic approach from different thinking methods of the intelligence stack to discuss agents of different systemic levels conflicting in \"saving\" objects of these different systemic levels, possibly at the expense of \"saving\" objects of other levels. For some, to hell with a multimillion-dollar country, as long as all people are alive, and countries may disappear; for others, countries must survive \"at any cost,\" even if only a couple of people remain in each of the millions of survivors. The role of seeking multi-level optimization for saving objects of different systemic levels in their inevitable conflict is the **conscience**. And henceforth, when the agent's \"conscience speaks\" — it is either \"ethical tinkering\" when the agent knows nothing about modern ethics as a fundamental thinking method (with its transdiscipline), or it is the thinking of a civilized and educated agent (a person or computer with AI) who knows something about modern multi-level ethics.\n- **Rhetoric** explains how to persuade a person to perform certain actions or, conversely, to convince them not to act. You start with having a rational model of the situation (obtained through your research). Then you explain your model of the situation to another agent, trying to persuade them to use this model to achieve certain goals, while postponing their own goals. Rhetoric considers ethics to ensure sweet talk does not incite agents (animals, people, robots) to do something bad. Role — **rhetorician**. But you also use the theory of concepts: sweet speeches use metaphors and images to work with prototypes. Sweet persuasive speeches appeal to your fast thinking (S1 by Kahneman) for intuitive decision-making (with possible errors!) and attracting attention in communication. Passing rational models/knowledge requires abandonment of fast thinking in favor of slow thinking with strict object types and relationships, and the decisions will be rational, based on logical reasoning and decision theory, not based on metaphors and the intuition behind them. **Rhet** deals precisely with this: translating content between different ways of expressing knowledge and urging action based on the transmitted knowledge.\n- **Methodology** discusses **methods/ways/practices** of work (labor/activity/culture/engineering) where agents (people, AI agents, enterprises) are organized into a team (in the case of enterprises — an \"extended enterprise\"), occupy roles within **the division of labor** by \"working methods\"/\"types of labor\"/practices/cultures, and then perform collective work on changing states of some objects, maintaining their roles, i.e., each agent professionalizes in some working method. The main thing is that changing states of objects does not just happen through work but through work by methods/ways of working. Methods continuously evolve, with the best chosen to date. Rhetoric helps understand how agents negotiate. The role dealing with methodology::method is **methodologist**. How to describe an applied method? Methodology precisely provides the answer to this question. You describe methods for creating rockets or growing oats — and this will be the basis for making organizational decisions on how to organize such an engineering project, altering and replacing methods used in organizational work. Methodology deals with working methods called by various terms from a long list of synonyms: \"type of labor\"/\"working method\"/ \"way of working\"/practice/activity/culture/style/\"type of engineering\" and even \"strategy\" turns out to be a working method an agent will adhere to in achieving their goals.\n- **Engineering** (universal/transdisciplinary/fundamental, often called **systems engineering**) is the most general way/method of creating new and modifying old systems to improve the world. Only the most general engineering as a normative working method entered the fundamental thinking methods, used at all levels of organization of systems — from inanimate molecules and nanoparticles to humanity as a whole along with all its material culture, millions of tons of matter. In applied methods, engineering will then be specified for systems of different scales and different types at each scale. All previous levels of thinking methods in the intelligence stack are involved in reasoning about engineering, especially considering humans act as agents, humans and computers, sometimes humans with other living beings (e.g., blind people with guide dogs), and even computers alone (see modern robotics materials). The role implementing engineering methods is **engineer**.\n\nEach thinking method in the intelligence stack, based on fundamental/scale-free discipline/transdiscipline/theory/knowledge, helps grasp the next method/culture/way/practice of thinking in the stack. Although this statement about the stack of thinking methods is rather conditional: all these fundamental thinking methods are closely intertwined in their explanations/theories/knowledge with one another, and their tools (modelers) are the same; it is not very clear what supports what.\n\n**We have chosen such a** **composition** **of methods in the intelligence stack** **and the** **order of methods in it** **mainly for methodological purposes: to facilitate** **understanding** **during the training of strong thinking.** **Of course, in the evolution of knowledge, this set of thinking methods will change significantly, and many alternative variants of the intelligence stack will be proposed, competing with each other. However, our courses will rely on this set of fundamental thinking methods and this order of these methods in the intelligence stack.**",
    "2636dbd81d82a060744ab0c46235b8eb": "---\ntitle: Features of Teaching Material Presentation\n---\n\n**Reasonableness** (a characteristic of intellect showing how capable a person is of changing their behavior after accepting rational arguments) is better in humans than in cats. It's better in cats than in ants. You can explain something once to humans, but you have to train a cat with repetitions to achieve the desired behavior. You can't even train ants.\n\nBut no matter how reasonable people are, life shows that you can't teach someone to ride a bicycle or drive a car with explanations alone, nor can you teach them to do something complex. For example, you can't teach mathematics with explanations alone. You need to solve problems and do exercises. Just reading a math textbook won't help. Repeated actions with the textbook material are required, keeping the brain engaged in reflections on the textbook's topics.\n\nTo master a certain cultural way of thinking (according to the best samples and styles, not just by chance), exercises and repeated mental operations are needed. A neural network learns from a large number of repetitions.\n\nThis also applies to mental operations of focusing on important objects. In our course, these important objects will be various systems that need to be learned to recognize, identify their boundaries, specify their type, find the relationships between them, and be able to describe them and their behavior, and recognize their states.\n\nSince we need to keep the student's attention on the course materials for at least the minimally necessary time to at least somewhat reliably train the neural network of their brain, these materials do not represent a well-structured handbook, the result of the work of a scholar-methodologist. No, these course materials primarily represent the work of a methodologist as a specialist in training agents, primarily humans. The \"wet\" neural network in humans learns through multiple repetitions of the learning materials, preferably in different contexts. This abundance of repetitions is exactly what you see in the course. The course material swells up---but it teaches, unlike the single presentation of the \"exact definition from the textbook,\" which doesn’t work in terms of providing definitions (there is a special subsection in the course about the harm of definitions) and learning. From a single presentation of any idea in a short fragment, there is no training of the neural network, including learning after which it would be possible to perform any working tasks---the material needed for these tasks is simply not remembered, and the teacher-human or teacher-AI who would point the student to the forgotten short fragment may not be present.\n\nIn our course, the main thing is a set of assignments for the student in textual (writing posts) and tabular (filling in tables with prescribed columns) modeling. In fact, the student spends most of their time not with the “textbook” and its attached “workbook,” but rather with the modeler for work projects (writes posts and fills in tables in assignments), to which the “textbook” is attached as “contextual help” for this modeler. For every hour spent working with the modeler, there might be just ten minutes of reading the “textbook.” So reading the “textbook” might be just one-sixth of the time spent on the “course.”\n\nIf you skim through the textbook (three times faster than reading it carefully)---you’ve mastered one-eighteenth of the course material. If you read carefully without doing assignments, you’ve mastered one-sixth of the course. Of course, hoping to master systems thinking without doing assignments is impossible.\n\nAs an example, let's repeat what was just said about the necessity of repetitions in different contexts, rephrasing slightly. The main thing in the course in terms of teaching methodology:\n\n- Keep the \"wet neural network\" of a human-student (that is, you) focused on the concepts of systems thinking for enough time to give the neural network the time needed for learning. Teacher's work can be automated, student's work cannot, as training any neural network requires a large number of operations with a set of concepts.\n- The course material should be repeated in various contexts to be effectively absorbed. This means that re-reading a piece of text five times is useless, so is modeling the same object five times in the same way. The ideas of a text piece need to be read five times in other pieces of text, just as a set of concepts needs to be modeled five different ways for the repetitions to be useful.\n- To overcome natural forgetting, training needs to be repeated multiple times, not consecutively but with intervals.\n\nThe course uses methodological techniques that may surprise a student unfamiliar with them, accustomed to manuals and scientific literature. No, our course materials are educational, they:\n\n- Use principles of \"spacing\" and \"interleaving.\" The text intentionally revisits topics at different intervals (spacing), and simultaneously discusses a mix of three to four topics (interleaving) instead of presenting them in strict sequence. Sequential presentation of topics or grouping of several examples on one topic (blocking) as usually done in reference literature is intentionally absent! The course isn’t a reference book! If you need a reference, you can ask an AI, which will provide a reference from the course material. Students (and if they are children, their parents) intuitively believe that an orderly, compact presentation of material on one topic (blocking) is easier to perceive and better for subsequent recall. But this is a misconception: **experiments show that interleaving and spacing hinder learning because they are harder to perceive but significantly improve learning outcomes**.\n- Some text fragments are repeated in different parts of the course, sometimes after a couple of paragraphs, sometimes after dozens of pages, and sometimes after hundreds of pages. And this happens not just once---some ideas are repeated dozens of times! These repetitions are intentional, considering the necessity of repetition for training the student's neural network, as the human brain does not remember everything from the first presentation. Our course usually takes a month and a half, and by the end of studying the last sections, the content of the initial sections has already been forgotten, described by **forgetting curves**. We understand that not everyone will repeat the course for review, so we have simply embedded some repetitions within a single read-through. But we’re confident that it’s still **extremely beneficial to go through this course a second time, even not just this course but the entire chain of courses in the \"Organizational Development\" program of SHSM**. Why go through the entire chain? Because each subsequent course in the sequence will add understanding of the previous courses' material. If there is difficulty understanding some section, it’s useless to repeatedly read it (of course, if you read it slowly and attentively, not just skimming), just move on: there will likely be an explanation in a few pages, and if you reach the end, the explanation might be in the next course.\n- The issue isn’t that the text of our course contains few repetitions. It’s that the understanding during the second pass through the entire course chain will be completely different! **Experience shows that the second time the course feels like the first: completely different understanding and reading.** However, our course does not differ from any other complex texts. Each complex text conveys a complexly connected graph of concepts. When sequentially describing a graph, \"forward references\" to not yet well-understood concepts are inevitable. Hence, only a double pass is an option: the first time you get acquainted with the concepts, the second time you understand all the connections between familiar concepts. Describing connections between poorly understood concepts is useless: they will be ignored and forgotten.\n- The terminology for the main course concepts is deliberately not fixed: synonymous series/\"trains\" are explicitly used everywhere. You won’t be able to quickly skim through a phrase to understand it! Your eyes will be tripped up by a long synonymous series. Method/practice/ practice/activity/style/culture/type of work---such synonyms will be encountered throughout the text. Each time you need to consciously understand which concept is meant by this list. This is also deliberately done in the course. **In life, you won’t encounter the words from the course (you don’t encounter \"physical bodies\" in life, although the physics textbook talks about them), and the course doesn’t contain life words (the physics textbook doesn’t describe the flight of an empty bottle to the trash can but describes the flight of a physical body to an unknown destination).** Our course prepares for this situation: assigning types from the course to life objects is done based on conceptual similarity (mental models behind used words-terms), not word similarity! Reading the course text becomes slower and more conscious, but that’s good: your brain’s neural network benefits from it! Using a slash for synonymous series is quite common in engineering and English texts, only in literary Russian texts is it unapproved but we ignore this in our case.\n\n**Learning turns out to be the rare case where** **\"spacing,\" \"dispersion,\" \"repetition\"** **and unfixed terminology are beneficial** **for the result. Of course,** **they increase the time for** **learning, but we perceive this as beneficial: \"increase the time the brain works with the course concepts.\" This is beneficial time increase, it's the goal! We need to keep your neural network engaged with the course concepts, the result in establishing systems thinking will be improved.**\n\nIn the systems thinking course (this isn’t in the book, so we highly recommend taking the course in Aisystant instead of just reading the book) you will need to\n\n- Answer questions and provide explanations for these answers,\n- Engage in table modeling,\n- Complete assignments by recording your thoughts on the results in posts.\n\nDon’t be lazy in providing explanations for answering questions: this will help improve your fluency with the terminology. Instead of vague feelings of correctness or incorrectness, \"mumbling in the mind\" (like \"uhhh\" in the mind as a guess about an answer will remain nameless, though the goal of answering questions is to master the terminology and remember arguments), you will have to articulate your reasoning on the correctness of the answer in some text, and terms will no longer \"be on the tip of the tongue\" but not remembered and thus not learned after taking the course. This learning practice of writing explanations for answers to questions will be useful when you interact with colleagues in a work situation in a month or two. Because you can’t tell a colleague an argument in the form of \"uhhh, I feel the answer is this, but I can’t remember why.\" Arguments should be clear and expressed in words, not \"uhhh\" in your head. You will probably need to look at the textbook text to remember the argument, recall the terms, and write the explanation.\n\nHere’s a typical student review:\n\nYes, it seems the real game changer is the exercises.\n\nI remember reading the 2015 text in a half-trance, understanding about 20% (not understanding why I needed it all), just downloading it with one click somewhere. It was tough to wade through it, of course. When I read the new version (last year), I suffered from how long, diluted, and repetitive everything was. Recall of information in both cases I evaluate as the same. Only the course with exercises really cleared the mush in my head.\n\n\"Only the course with exercises really cleared the mush in my head\" is what everyone says after doing the exercises. But only one in ten taking the course attempts the exercises. We hope you are that one person. If you don’t do the exercises, don’t work on the assignments, you'll keep the mush in your head, there will be no benefit from \"reading the course\" (rather than \"taking the course\", which implies doing the assignments).\n\nTo assimilate the material, we don’t advise writing summaries/the exposition of the textbook course material or using underlining of individual phrases---these are student legends about how to learn, but many experiments have shown this is useless and doesn’t improve material assimilation. We advise you to write short texts about all the new thoughts that came to you during the course, in the genre of \"essay,\" not \"exposition/crib.\" It greatly helps learning to publish these notes, for example, in our club. A social media account would also work, although it would be harder to get interesting comments there, but even those comments aren’t that essential. Your own thoughts, your own models coming to mind during the course, are important, don’t lose them. Search for words to describe them, write them down, not so much to share with the world but to keep your neural network engaged with the course material longer. For training the neural network (whether it’s a human neural network or implemented by silicon or even quantum computer), it requires time working with material that includes these concepts. This educational strategy of thinking through writing/modeling is time-tested and highly effective. Again, you write not for an external audience, but for yourself: it's time to keep your neural network engaged in thinking about the course material.",
    "b0b102dcf865baa14d910002d656089a": "---\ntitle: Different ways of thinking\n---\n\nThere are two main civilizational paths, conventionally called \"Eastern\" and \"Western.\" **Conditional** **\"Easternness\"** consists in recognizing the unfathomable complexity of the world, the inexpressibility, and incommunicability of human experience in understanding this world. **Conditional** **\"Westernness\"** relies on rationality. Rationality---comes from the Latin ratio, meaning \"reason,\" \"explanation,\" but also \"relation,\" i.e., associated with division into parts, analysis. Of course, rational (logical, non-intuitive, non-\"Eastern\" type) thinking equally helps in synthesizing, combining the analytically torn apart parts into a whole. But in Western culture, historically, great importance is attached to logic-based \"analytics,\" i.e., formalization and modeling. Rationality---is one of the methods of thinking within the intellect stack, more about rationality is taught in the course \"Intellect Stack.\" Formalization and modeling in rationality are done based on stated guesses-explanations about what is happening in the subject area, and are not derived \"empirically\" from some observations, so rationality is not only opposed to the Eastern tradition of \"unfathomability\" but also to the Western tradition of \"relying on experience, observations, the derivability of explanations from observations.\" These guesses can then be criticized, and decisions about actions to improve the world, \"salvation,\" are made based on the guesses that survive the criticism about how the world works. Decision theory is studied as part of rationality theories. The proposal of the concept of a \"system\" as crucial for describing the world is precisely a move towards rational cognition/knowledge extraction/learning/cognition.\n\nThe results of this \"Western\" path of civilizational development can be observed. It is Western civilization that gave modern science and engineering, computer-based management, the stock market as an infrastructure for reallocating investments in support of new methods of work^[Read more about the advantages of rationality over the Eastern reliance on intuition and \"immediate knowledge\" in the texts by A.Levenchuk \"On articulated and holographic in sociology\" <http://ailev.livejournal.com/1281819.html> and \"On intuition and insight\" <http://ailev.livejournal.com/1295595.html>.], that is, investments in training agents in new skills, producing new tools.\n\nUnfortunately, rational and logical thinking, as well as many other thinking methods applicable to various problem-solving situations, are not directly taught in schools and universities today.\n\nToday, among school and university educators, the prevailing opinion is that some \"good\" or \"strong\" thinking (and don't ask what this is! Educators won't have an answer!) can be learned based on in-depth acquaintance with the subjects of so-called **STEM**^[Definition of STEM: <https://en.wikipedia.org/wiki/Science,_technology,_engineering,_and_mathematics>]: science, technology, engineering, mathematics. Unfortunately, educators' assumptions about indirectly teaching thinking through STEM subjects do not hold true, each thinking method needs to be taught directly, not indirectly^[Lei Bao and others have shown that reasoning ability and thinking training based on a set of concepts are not the same thing, <http://arxiv.org/ftp/arxiv/papers/0807/0807.2061.pdf>. The study of physics turns out to be not so \"mind-adjusting\" --- A historically held belief among educators and researchers is that training in physics, which has a beautiful structure of logical and mathematical relations, would in general improve students' abilities in conducting reasoning that is intellectually challenging. However, the result from this study suggests that training in physics content knowledge in the traditional format alone is not enough to improve students' general reasoning abilities).]. If you were taught to solve physics problems, you won't be able to think universally, but only solve these physics problems. If you were taught to solve math problems, this thinking ability does not transfer to other subject areas, you won't be able to reason better about dancing or rocket launching. So the methods of thinking of the intellect stack, including rationality, need to be taught directly, not \"indirectly\" through teaching other working methods.\n\nFor example, if logic needs to be taught, then it should be taught directly, not through computer science and geometry. In school courses, logic remains only within the framework of studying logical expressions in programming and in geometry, where only theorem proof remains.\n\nOur course on systems thinking is intended to fill this gap in teaching thinking using methods of the intellect stack, although partially, as it touches on a small area of explanations of a few disciplines related to the concept of \"system,\" and not the full set of intellect stack methods. Our course teaches directly systems thinking as the use of systemic approach concepts in various thinking methods, although it does not address many other concepts from these thinking methods. For example, the hierarchy in terms of composition/part-whole in the course of systems thinking is more or less detailed, but other types of relations are only mentioned. In modeling courses (for example, \"Rational Work,\" where ontological thinking is studied in detail), thinking operations with hierarchies in terms of both composition and various other relations, primarily classification (type assignment), specialization (subtype assignment), as well as the use of modeling tools, are studied. In the course of systems thinking, these type assignment operations are not studied but simply used, considered known from previous courses. At the same time, there are enough repetitions of these operations usage in our course for you to understand and practice fluency in using the knowledge gained in the course \"Rational Work\" about these operations working with types and relationship hierarchies.\n\nSo, once again (this was already discussed in the first section, and more detailed in the course \"Intellect Stack\"):\n\n-   Intelligence---is the thinking skill of solving problems that neither students nor their teachers have encountered before. It is the thinking skill of knowing, endlessly solving more and more complex problems, ultimately leading to survival through evolution (that is, the survival of both an individual organism right now and the survival of the genome in the evolutionary future). Solving a problem involves proposing a method to reduce the problem to tasks that have a method of solution, so intelligence actually creates new working methods.\n-   Function:: behavior/behavior of intelligence---thinking. A computer computes, but intelligence thinks, thinking is a class of computations. If we know how to solve a particular task (not a problem! A problem is when we do not know how to solve it!), then we do not think, we simply reason by the rules/algorithms/disciplines of a particular method known to us (besides knowledge/algorithms, a method usually provides for the involvement of some tools, for example, a modeler for thinking or even using AI to carry out part of the reasoning). Without involving intelligence, there will be applied reasoning/computation/inference by the applied method.\n-   Intelligence/thinking skill is a cumulative set of different types of thinking skills, both activity/practical/practical computing units, following algorithms/knowledge/theories from thinking methods. Each specific type of skill is a specialized computing unit, implemented today in its strongest/universal forms by a trained wet or silicon neural network of a human or a computer. Thus, thinking is computing by some method, largely neural network-based, hence difficult to discuss as \"algorithmic,\" it often occurs not in local/symbolic representations, but distributed ones. But the difficulty of presenting in symbols does not mean it's \"getting information from space/vacuum\"! No esotericism!\n-   Each method/practice/culture/style/activity of intellect thinking---is fundamental/scale-free. It includes theory/knowledge as a transdiscipline (transdiscipline---is theory/knowledge/explanations/algorithms, used in various other applied methods). The methods of intellect thinking make up the intellect stack (since we conditionally consider them ordered to the extent that explanations of some methods make it easier to explain other methods). Apart from transdiscipline/\"fundamental knowledge,\" a method/practice of intellect thinking implies the use of some tools to support this transdiscipline, as thinking extends beyond a particular computing unit (extended cognition, knowledge extends beyond the cognizer). Previously, the tool for enhancing thinking for fundamental thinking methods was a pen and paper, but now it is more often a computer with some modeling programs/modelers. And in the case of applied methods, in addition to computer-based modelers, tools changing the physical world will also be involved. This can be an excavator or a CNC machine, but in the simplest cases, human hands are enough. Even \"observation\" is a separate action, for this, a telescope on a satellite can be used, but muscles turning eyes can be sufficient. Thinking::computation thus is a function/method/practice of skill::computing unit work, including the involvement of explanations/theories/algorithms (algorithms are not necessarily step-by-step/imperative) from the transdisciplines of intellect stack thinking methods, and implies support from modeling tools and can even include world alterations during measurements or the creation of new tools to extract data. The ultimate goal of thinking as an intelligence function is to create applied methods that allow work to change the surrounding physical world for the better, for example, creating comfortable cities, ultra-fast quantum computers, healthy immortal bodies (including one's own), an abundance of tasty and healthy inexpensive food. **Fundamental methods of the intellect stack allow reasoning about applied methods and creating them as needed, then the newly learned applied skill knowledge of these newly created applied methods** **engages tools (sometimes already known, sometimes specially developed to support the new method)---** **and changes the world for the better**.\n-  Logic, ethics, algorithmicity, rationality, etc., in thinking must be taught through the textbooks and assignments (e.g., modeling assignments) of these thinking methods (drawing on the disciplines/theories/knowledge/explanations of these methods and the tools of these methods, primarily modelers), and not \"indirectly\" through textbooks and assignments of other subjects. **Learning physics does not provide** **direct knowledge of** **semantics, logic, ontology---** **without this, you won't get smarter!** **Physicists are not smarter, they just know more** **about** **physics!** **Smart are those who possess** **all the thinking methods** **of the intellect stack, which includes physics. At the same time, physics in the intellect stack is included** **not in the part**  **of applied thinking methods** **of any physics sections (optics, mechanics), but in the part of mastering physical thinking** **itself: how to** **think** **about changes in the physical world** **in various situations. For instance, the very concept of** **\"system\"** **in systems thinking** **once came from such** **physics** **(and not from some \"section of physics\"): system---** **is a part of the world, somehow separated (boundary of the system) from the rest of the world (the environment).**\n-   Methodological/labor/practical/engineering/cultural/stylistic  horizons also need to be taught (for the neural network, this is \"broadness of view,\" a sufficient number of viewed examples), not just acquired \"from life experience in enterprises,\" that is, \"indirectly,\" over a long time. Management, human and AI training horizons---this all needs to be learned, and learned quickly, not just \"live long and you'll know everything.\"\n-   The very **systems approach** **(systems approach)---** **is a rational (successful guess, having withstood criticism and taken seriously, that is, as a basis for decision-making about world changes) idea**  **that the whole world consists of** **nested at multiple levels and interacting with each other** **systems** **as physical objects.** **System/system---** **is a fragment of the** **physical** **world taken under consideration within certain boundaries (system boundary), interacting through certain parts** **(subsystems)** **within itself, as well as interacting with the remaining world beyond the boundary** **(boundary)** **of the system** **called the environment.**",
    "6900447af6394a23ec34bded8b052f30": "---\ntitle: Formats for Describing System Levels\n---\n\nSystem levels consist of a hierarchy in the part-whole/composition relationship. These hierarchies are seemingly convenient to depict with a \"tree\" graph, like the one we just discussed in relation to naming systems in relation to the target system. This is suitable for illustrative purposes, not for work. Graphical models are extremely inconvenient for editing and modifying. When developing system breakdowns and coordinating them in the project team, you will need to quickly (this is key) change versions of the system breakdown. For this, we suggest using an \"outline,\" a textual representation of the hierarchy tree, where each level is represented by an indent.\n\nHere is the previous picture as an outline, with the same numbers as in the picture:\n\nSupersystem (1)\n\nSystem in the Environment\n\nSystem in the Environment (3)\n\nTarget System (2)\n\n- Subsystem\n- Subsystem (4)\n- subsystem\n\nOf course, these names (like any terminology) are more or less conditional. For example, in TRIZ the supersystem is simply called the supersystem, while English-speaking system engineers usually do not use the word \"supersystem\" (very rarely non-engineers say suprasystem, but not supersystem), although they do say \"subsystem\" (subsystem).\n\nIn the fundamental system engineering standard ISO 15288:2023, they do not talk about all these types of systems, emphasizing their similarity: only the target system (system-of-interest) is distinguished as the top of the system breakdown. \"Higher in the system levels\" are immediately \"systems in the environment,\" which are considered separately, including the supersystem itself. In the composition of the target system in this standard, there are only systems (if these systems have parts) and system elements (elements, if a decision was made not to consider their parts but only to limit to the existence of these system elements as wholes, being parts of their supersystems).\n\n\n![](07-formats-for-describing-systems-levels-33.png)\n\n\nLet's give this picture as a multi-level list/outline, simultaneously translating it into English:\n\nTarget System\n\nSystem\n\nSystem Element\n\nSystem Element\n\nSystem\n\nSystem\n\n- System Element\n- System Element\n- System Element\n\nSystem Element\n\nSystem Element\n\nSystem\n\nSystem Element\n\nSystem Element\n\nSystem\n\nSystem\n\n- System Element\n- System Element\n\nSystem Element\n\nSystem\n\n- System Element\n- System Element\n\nSystem Element\n\nThe picture and text here are of roughly the same clarity, as very few elements are presented in the system breakdown. Now imagine having to depict 500 elements (scope of the problem: in an airliner or an ice drilling platform there are 5-6 million elements). A diagram-picture will immediately fit only on many pages that are hard to match with each other; it won’t fit on any computer monitor, and if you break it into parts, it will be completely unreadable. Edits in this diagram will be very long, and many edits will lead to errors.\n\nA text version with an outline is easy to edit; it easily stretches into simply \"long text\" (people are used to working with multi-page texts using scrolling), long names fit freely into the line (you can even add comments!). So use outlines/outlines/\"nested lists\"/\"multi-level lists\" to work with system breakdowns.\n\nAn alternative way is to use explicit level numbering as a separate list element. Here's the same structure as in the previous list, but presented in tabular form (for example, in an Excel table). The target system as a whole in our representation does not have a code, and the number of positions in the code is the system level (1.3.1.1 – this will be the fourth level if the target system is at the zero level. Unfortunately, the ISO 15288 standard has a typo in the level numbering on the picture, the fourth level is shown as the fifth!)\n\n+-------------------------------+-------------------------------+\n| System Code                   | System Name                   |\n+-------------------------------+-------------------------------+\n|                               | Target System                 |\n+-------------------------------+-------------------------------+\n| 1.                            | System                        |\n+-------------------------------+-------------------------------+\n| 1.1.                          | System Element                |\n+-------------------------------+-------------------------------+\n| 1.2.                          | System Element                |\n+-------------------------------+-------------------------------+\n| 1.3.                          | System                        |\n+-------------------------------+-------------------------------+\n| 1.3.1.                        | System                        |\n+-------------------------------+-------------------------------+\n| 1.3.1.1.                      | System Element                |\n+-------------------------------+-------------------------------+\n| 1.3.1.2.                      | System Element                |\n+-------------------------------+-------------------------------+\n| 1.3.1.3                       | System Element                |\n+-------------------------------+-------------------------------+\n| 1.3.2.                        | System Element                |\n+-------------------------------+-------------------------------+\n| 1.3.3.                        | System Element                |\n+-------------------------------+-------------------------------+\n| 2.                            | System                        |\n+-------------------------------+-------------------------------+\n| 2.1.                          | System Element                |\n+-------------------------------+-------------------------------+\n| 2.2.                          | System Element                |\n+-------------------------------+-------------------------------+\n| 2.3.                          | System                        |\n+-------------------------------+-------------------------------+\n| 2.3.1                         | System                        |\n+-------------------------------+-------------------------------+\n| 2.3.1.1                       | System Element                |\n+-------------------------------+-------------------------------+\n| 2.3.1.2                       | System Element                |\n+-------------------------------+-------------------------------+\n| 2.3.2.                        | System Element                |\n+-------------------------------+-------------------------------+\n| 2.3.3.                        | System                        |\n+-------------------------------+-------------------------------+\n| 2.3.3.1.                      | System Element                |\n+-------------------------------+-------------------------------+\n| 2.3.3.2                       | System Element                |\n+-------------------------------+-------------------------------+\n| 3.                            | System Element                |\n+-------------------------------+-------------------------------+\n\nOf course, in this table example \"system\" and \"system element\" are types (from the meta-meta-model, types of important system approach objects) of those objects that will be specified in such tables or types of the meta-model \"from the domain textbook,\" or even types of the enterprise's meta-model, or even for a specific instance of a system – names of specific physical objects. That is, the table will not have \"system,\" \"system,\" \"system,\" but for a car \"chassis,\" \"left wheel,\" \"engine,\" for a sailboat \"boat hull,\" \"mast,\" \"mainsail\" and so on.\n\nEach time, use the translation of graphic representations into hierarchies, and then represent hierarchies in tables – otherwise, you will not cope with the maintenance, you will not be able to make numerous changes. Formats should be convenient not for \"presentation,\" but for change: descriptions of systems (including the description of system breakdowns) are the subject of continuous negotiations in the project team, and therefore – the subject of continuous changes. Formats are tailored for the convenience of changes, any \"clarity\" of simple examples \"from the textbook\" and \"from the standard\" should not distract: you don't need to change textbooks and standards, you don't need to break their images into multiple pages. Use table representations (including for working with system breakdowns), it will be convenient.",
    "ccbce0c06eb8bef1aef8ac82c2972756": "---\ntitle: Target System and Collective Systems Thinking\n---\n\nIn order to conduct systematic (i.e., using the concepts of a systems approach) reasoning, one needs to learn how to focus their attention on different systems within a multi-level system breakdown --- and on levels above the target system, and the levels below the target system. A systematic thinker views everything in the world as systems, which are themselves subsystems of higher-level systems and have subsystems of lower levels. Therefore, it's essential to identify one among them whose characteristics interest us, and which we attempt to change in the world to realize this interest/preference. This system, highlighted by the agent's attention (subjectively! Convenient for the agent's role-playing method!), will be the **target system** (system-of-interest). This is the future successful system with which \"the project team\" wants to do something: invent and create it, repair, operate, destroy.\n\nOne can then discuss any system level above and below the level of the target system, but the focus of \"the project team's\" attention remains on this system, and the system effect of this system interests us foremost. One attention camera of each agent involved in the project always holds the target system, other attention cameras for different roles played by these agents might wander across different systems of other levels and systems in the creation chain. But each agent keeps at least one camera fixed on the target system throughout the project, not forgetting about it.\n\nThe metaphor here is polar coordinates, all (collective! Not just one role!) thinking revolves around the target system. It's the reference point, attention movement in systems thinking is measured from it. If lost in long discussions among the myriad systems in a project, return to the target system and then proceed along the chains of various relations (primarily composition and creation relations) to all other systems. The target system provides stability of attention for diverse roles in collective projects.\n\nFor different roles, target systems represent very different physical objects, but in collective activities, it's assumed that all roles performing methods of continuous creation and development of the target system (everything happening to it from conception through many upgrades to discontinuation of use) **agreed** on what this system is, where its boundaries lie. **Systems thinking primarily supports not the thinking of an individual but supports collective thinking** **in an organization as a group of agents who can** **by a known method** **(this method is** **some type of** **management)** **manage their collective labor and resources**. Organizations are project teams, enterprises/companies/firms, non-profit organizations, clubs, study groups, and others where it's clear \"who's the boss\". If it's a community, there might not be a boss, and systems thinking around one target system might not happen, and there won't be agreements on what to do (about the target system). But if the community is organized by someone and formal entry into the community means the organizer's requests are met to some extent, systems thinking might be in order (or might not be if people have not been specially trained in it).\n\nSystems thinking helps agents (including people) agree on their actions and primarily on which system interests them, which system is the target, what the boundaries are (what is included and what is not in the target system's composition). Thus, **systems thinking is** **collective thinking, not the thinking of one** **agent, it assumes agreements on the subject of activity, i.e., the target system**. **The target system is not yours::agent, not that of just one role, it's shared by the project team**, and the team agrees on it (including external project roles participating in these agreements). **Indeed, one can imagine one agent engaging in systems thinking, but this agent would have to perform many different roles and therefore couldn't leverage labor division ---** **high expertise in executing specific roles. The creation of complex systems is possible because systems thinking allows different agents, each highly skilled in performing different roles, to agree ---** **visionaries, designers, architects, production platform engineers, etc.**\n\nThe target system is usually conceived **at the moment** **of its use** (operations, exploitation, functioning, work) already as a finished system, interacting with its environment and playing its role/performing a function. That is, \"airplane\" is thought of when it flies, \"computer\" when it calculates, \"skill\" when work according to this skill is performed. The target system during its creation is not yet in the state of doing something, performing a function. While creating the system, we think more about the functions of creators in terms of changing the state of parts of the future target system, which change their states during production and assemble into a finished system; this is all \"creation time\". Whereas when thinking about the target system and system levels, it's the time of use/exploitation/functioning/work of the target system.\n\nThe diagram shows a system (by composition relations) hierarchy with three system levels, systems shown as circles, arrows with diamonds indicating composition/decomposition/composition/part-whole relations, and the target system shown as system 2:\n\n![](06-targeted-system-and-collective-systems-thinking-32.png)\n\nThe system that includes the target system is called the **supersystem**. In the diagram, this is system 1. The clock will be the supersystem for the gear, the molecule a supersystem for the atom. The target system has its function (behavior with expected outcomes) in the supersystem, allowing the supersystem to ultimately exhibit emergent properties by performing the supersystem's function. The function of showing time in clocks as a target system in an interior as the supersystem helps the interior be convenient for living.\n\nRemember that all systems are defined primarily by their function in the supersystem, playing some role in it. And the supersystem is also a system, needing to perform its role in a super-supersystem (not shown in the diagram, but it always exists!).\n\nIf the target system is a gear, the gear is used in the clock (part of the working clock as the supersystem), its role \"motion transmitter\", function::behavior --- transmission (for functions we use verbal nouns) in the supersystem-clock motion to the hands so that the clock can show the time, i.e., the supersystem (clock) can \"perform its function\"/work.\n\nAll systems at the moment of target system operation, which are not part of the target system, are called **systems in the environment** (environment, operation environment, operating environment --- the term \"environment\" is preferred, highlighting the central role of the target system, whereas the term \"medium\" does not imply an explicit center). **The environment is always at the moment the finished system operates.**\n\n**When** **the target** **system** **(likewise, a subsystem or supersystem)** **is created, another consideration applies:** **some systems of creation will be centered while future systems are still in inoperative states of \"raw material\", \"semi-finished products\"**. In the diagram, creation systems (conditionally shown as an organizational link of people) are depicted separately from the systemic breakdown hierarchy; it's generally a different time (creation time, not the time of use/exploitation/functioning/work of the target system, its subsystems, and its supersystem).\n\nA common mistake is to consider creation systems (enabling systems, constructor systems) to be in the system’s environment. No, they do not fall within the system levels of the \"part-whole\" hierarchy to which the target system belongs. Their relationship with the target system (and other systems of the discussed system levels, i.e., supersystem, subsystems) --- is a creation relationship (not shown on the diagram).\n\nIn the diagram, one environment system (among many!) is system 3. For example, for a gear in a clock, such an environment includes the hands, also part of the clock. Additionally, systems that do not belong to the supersystem but are essential for discussing the work/functioning of the target system might also be in the environment --- though they belong to a super-supersystem. For instance, the sun heating the clock and influencing the gear (it may change its size when heated, affecting its main behavior --- precisely transmitting movement, influencing the supersystem's behavior --- accurate time display). **The environment includes systems from the supersystem, super-supersystem, and beyond. The main point is that the environment is outside the target system's boundaries and refers to a time when the system operates and performs its function (not when it is conceived, manufactured, tested).**\n\nThe fueling station for the target system taxi, part of the taxi fleet as a supersystem, is an environmental system. The road for a moving taxi is an environmental system. Again: it is not necessary for an environmental system to be a subsystem of the supersystem, a \"peer\" of the target system. Sometimes, all other (except the target system) subsystems of the supersystem are specifically distinguished for the target system, called **near environment**, while systems beyond the supersystem are called **far environment**. For a car engine, part of the car as a supersystem, the car's interior and wheels are the near environment, subsystems of the car. But the road and the scorching sun are systems from the far environment.\n\n**Subsystem** --- a part of the system. In systems thinking, subsystems at the time of their usage are mainly viewed as roles, functional objects, only after considering the environment and defining the target system's function in the environment --- because until we understand what the target system has to do, what function/behavior it carries in the environment, we can't identify its composition, let alone discuss its construction (what structures, involved in creation time, play the roles of distinguished subsystems). In the diagram, an example of such a target system subsystem is shown as number 4.\n\nThe problem is that the target system for different projects can be any system displaying an interesting emergent property, a desired systemic effect for them. And then all other types of systems will be defined differently. For instance, if system 4 is declared the target system in a project, system 2 will be its supersystem in that project. If everyone in that project agrees that the target system will be system 4, so be it --- naming different systems in that project will be different, though the composition of systems in the systemic hierarchy will be the same. If a firm designs interiors, they will have the \"target system\" as the interiors, but if it designs clocks for interiors, the \"target system\" will be the clocks, and if it mass-produces gears (including for clocks) --- the \"target system\" will be the gear. All discussions will revolve around target systems. How about interaction between projects? Agreements will be necessary: participants in these three projects will be \"external roles\" for each other. There might be no interaction between the interior design project and the gear manufacturing project, but the clockmakers will have to communicate both with clients --- the interior design firm, and suppliers --- the gear manufacturing firm.",
    "62dc50b5092585be863f0d0f70f726d9": "---\ntitle: System Partitioning\n---\n\nSystems simultaneously act as a whole for some of their internal parts (subsystems) and as parts for a more encompassing whole system (supersystem). Each subsystem is also a whole for its own sub-subsystems (relative to the original system), and each supersystem is part of a super-supersystem. Thus, one can speak of hierarchies of **system** **breakdown** from top to bottom, or hierarchies of compositional (composition) system wholes from bottom to top. If we do not plan to further divide a system into parts, it is called a \"system element,\" emphasizing that there is a whole system somewhere for which this subsystem is an element: \"a part that is not further divisible into parts.\"\n\n**Levels in hierarchies of system partitioning**\n**(hierarchies/\"tree-graphs\" built based on the composition/“part-whole” relationship)** **are called system levels.**\n **System levels are identified in the physical world through attention, for their identification there's no need to “break” the system into parts! Physically breaking functional parts or organs, for example, a living/functional/working organism –** ** it will be dead afterward! Therefore, system partitioning is performed only through attention! No need to dismantle or assemble anything! But shifting attention from larger to smaller parts and back is necessary. Tracking to ensure that no other types of relations (such as classification or specialization) enter the hierarchy relative to the \"part-whole\" relationship is also necessary. Policing that no mental object accidentally gets included in physical partitioning is necessary as well.\n\nA classic example of system partitioning is the classification from biology into system levels (from smallest to largest) atoms-molecules-cells-organs-organisms-populations-biocoenosis-biosphere. In biology, besides \"system levels,\" terms such as \"levels of organization,\" \"evolutionary levels,\" and \"complexity levels of life\" are also used.\n\n![](02-systems-partitioning-27.png)\n\nYou see that systems are indicated on the schematic system hierarchy with circles, and **arrows-diamond traditionally indicate composition relationships, where the whole system is on the diamond** **side of the arrow. The diagram shows that cells consist of molecules, but cells themselves are parts of organs. Organs consist of cells, but organs themselves are parts of organisms.\n\nThe word \"consist\" (composed by) does not mean that you can break organs into cells and then reassemble organs from these cells. No, this \"consist\" refers to the fact that you highlight different organs in a working organism with your attention, in organs you highlight cells with your attention, but you can also focus attention in reverse order: in a working organism, combine cells into organs with attention, and organs into the organism. There's no need to physically disassemble anything, system levels are only for managing attention in situations with many objects that consist of other objects and are themselves parts of other objects. System levels are defined by the work of attention (which agents agree upon in their projects to coordinate their work), they are not \"objective,\" meaning different agents will suddenly find the same system levels in different situations, different projects! On the other hand, systems: \"objects of some system levels\" are not chosen randomly: in the physical world, systems are usually stable, they do not easily yield to entropy, they are not easily destructible. Also, system levels are often culturally conditioned, and this cultural conditioning is somehow maintained by language. The fact that \"a smartphone consists of a screen, case, cameras, battery, and some electronic stuffing\" is already common cultural knowledge, no special agreement is needed today (but at the time of creating the first smartphones, it was necessary). What exactly belongs to the case, and what to the screen (say, is the protective glass part of the screen, or is it part of the case?), what will be included in the cameras (a chip supporting exclusively the work of the cameras – is it part of the cameras, or \"some kind of electronic stuffing\"? Are the mounting rings of the lenses part of the cameras, or part of the case?) – these decisions will depend on the specific project teams even today.\n\nThe diagram does not show the system levels of biocoenosis/ecosystem, followed by the biosphere (they are above the population level). There are studies showing the inevitable growth of complexity levels, which means the inevitable unification of parts into increasingly complex wholes on many system levels^[<https://www.pnas.org/doi/10.1073/pnas.1807890115>].\n\nThe diagram also does not show the levels of atoms and elementary particles (they are below the molecular level), but this does not mean they do not exist: **assumption**\n**of open world**^[<https://en.wikipedia.org/wiki/Open-world_assumption>]**,**\n**“what is not said** **in our text,** **just not said,** **but this** **does not mean it does not exist”.** Thus one should read system diagrams that any top level on them is not the highest level (one can always find some supersystem, ultimately all systems are part of the universe or, in some physical theories, part of the multiverse as an infinite set of universes). Molecules are shown on this diagram as elements (no longer divisible subsystems) of cells, but they are also subsystems, their indivisibility is conditional, it simply is not considered in the activities for which this diagram is made. Thus from below, one can always find parts that seem like \"elements.\" For the current project at the bottom of the systems hierarchy, there can be indivisible \"elements,\" but ultimately the division goes down to the \"below quarks\" level, i.e., those smallest physical objects from which quarks are composed (these objects vary greatly among different physical theories).\n\nThe set of system levels at which a system is considered always depends on the project. In another project from this same breakdown, another set of levels might be taken. In one project, you might see a detailed breakdown of a house into separate walls, roof, foundation, and utilities, while in another project – the breakdown of several city blocks into houses, but within the houses, you won't see walls, roofs, foundation, utilities, as \"elements\" in this project are houses. In a third project (say, a developer company project) both a detailed description of \"city blocks\"::“system level,” including houses, benches, individual trees, and \"houses\"::“system level\" will be broken down into parts. For the developer company, it's important not only to position houses::subsystems within \"city blocks\"::system, but also to build them, and for this, to design their structure from subsystems (and further subsystems of these subsystems – to systems of the smallest level, on which the design and manufacturing of houses are carried out, i.e., down to the level of planks, nails, bricks, electrical outlets, etc.). But the details inside an electrical outlet in the course of designing a house are unlikely to be taken into account – but these will concern the design bureau and the factory that will produce electrical outlets for the house).\n\nAccording to our version of the system approach, we will require that system partitioning be completely physical/material: each system level is distinguished by the part-whole relationship between material items, which occupy some places/volumes in space-time. Students need to remember: if non-material parts appear in their system partitioning, then in system thinking it's like 2\\*2=5, and for such an error, they immediately receive two points and are sent for a retake. We can't advise firing adults for such mistakes, but we are very close to such advice.\n\n**There should be enough attention to track the physicality of the part-whole relationships several levels down and up. If there isn't enough attention for such tracking** **(considering that this attention is supported by records – it should not all be kept in mind!), then something needs to be done, for example, re-take the course \"Rational Work\" (honestly completing the assignments). Working with absent attention is impossible,** **wandering unconsciously in thought into a non-physical world or confusing what is part and what is whole is** **dangerous** **for the project.**\n\nMulti-level system partitioning is fundamental: at the very top level of any such partitioning, potentially, will be the universe and at the lowest level – superstrings, but these extremes interest few, so system partitioning is done for a certain range of sizes of physical objects. For human activities, a very small range is extremely important, somehow proportional to the size of humans themselves. These not-too-big-and not-too-small in cosmic and microscopic scales systems are the subjects of activity – most often from a few kilometers (e.g., construction projects: skyscrapers, dams, bridges) to a few nanometers (transistors on computer chips). Humans (with their tools! Not necessarily with hands!) most often interact with objects/systems within this small range of sizes. There is a lot of interesting stuff outside these sizes in cosmophysics and micro-world physics, but for now, people find it more convenient to change the world within these limits, and not go beyond them.\n\nExplicit indication of the system level is important for managing attention. Formally, touching a flower on a plant (the \"organs\" level in the partitioning scheme of plant organisms) means I am touching the universe (the flower is part of the universe!), I am touching elementary particles (there are definitely elementary particles in the flower!). Or touching the entire plant, and the cells of the plant as well. It's unclear what I touched, what is the object of my attention! Therefore, it is required to clearly specify the system::“object of attention,” which somehow allows specifying the scale of \"touching.\" In our example, it would be – \"flower.\"\n\nWhen I wave my hand, I wave all the molecules of my hand – but it's not correct to talk about molecules when talking about waving a hand? And not right to \"wave a body\" (too big an object). Therefore, \"I wave a hand\" – I wave a system, which is many system levels higher than molecules, but still lower than the level of the whole body.\n\nSystem levels are fundamental, they reflect the very essence of the systems approach – at each system level, because of emergence/system effects, new properties appear, which is why most often **discussions are held separately for separate system levels** **by agents who deal with the properties manifested by systems at this system level, as well as** **properties of supersystems that arise from the properties of the systems of the current level. Roughly speaking, cells are discussed by a microbiologist, the human organism as a whole –** **by a medic, collectives of people –** **by a manager. Separate detailed discussions at each system level** **significantly simplify the discussion of complex systems.** If you are discussing an enterprise, then discuss people, equipment, material reserves, buildings, and structures, but usually, there's no need to discuss the planetary system around the Sun, part of which the enterprise is as part of the Earth, or the biochemistry of cells in people, as biochemistry is part of the enterprise.\n\nRemember that discussing a problem at too low a system level is a reductionism error, discussing a problem at too high a system level is a holism error. The right way is to keep the discussion at three levels:\n\n-   the supersystem in its environment and its properties. For example, the computer as a whole, its characteristics (dimensions, weight, power consumption, performance according to recognized tests)\n-   the target system as a whole and other systems as wholes at the same system level within the supersystem. How the joint work of systems at this level affects the state and properties of the supersystem. For example, the central processor as a target system, memory, motherboard, power supply, fan/cooling, case.\n-   subsystems of the target system: how their joint work (interaction) affects the states and properties of the target system. For example, for the central processor – cores with arithmetic logic units, multilevel cache memory, input-output blocks. And here is a test of attention: if you imagine a \"real\" (and not from a diagram in a book) central processor, you will see a plastic-encased chip (or several \"chiplets\") with leads, and already on the chip some zones with those cores with arithmetic logic units, multilevel cache memory, input-output blocks.\n\nIt is easy to shift this down a level: considering\n\n-   transistors (subsystem level) within some\n-   cache memory in the central processor (target system level) and how the characteristics of this memory and other IPs will affect the characteristics of the\n-   central process (supersystem).\n\nIn any case, typically they discuss \"what we do\" (target system), \"what it consists of functionally, what is made of constructively\" (subsystems), \"what will it be part of\" (supersystem). In any case, you **usually need at least three system levels for discussing a system, you will discuss various characteristics of objects at these levels, these discussions will involve different roles, and what system level your target system will be on –** **depends on the project. What is a target system for one project –** **a supersystem for another, and a subsystem for a third.**\n\nEngineers typically describe system partitioning through the description of types (e.g., \"airplane\"), but in reality, these types of objects correspond to physical items categorized under this type (airplane with tail number 128, airplane with tail number 2467, etc.). At the same time, philosophers (but not us in our course) often discuss system levels with arbitrary parts, including abstract ones^[<http://en.wikipedia.org/wiki/Holon_%28philosophy%29>] – and there, the \"part-whole\" relationships are defined very differently.\n\nWe prefer the approach of engineers over philosophers. If a manager (enterprise engineer) or politician (social engineer) thinks like a philosopher, mixing mental and physical objects in the same kinds of hierarchies, they might lose touch with reality, striving for the realization of some highly attractive utopia. Utopias are distinguished by being very attractive, but their flaw is that they are unachievable: the world will change, but not for the better! For example, there might be such \"struggle for peace\" that not a stone will be left unturned – the result of the desire for peace will be war, the direct opposite!\n\nUtopias (descriptions of an unrealizable physical world) are arranged precisely like this: wanting abundance (communism), but ending up with ration cards, a hungry life. We need systems to be both attractive and realizable in the physical world with the intended characteristics, not \"as it turns out.\" We are not just dreamers, we are doers/practitioners/engineers. Modern system thinking is arranged to keep attention on the physical world at various levels of scale/system levels with the help of the concepts of the systems approach. And mental objects? We will work with them precisely as descriptions, in the extreme case as descriptions of descriptions, but ultimately as descriptions of the physical world.\n\nThis keeping attention on objects of the physical world is stabilized (focus!) through documented information models that also help to predict the characteristics of future systems. Physical models (like models of aircraft in wind tunnels) are now used less and less, but information models help to keep attention on objects of the physical world, and prepare detailed and consistent descriptions of these objects. More about how mathematical and physical objects (studied by mathematics and physics, respectively) are related, and how we work with semantically expressed models of these objects, will be discussed in the \"Intellect Stack\" course.\n\n**Simulated/maintained in attention at different** **“size levels”/“system levels”/“composition/breakdown levels”** **interacting** **physical systems that are created and developed by other physical systems-creators –** **this is the subject of system thinking.**\n\nDue to the division of labor, different roles in a project, for the same target system, may have their own objects of focus at different levels – subsystems or supersystems. “Objects of focus”/”significant characteristics” are emergent, so one can expect them to exist at certain levels and be absent at others – but this is the subject of multi-level consideration, that they all depend on each other, even if they are at different system levels. The precision of a clock's operation is not at the level of gears, there is precision of manufacturing. But the precision of manufacturing gears affects the precision of a mechanical clock. Therefore, the clockmaker has an interest in getting the most precisely manufactured gears. The gear manufacturer, on the other hand, is interested in minimal precision for the received price (no problem to increase precision, but then the price will grow too – up to the unacceptable for the clockmaker). The clockmaker and gear manufacturer negotiate to reach an agreement.\n\nThere is no “true” or “objective” as independent from role interests partitioning a system into parts, although usually, more or less stable objects are distinguished as parts, but even this stability can be assessed differently by different roles. **For the same system in the project** **for creating the system** **several options for breaking it into parts are usually considered simultaneously. At minimal, usually, they are fragmented into**\n\n-   **Functional/role parts,** **interest area “how it works”**\n-   **constructive/material parts,** **interest area “what it is made of”**\n-   **spatial parts (locations),** **interest area “where it is located, how it is composed”**\n-   **cost parts** **(cost) (but this already touches both the target system and the creation system fragmentation –** **total** **ownership cost),** **interest area “how much it will cost.”**\n\n**There can be many more such fragmentations, and each of them** **can be** **done differently, depending on the area of interest.** **These different options** **for breaking into parts** **agents (people,** **AI,** **organizations), playing different** **internal and external** **roles in the project,** **agree among themselves to achieve the system's success.**\n\nEven a single agent can use several different fragmentations, distinguishing parts of the system differently for convenience of thinking and acting in various roles – to make thinking and action more convenient in each role. Some roles imply the simultaneous activation of several fragmentations. For example, the developer role works with invention – when choosing affordances (constructive parts) for the system's role parts. One consideration is constructive – creation time, the other is functional, usage time, and no invention will happen without simultaneously holding both considerations. System creativity involves working with different ways of breaking the system into parts simultaneously, and in each of these fragmentations, there will be entirely different parts! For instance, scissors constructively consist of two metal halves and a fastening screw, while functionally – of a cutting block and a handle (and the screw isn't even provided in this view, as are the \"halves fastened later with a screw\"!).\n\nDifferent ways of breaking the system into parts (among them are mandatory, primarily the aforementioned four – functional, constructive, spatial, cost) will be considered in more detail in our course later, and this consideration will continue in courses on systems engineering, personal engineering, and systems management.\n\nAgreeing that all these different options for breaking the system relate to the same system is relatively easy",
    "524e6c2a8b68c47ef148a73e6492e104": "---\ntitle: 'System Levels. Continuation of the Example of Social Dances: Levels Above the Dancer.'\n---\n\nThe salsaro::role story doesn't end there; a system thinker always looks at objects of ever-increasing scale, higher and higher system levels! Up from the level of salsaro::role goes artist::role—we have mentioned this repeatedly in previous paragraphs.\n\nIn the club, next to the dance style teacher (the \"maker\" of salsaros) stands a visiting Cuban, **choreographer::teacher::creator**, who has just conducted a master class on how to build **composition** in salsa figures/moves, and he is observing the next system level of mastery of a special method: the method of actions of artist::role, who performs certain actions (it is not customary to call it \"work\" in dance) during a \"dance set\"/performance. In social dances, it is customary for the composition/choreography of dancing to be created \"on the fly\" by the same agents who dance this composition in the roles of **artists.** The sub-roles of artists dancing the choreography (a composition of figures corresponding to certain artistic criteria) at the previous system level were called \"salsaros,\" and their method/style was \"dancing salsa\"—but there was no talk of composition (or rather \"and this composition too,\" that is, \"salsa in general, all variations of composition,\" not a specific set with its unique choreography/composition). One level below were simply \"dancers\" whose behavior was \"dancing,\" and there was no salsa yet (or rather, \"salsa too, if needed\"). One level below, they were just \"movers,\" and their behavior was \"body movement,\" with no dancing at all (or rather, \"dancing too, if needed\"). And so on—for each creator role at a certain role level, its target mastery::system and the method/style::\"function of mastery\" produced by this mastery (which is metonymically applied to the agent role—practice is considered performed not by mastery as part of personality, but by the role of the entire agent, \"not the tiger's eye sees, but the whole tiger sees\"—but these are ontological subtleties).\n\nSo, what system does each creator (doctor, coach, various teachers) work with in an agent dancing with his partner in the club? Each type/specialization of the creator—his own system! **The system is in the eyes of the beholder, or rather, in the eyes of the creator (because it's not about passive observation but active creation).** All kinds of creators look at the same agent dancing in the club—but see absolutely different things, speak different languages of different subject areas, create different parts in the agent (including physically different ones—let's say, affecting physically different neurons encoding this or that mastery).\n\nThis is the manifestation of emergence: at each system level, the objects of consideration change, new properties appear that did not exist at lower levels and will no longer exist at higher levels. Therefore, at each system level, the subject area changes, its objects are subject to their specific methods, performed by their subject-specific roles, and these roles have their subject-specific interests.\n\nThe choreographer::(role of the creator of the method for a specific variant of a dance set) carefully looks at the couple—and sees (focuses attention!) not muscles, not separate arm or leg movements, but a sequence of figures/pa/steps/moves somehow tied to musical accents, and this narrative (sequence) assembles into a whole performance/set, lasting five minutes (surprisingly, in social dances there is no separate word for this performance/set/execution, it is just called \"dance\"). The choreographer evaluates: did a decent choreography (sometimes shortened to \"choreo\") come out in which various salsa figures are balanced, if there are any trendy features (e.g., inserts from other dance styles), if there is some interesting composition. This is the level of **dance performance/set** as a whole^[The level of composition is described in more detail here --- <https://vk.com/wall-179019873_432>]—what story/narrative will be told by the artist::role, how the rhythm of the movement of artists performing the choreography (a sequence of certain moves intended by the choreographer) matches the music's rhythm in larger structures (not at the level of one beat or one move but at the level of musical phrases and longer structures), will the set of figures be unexpected, varied, and interesting or boring and monotonous.\n\nThe ambiguous word \"dance\" (which is both a special movement method and a style within the general movement method, as well as the performance/set of some choreography) was not used here, and for educational purposes, many synonyms for terms were given and types explicitly stated. Therefore, the language of talking about the situation in the club (salsa dance set/performance) turned out to be a bit awkward, but more precise. \"Club dancers\" are unlikely to grasp this text; to understand it, one must first go through \"Rational Work\" and then \"System Thinking\" right up to this place you are reading now.\n\nNo wonder agents learn the mastery of performing the role of an artist, \"dance style dancer,\" dancer, mover (the chosen path from the top to the base of the part-whole hierarchy we will call \"system stack\"—here, a stack of mastery, determining a stack of possible role executions in the stack of methods) for many years to achieve some decent mastery at each level. These agents do not get precise engineering explanations but just many examples of these very \"dance sets,\" and simply try to repeat what they understood, also hoping that different exercises (for example, strength training, stretching, etc.) will help them in the performance.\n\nIt is particularly emphasized: a certain degree of mastery is required at each level! For if you are very good at building composition but very poorly perform the style of some dance (for example, salsa), while being a good dancer and an excellent mover, you will not be recognized as \"one of their own\" in the community of dancers of some style. Similarly, imagine a Greco-Roman wrestler who is perfect in controlling his body because he \"spent a lot of time on his body.\" He steps onto the dance floor—and alas, watching him dance will be impossible, but watching him wrestle—fine. One must understand what is specifically dance-like, style-like, choreographic/composition-like in body movements. This is true for many methods: a person with tremendous intellect (the lower mastery level for many applied methods) in any applied method he hasn't learned will look roughly as ridiculous as an excellent mover in dances if he hasn't learned dances but applied his movement mastery in another area (say, wrestling or weightlifting). This reasoning also applies to an engineer who developed his engineering mastery, say, in electronics or software engineering, and then suddenly started teaching people (methods of personal engineering) or organizations (management methods). The expectation of success is about the same as for a wrestler or weightlifter in dances. On the other hand, the needed level of dance mastery will be acquired faster by an agent with the mastery and body of a weightlifter or wrestler than \"a person from the street\" without movement mastery at the level of this agent-wrestler or agent-weightlifter. And the required level of teaching personality mastery or organizational teaching mastery (management) will be achieved faster by an agent with the mastery of an engineer than someone without systemic engineering mastery (general engineering knowledge for all types of created and developed systems).\n\nWe cannot change how people speak or create some special language (although engineers, mathematicians, physicists do exactly that, creating terminology for their subject areas quite consciously). The word \"dance\" will still come up, and you will need to independently determine—what kind of object it is, of what type, what is meant. And this will be true for almost all the terms we used in the story. So, you can call **salsa** both a dance style (the postures—poses with prescribed muscle work in this pose, the rhythm of the step and some characteristic figures/steps/moves performed in the performance by the salsaro), and a specific performance in the salsa style (lasting five minutes)! Moreover, when we talked about a coach, we described a situation where it could easily be confused between the coach-as-role and the coach-as-person::agent in the coach role, who simultaneously plays the roles of a body instructor and fitness instructor. A composition may be the result of applying composition methods (the sequence of figures in the performance, or sometimes even the description of the sequence of figures, not the sequence of figures as a dynamic 4D object), and it may also be a method of work, i.e., behavior—what the choreographer does, \"performance composer.\" Attention to the types of each term and asking clarifying questions in case of misunderstanding are essential!\n\n**Understanding ontology and semantics is necessary to discuss things**\n**systemically!** For instance, furniture can refer to all the furniture in an apartment, a table with chairs, or just a chair—it is all furniture, but each time we need to clarify what is meant. As for the terms \"entrepreneur\" (we do not recommend its usage, in the mind of each agent—both human and AI—this implies entirely different types) and stakeholder (roles and agent-in-role, as well as any role and external role of a project are confused).\n\nWith the term \"dance,\" it's the same: always clarify whether it's any dance, a specific style, or a specific performance/set. To keep from getting confused and maintaining focus on the chosen system level and its concepts, one needs diligence, and recording things is recommended rather than just waving hands. We described the situation in the club over dozens of pages, but a set in social dances is just two people for five minutes. In describing an enterprise, you'll easily uncover a system of two thousand agents with their equipment, hundreds of roles, and considered project timelines—years or even decades.\n**Discussions** **about roles and their** **methods, as well as the development of the enterprise as the creation of its material base (tools) and mastery (this will be mastery of employees and computer programs of the enterprise) will be approximately similar to the situation of dance in the club,** **only the roles and** **methods will be** **in thousands. Without the habit of precisely** **assigning** **object types and documenting/recording** **descriptions** **of clarified** **objects** **in their various relationships and types—you will be lost.**\n\nBut the story doesn't end with the choreographer and his methods of choreography/\"dance composition\"; one can go up the levels quite long, finding something interesting each time. **Requests** **\"what is it for\"** **always go from top down** **through system levels, meaning from the functions of larger systems to the functions of smaller systems** **(for example, the request for body control comes from choreography if there is some tricky turn disrupting body balance), and solving these requests (and vice versa understanding that with the current \"element base\" of lower levels the request cannot be solved)—** **from bottom up.** In other words, to be ready for any choreography, you need to be a good mover/physical culturist, and further down—have good health. Remember, a \"healthy person\" can also be singled out in this situation, attention can (consciously! controllably!) switch from the \"artist\" to many levels down to the \"healthy person\" (a sick person won't be able to dance salsa! Or practice Greco-Roman wrestling, or come to the \"combat\" as an analog of the \"dance set\").\n\nBut to answer the question \"what is happening in this dancing,\" one needs to continue climbing system levels up.\n\nNext (at the same time!) on the edge of the dance floor stands the **organizer (org)** of the **salsateka** (salsa party—salsateka, tango party—milonga, hustle party—disco) and evaluates the salsateka as a party/event in general. For him, the dancing couple are **participants** **in the project \"creating** **and developing** **the salsateka::party::event.\"** Because a dance party mainly consists of these dance performances/sets, multiple sets are happening simultaneously on the dance floor (many couples are dancing), and they follow one another—with every new music track comes a new dance set; say, with fifty dance pairs. The org considers both these performances and the standing/non-dancing partners with their imbalance (imbalance is a specific term for a party, when the number of partners and partners is unequal: not everyone will be able to get on the dance floor, even if they want to!), DJs, photographers and videographers, and even cloakroom attendants (because the party begins, like in theater, with a coat check).\n\nWhat is discussed at this **event/party level**? Read social networks where dances are discussed. You'll find that this level is most discussed, not so much by dancers::role or \"style dancers\"::role but by \"party participants\"::role (but all these roles are the same people-agents, and performing these roles simultaneously):\n\n-   how much you dance or don't dance (because there's no one to dance with—couldn't find a partner due to gender imbalance, or a partner refused to dance, or it was too hot, or something else happened^[Example of topics discussed at this level ---\n<https://vk.com/wall-179019873_1740>]),\n- what mood you have after the party, where to go to have a good dance (i.e., to get a good mood—which orgs guarantee a good mood at their parties, and who can't guarantee anything?),\n-   what music should play at these parties to make it interesting to dance to and for all participants to have a good mood,\n-   how much all this should cost, who might get in for free.\n-   ... and so on: passions run high, all revolves around the bad or good mood at parties, adequacy of money spent on the event and the pleasure from the event, alternative behavior (where else to go for similar money for more fun).\n\nNotice, the actual dance movement::method and creating choreography/composition::method (what happens during the dance sets/performances) are almost never discussed in social networks! In common usage, a party is often called \"dances\"—the same \"dance,\" just in plural! And the pattern/method/style of actions of going to parties will be called \"dancing\" (\"activity\" in terms of time spent), and dance lessons to achieve dance mastery are also called \"dancing.\" Everything gets mixed up, including \"time to develop the skill of participating in a party\" and \"time to use the skill of participating in a party.\" The skill of \"participating in a party\" (according to performed practice) or the skill of \"party participant\" (according to the role played) includes the skill of performing numerous previously mentioned functions/methods, from operating an organism (subject of interest to a physiologist) to the culture/methods of participating in a party, performed by the \"party participant\" role and involving appropriate behavior there. This is the time of using the party participant's skill in its sub-role of artist. And the time of creation? Remember all those trainers, instructors, style gurus, choreographers—and the person::agent who will soon participate in the party but does not yet have the skills to consciously or unconsciously choose the participation method.\n\nThe next system level already does not have those who specifically deal with it, but sometimes some party organizers, teachers, or even individual dancers suddenly act as **\"ambassadors of subculture\"**::role and begin to discuss how they develop the salsa subculture with its numerous **non-conformists**::role. Here, salsa party participants and those leading a special lifestyle related to this are non-conformists::role, and the name of our dancing couple has changed again! This is the system **subculture level** of a particular dance style, in our case, salsa, but usually, in such subcultures, they dance some \"umbrella\" of dance styles gathered around one dance. So, in the salsa subculture, they often dance both Cuban son, as well as unexpectedly Dominican bachata and bachata sensual, in the kizomba subculture they dance not only kizomba, but also semba, urban kiz, tarraxinha, tarraxo, unexpectedly Hawaiian compa, as well as Afro-house (in the form of \"animation/entertainment\" of party participants—guided line\ndance^[<https://en.wikipedia.org/wiki/Line_dance>]).\n\n**The community/gathering as a group/collective** **agent performing the role of subculture** **and practicing maintenance/replication and development of the social dance meme for some dance style,** includes all the parties of the \"umbrella\" dance style (in this case—\"umbrella\" salsa). For example, in Moscow, there are five to six parties simultaneously. This community features all dance schools where trainers, style gurus, and choreographers work (in Moscow for salsa, there are more than ten). Schools teach (replication of the subculture meme), parties entertain (using mastery of various subcultures/“methods of actions” by its adepts::“carriers of the subculture meme”), and there are also competitions and festivals. Subculture/community, therefore, is quite material. Let's say, a hundred years ago, the salsa subculture as all these constantly held parties-schools-competitions with their numerous participants in various roles (not everyone there dances!) did not yet exist, and in a hundred years, it probably will not exist anymore. In the Arctic and Antarctic, there is no salsa subculture even now. The subculture can be considered not only as a method of actions but as a functional object, which occupies a certain place in space-time, that is, coincides with the construct: the community, \"people practicing certain methods, carriers of the subculture meme,\" because at this level we speak more about creating and developing some mastery, some practice of this mastery (actions determined by mastery), the evolution of practice, thus changing the language of discussion. A subculture can be thought of as a material object, it changes over time, although the time scale has changed again. These are not fractions of a second for the bodily work of the musculoskeletal system or soma sensation changes, not a second or two for a single movement, not three minutes for a set/performance, not three hours for a party. Changes in subculture (changes in the replicating meme with the ideas of some social dance style, this meme and defines the subculture—as the genome defines a living species, and not a phenome, not an organism, so here—not a subculture member defines the subculture, but a meme replicated in his head) take not months, but years. The subculture evolves along with all its behavior methods/styles, performed by the roles of collective and individual agents and even parts of agents.\n\nSystem thinking helps us reduce the complexity of thinking about a subculture, an incredibly complex multi-level object. We just have to think separately about each system level, manage our attention when switching from level to level, track the attention of different roles to different phenomena at different levels (primarily to what they do: attention to methods/practices of all roles).\n\nAll these roles and their methods of actions (often say \"methods of behavior,\" but a method is also behavior, a method is executed, it is an action pattern, so there is some ontological jitter here due to not distinguishing method and work as different types",
    "17ab43b43173841614a260904b867f1b": "```markdown\n---\ntitle: Instability and Meta-System Transition\n---\n\nEvolution::\"process/change\"---\"physical evolution of the universe\" is\na universal phenomenon, but we will still divide it into separate variants:\n\n-   **Biological** **evolution.**\n    The complexity^[<https://www.pnas.org/doi/10.1073/pnas.1807890115>]\n    goes from molecules to cells, from cells to organisms, from organisms to\n    populations, etc.\n-   **Memetic** **evolution.** This is the evolution of concept-memes\n    (meme^[<https://en.wikipedia.org/wiki/Meme>],\n    formed similarly to gene---gene, and not to be confused with internet memes),\n    which exist both in symbolic local representations (one\n    place---one symbol) and in\n    connectionist^[<https://en.wikipedia.org/wiki/Connectionism>]\n    distributed representations (and recently distributional\n    representations have been added^[<https://www.frontiersin.org/articles/10.3389/frobt.2019.00153/full>]),\n    for example, in neural networks (in people’s heads, in AI systems based on\n    large language models---these are all different types of neural networks).\n    For example, the concept-meme (sometimes referred to as an \"idea\" during memetics discussions, sometimes even as a \"thought\") that \"if a cat crosses your path, it's a bad omen.\" This very strange idea/thought travels\n    through minds like a virus (self-replicates), and for some reason does not\n    die out completely: there is always another mind in which this idea\n    lives. Or Newton's idea that massive bodies\n    attract each other by the force of gravity, this idea also does not die,\n    although Einstein produced a better idea: there is no force of gravity,\n    but rather the curvature of space-time by masses. This idea also lives on, forming the basis for GPS navigation, but it doesn’t completely displace Newton’s idea of gravitational force. The same regularities apply here as in any evolution (since all evolution comes down to the accumulation of knowledge). Modern fish (their knowledge accumulates in the genome) have also not evolutionary displaced the ancient coelacanth fish, although other ancient fish have long since died out. The nature of techno-evolution phenomena as the evolution of ideas is the same as in biological/Darwinian evolution.\n    Replication of some information between neural networks (people and now\n    AI agents) in techno-evolution is fairly accurate, but sometimes occurs with\n    mutations. In one case, genes evolve (resulting in different organisms,\n    their complexity and diversity increase, but simple species do not disappear\n    entirely), and in another case---memes evolve\n    (resulting in different theories/explanations, their complexity and diversity\n    increase, but simple theories/explanations do not completely disappear).\n    Evolution (Darwinian and techno-evolution) is quite physical, but it is\n    related to the accumulation of information on some carriers,\n    this information is replicated---and you need to refer to the primary sources\n    indicated in our course to understand. This material in the course will not so much be explained as used. At\n    some point, students can't stand it and look at the\n    primary sources---and thereby form a physical, not a \"common everyday\" view on evolution.\n-   **Techno-evolution.** Mutations of technical systems are primarily made\n    by people through inventions (they realize that to achieve\n    a function::behavior in functional objects, some structural objects can be\n    used as affordances/“suitable items”), and we see the development of electric\n    transport, robotics, plumbing, skyscrapers, and smartphones, although the\n    fork, spoon, knife, shovel, and hammer have remained almost unchanged for a long time—only significantly improved materials from which they are made, and the manufacturing itself has become significantly cheaper. It is important that techno-evolution now significantly uses digital/discrete (i.e. with accurate replication) symbolic representation of system descriptions.\n\nIn our course, we will not address the mechanisms of evolution, although we have\nalready mentioned in the course section \"2. Our version of systems thinking: third\ngeneration\" in the subsection \"Variants of the systems approach\" enough\nmaterials for inquisitive students to understand the physical\nnature of what is happening (and it would be better not to delay this acquaintance).\n\nThe main idea in the modern view on evolution is that the phenomenon of\n**instability/uncertainty/frustrations** leads to an enormous\ndiversity of quasi-stable **configurations** (sets of variant\nsubsystems, variant constructions) of evolving systems, with each\nof these configurations being quasi-optimal, and the transition between quasi-optimums\nis incredibly easy, so the overall set of configurations of various systems\nturns out to be unstable, out of equilibrium.\n\nWe need the concept of instability to discuss different\nvariants of evolution (and do not confuse with psychological \"frustrations\"; in\nEnglish, this word has many meanings, and the original\nterm was geometrical frustration^[<https://en.wikipedia.org/wiki/Geometrical_frustration>]\n---and watch the video which very well explains the essence of this\n“instability/uncertainty.” This does not relate to mental difficulties; we are talking\nabout a physical phenomenon).\n\nIn the mentioned article \"Physical foundations of biological\ncomplexity\"^[<https://www.pnas.org/doi/10.1073/pnas.1807890115>]\nthe concept of instability is explained by the following illustration:\n\n\n![](04-instability-and-meta-systems-transition-30.png)\n\n\nIt shows that evolving systems in some sense have memory (physicists talk about systems with memory as “non\nergodic^[[https://en.wikipedia.org/wiki/Эргодичность](https://en.wikipedia.org/wiki/Эргодичность)]”,\nthey do not wander randomly through all their states), they remember\nconfiguration of \"optimum survival.\" But in a real situation, memory does not\npermanently remember the configurational solution found, because\nthere are a lot of different system configurations with roughly the same\nquasi-optimal \"niche fit\"/fitness, between which there is very\nlittle difference in \"optimality.\" Of course, there are many different\nconfigurations of systems that cannot survive, and they are the majority, but also\nthere are plenty of configurations in which systems will survive and they differ very little\nfrom each other.\n\nIn the provided pictures, it’s not one configuration with unconditional\nbelonging to a quasi-optimum and everything else not surviving, but rather a huge\nnumber of configurations that evolution can pass in the course of\nendless mutations. And none of these configurations will\nbe final, \"the goal and result of evolution\"! Consequently, evolution turns out to be\ninfinite, although it is well-describable as a process of optimizing\nthe configuration of a system.\n\nLet's say you go to a smartphone store and you see a hundred\nvery similar models at the same time, all of which find some sort of\nmarket demand. This is a manifestation of evolution: a huge diversity of\nmore or less surviving in different ecological\nniches^[https://ru.wikipedia.org/wiki/Экологическая_ниша](https://ru.wikipedia.org/wiki/Экологическая_ниша)]\n(in our case, techno-ecological niches, i.e. techno-cenoses, not\nbiocenoses) configurations (sets of subsystem variants,\nconstruction variants) of some evolving systems. This\ndiversity and instability as a set of configuration options,\neach of which is quasi-optimal, making the transitions from one variant to\nanother almost imperceptible in terms of the optimality of fitting into the niche, holds\ntrue for all kinds of evolution—bio, memo, techno. And from time to time,\njumps in the level of optimization occur. Say, mobile phones were\nreplaced by smartphones—“drawn keyboard” turned out to be better,\nsmall phone sizes were replaced by “phablets” larger sizes—\nlarger screens turned out to be better. Dinosaurs are no longer around, although\nonce dinosaurs were the optimum. And today there are no old mobile\nphones, although once pre-2007 (when the iPhone was released) they were\noptimum.\n\nMeanwhile, one must carefully handle the types of related\nevolutionary concepts. For instance, memetic replication in neural networks may be\nunderstood either as genes in the genome, i.e., parts of hereditary material (genes\nare physical! These are literally physical parts of DNA molecules), or\nas information replicating during neural network training, thus being\nnon-material. But in this context, meme can be viewed as an\n“elementary program” based on the hardware of a neural network (e.g., in the\nbrain)—this view is close to seeing skills as a\nsystem programmed into the physical part of the brain. In other schools of thought, the meme is\nan informational object, a description to be programmed into the brain.\n\nEven with biological genes, there are discrepancies: the classical\nunderstanding of a gene is that it is physical (a part of DNA), but the term\n\"gene\" is often used not as “gene”::system, but\n“information encoded by the gene”::description (e.g., similarly, the word \"skill\"\nmay be used to denote both what a person can perform\nand the “description of the method contained within the person”).\n\nIn any case, understand by context, what type you are dealing with:\ngenome and meme as information or genome and meme as physical\nobjects. With \"skills,\" \"program,\" and similar objects (algorithm and\nuniversal computer for its execution,\n“generalized algorithm for transforming the physical world” from the method\nand universal constructor with tools for its execution)—same story, be cautious\nin assigning type, understand the context in which the term\nis used.\n\nFor example, you can easily change a method’s description (e.g., switch a piano lesson book\nfrom classical to jazz music), it’s just replacing one local/symbolic\nrepresentation with another. But replacing piano-playing skills is not\nso simple, relearning one skill to another (one distributed representation\nto another) is not easy. Replacing a gene in \"gene descriptions\" (replacing\na symbol)—easy. But replacing a physical gene in an organism is not so\nsimple. A copy of the physical gene will be present in every cell of\nthe organism, you’ll have to reach each cell, or target\ngene replacement in the zygote (remember school biology course, what is\na zygote?).\n\nAnother issue is understanding what exactly is evolving, which\nsystem. In biology, this is the problem of the biological individual:\nthe genome (the set of all genes), the organism with the phenotype (organism with\na set of all traits determined by the genome), the population (since\nevolution requires a male and a female, more than one\norganism—population), the species (all individuals classified as a species).\nThere is no exact answer to this question, and there will be an immediate counter-question: what is your\nproject, how convenient is it for you to discuss which part to change to\nimprove the world? Modern results also show that it is pointless\nto discuss the evolution of a single species, as evolution always happens in the\ncontext of the evolution of all other species.\n\nIndividuals of each species of evolving bio, socio,\ntechno systems consist of numerous subsystems and are part of a\nsupersystem, like any other systems. And the\ncomplexity of supersystems grows because at some point these\nsupersystems begin to unite, playing different (functional) roles in a whole new\nsuper-supersystem, i.e., making the next meta-system transition. This\nhappens in techno-evolution (evolution of tools): hammers, like\nmicrobes, exist independently. But then the television, navigator,\nphone, watch, notepad, heart rate monitor, and music center as functional\nobjects (where function matters, not construction) suddenly\nturned into a more complex structural device—a smartphone in which\nmany smaller devices, “applications”::subsystems, act as organs in an organism.\nThis is it: some successful systems at one system/evolutionary level scale up to\na supersystem---and the complexity of the biological, memetic, and technical\nworld grows.\n\nRead about geometrical frustrations and explanations\nin the article^[<https://en.wikipedia.org/wiki/Geometrical_frustration>\n---and watch the video, which very well explains the essence of this\n“instability/uncertainty.”], the increase in complexity\nof biological (and social and technical!) systems due to these\nfrustrations caused by conflicting interactions at different\nsystemic/evolutionary levels\narticle^[<https://www.pnas.org/doi/10.1073/pnas.1807890115>],\nthermodynamic explanations and mathematics for substantiating evolutionary\nprocesses as learning processes and even as a reason for\nthe appearance of life in\narticle^[<https://www.pnas.org/doi/full/10.1073/pnas.2120042119>],\nand the methods for multi-level theory of evolution, including understanding that evolution itself is multi-level and driven by these\nfrustrations^[<https://www.pnas.org/doi/10.1073/pnas.2120037119>].\nHere’s how these works define the main principles (understood as the main ontological\nguesses, i.e., objects in terms of which\nto discuss what’s happening, an “axiomatic approach” in physics) of Darwinian\nevolution, that is, the evolution of life, where the genome is inside the\norganism. Techno-evolution, where the meme is in the design\noffice, and the target system is made in the factory and does not\ncontain the meme, or memetic evolution, where the meme is stored somewhere in video fragments on servers or “ideas” in paper books—this is also evolution; there may be slight\ndifferences in interpretations, but overall the same principles will apply:\n\n1.  **Loss function.** In any evolutionary system,\n    there is a loss function from variables/physical quantities\n    dependent on time. During evolution, losses are minimized,\n    evolution---is an optimization (finding the minimum of the loss function)\n    process.\n2.  **Hierarchy of time scales.** Evolving systems include\n    many dynamic characteristics that change at different\n    time scales (with different characteristic\n    frequencies: seconds, years, millennia).\n3.  **Frequency gaps.** Characteristics\n    manifesting at different organizational/systemic/evolutionary\n    levels (system/organization levels) are separated by sufficiently wide (three orders of magnitude) frequency\n    gaps.\n4.  **Renormalizability.** Across all levels of organization,\n    statistical descriptions of fast-changing (high-frequency) characteristics\n    are obtained through descriptions of slower-changing (low-frequency)\n    characteristics.\n5.  **Expansion of properties.** Evolving\n    systems can add additional characteristics that can\n    be used for system survival and exclude\n    characteristics that may destabilize the system\n    (emergence for positive properties and elimination of emergent properties\n    for negative properties).\n6.  **Reproduction.** In evolving systems, reproduction/replication\n    and exclusion from replication of information-processing units\n    (IPU) can occur at every systemic/organizational/evolutionary level.\n7.  **Information flow.** Slower “evolving”/changing systemic\n    levels pass information to faster-changing levels\n    during learning processes so that the faster-changing levels\n    can better predict states of both the environment and the system’s surroundings\n    as a whole. The central dogma of molecular biology adds that the backward flow of information is arranged differently: from\n    the \"fast-learning organism\" to the slowly changing \"genome,\" information\n    flows not through transmission but through another mechanism: mutations and the death of organisms with unsuitable mutations. In\n    techno-evolution, mutations are not random due to inevitable replication\n    errors but smart (calculated with the highest probability of success, not random).\n\nAnd here are the life phenomena that follow from them:\n\n1.  **The presence of units processing information** (IPU) as separate systems at all levels of organization,\n    meaning some autonomy and stability of existence of molecules,\n    cells, organisms, populations, and the biosphere as a whole—they somehow\n    maintain their identity, do not dissolve into the environment.\n2.  **Instability.** The purposes of maintaining stability (NESS, speaking of\n    stability in a non-equilibrium situation, roughly \"not to get destroyed, broken, or dissipate in the environment\") of systems at different\n    levels conflict, and this causes instability.\n    Instabilities may be either spatial (geometrical\n    frustrations) or temporal. For instance, a neuron in the brain\n    functions to react to an incoming signal, meaning it will react not as\n    it wants but as required for signal processing by the whole cluster of neurons\n    as a supersystem, which includes the neuron-system. This is a spatial conflict\n    of goals: to optimize signal processing “as simply as possible” within the\n    neuron itself will not work, because it will conflict with\n    processing the signal “as needed” by the cluster of neurons, and further\n    by systemic levels—by parts of the brain,\n    sections of the brain, and eventually the whole brain. On the other hand, the neuron works at a particular frequency, in its own time scale, but this may not\n    correspond to the time scale in which it’s supposed to work within a higher\n    organizational unit (neural cluster, part and\n    section of the brain, whole brain). Both spatial and\n    temporal instabilities cannot be completely eliminated, but within some\n    optimal balance, a local (not global!) stable non-equilibrium state can\n    be achieved—the search for this stable non-equilibrium state (NESS) is understanding/learning/evolution of\n    the system.\n3.  **Hierarchy of systemic levels.** If a system evolves, it will by\n    necessity have many systemic levels (increase in complexity\n    during evolution is inevitable).\n4.  **Suboptimality** (near optimality). For complex\n    multi-level optimizations, only stochastic methods can be used, which do not\n    guarantee stability of the solution (meaning attempts\n    to repeat will yield slightly different results), nor finding the global\n    minimum (only yielding more optimal variants than many others—but\n    comparable to other fount variants). In\n    biological systems through 4 billion years of evolution, it manifests as\n    **everything being more or less optimized; therefore,\n    changes usually lead to deteriorations, very rarely to\n    improvements, and generally to no effect, because they do not\n    deviate far from the already found local loss minima.**\n    **Changes leading to a shift to** **a locally (never globally, which is unattainable in principle) new level of loss minima,** **are extremely rare.**\n5.  **Diversity of suboptimal solutions.** There is a huge\n    constructional/configurational diversity of systems for which\n    the loss function is sub",
    "6bf0384d6d5ddcc7a81ee2ef044ec620": "---\ntitle: 'Recursive Application of Systems Thinking: Recursive Attention Management'\n---\n\nUnderstanding that any system is part of a system breakdown and belongs to a certain system level allows the systems thinker to apply the same systems thinking recursively: to conduct the same reasoning for each system level, for each subsystem within this system level if descending from the target, and for each supersystem if ascending. It doesn't matter what the system is—for it, complete systems thinking can (and even should!) be deployed (as prescribed in the systems mantra). And then, after thoroughly considering the situation with this specific system under review, one can return to the whole system breakdown (time of use) and creation graph to select the next system for consideration—and so on with various systems of different levels and places in the creation graph.\n\n**Systems breakdown structure is first and foremost a means of managing attention.** Attention selects a single object-figure for detailed consideration, and everything else remains in the background, however huge or diverse this \"everything else\" may be. Attention allows for drastically simplifying the complexity of the world by temporarily ignoring insignificant details—leaving only the important in the discussion. Systems thinking forces one to always concentrate on the main points, letting go of unimportant details, which is **focusing.** At the same time, it forces one not to forget the whole when focusing on parts—**defocusing.** Remember, the main focus in systems thinking is \"up\" the system levels: not from the target system to its subsystems but from the target system to its surroundings, to the supersystem! If a figure is in your attention, its surroundings will be in the background! **Defocusing, turning attention to the background, turns out to be even more important than ignoring the background, focusing attention!**\n\n**Mindfulness in attention management is needed:** you consciously focus and defocus attention, consciously move this attention from the object to the background at moments of defocusing (many objects in the field of attention, high alertness to new things appearing in the wide field of your attention), and focus attention by tracking the objects in its focus on the ignored background. Systems thinking manages attention by describing its movement in terms/types of the systems approach (system, function/method, role, construct, emergence, etc.). The concepts/types of the systems approach are types of meta-meta-models for discovery and subsequent maintenance of attention on objects of these types in the surrounding world (physical world and the world of descriptions).\n\nYou know that you need to look for objects with the type \"system\" of different kinds (target, supersystem, subsystem, ours, creator) in the physical world. How these types relate to each other (what types of relations exist among them) is described in our course \"Systems Thinking,\" which is the meta-meta-model expressed in the course text in the natural language.\n\nNext, you actively search for objects of these types in life, as you already have expectations about these objects. Actively—means you inquire about the state of these objects, invent and create such objects if you find out they don't exist, check guesses by rational reasoning and even experiments.\n\nThe focus-defocus of attention during systems modeling corresponds to the movement of attention through system levels (levels of system size), and the focus of attention itself is the choice of the specific target system, its subsystems and supersystems, the system in some link in the creation chain, identifying \"our system\" among them.\n\nA systems thinker is well-oriented in a complex world: they never lose the context/environment of the object of attention, always capable of discussing both the smallest part of the smallest device and hugely large systems of planetary scale. These \"scale jumps\" don't drive them crazy; for them, it is a very routine procedure of concentrating on smaller and smaller parts of the world, ceasing to perceive details from the surroundings of these parts, or conversely, defocusing on a larger and larger part of the world, losing detailed information about smaller parts of this larger part of the world.\n\nA systems thinker selects/selects a system for each attention camera, considering it within the environment of supersystems and comprehensively in the systemic environment (\"in context,\" in the moment the target system is functioning), then may consider this system in turn as a set of parts—\"zooming in\" to another level of detail, increasing the details of this part, as in modern cameras. When considering attention, the metaphor used is \"attention cameras\":\n\n- Attention is active: the camera first needs to be pointed at a piece of the world you are going to consider, then adjusted to the desired zoom level. This is the state change of the meter even before measuring: it requires working through some method to direct the camera at the object! The measurement needs preparation before measuring! To describe what's around the corner, you need to walk to the corner and peek around it, take active steps (the method must anticipate that the important object will indeed be around the corner, not, for example, right above—so you should walk to the corner and peek around, not tilt the camera directly upwards). And there, beyond the corner, you need to understand whether you are looking at the outline of a large mountain or a grain of sand on that mountain, and adjust the focus: this involves knowledge, the meta-meta-model of not only managing the attention camera but also knowledge about the object being captured. If you need to focus on Pete, it’s bad to mistake him for Nick. You need to know the attention object!\n- Only after the camera is roughly pointed at the object can you consider what is obtained from this camera and select some objects from its field of view, assign types and check whether we have attention on the necessary objects. Recognition of the presence or absence of objects of certain types can only occur after measurement and with knowledge of these types (knowledge of the meta-meta-model).\n- Generally, an agent can have many cameras: attention is \"multithreaded,\" with each camera providing some information flow, and each camera’s work needs adjusting and using the meta-model, and also integrating the camera outputs in the thought process.\n\nA systems thinker can easily select the necessary scale of consideration for each attention camera, choose the necessary systems effects (emergent properties) as subjects of interest at a chosen system level. And the systems thinker does this consciously: they are well aware of navigating system levels and each meta-system transition (from one system level to another) involving new system effects/emergencies in consideration.\n\nHere’s an example of considering system levels for a multimodal transport system^[Leidraadse (2008), Guideline Systems Engineering for Public Works and Water Management, 2nd edition, <http://www.leidraadse.nl/>]:\n\n![](14-recursive-application-of-systems-thinking-recursive-attention-management-38.png)\n\nIn a transport system, we can first discuss multimodal^[[https://en.wikipedia.org/wiki/Intermodal_transport](https://en.wikipedia.org/wiki/Intermodal_transport)] transport and the competition of independent monomodal transport systems. For example, pipeline transport competes with rail transport for oil transportation—for their owners, they are enemies-competitors in the operational environment, but for those wanting to transport oil from one part of the world to another, they are parts of one multimodal transport system (remember that different roles highlight systems as they find convenient for their activity. Although for teamwork on a project, they will have to agree). When we discuss transportation systems—these are of planetary scales, or at the scale of a country.\n\nWithin one of the subsystems of the transportation system, we can pick the rail system for discussion—trains, railroad energy, train traffic management, etc. If we take one of the subsystems of the railroad—a railway station system, we can further consider its own subsystems—passenger boarding system, station information system, catering system, ticket sales system. Part of this ticket sales system is its subsystem of ticket vending machines. Each of these machines can also be viewed as separate systems. The screws that attach the controller board to the case of this machine are also systems. And even in the screws, different parts can be found—the head with slots for different screwdriver shapes, the thread.\n\nThus, in a couple of paragraphs and one small picture, we go through the consideration of the situation from planetary or country scales to a small screw, and we don’t go mad, we don’t lose the thread of reasoning, we clearly understand the subject of discussion and the problem's scale each time. This won't change on the reverse path, from screw parts to the transport system as a whole. Moving through different system levels, focusing attention on various systems within them, defocusing attention—this is an extremely powerful thinking tool.\n\nIt is pointless to consider a screw in a ticket vending machine as a direct component of the transport system—from a formal logic perspective, this may be correct but utterly meaningless, like \"the tail of a herd of cows.\" The systems approach, introducing system levels, makes reasoning meaningful: all people get the opportunity to agree, discussing problems only at their \"own\" system level (a level where they have interests, preferences, intentions to act to improve the situation from the perspective of these role preferences), but at the same time, they take into account problems of adjacent levels—higher than their target systems and lower. Such organized collective thinking divided into system levels and different roles is a great achievement of civilization.\n\nWe can discuss the creation and development of a multimodal transport system similarly, pointing out its subsystems at different levels: who::creators and how::methods build the rail system, who::creators and how::methods manufacture the screw fastening the controller board to the machine case, who and how fits the screw fastening (this will be a different creator than the one manufacturing the screw). Everything is discussed as \"systems,\" and the systems of creation are discussed in relation to systems in the environment because if you don’t know what::\"target system or our system\" you are manufacturing—then you don’t know which creator systems are manufacturing it, discussion is impossible. **Environment first, target system and its structure second, creation methods (\"how we make the target system\") later, and creation systems (who::roles, who::agents play them, who::managers will organize them) last.**\n\nA Boeing 747-8 consists of 6 million independent types of parts (components of the target system), produced by half a million people at 5400 factories (creation systems), with 783 million aircraft parts (components of the target system) ordered per year (the last aircraft was released in December 2022)^[<http://787updates.newairplane.com/787-Suppliers/World-Class-Supplier-Quality>]:\n\n![](14-recursive-application-of-systems-thinking-recursive-attention-management-39.jpeg)\n\nNow the environment of these Boeings, their operational time: airports with air traffic control and passenger boarding systems, air corridors (also systems, equipped with radars and other infrastructure to track them, they take up space in the physical world). The airplane itself is useless outside of this, like a bottle cap without a bottle, like a bottle is useless outside its use situation.\n\nIn modern systems, the number of individual elements to be coordinated between themselves (in design), and often created from scratch (in construction), reaches tens of millions in \"hardware\" systems, and if it comes to electronic systems, trillions: a single Cerebras electronic chip has 2.6 trillion individual transistors, each performing its unique function within the chip^[<https://www.anandtech.com/show/16000/342-transistors-for-every-person-in-the-world-cerebras-2nd-gen-wafer-scale-engine-teased>]. And even these chips are not the highest system level; above them is the circuit board level, above that—supercomputers based on these boards.\n\nGive up hope for creating such complex objects without any hierarchical consideration and management of collective and personal attention through documented systems hierarchy (i.e., hierarchy of systems in compositional relation). **Collective attention management of creators tied to system levels distinguished in systems' composition hierarchy—** **is the most important part of systems thinking**. This collective attention is also directed at creation relations between creators and created systems, here we talk about the creation graph.\n\nSystem levels emerge as systems grow in complexity, a property of evolution (biological/Darwinian, memetic, techno-evolution). The complexity of systems will only grow, an endless growth. Each creator-team or creator-enterprise may be relatively simple (although they are also systems, complexity of creators also grows—enterprises merge into ecosystems, expand into super-holdings, system levels increase with evolution). But dealing with complex system creation projects (including creation systems themselves) is possible because one creator or even its part (e.g., a project team within an enterprise) doesn’t have to handle the entire system at all levels—instead, each creator works with parts of the system, substantially simplifying creation. Someone makes the rocket engine, someone makes the rocket computer, someone makes the rocket body, but no company does all this—including steel smelting for the rocket body and silicon purification for the computer chip.\n\nDifferent companies specialize in different crafts, but organized according to a creation graph—they together create astonishingly complex target systems, operating in astonishingly complex environments. All this is possible thanks to systems thinking, implemented by systems engineers and managers of these creator enterprises.",
    "3a37316c5fc7a559379ad7d711ec9b75": "---\ntitle: Highlighting system levels through attention. An example of social dances\n---\n\nAnd only at a higher level does **dancing/dance movement** appear, when the **dance teacher** (creator of dance mastery in students) observes how their student-**dancers** (bearers of dance mastery) move — assuming aesthetic poses, executing smooth leading and sensitive following, not losing balance in turns. Previous roles (fitness instructor, rhythm instructor, coach) did not see dancers, they just saw moving people, they saw fitness practitioners (their creator — fitness instructor), body practitioners (their creator — body instructor), movers (their creator — coach and helping rhythm instructor) — it didn't matter what type of cultural movement it was, it could be parkour, it could be figure skating. Here, however, we are talking about a specific type of cultural movement: **dance movement** (rather than movement in judo, equestrian sports, or karting).\n\nBut at this level, it is still unknown — what specific dance style/culture this movement belongs to. It takes a long time to learn to dance a particular style (tango, ballet, salsa). Different assessments are given for different dance styles and abilities of dancers, but ballet can easily take a decade to learn, hip-hop about five years, social dances — about three years. We simply bracket out, focusing attention on the general movement method for all dances, distinguishing them from all other cultural movement methods, assuming that one can learn the dance movement method once — and use it in all «dance styles»/«types of dance movement methods». For example, learning to dance in pairs, that is, to be able to lead and follow, synchronize one's movement with a partner's. This is needed in all social dance styles (though not just social, pair dancing can also be ballroom, stage, and even in ballet^[<https://en.wikipedia.org/wiki/Partner_dance>]).\nOne can be taught not just to \"step,\" but to make a specific **dance step**, with its own specificity (it contains built-in \"illusion,\" unusualness/unreality). This is also needed for all dances, and learning it once, one can use it in all dances thereafter!\n\n«Bracketing out» learning to dance as such, in contrast to learning a specific dance style, is the idea of multi-dance::«dance method». Our dancer::role is a multi-dance dancer, already sufficiently trained to easily master different dance styles: they have body control during general movement set, they have mastered general dance movement and need to just further acquire the mastery of a specific dance style.\n\nSo, the next observer of our dancing couple is the **salsa teacher::**«guru of a specific dance style»**.** They look at how their student-**salsa dancers** step in rhythm (those who dance salsa, one is a salsero, two are salseros, this is the plural in Spanish). The salsa teacher observes the same couple, at the same moment as the physiologist, the coach, and the general level dance teacher. But the salsa teacher sees the couple with completely different eyes (meaning different points of interest). They focus on the qualitative performance of the method of **«stylish dancing»/«maintaining dance style»** (dancing with adherence to a specific dance style, in this case, Cuban salsa), and their points of interest include: what postures (structure of effort in the body while maintaining characteristic poses), how dancers hit the music rhythm, transferring weight from foot to foot while making very specific movements of salsa (not tango, not balboa, not kizomba), how the dancers are dressed, how they move across the dance floor (stand in place, or «walk»). This is the dance style: how dancers step to music in a specific dance, regardless of the method of performing a specific «dance figure»/pa/pas/step/step/move/«lexical unit».\n\nSo, in salsa, it is not so much that the leader pushes the follower for a step, but rather the leader pushes off from the follower — and both «fly away» from the point of contact at roughly equal distance. The dance is not reduced to the leader spinning the follower around; the dance pattern is more or less symmetric in terms of both partners' movements — both cover roughly the same distance in the dance. And this happens throughout the salsa performance duration, in every movement, with a vast variety of dance figures — the style is maintained independently of the dance figures. One can learn the dance style (sometimes called «base») for a long time. One can step like in the army, the same way in every step, even in the dance step, or one can introduce nuances — even in simple steps, with good mastery of the base, opens up a whole world of variety in the steps. On these nuanced steps, the salsero builds many movements for themselves and their partner, characteristic precisely of salsa — rotations, movements.\n\nThe salsa guru looks at how our couple performs the figures/pa shown to them: spinning where necessary, stepping where necessary, in the rhythm and maintaining the posture that should be in salsa as opposed to, for example, tango or parkour with figure skating.\n\nThe method of stylish (maintaining a specific dance style/culture of movement) salsa dancing includes specific pas/figures/steps/moves (for example, enchufla, sombrero^[<https://salsaselfie.com/all-cuban-salsa-moves/>]), performed by dancers, thus turning into salseros. A salsero (the role of someone dancing salsa::style agent) is an over-role of a dancer. It is precisely an over-role, that means «more than just a dancer»: a salsero not only has to dance «in general» (that is, be able to move somewhat dance-like to music/be a dancer), but also has to be able to incorporate the specifics of salsa into their movements, «be in style». This means that a salsero has mastery greater than «just a dancer» — it is a higher systemic level. An engineer-programmer is more than «just an engineer»: they possess general engineering specificity (know systems engineering) and besides that, can also program. This is a general discussion about stacks of system levels in their role-based consideration, similar for various types of systems.\n\nLet's recall the division of labor: different sub-roles usually can be performed by separate individuals, but due to the specifics of dancing — they cannot; it requires combining all roles in one agent. However, the roles of creators due to the deepening specialization of labor — they can be separated, and adjustment of the organism by a doctor, tuning of the body by a coach, dance training by a dance teacher, teaching a specific dance style by a style teacher — this can (and, for the most part, should) be done by different agents, each of whom has enough time to master the creation of the corresponding target mastery in the dancing agent.\n\nHow to determine if here the sub-roles are a specialization relation or a part-whole relation? In functional decomposition, it is easy to get confused, but generally follows a principle of dealing with these «sub-roles»:\n**if given some ** **mutually exclusive** **alternatives** **of methods** **of roles in one agent, it’s a specialization (say, «wall builder —** **concrete worker** **for slip formwork** **or mason** **for brickwork»), and** **if both are needed to perform the full method** **one and the other («builder —** **mason for brickwork» or «builder —** **painter for facade painting»)**\n**these are levels of part-whole, system levels, i.e., a composition relationship.**\n\nAnd of course, it is important to understand what the project is — in different projects, different decisions might be made on how to model methods of work/actions and the roles performing them, how to name these methods and roles. What in one project might be «variations»/specializations, in another project can easily turn out to be levels/parts (and for the nuances, why so, one must ask the participants of that project). **With attention, you highlight objects to** **agree on joint activities in** **the project, and not somehow «absolutely objectively, regardless of** **the situation, one modeling for all projects.» **The very concepts**\n**of «method», «role» —** **they are part of the meta-meta-model of the world, from our courses, they are «for all projects». But the meta-model, types of which are taken from the meta-meta-model —** **it significantly depends on the subject area.**\n\nLet's say, in the applied field of social dances, there is «salsero», and there is «tanguero» (the role that dances the style of Argentine tango), these are usually mutually exclusive options in one performance. Thus, an artist::role may have sub-role specializations (subtypes) salsero and tanguero, involved in different projects, and yet a sub-role specialization pianist as an over-role of a musician. Think, why a pianist — is an over-role of a musician, and not a sub-role (the same reason why salsero is a sub-role of an artist but an over-role of a dancer).\n\nBut if in a performance an artist suddenly needs to dance two dances for some purpose, these will be sub-roles-parts of a multi-dancer::role. The parts of the multi-dancer are salsero and tanguero, and their part is a dancer.\n\nLet’s explain this with an example of a simpler physical system. A house-super-system has parts «interior wall» and «facade», in both these parts there is a sub-part «brick»: reasoning with the roles of artists is the same — and remember, this is reasoning «in types», since structurally bricks in the wall and facade are different, but of the same type «brick», and in the brain, the mastery of salsero and tanguero have one and the same dancer's mastery, but it works twice with different parameters. Mastery is a «program» (algorithm executed by the organism's computer and its attached tools) to perform a certain method (in our case — salsa dancing and tango dancing). Therefore, analogies with programming are appropriate: mastery as a program can run twice, preserving and recording in memory two sets of states from two different executions as physical processes. Mastery, like a program, can be represented by different physical objects if it is re-entrant^[[https://en.wikipedia.org/wiki/Reentrancy_(computing)](https://en.wikipedia.org/wiki/Reentrant)], that is, different instances of program variable/state memory do not affect each other. These are all ontological arguments, systemic thinking is impossible without mastering modeling.\n\nModeling — is primarily the assignment of a type of some meta-model to model objects, performed at many metalevels of abstraction. Thus, systemic thinking, which primarily includes systemic modeling and subsequent operations with the model, is impossible «in general», without linking to a project: in different projects, systemic thinking will answer the same question differently, leading to different system descriptions — because the same meta-meta-model type can be assigned to different subject area types depending on what division of labor we are working with in different projects.\n\n**It's a common mistake: to demand an unequivocal version of systemic modeling (assigning objects the type of meta-meta-model of the systemic approach) for some set of systems, without explaining the project for which this modeling is done.** For example, during the creation of the Tesla electric car, a fleet/fleet (the general name for the system of transportation means, if it's passive transport, such as carts or cars — this would be a pool/pool) of electric cars and their sales and technical service departments was being primarily created. Later, however, a separate project had to be made — the Tesla charging station project across the US, and then worldwide. One can discuss forever: what system is Tesla creating? It is the same issue as that of a biological individual: it is impossible to name this system. Similarly, if you consider Tesla plants created by Tesla: and there would be about the same questions — say, where to classify the Tesla Optimus humanoid robot, which will replace workers — should this be considered as conditional «employees» or as «equipment»? And they want to sell this robot along with cars, complicating the matter. It is unlikely you will know how they agreed in Tesla to conduct system boundaries, system level boundaries, this is not public information — but they definitely agreed on this.\n\nModeling is not done just for fun: it must each time facilitate collective thinking in the project of system creation! Selecting types of objects and types of relationships to model objects and relationships from real situations of real projects is difficult, and largely subjective. One cannot specify ahead of time, «in such a general situation, choose certain types», it does not turn out that way. In ontology, the choice of relationship type from their multitude for building a hierarchy (classification, specialization, composition as main) — is primarily subjective preferences in modeling, reflecting various relationships of objects of the surrounding world. In different situations, different choices are possible, there's no unequivocally correct one! In systemic thinking, there's no «recipe», but there are types of objects that can be tried to use with the highest probability of obtaining understandable and logical reasoning for the various project participants. However, leaping from this «with the highest probability» to «guaranteed to get it» — won't work. Also, take into account the use of natural language: if something can be understood incorrectly by some project participants (e.g., the term being interpreted «mundanely»), it definitely will be. Therefore, document models and add grounding, i.e., real-life examples. If you have made a completely wrong choice, you will catch the mistake sooner.\n\nAgents performing roles of salseros in a pair are **focused**/«ultimately attentive, performing a psychopractice of maintaining multi-threaded attention». Their **focus teacher**::\"intellect-stack method\" did not come to the hall this evening, but it doesn't mean they were absent and the created mastery of focus doesn't work as part of all these mentioned roles (focus is based on transdiscipline, it is fundamental, «everywhere», on the other side of applied disciplines).\n\nA systemic thinker's view sees the following in the case of agents:\n\n-   **Methods of work**, performed by **roles**. If some agent exists and does something, it means they perform work according to some method — the question is only what this method is. Most often, this is the method of creating some types of systems, if we talk about the universal agent as a creator/constructor/«enabling system». Creating and developing a system means changing the states of some objects of the physical world so that they eventually become some system (and for this also working with system descriptions). This state change is done according to some behavior pattern, which we call the method/way/practice/culture/style/work. The functional part of the agent that performs work according to this method is what we call a role. **This is the time consideration of role work.**\n-   **Creator of mastery** for performing work not anyhow, but by the selected method. The key question to an agent doing work according to some method is: \"where did you learn this, who taught you?\" (at the same time, the agent themselves might not realize that they are «just working», but «working by a method, the method for this work, i.e., for obtaining expected results, may be different». The one who «taught the method» might be the same agent performing the work, they «self-taught». Self-learning of an agent (let’s call their role in learning::method — «student») by books, articles, courses (halfway taught by the method author, halfway by the agent growing their own method work mastery, not ad hoc), might considerably involve a separate teacher (live or AI, or a whole group of teachers, with a long chain of mastery creation — these teachers also must be created by someone) along with the student’s efforts (they will just be less «self-teacher»). In the case of agents with sufficient intelligence, usually, they speak not «creation and development», but «education»/«development» (for creating an agent usually occurs within completely different projects: you usually don't «create» a personality, but only «develop» it). For peculiarities of mastery creation, see the course「Personality Engineering」. **This is mastery creation time consideration for role performance.**\n\n**Key points:**\n\n-   **All roles of different system levels of the agent work simultaneously. Muscle work in organism parts, as seen by the physiologist, muscle tape work** **of the mover/body practitioner, and so on —** **including self-dancing::«culture/practice/movement method»** **of the dancer::role, performance of salsa by salsero, the dance showcase/performance of the artist at the event —** **all this** **happens simultaneously. All these various** **activities/practices/ways/methods** **of body and mind** **of the dancing couple** **and each partner individually** **we distinguish in** **the physical world** **exclusively with our own attention: something is pulled out from the background and becomes a figure, while everything else becomes** **the background.**\n-   **Different labor roles** **of creators (time of mastery creation for salsa dancing —** **all these physiologists, coaches, style gurus), different** **project** **roles of salsero (working simultaneously during** **dancing —** **body practitioner, mover, style dancer)** **focus on different things** **and** **they themselves can work** **at different times, while it is the time of creating the corresponding mastery for some partial role. The creators (in the case of mastery —** **these are teachers, in the general case —** **engineers)** **highlight** **in the working system** **different objects from the background** **with their attention. All creators** **can look at their created and developed systems,** **without** **interrupting** **the operation of these systems「dismantling them」, and they can act simultaneously. In the case of dancing —** **all doctors and trainers (body engineers) and teachers (personality engineers) see** **each their own (results of the corresponding systems' work of the organism and results of the corresponding mastery work) in the dancing couple.**",
    "bb313a61f3972be209b11befe4d95dc4": "---\ntitle: '4D systemicity: patterns in space-time, rhythms'\n---\n\nSystemicity — it is always 4D systemicity, while in 3D our systemic levels correspond to different scales of parts of the traditionally understood physical system by their sizes (lengths — parsecs, meters, nanometers), and repetitiveness/patterns are described by shapes/forms. Moving to 4D, in time we also talk about systemic levels: the time scale is defined by \"size\" in time (durations — billions of years, minutes, femtoseconds), and repetitiveness/patterns are described by rhythms/cadence.\n\nSystemic rhythmics[^1] — we look not only at the classically understood musical and dance \"rhythm\", but also consider other levels of consideration in music and dance: cadence at the tact level (several seconds) and at the level of the musical/dance phrase (dozen seconds), large forms at the level of the piece (for example, verses-choruses in songs, climaxes-resolutions in dance performances — up to a minute), at the album/concert or party level — the level of the \"set\" (twenty-forty minutes), \"big concert form\" (this is a forgotten level in music after the start of streaming services, where some movement rhythm of some idea about half an hour to an hour also forms, it remains today only in the form of DJ sets on mixcloud[^2]). Further, more significant rhythms in music and dance can follow — regular dance parties and philharmonic subscriptions (weekly and monthly), regular festivals (annually).\n\nIn the rhythm itself, we distinguish\n\n-   functional temporal parts (roles in rhythm) and\n-   constructive temporal parts (what we make of it, what onsets-offsets emerge on what movement — beats, or notes, or gestures, or scientific-technical council meetings, or the morning tooth brushing).\n\nIt's easiest to comprehend this where rhythms are abstract and primary: music and dance, starting with the \"tact level\" (it doesn't even have a special name! Rhythmics in everyday life ignores systemicity, in literature on rhythmics there is no systemicity yet, systemicity needs to be introduced there, this is the frontier of systemic thought. To some extent, this overlaps with current investigations into patterns of unfolding physics in time, for example, time crystals[^3]).\n\n**Multidancer**::\"type/specialization of a dancer role\" dances in significant stylistic diversity. A multidancer works with systemic rhythmics but also with various levels of embodiment (literally: different body parts, the whole body, the body in the environment, a pair of partners in the environment, and so on), unfolding all of this at different rhythm levels.\n\nOne of the discussion problems is the need to consider the difference in referential indices (description from the first person — the dancer, or the third person — the external coach or spectator). The body — is what is perceived from outside by the third person, soma — is the body perceived from within. Therefore, for the multidancer, the rhythmics is not bodily, but somatic.\n\n**Systemic somatomechanics** (biomechanics — is the mechanics of the body/body as perceived by a biologist \"from the outside\", and somatomechanics — is the mechanics of the soma/soma/organism) precisely gives the possibility of discussing the movement of the soma, that is, the movement of the body perceived and generated from within. Of course, systemic somatomechanics works for various methods/ways/cultures/styles of movement — figure skating, sitting at the computer, swimming, wrestling, multidance (the method by which a multidancer-dancer moves). In the synonymous row, in the case of movements, the term \"method\" or \"way\" is often not used, but \"culture\" and \"style\" are. Multidance thus includes many substyles/subcultures of dancing.\n\nIn rhythmics, we are interested in patterns/templates/repetitions/laws of changes in the body and dancer's soma, with changes at different time scales, minimally:\n\n-   Slow scale of initial training as \"creating craft/MVP\", that is, the transfer of culture basics. The dancer's personality states change during the creation/manufacture/training, the time of creating a dancer, craft is created by the agent at the most abstract levels of the memome: principles of \"dance composition\"/\"universal large movement patterns\", lexicon/\"less universal smaller movement patterns\", \"dance style\"/\"smallest movement patterns\". In professional ballet, about ten years are given for this, in social/partner dances (amateur level) about a couple of years. The output is an MVP of craft, replication of culturally conditioned foundations. It is not customary to talk about \"rhythmics\" on such time scales, but that does not mean it is not there. Experiments show that the longer the time intervals (years), the worse people are at reasoning about such intervals. This ability to reason about long time intervals needs to be specially learned.\n-   A faster scale of memome change during personal creativity, the development of a personal unique substyle/manner, the update of the dancer's craft (smart mutations of the memome, obtained by changing the dancing craft during memome mutations, observed by spectators and felt from within by the dancer, thus the method changes as well because the algorithm has changed). This is continuous activity, \"skill development\", evolution. With success, the emergence of a new dance style, if the result of these memome changes is recognized as significantly deviated from the culturally conditioned standard. Changes here at the scale of six months to a year. Such time intervals are already available for discussion, but working with them requires concentration, manifesting at this time scale — and this is not so trivial, here you can't just say \"focus!\" to get an immediate effect. Written culture helps, of course: tracking achievements in writing (in the case of dancing, for example, you can make video recordings and store them).\n-   Fast scale of phenome change (state of body and soma during the application of dancing craft in performance/output/execution), work/functioning of the dancer's craft. Changes here are in the rhythm of the music — the longest time measure at the composition level (say, three and a half minutes of dance time), and the short measure is fractions of a second between pulse beats in the music.\n\nThis necessity of considering different time scales runs as a red thread through all works on evolution, emphasizing that the difference between the typical time of events on different scales will differ by several orders of magnitude (indeed: from fractions of a second to several years — that's many orders of magnitude!).\n\nMultidance::method/culture/style::behavior sounds like a noun (dance), but it is a behavior style (type of behavior) engaged in by the multidancer's role during the \"dance work\" (application of the method). Multidance is also a composite method (broken down into different included smaller cultures/styles/methods/ways of dancing, such as tango, salsa, kizomba — in multidance all three will be involved).\n\nAnd we consider that the hierarchy of various divisions should not bear different names — therefore calling large patterns \"composition\", smaller ones \"dance content/lexicon/figures\", and even smaller ones \"dance style\", and sometimes highlighting personal even smaller structure as \"manner\" — is a poor method/style of naming. If a multi-level/hierarchical structure is given, it is better to leave the type of objects at each level the same, unless prefixing \"sub-\" and \"super-\" (and at the same time ensuring that it concerns compositional relations and not specialization/kind-species, so it is better to say \"kind\", like \"Cuban salsa\" is a \"kind of salsa\", alongside \"New York salsa\").\n\nThe number of levels in divisions changes, attribution to specific levels is a subject of agreements in the project. What in one project pertains to the dance composition level, in another project will be the dance style level — therefore, it would be good to somehow standardize division of movement/behavior/change patterns within a project in terms of the names of this division. How? Decide this within your dance project, there are no established names for methods/practices/cultures of the dance stack methods.\n\nAll the same can be considered in relation to any other agents, including even agents in a broad sense, that is, not very \"smart\". For example, some simple washing machine automaton that \"perceives itself from within\" through measurements from some water level and temperature sensors, thus having an analogue of \"organism\", external behavior of \"body\"/equipment and orientation towards \"soma\"/equipment-\"felt\"-from-within. Of course, \"sensor measurement\" is very conditionally related to \"feelings\", therefore, quotes are used, it is an anthropocentric metaphor. Well, if we talk about some organization, comparing it to a dancer is a common metaphor. What we bring here:\n\n-   **referential index** (whether we refer in descriptions of practice to the external body or internal soma, sometimes called \"perception position\")\n-   Evolutionarily understood **rhythm** (frequencies differing by three orders in the course of evolution — norm, we remember the work of the Vanchurin group).\n\n**Concentration** also works with attention management in 4D, it needs to be considered on different time scales: right at the spot, \"right now\" for a few seconds, for the time of a long discussion (from a few minutes to a few hours), for the time of habit formation or project execution (month-year), for holding long periods (several years, planning education, planning engagement in some area, executing very long projects like designing and building nuclear power plants). Besides these time intervals, it is necessary to note which systems, their supersystems, and subsystems are highlighted by attention and at what systemic level we work, which important characteristics we consider, how and when (rhythm!) we remember interrupted discussion about some objects and move to others. Concentration also seems like a noun, but it is a method/culture/practice engaged in by the \"concentrated\" agent (in our case, we prefer the instrumental rather than purely \"mental/brain\" method of concentration, which is most often an agent-cyborg, that is, a person with a computer or at least paper-pen — concentration is ensured not by the skill of a \"brain trained for good memory\", but by the skill of using reliable external memory, attention is held by reminders of important objects on an external carrier relative to the brain).\n\nIn **systemic** **management**, we consider the organization as a system, highlight systemic levels in the organization (hierarchy of org-roles, hierarchy of org-links), adhere to systemic levels of the target system (different methods and thereby different org-roles work with different levels of the target system), comprehend the course of creation and development of target systems in terms of the rhythmicity of development steps (steps of creating increments and transitioning to the operation of created increments) and reducing the time of such steps. Management also adopts various rhythms (cycles/cadence/rhythms), unfolding over time on different scales in the course of creation and development: PDCA, OODA, POOGI cycles, and many others (considered in the \"Systemic Management\" course). Production rhythmicity is also the subject of operational management: the batch flow through production and sales to eliminate delays (rhythm disruptions). All types of management methods consider time anchoring and some cyclicity/rhythmicity/\"time unfolding patterns\", and this is common for any engineering, not just organizational engineering.\n\n**Leadership** (one of the management methods) deals with setting up the agent as an actor in an organizational/project/labor role and establishing cooperation (analogous to \"creation, assembly, and adjustment of a technical system from parts\"). In leadership, we keep attention to organizational systems at three minimum time levels. Starting with 1) attention time in the spot, \"seconds\" (leading a leadership conversation with an agent being set in a role, with all unexpected turns in communication), 2) leadership conversation time as minutes and hours, 3) time of establishing a habit for action in the role as usually weeks-months, 4) existential time as \"replacing some role habits with others\", years of career growth and profession changes. Leadership as a method of work is engaged by the role of the leader (agent in the role of leader), leadership can be distributed/shared[^4] and then rhythmics need to be tracked in relation to the agent becoming established in the role — but the roles of leaders will be performed by different agents, creating an \"atmosphere\" making it impossible for the target agent to avoid being set in the role, and it is also necessary 5) to consider the time of establishing this \"atmosphere\" of distributed leadership, which can be quite significant — because some method leadership variants need to be taught to most employees.\n\nBut here is also the output to a higher systemic level org-link = personality in an org-link = team and even org-link = \"team of teams\"/collective. Methods here will be different for each duration/rhythm/cadence levels (keeping attention during reasoning about the role/in-role of the agent-person as an actor needs one way/method/practice/culture, and working with a team already others, similarly \"establishing a habit of work\", organizing one person for work in the role requires one time and one method, but for the team, the time and method are different). One can further increase the time scale and discover that there the method leadership variants change (for example, the idea of distributed leadership did not appear immediately, the previous understanding was leadership as a sole management of people), this is the time scale of evolution of methods, time of cultural changes.\n\nFor each systemic level in the organization, leadership work is conducted relying on different methods:\n\n-   level of personal culture/style/method of work, considering one person (or one AI-agent) — this is training (with neural networks now — it's prompt engineering). This educational work with humans, considering their neurophysiology and the similarity of such work with AI-agents, is considered in detail in the \"Personality Engineering\" course,\n-   level of corporate culture, collective, working with cultures/styles/methods of behavior in groups — at the core there already are management methods (and at their core — sociology::discipline, study of human behavior in their groups).\n\n**Consideration** **of work methods** **and** **their creator roles should be** **systemic, that is,** **multilevel, and these are levels of both size and duration:**\n\n-   **Different** **work methods with** **sub- and super- systems** **of different** **systemic** **levels** **in** **target systems** **and their environments** **during their creation (some roles make bricks, others build walls from bricks and mortar, third construct houses, fourth develop territories, these roles are divided among different agents with mastery in these work methods)**\n-   **Different** **methods** **work with the same objects on different** **time** **scales and can also be divided among different people. Some agents slowly teach other agents craft (e.g., three years learning to dance), then these other agents use this craft in completely different time scales (e.g., dancing a three-minute track at a party, and also applying this taught craft multiple times, e.g., twenty years).\n\nThinking methods, including systemic thinking itself, can have their nuances at different size and duration scales, but they are transdisciplinary because they are applicable to all scales and help to link reasoning at different scales. This very reasoning about many scales, many levels of sizes and durations, many levels of complexity is precisely systemic thinking as part of the thinking methods of the intelligence stack.\n\nSystemicity always turns out to be 4D, that is, patterned in terms of both spatial forms and temporal sequences. **Design in the creation process** **takes place in classes/patterns of things and rhythms/patterns of changes of things over time. Instances of things during production-according-to-projekt and use** **also exist in space-time, being instances of things taken as examples of implementations of not only classes of these things but also rhythmic classes, forms of unfolding over time,** **templates/patterns of repetition over time — we usually speak of changes-in-time of instances as conducted works, and changes as time patterns —** **as methods/functions. We remember that we can talk about time only through some changes of certain spatial objects —** **discussing moments of time as \"events,\" state changes.**\n\nWhy is all this needed? Systemicity is needed to overcome complexity: to present for every practical situation not one super-complex description but many simpler ones, corresponding to familiar (classes!) spatial-temporal parts (physical objects in 4D). Shapes in space, rhythms of changing states of shapes over time. When you get used to this, dealing with complex situations becomes simpler: thinking about very different situations the same way. And this \"sameness\" substantially accelerates thinking, leaving time for deep reasoning about various surprises and even conducting additional experiments.\n\nIf there is no sameness, \"everything\" will be surprises! In such a situation, it's constantly unclear what to do. Systemic thinking immediately sets the question: at what systemic level are you working and in what role with which method? And the answer should be at not only the \"level of substance size\", but the \"size in time\". This standard reasoning: not \"what to do at all\", but \"what is our system, how should it behave in the environment, how should it be arranged, from what and by what methods should it be made, which creators should make it, how to create those creators\" — this is the super-shortly expressed same systemic mantra. This typical reasoning will go quickly, and it will immediately be clear what has already been thought through and what has not, and what to do next. This is in a sense also the \"rhythm of systemic thinking\", constantly spinning cycle, pattern, thinking template.\n\nAttention concerning \"part-whole\" highlights patterns from the background not only in 3D (pulling out parts of space), moreover hierarchically at different scales. Attention hierarchically highlights concerning part-whole patterns from the background in 4D (pulling out parts of space-time): besides shapes, we also deal with rhythms there. And this is also about systems and their behavior, this is systemic thinking too. **If nothing repeats over time in your life, it means you are doing something very wrong, living in chaos. Life and work — they are rhythmic!**",
    "c913832c6a720421f3b7e6dbbf56c5b2": "---\ntitle: Not everything called a system is one\n---\n\nAll the various definitions of a system agree on one thing: **a system\nas a whole consists of interacting parts, which in their interaction\nproduce** **emergence/system effect**, i.e., when parts of the system\ninteract, the whole system exhibits new (emergent) properties that the\nindividual parts do not possess. In simple terms, gears and springs in\nmechanical wall clocks have their own properties (for example, gears -\naccuracy in manufacturing and wear resistance, springs - elasticity),\nbut the clock as a whole, composed of these gears and springs, has\ncompletely different properties (for example, timekeeping accuracy,\ndimensions), and the interior of a house, as a whole consisting of\nclocks, walls, furniture, household items, and decorations, has yet\nanother set of properties (for example, convenience of passage,\nlighting). Emergence is precisely what happens when “timekeeping\naccuracy” emerges as attention shifts from the parts of the clock to\nthe whole clock, and convenience of passage emerges when attention\nshifts from the clock to the interior as a whole. This is important for\nthe division of labor: accuracy in manufacturing gears is usually\nhandled by certain people (we write “people” for simplicity, though it\nwould be more accurate to write \"agents\") with a high level of skill in\nprecise metalwork, timekeeping accuracy by other people, clock\nengineers, and convenience of passage in an interior by yet others,\ninterior designers.\n\nNuances might differ, but the assembly of parts (here we’re talking\nabout assembly, not division into parts, the relation of composition),\ninteraction of assembled parts, and the resulting emergence/system\neffect are present in all schools of systems thinking. Different\nschools of systems thinking have two traditions of interpreting the\nrelationship between parts and whole: the engineering tradition, where\nparts can only be physical objects, and the general philosophical\ntradition, where parts can be of any nature—both physical and mental\nobjects.\n\n**Our interpretation in the course is** **engineering,** material/physical, where **we’re talking about parts of the system as physical objects** **in** **space-time. We more or less adhere to the provisions of the engineering ontological standard ISO 15926-2:2003.** **A part can be** **a role-playing object, but only when this role of the object-part is played by some constructive object** **or even a group of constructs.** **A part can be a place in space—** **but in physical space, not** **“mental”/mathematical space.**\n\nWe do not recommend considering processes::behavior as parts of the\nsystem, but the parts of the system themselves and the system as a\nwhole must have behavior: changes in the state of parts and the system\nas a whole during the interaction of parts. The behavior of gears in a\nclock—they rotate and transmit motion, the behavior of springs—they\ncompress and decompress, storing and releasing energy, the behavior of\nthe clock—they “run” and show time, the behavior of the\ninterior—it provides convenience for anthropomorphic agents (humans\nand robots) and is well-lit both during the day and at night. These\nchanges in state (assembly of the system from parts during creation,\nsome changes of parts during use) are “behavior,” so we always tie the\nconsideration of processes to the physical world: processes are\nrepresented by the parts involved in these state changes. If one wants\nto show the process of “an apple falling,” it’s necessary to present it as\nan apple, a section of the Earth under the apple, and changes in the\napple's state (its relative speed to the section of the Earth and the\ndistance between the apple and the Earth during vertical falling). Everything is material.\n\nIn the material/physical variant, parts do not exist for abstract/ideal/mathematical objects (classes, types, sets, etc.) because these parts are not physical: they do not have volume in the physical world they occupy, so it is unclear what consists of what. For example, it’s impossible to verify that all “mathematical molecules” as parts are included in the number of “mathematical cells” or “mathematical organisms” because it’s impossible to interpret a part as a part of the space-time volume occupied by the whole.\n\nWe reject systems thinking using the concept of “part” for non-physical/mathematical/mental objects (e.g., descriptions: talking about parts of paintings, parts of texts), because it will be completely unclear what the “interaction” giving the system effect is for parts as non-physical objects. Most often, one can hear about some algorithm that performs computations involving several non-physical objects at once—but these objects themselves do not interact; the conversation shifts to the computer with its algorithm and its methods of operation! This is constructivism in mathematics, a shift to operations of creating objects instead of discussing relationships between objects. In our version of systems thinking, we do not follow this approach in constructive mathematics; instead, we adhere to the engineering tradition of excluding mathematical objects from consideration as complete systems.\n\nIt must be noted that research is indeed underway exactly along this line of constructivism in mathematics: if we include in the consideration not the mental objects themselves but computers or their generalizations—creators/constructors, working with descriptions by some algorithms, and express the descriptions themselves as operations for constructing these descriptions (constructivism in mathematics), then we can approach systems thinking for mental/mathematical objects. But this is the frontier; there are currently no applications for this approach in engineering and management methods, and we will elaborate on this further in the course and provide literature—for the most curious. For now, let’s leave it: systems are always physical, always material.\n\nThis “physical” (but also role-playing, constructive, spatial, etc.—they all ultimately base on the physicality of the system and its parts) interpretation of dividing a system into parts is our version of the systems approach. This interpretation is chosen due to the criterion of adequacy of thinking: **our thinking about systems is always consistent with the physical world.**\n\nOur projects for creating and developing systems always somehow change the physical world; they are not fantasy. Deliberations about systems are thereby grounded/grounded, meaning all abstractions eventually have foundations in situations in the physical world, they are not pure “mind games”; physically impossible situations are tracked and excluded from considerations. If nothing happens in the physical world as a result of our projects, we do not engage in such projects: our thought always ultimately relies on the physical world.\n\nIn many other interpretations of the systems approach (e.g., in the classic and rather outdated “general systems theory” [[https://en.wikipedia.org/wiki/General_system_theory](https://en.wikipedia.org/wiki/General_system_theory)]), the word “part” is used informally, loosely, and the “whole” is assembled from a variety of objects, including abstract ones that are poorly defined in terms of their presence in the physical world: physical objects (as in our case!), but also words, rules, moods, intentions—anything. **In our version of the systems approach, we** **will not** **consider** **non-physical/abstract** **objects** **as systems** **or parts of systems.** **Descriptions live in the world of concepts/mathematical world;\nthey are not systems.**\n\nThus, we do not recognize different “systems of knowledge/rules” as systems from the systems approach—bodies of knowledge, sets of rules, and even a system of equations as a “set of regularities”. Stanislavski’s system, Montessori’s system, Plato’s system, the political system, the “minus 60” system (this is what one set of weight-loss rules is called), the legislative system—all these are abstract wholes consisting of some abstract parts-elements (knowledge, rules, sometimes even implied/implicit/unexpressed/tacit—not expressed in signs on a medium, i.e., not documented)—all these “systems” (in quotes for our version of the systems approach!) do not occupy space in the space-time continuum. They are not real systems from the systems approach; they are only called “systems” in another lexical sense. Very often, people use the word “system” just to indicate that they have thought in some way while assembling some parts of this knowledge, somehow aligning this knowledge, rules, equations with each other, creating some structure. For example, grouping all rules into separate groups of rules, including something, excluding something—even (non-spatial!) “boundaries” exist, separating “included” from “not included”. But the term “part” for such usage of the word “system” in other (not from the systems approach) lexical senses here does not denote a physical object; it does not occupy space/place in the space-time continuum, these “parts” usually do not even form a hierarchy in terms of the “part-whole” relationship among physical objects.\n\nAlgorithms are not systems either, including algorithms/knowledge/theories/methods of work disciplines::“generalized algorithms for constructor”, and “generalized algorithms for tasks performed by the creator” (algorithms/knowledge of methods where material/physical types of\nprocessed material and use of equipment for working with such material\nare substituted). All such “algorithms” are for universal (Turing complete) computers/computers (physical, storing state on a material medium!) and universal converters-creators/constructors (which are physical!), operating according to the slightly extended concept of an algorithm (i.e., description of a work method), as described in constructor theory. True systems here are:\n\n-   Universal (Turing complete) computers/computers (classical,\n    quantum, neuromorphic, optical, etc.) “executing algorithms”\n    / “following theories” / “making inferences based on existing\n    knowledge”. If there are multiple algorithms, and the conversation\n    involves “systems of algorithms”, these are “non-true systems from the\n    systems approach”, but merely a term denoting a considered set of\n    descriptions (much like talking about “systems of equations”).\n-   Universal creators/constructors (machines, robots, people,\n    organizations of all these), performing work according to some\n    algorithms/knowledge/explanations described in\n    textbooks/regulations/instructions/codes on work methods (often for\n    inanimate constructors, they are not called methods/practices/work\n    cultures but simply functions—the lathe performs the function of\n    turning a part, but the agent-lathe operator—follows the methods of\n    turning parts). If “system of work methods”::“set of behaviors” or\n    “system of descriptions”::information is mentioned, these are\n    “non-true systems from the systems approach”, the word “system” is also\n    used as a reference to a considered set of descriptions.\n\nAnother class of non-systems from the systems approach due to their\nabstractness (nonexistence in the world, absence of occupied space in\nthe space-time continuum)—**systematics/taxonomies**. In systematics/taxonomies, the discussion involves classifiers: classes of classes (sets of sets), which ultimately classify somewhat similar systems (physical and abstract). These are hierarchies built using two types of relations: **classification** (classification, “subsuming under a class,” including elements in a set) and **specialization** (specialization, genus-species, subsets in a set). Lamarck’s classifier (Lamarck’s system) consists of classes of somewhat similar animals, the Universal Decimal Classification (UDC, decimal classification system) classifies books, grouping in its classes books somewhat similar in content, The All-Russian classifier of products and design documents OK 012-93 (ESKD classifier, unified design documentation system, which itself is a system of knowledge/rules)—all these are not true\nindividual systems, they are merely classifiers for classes of systems\n(physical, as we understand them in our version of the systems approach)\nand classes of abstract objects. Nevertheless, classifiers are useful\nas they provide names for systems, meaning that when encountering a\nclassifier, it is helpful to look not at the classifier itself but at\nthe physical objects being classified. And then clarify that the\nclassifier merely describes an object that may have many descriptions.\n“A rose by any other name would smell as sweet”: one and the same object\ncould be easily classified by different classifiers, i.e., described\ndifferently, have different names, belong to different\nclasses/sets/taxa/types depending on the classification goals. In any\ncase, this problem can be solved only by discussing the system and\ndistinguishing it from discussing the classifier.\n\nA “terminology dispute” is futile, avoid it. Questions like “Is\nobject X of type Y?” are interesting only when it is some classifier, the\nresults of classification by which will have material consequences.\nUsually, this is a state-approved classifier, like the disease\nclassifier, from which your disability status will follow under the\ndisability classifier, and from being classified into a disability group\nwill come the receipt or non-receipt of a pension. From the classification or non-classification of some subspecies of tiger to the species of tigers, in general, nothing depends. But if it is a species listed in the Red Book prescribed by legislation, the consequences are clear: fines for hunters.\n\nThe activity type classifier (essentially, it is a classifier by types of work methods) can be important if some types of activities need to be specified in a charter, and non-compliance leads to penalties, or if the type of activity is licensed, and the outcome is again penalties—I think you get the idea. There are quite a few such classifiers where classification leads to some administrative consequences ^[<https://classifikators.ru/>]. In\nany other cases, systematics are interesting for roughly specifying the topic of conversation but can be changed at any moment, systems can be described in various ways, and they do not change from changing the way they are described: a hundred different photographers and a hundred different artists will produce 200 images of the Eiffel Tower, and it will remain unchanged. Systematics used for design are more interesting, but anyway, several such systematics can be used at any given time.\n\nSo, systematics, “classification systems,” taxonomies are interesting as hints that they classify some real/material/physical systems. As always: if you encounter a “description” while searching for systems, look for what is described—systems may be there. But they might not be, check, descriptions can describe descriptions as well. Classifiers as systematics can easily classify non-systems and some descriptions (other classifiers, for example).\n\nSo **not everything called a system::“type from the meta-meta-model in the systems approach”/“type from the ontology of the systems approach” is really a system::term/word/name. And not everything not called a system::type isn’t a system::term/word/name!** For example, few would call a household refrigerator a “food cooling system” (but not a household refrigerator—easily), but in the systems approach, it would clearly be a “household refrigerator”::system. **The type “system” is given to some physical object by a creator in some role, who for some reason needed this system and highlighted it with their attention from the variety of different physical objects in the surrounding world.**",
    "77a978850e808d8de6ad131a535576b4": "---\ntitle: Emergence and Meta-System Transition\n---\n\nTo consider a set of physical parts as a system, it is necessary not only to recognize that this system is part of a supersystem and has its own subsystem parts but also to satisfy one more condition: this system, as a set of interacting parts-subsystems, must exhibit some property that its parts-subsystems do not have, leading to the possibility of a new function of the whole system, which includes the parts-subsystems. This phenomenon is called **emergence** (systemic effect). Moreover, this property and the new function disappear in the supersystem, which includes the considered system (but the supersystem acquires new/emergent properties that the system as its part does not have; this systemic effect manifests at each transition from one systemic level to another).\n\nThe display of time is not present in the hands::part of a mechanical clock, nor in its gears::part, nor in the case::part, nor in the spring::part. But the clock::whole, when operating, makes the display of time possible—due to the interaction of its parts. Each part of the clock performs its function as part of the whole clock, and a systemic effect emerges (emergence, new property, new function appears): the clock starts showing time for the supersystem in the systemic environment. However, the room (or even a smaller subsystem of the room, which includes the clock—interior), does not show the time, even though the display of time by the clock is available within it and makes it more comfortable to live in.\n\nNotice: **crossing** **the boundary of** **a systemic level** **(also called a meta-system transition)** **changes everything; it is literally audible in discussions about systems, visible in descriptive texts:**\n\n-   Some roles in clock-related projects specialize in methods that change the state of already assembled and working clocks (using the emergent property of time display, creating an interior of a room, which has different emergent properties than the clock), using the word \"time\" regularly as something that needs to be seen (for example, whether an additional lamp is needed to see the mechanical clock’s face at night, \"check the time\"), and they do not even mention materials for clock parts (this is two systemic levels down from the interior: the clock itself and further down to its parts—their materials)\n-   Other roles—engage in clock assembly methods (creating a system with the emergent properties of a clock), concerned with the accuracy of time shown, rather than with its utilization.\n-   Third roles say nothing about the clock itself but just manufacture its parts, interested in the strength and methods of metal processing—gears, springs, case. These parts also have emergent properties, behaving and being characterized entirely differently from the individual atoms that make up these parts.\n-   ... one can go even further down the systemic levels; some roles deal with the materials of clock parts: their strength, expansion when heated, etc. —this is reflected in the speech of agents in these roles as the use of entirely different terminology.\n\nOf course, all these systemic levels are coordinated with each other, and material (its properties affecting the properties of gears and hands) and time (the clock needs to be tuned so that the gears and hands show the correct time!) and even the interior of the house (discussing the mounting of the clock on the wall, the size of the face to be seen across the room) are regularly mentioned in conversations among clock assemblers. But each systemic level differs in its systems, which exhibit certain properties, changing states in operation and during the creation of supersystems from these systems by methods of creating these systems and supersystems from these systems (some systems need to be cast in molds from molten metal, some—assembled from parts, like panel houses, some—trained, like craftsmanship). These methods change the states of system parts to get a whole system and launch it into operation.\n\nDifferent methods of creating and developing systems are performed by different roles in the creation system, speaking a characteristic language used to discuss systems of one systemic level. As we will see further—even a complete set of languages, since different roles specializing in the discussion of the problems of a specific systemic level use different languages to pursue their interests.\n\nDifferent roles lead to agents specializing in the mastery of methods of these roles' work. Agents specializing in systems of different systemic levels will also be different. People (or even AI, or divisions) engaged in designing and manufacturing clocks are not the same as those dealing with interiors, nor those dealing with materials for clock parts. This is the division of labor: various work methods are used in projects not just on their own, but due to the emergence of properties and functions in systems when systemic levels change in the attention of roles involved. The creator of interiors—an architectural bureau specializing in interior creation methods, the clock creator—a design bureau (designers dealing with the aesthetics of clocks—there) partnering with a clock factory, creators of materials for clock parts—factories that will be the suppliers of the clock factory.\n\nTransitioning attention from one systemic level to another changes the set of leading creators’ roles, their work methods, and the objects of these methods, changes the terminology of these work cultures/\"languages of conversation.\" This happens due to the change in the set of concepts expressing the objects of attention of the systemic level: when attention shifts from systems of one systemic level to systems of another level, the concepts for parts of the system and their important properties change, so the terminology to express these concepts changes.\n\nAn organism::whole of an animal jumps and runs when used, but its organs::parts—do not. Jumps::behavior and running::behavior—are emergent functions of the organism. Organs perform certain actions inside the organism; they have functions in the organism (e.g., muscles contract, the liver cleans the blood, lungs oxygenate it and remove carbon dioxide), manifesting their systemic/emergent properties as whole organs, individual cells inside the organs (parts of the organs) cannot do this on their own, yet it seems that the cells inside the organs do everything in their interaction!\n\nSystems not only consist of parts themselves but exhibit their (subjectively determined!) purpose through the performance of some (subjectively highlighted!) part of their functional role within the supersystem::whole. In the previous sentence, three systemic levels were mentioned: 1. subsystems, 2. the whole system from these subsystems, it exhibits emergent properties, is a part/subsystem, and has a function in 3. the supersystem.\n\nA key feature of systems is that \"everything is connected to everything,\" **the parts** **of the system within the system behave differently than they do outside the system, since they interact with each other.** Atoms outside a molecule behave differently from inside one. Cells outside an organ behave differently from inside an organ. Organs within an organism behave completely differently than organs separate from the organism.\n\nTo understand very complex systems consisting of a vast number of elements, they are represented as a breakdown/decomposition, at every level of which a systemic effect/emergence is expected. For example, here are individual parts of a car:\n\n\n![](03-emergence-and-meta-systems-transition-28.png)\n\n\nDealing with these individual parts, it is impossible to understand how a car works and what all these screws and cables are for. To explain where a car's motion comes from, we must consider the engine as a separate subsystem of the car, that is, the engine::subsystem as a whole part of the machine::system (however contradictory this \"whole part\" sounds), composed of subsystems of the engine, even smaller parts. To explain why a car can comfortably hold several passengers, we must consider (highlight with attention) the interior::subsystem of the car::system as a unified whole from the many parts that make up the interior.\n\nWe must consider separately assembled all the parts::\"subsystems\" of the braking system::\"system\" of the car::\"supersystem\" (for braking system developers, the car is a supersystem), to show how the car can brake. All this are emergent properties, it is useless to discuss for understanding the braking system not its parts, but to immediately go down to the systemic level below and discuss the materials from which the parts of the braking system are made. That is, the emergence/systemic effect of braking appears when the materials have already become parts, and braking occurs due to the interaction of already manufactured and correctly placed parts. Although formally \"for mathematicians\" braking occurs due to the interaction of materials, and even the molecules of materials! **Systemic thinking** **is not mathematical thinking; it is oriented toward managing attention** **for** **discussing some actions of agents, not formal correctness.**\n\nMargarita the cow has a tail as part of her, Margarita the cow is part of the cattle herd.\n\n\n![](03-emergence-and-meta-systems-transition-29.png)\n\n\nIt is improper to allow saying that the cattle herd has a tail, although this seems correct: all the molecules of the tail (specifically: of Margarita the cow) are part of the molecules of the herd. Moreover, the herd here is not an abstract object \"a set of cows,\" but literally all the molecules of the cows in the corral. Saying \"herd's tail\" is mathematically, logically, physically correct, but not systemic, and this seems intuitively understandable to everyone: it is hard to assume what you can do with a \"herd's tail.\"\n\nThe allocation of systemic levels is subjective and greatly depends on the method by which work is carried out with systems of these levels. It is not intuitively clear whether one can say that a carburetor is a part of a car with an internal combustion engine. Is it a separate part of the car, or is it part of the fuel subsystem, or part of the engine?! What actions should be taken with the carburetor, at what systemic level should it be considered? This will be decided by the engineering team in each project; they must agree among themselves. But it is intuitively clear: it is improper to say that the piston or cylinder of the engine is part of the car. Formally, it is correct, but improper, as in the case of the tail as part of the herd, you cannot discuss the functioning of the piston and cylinder directly in the car.\n\nA good criterion here is emergence: discussing the car as a whole usually requires discussing the properties and functions of the engine as a whole, but whether or not there is a piston and cylinder inside the engine is not important when discussing the car as a whole.\n\nAt each boundary of the systemic level, systems change as the primary objects of attention, as well as related \"considerations\" / \"concerns\" / \"objects of interest\" / \"important characteristics\" / concerns. During a meta-system transition (transition from one systemic level to another—from parts to wholes or from wholes to parts), along with work methods leading disciplines/theories/models of these methods describing the behavior of the system involved in the work methods at a given systemic level, the professional community supporting the language of conversation at this level and using these disciplines/knowledge methods along with the necessary tools change.\n\nOn one level, we discuss tails and horns in a cow (with all the problematic allocation of them as parts with specific boundaries!), on another—the whole cows and bulls as part of the herd as a supersystem. On one level, we discuss the engine and interior, on another—the piston and cylinder in the engine. Different systems set different objects of interest, different languages of conversation about these objects of interest, different roles with different preferences in the same characteristics as objects of interest. Often, these roles are even played by different people-actors because different work methods require different mastery, and it is usually impossible for one person to acquire all kinds of mastery to an acceptable degree.\n\nIt must be clearly understood that the boundaries of all the mentioned systems are \"non-objective”; they are some activity roles in the car development project, for the convenience of their discussions, part of the details collectively (sometimes called “wholecollectivity” in systems thinking, emphasizing that it is not just “assembly,” but the creation of a new whole from parts) called “engine,” another wholecollective/assembled part of the details “interior,” and the third—“brake system.”\n\n**Collecting** **attention** **from** **separate** **parts into a whole to** **discuss** **the** **manifesting systemic effect—** **this is the core of the systemic approach, the most important thing in it.** **In engineering, separate parts are also made separately, and then physically assembled—** **but this is engineering, not thinking. In thinking, these parts are highlighted by attention, and whether there will be assembly, or cultivation, or training, or some other way of manufacturing parts at the most different levels—is discussed separately, when discussing engineering** **methods.**\n\nEmergence in systemic thinking is the main criterion for combining certain objects into a system. If you have assembled certain objects in the system based on domain belonging/domain criteria (replaced the relationship \"part-whole\" with the classification relationship by belonging) and did not check that their interaction (and they do not interact at the time of operation! They just \"belong,\" are \"part\" in a common sense, not physically part! Common sense use of \"part\" does not distinguish between physicalness and mentality!) gives emergence—you have incorrectly identified the system; you just have an object highlighted by your attention, not a system! **No systemic effect—** **not a system!** Three parts on a shelf in a warehouse are not a system; there is no interaction, no emergence, no new property, no need to highlight the system! They are just three parts lying on one shelf.\n\nHowever, clientele gathered from individual clients is a system. Thus, you can discuss the growth of clientele (number of clients), calculate the values of client churn, choose some \"promotion channel\" for the clientele as a community. It turns out that customers seem not to interact with each other, but the interaction is there: through the company, of which they are clients and which gathers them into a whole—clientele in interaction with itself. This can be easier to understand by looking at a battery: individual battery cells work each \"inside themselves\" and do not interact with each other, but together they form a \"battery\"— and the properties of this battery are determined by the number of these cells. Hence, \"battery\" from clients is clientele; its properties are different than the properties of individual clients, and generally, you can neglect the interaction between clients, but you cannot neglect what happens \"inside the client.\"\n\nDue to emergence at each systemic level, new properties and functions appear, which must be discussed in detail by agents possessing the necessary mastery in the methods of working with these properties::characteristics and functions::behavior. For example, specialists in car furniture can discuss the comfort of furniture separately from specialists in engines, who will discuss engine power.\n\nAll project/activity roles implement preferences in the characteristics/objects of interest important to them, their work methods are deeply interconnected. The concept of the systemic level provides a way to structure the implementation of these preferences. Objects of interest and methods of changing them center around systems at different levels of systemic breakdown, literally \"at different levels of granularity of material subdivision.\" At the center of the theory/knowledge/disciplines/algorithms of these methods/practices/ways/cultures of work are objects of interest in the emergent properties of systems.\n\nWork carried out in projects using a variety of methods of interest consideration gives the maximum manifestation of **useful emergence** or prevents the appearance of **harmful emergence**. Of course, both \"usefulness\" and \"harmfulness\" are subjective here, they are determined by roles based on the knowledge/disciplines of the methods they perform: the whole project thereby comes down first to achieving agreements between roles on the values of important characteristics/concerns for them (the project should give a successful system! Everyone needs to agree!), and then to embodying these agreements in the physical world through work by changing different systems using various methods.\n\nSystemic levels are needed to structure the achievement of these agreements, to better understand what is happening: systems from certain systemic levels are always discussed, which exhibit their characteristics perceived by different roles as important/objects of their interest. It is necessary to ensure that the discussion is held by specialists in the objects of this level. Clock accuracy is discussed by clockmakers, the interior is discussed by interior specialists, and the materials of clock parts are discussed by material specialists. At the same time, usually, specialists somehow understand the characteristics of their level, as well as the characteristics of subsystems (\"what it is made of\") and supersystems (\"what it is made for\").",
    "883ba3a371cde64e3da12aad8736898f": "---\ntitle: Division of labor among creators. Our system. Creation graph.\n---\n\nThe peculiarity of systemic consideration is that objects of all systemic\nlevels exist and interact at the moment of operation **of our target system.**\nIn **our** example of social dances from previous sections, the target system was implicitly set as the performance of a specific task by creating a salsa performance executed by a pair of artists::roles, utilizing their sub-role as salsero and dance sub-roles of leader and follower. The artists are a pair of human-agents (one agent in the role of leader, the other in the role of follower) in one of the Moscow clubs.\n\nBut it’s not a fact that the course author specified exactly “a pair of artists” as the target system in any project! And it is unlikely that the author wrote this text as an ambassador of the subculture, calling the target system the salsa community (often referred to as the “salsa dancers community”, although we remember that besides salseros, there are quite a few other roles— event organizers, DJs, photographers) as part of the social dance community!\n\nOn the other hand, the text is very convenient for choosing some target system: all possible roles as candidates in target systems are laid out clearly. At the same time, we are talking about dancing time (not preparation/creation of the dance performance). During this time, the systemic levels exist and work simultaneously for the roles of the agents participating in the dance, but different roles around the target system focus their attention on different objects, each at its systemic level (some roles are also roles of teachers::creators, they do not participate in the dance!). What happens at other systemic levels during the dance performance (using the skill that is taught) is considered by these roles of the creators, but not at the center of their attention, not the subject of interest.\n\nKnowing the existence of multiple systemic levels in various systems allows us to divide a complex project of creating and developing some systems into numerous separate projects, each executed by some separate roles, and assign roles to different agents.\n\nA brick manufacturer (factory! But we referred to it simply by the role) takes clay, makes bricks. A mason (person! But we referred to him simply by the role) makes a wall out of the bricks. The foreman (a person in the role of manager, here a position is mentioned) creates a building from the walls, coordinating (“work assignments”::method by the manager::role, keeping in mind that in everyday speech the types of meta-meta-model are not articulated) the masons under his position. The developer (company) creates an entire residential area out of the buildings, the construction/development of which is coordinated by the foremen. A construction developer (company) creates some development zone out of the residential areas, and the city architect (a department of the mayor’s office as an institution) creates a city from these development zones (either from scratch or by modernizing an existing one).\n\nThis was all a description of projects happening with systems of different systemic levels. Different agents (humans, AIs, and their organized groups) mentioned in the previous paragraph work with the city in different roles at different systemic levels: some with the city as a whole, some with the buildings of the city, some with the clay of the bricks of the city. Although the phrase “clay of the bricks of the city” already “doesn’t sound right,” by systemic levels bricks and especially the clay of the bricks are far from the city. Usually, **phrases where** **systems of adjacent systemic levels are connected make sense, not those far apart in** **the hierarchy of system composition relationships**. “Clay of the bricks” (here a composition/“part-whole” relationship!) or “buildings of the district” (here also a composition/“part-whole” relationship!) are much more meaningful, as these are systems of adjacent systemic levels.\n\nWe have already mentioned this feature of systemic thinking when discussing the tail of Margarita’s cow, which itself is part of the herd. Saying, “the tail is part of the herd” is correct for mathematics and physics, but incorrect for systemic thinking. Saying that “dancing is biochemical processes in muscles” is formally correct, but incorrect for systemic thinking. Saying that a city consists of bricks and concrete panels, and also roads between groups of bricks and groups of concrete panels, is formally correct, but speaking this way in systemic thinking is wrong.\n\nIf you understand that creating and developing systems of different systemic levels require different expertise (i.e., thinking systemically), the very first thing to do is to assign the creation of systems of different levels not to one agent, but to an entire group of agents, each of whom manages to acquire deep expertise in their field over a long period of their life and work.\n\nRobert Heinlein wrote: “A human being should be able to change a diaper, plan an invasion, butcher a hog, design a building, sail a ship, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects”^[Robert Heinlein, “Time Enough for Love,” 1973].\n\nThis aphorism can be understood as a hymn to human intellect: potentially, yes, any person can master all these methods, even “pitching manure” (including on an industrial scale^[<https://direct.farm/post/vneseniye-organicheskikh-udobreniy-5847>], not just on an amateur gardening scale^[<https://navozov.ru/blog/navoz-kak-udobrenie-vidy-i-sposoby-primeneniya/>]). But, unfortunately, over a human lifetime, it is impossible to learn to work professionally by all these methods, and also impossible to keep up with all changes in continuously improving work methods to maintain one’s expertise as up-to-date. The solution here is **division of labor,** the usual path of civilization. One “non-divisible into specific methods” method/task/practice/activity/occupation, which was performed by one person in the past, today begins to be performed well if this performance is conducted by a dozen or more different roles, each specializing different agents (humans and AIs, and even entire organizations). These agents also involve various increasingly specialized tools for performing these rapidly diverging roles. In these more and more narrow methods/“types of labor/activity/engineering,” individual and collective agents achieve high levels of mastery, as they have enough time to achieve this mastery, focusing on performing one narrow work method, they have time for:\n\n- **Development**—changing the mastery of one generation of a method to the mastery of a new generation of the method, for example, transitioning from the method “programming in Fortran in the 1980s” to the method “programming in Matlab” in the early 21st century, and then to the method “programming in Julia” in the 2020s. Development is “learning to do something new,” implying two methods: the old one (possibly absent if “never did this before”) and the new one.\n- **Improvement**—achieving a high level of proficiency, fluency in performing work by some method of the current generation, “getting the knack.” For example, after transitioning from one programming language to another as “development,” i.e., changing the work method (and the knowledge/discipline and tools), you still need to spend time on improvement/“fluency and errorlessness” in using that language, “training” already existing mastery, reducing the percentage of errors and increasing the speed of what you already know how to do. Improvement is about one method, which needs not only to be learned but also to achieve a high level of expertise in it.\n\nIn the example of social dances from previous sections, it describes modern division of labor: there is no single “creator of an artist's skill.” Agents dancing salsa in a club have many different creators performing various roles—from doctors through fitness trainers/instructors and dance teachers to dance style gurus and choreographers. But at a higher level (creating and developing parties::events), the diversity of roles is even higher: the uppermost roles are event organizers, photographers and videographers, artists for shows, and teachers for master classes (often held right at the parties), and animators for line dances. Even higher are roles of cultural ambassadors, and these can also be separate agents professionalizing in this role.\n\n**Depth of division of labor** refers to the number of levels of sub-roles into which the initial role is divided and the number of sub-roles at each level, delegated to different agents for subsequent collective performance of the initial role. Labor division turns out to be quite deep even in dancing! There is already a departure from the situation where “one dance teacher teaches one dancer.” No, the preparation of one dancer-artist involves many creator-agents specializing in different areas. Personality engineering (the engineering of skill sets in a person) requires no fewer participants with different specializations than the engineering of some software or hardware “iron” system (e.g., a robot).\n\nSystemic levels are useful precisely because they allow discussing:\nwho::creator what::system does what, what can be omitted and what cannot be omitted. All of this will be simplified (modeling leaves only what’s important!) categorized and documented (we don't trust the brain, it’s forgetful, trust what’s recorded), making the ultra-complex more straightforward.\n\nThus, an ultra-complex city can be discussed as consisting of districts/development zones, districts as consisting of buildings, buildings as consisting of walls, and no mishmash like “districts of walls.” With a city, it’s easy to understand the concept of systemic levels; with a dance party, it’s harder; with an enterprise—even harder. But it’s still possible to understand a business::creator::system and the systems it produces::“target system;” the thinking about the enterprise will be the same: different systemic levels of the systems produced by the enterprise and the systems of the subsystems of these levels (and external roles for the enterprise are also engaged in creating super-systems). The main thing is that understanding the activities of various agents in enterprises as collective agents is possible: just remember the division of labor, therefore build reflections from the target system (necessarily in its environment!) at the moment of its operation to the target system of constructs, then the methods of creating a whole system of constructs, then the roles for these methods, and further—agents with the necessary level of expertise, and then agents organizing agent-employees. We observe agents with everyday attention to the enterprise, and systemic thinking tells what the trajectory of attention to objects related to the enterprise should be if using systemic modeling. Since there are many objects, it is proposed to document the results of systemic modeling, not limit to “thinking in the mind,” “thinking by speaking,” and even “thinking by writing,” but conduct “systemic thinking by modeling.”\n\nThis is **the charm of systemic thinking: once understood, you use it** **for all different systems you encounter.** **To outside agents, these systems may seem completely different, but to a systemic thinker, all these systems are quite similar,** **his thinking about these systems is fluent, he only deals with applied nuances of the project situation, and in general terms, any project situation looks the same to him, he already knows about what’s happening there at the level of knowledge of the meta-meta-model, “in general terms.” This saves a lot, a lot of time! A systemic thinker always has a checklist: what to pay attention to in an unfamiliar situation. Therefore, truly unfamiliar situations do not occur, there is no confusion before the chaos of the surrounding world.**\n\nAbsolutely no matter what system it is, if we are talking about systemic thinking. Thinking will be arranged the same way; attention will be held by systemic levels, although the content of thinking will be entirely different for different types of systems, different systemic levels. The types of meta-meta-model are the same (thinking is carried out in types! A meta-meta-model is the types from our course, the types of fundamental disciplines/concept explanations of the intelligence stack), but the types of meta-model (subject area, metaU-model from a general textbook of some discipline, metaS-model situational, as formed in some organization and reflected, for example, in regulations and corporate standards) will differ significantly.\n\nAn example of a space rocket is easier to understand than a dance example because a rocket is not alive and does not learn, although AI in a modern rocket is already, likely, not learning in the same way as human-agents in the dance example. But the thinking about a spacecraft is arranged the same way as thinking about dancers: if the hull of the spacecraft is made from a material improper for the success of the system (for example, aluminum), you need to go down to the level of considering the material and solve the problem (for example, take steel^[<https://worldsteel.org/steel-stories/innovation/spacex-relies-on-stainless-steel-for-starship-mars-rocket/>], as SpaceX did with the Starship rocket). Otherwise, due to material problems, the operation of all other higher systemic levels of the rocket will be disrupted, it won’t fly, or it will fly unreliably.\n\nProblems arise due to the improper joint operation of many systemic levels, we remember about conflicts of systems of different systemic levels. Usually, tasks to be solved in the course of creating and developing systems come from higher levels, ultimately from the super-system, which requires the target system to perform some function—and this consideration goes down many levels.\n\nA rocket gets its function to fly with certain characteristics from a higher systemic level. For example, one could consider a space company like SpaceX, setting tasks for the rocket and spacecraft linkage, or a customer of spacecraft flights from such a company, for example, a telecommunications company wishing to launch a satellite. But to accomplish such a mission, many problems must be solved at lower systemic levels (there are quite a few: what material to use for the engine nozzles? What to cool these nozzles with? How should the pumps be designed?), coordinate the interaction of all parts of the rocket, and parts of these parts down to the level of raw materials (what materials to use for the rocket pumps? And pipelines?). To figure out that many currently solved problems are not the problems that need solving (they are unimportant, solving them gives nothing!), you need to ascend many levels and then descend again through systemic levels to find the truly important solutions. Also, remember that the system's design should reflect multi-level optimization, not single-level optimization. It’s silly to make the rocket body from steel and have a margin of strength at high temperatures, and then not use this margin of strength! All system configuration optimizations are multi-level.\n\nA useful exercise here is to imagine an airliner as 6 million individual parts flying at the same speed of 890 km/h in one direction at an altitude of 10 km. It's a joke, but it’s also the pure truth! Without considering different systemic levels, remaining a reductionist, one has to think of the plane this way: 6 million parts assembled together and now flying coherently at ten kilometers altitude. Remember the picture of neatly laid out parts of a disassembled car; discussing the car's operation cannot be done by discussing its parts and their interaction! It is impossible to organize the production of a car or plane if considering a single-level breakdown “car—all its parts listed.” It is impossible to organize an enterprise by considering it, for example, as “enterprise—all its people listed.”\n\nIf we use systemic thinking, we can organize the work of about half a million people in various factories and design bureaus worldwide, who manufacture this assembly of 6 million parts we call “an airliner.” Systemic thinking uses systemic levels to not lose any part in systemic breakdown but to deal each time with a limited number of part-subsystems at each systemic level in each system.\n\nOf course, in the case of an airliner and an enterprise (and indeed, today in fact of any other system), systemic breakdown descriptions are supported by a computer, the collective attention of these project teams can only be maintained using a computer. Even reverting to paper engineering work will not develop and manufacture a successful system of such scales. Hence, systemic thinking largely reduces to systemic computer modeling, without a computer it’s simply impossible to maintain attention in the project, **systemic thinking requires technically provided focus.** **If you aren't recording modeling results, you aren't thinking systemically!**\n\nEnvironment, including the super-system, as well as the target system and its subsystems, are included in one systemic breakdown, the levels of which are determined at the moment when the target system exists, is ready, and operates, contributing to the emergence of desired systemic properties in the super-system. No system is needed for itself; it is needed only to become part of a super-system! Therefore, systemic thinking always starts with defining the target system as **“black box”** (unclear how arranged object), performing its work in the super-system: the consideration from the target system boundary begins upwards through levels, not down/into the system’s components. Consideration of system parts, knowledge of subsystems, is a consideration of **“transparent box”**, which has known components and how they interact. The consideration of the arrangement/composition of the target system, i.e., the passage from the system boundary down through systemic levels, is always the second step. The first step is a “black box” in the systemic environment, the second step is a “transparent box.” And this applies to systems at each systemic level—many levels up and down.\n\n**Creators::system** deal/interact with the target system as it is gradually (previously thought to be “at once,” now systems evolve, not “born, live, die”) conceived, designed, manufactured, liquidated. If it’s about the creation and development time of the system, systems changing the descriptions and materials of the target system to obtain a ready-working system are called creators/“creating systems”^[in earlier course versions these were “support systems,” enabling was conveyed as [https://en.wiktionary.org/wiki/обеспечение](https://en.wiktionary.org/wiki/обеспечение)—stress can be placed in two ways: обеспе́чение or обеспече́ние.] (enabling systems per ISO 15288:2023, constructors in physics). These systems gradually (during “continuous everything”—continuous development, continuous manufacturing, continuous deployment) create and develop the target system. Creators pass increments (system parts containing new functions/features/capabilities) of the target system through various states (increment “conceived,” “designed,” “as purchased raw material,” “manufactured,” “tested,” “accepted for operation”) to readiness for operation/utilization, then remove from operation/utilization, including liquidation (not simple! Example: leaving a “green site” after a full nuclear power plant liquidation), or repair instead of liquidation, or sometimes modify and return to use. More about this discussed in courses “Methodology” and “System Engineering.”\n\nCreators are not part of the target system’s environment (not parts of the target system’s super-systems) and thus not included in one systemic breakdown with the target system, but are part of various other systemic breakdowns. Why so? The target system itself does not live, feed itself, or grow—it requires creating systems, working during creation and development. And the environment? These are all systems surrounding the target system in its configuration (remember, the system evolves, so its configuration as composition changes—look at",
    "dfb3f48b6f3358b9cd16769328042862": "```markdown\n---\ntitle: System Levels in Systems Engineering. Example of Computing Technology.\n---\n\nIn modern computing technology, it is easy to count a dozen system levels. Here is an example of distinguishing these levels from lower to higher for classic computers (there are more, this is just an example of thinking about these levels, different manufacturers may distinguish them differently for different projects):\n\n1.  Pure materials (silicon and carefully dosed \"impurities\" giving the effect of semiconductivity).\n2.  Parts of a transistor (source-drain-gate).\n3.  Field-effect transistor and inter-transistor connections.\n4.  Logic elements (composed of several interconnected transistors).\n5.  Arithmetic-logic unit/computer core, memory, and other parts of processors and various types of memory.\n6.  Processors/chips: general purpose (CPU), graphics/matrix computing (GPU), network switching between processors, RAM.\n7.  Computer boards with processors and memory, external devices (e.g., solid-state drives).\n8.  Computer rack with multiple computer boards, input-output connection equipment, power and cooling system. Connection cables.\n9.  Server rack for multiple computer racks with power and cooling.\n10. Pods of several interconnected server racks.\n11. Data center of several \"pods\", which may even include a telepresence robot with a camera for night observation. A data center-level supercomputer (as of June 2020, the seventh in the world in terms of power) could have been assembled several years ago in 3.5 weeks by just 6 engineers^[<https://blogs.nvidia.com/blog/2020/08/14/making-selene-pandemic-ai/>].\n\nPure materials on the scale of transistor parts are comparable in size to atoms (a reference in 2023 was 1 nanometer for production by 2030, although this is not entirely about the physical sizes of transistors^[<https://www.verdict.co.uk/rapidus-1-nm-chip-technology/>]). Data centers with supercomputers today are dozens of tons of equipment, hundreds of cubic meters in volume. Engineers organize their thinking around system levels: systems at each of these levels consist of parts of the lower level and are themselves part of systems of a higher level. Systems of each system level are developed by engineers skilled in solving problems of these levels. Together, all these levels provide computing power that cannot be achieved using a reductionist approach, \"a supercomputer straight from pure materials\" and even \"a supercomputer from transistors.\"\n\n**It is absolutely not necessary to call systems at all these levels**\n**\"system\", \"transistor system\", \"server rack system.\"** **System** **is \na type of object. We can** **\"conjugate\"** **each word with its type, but \nit will sound strange. We do not say** **\"the process flies the airplane system,\"** **we say** **\"the airplane flies.\"** \n**We do not say** **\"central processor system in the computer system,\"**\n**we say** **\"central processor in the computer.\"** This does not remove the fact \nthat the thinking of computing technology engineers is systematic, their \nactivity is organized around the system levels of computing technology, \nthese system levels are many, and in our overly simplified example, there \nare eleven such levels.\n\nThe practice of omitting the type \"system\" (including the variety of system \ntypes—target, supersystem, subsystem, system in environment, and later, \ncreation system) is important if you are talking to people unfamiliar with \nsystem thinking. For a colleague who is familiar with systems engineering \nand management standards or has at least taken our course, it is appropriate \nto say \"X is a target system,\" equivalent to X::\"target system.\" For other \npeople, it is better to say \"X\" or \"target X\" or even \"it is important to \nconsider X,\" but the word \"system\" as a type belonging is best pronounced \nin your mind if the interlocutor is unfamiliar with these types. But for your \nthinking, tracking type belonging is essential!\n\nToday's computing technology successes are achieved precisely by \nthe multi-level organization of computers—from the level of the computer \nchip down to the parts of the transistor, and from the level of the \"assembled \ncomputer\" (the rack for the data center) to the level of the data center as \na whole. This is exactly the same growth in complexity that occurs in biological \nevolution and is regulated by the same patterns^[We recall the sources where all \nthis can be read in detail: first of all, you need to watch the film Frustrated \nmagnetism in solids at <https://en.wikipedia.org/wiki/Geometrical_frustration>, then \n<https://www.pnas.org/doi/abs/10.1073/pnas.1807890115> and \n<https://www.pnas.org/doi/10.1073/pnas.2120037119>. With a caveat that the gene code \nis not contained within the target system itself, this system does not reproduce, \nit is made by creation systems/creators who have memory of the target system. \nBut this changes little in the course of reasoning.]. The achievements of \nelectrical engineering, rocket science, transport engineering, and generally \nengineering as a whole are achieved in exactly the same way, by the multi-level \norganization of their target systems and also the multi-level organization of \ncreation systems (say, a factory for manufacturing semiconductor chips, a factory \nfor producing rockets, etc.).\n\nThe division of labor among people follows the line of different types of \nsystems and even different system levels of one type of system, as systems \nof different levels are created/constructed/enabled by different \"methods of \nwork\"/\"types of practices\"/\"content of labor\" of various creators/constructors/\n\"enabling systems\"/\"creation systems\" in various roles.\n\nAn engineer developing and producing pure materials for the semiconductor \nindustry differs significantly in knowledge from the knowledge of an engineer \nproducing semiconductor chips by the lithography method. Moreover, the skill \nof development and production will differ so much that different enterprises \nwill deal with it (some only develop, others only produce—and the specialization \nof the engineers at these enterprises differs). This is the division of labor. \nThe skill of these engineers producing pure materials, engineers producing chips \n(integrated circuits) from them significantly differs from the skill of engineers \ndesigning computer racks and producing these racks. But all these different types \nof tech-engineers and managers as engineers of organizations negotiate with \neach other about how systems of a lower system level are made into systems of a \nhigher, more complex level—including the organization by managers of enterprises \nthat will handle all this.\n\nSystem thinking allows you not to lose focus in these complex collective \nnegotiations regarding the creation and modification of multi-level engineering \nsystems and the complex network of enterprises that produce these systems. \nNot a single transistor drain, not a single fan in the rack, not a single cable \nin the data center, not a single unit dealing with these systems, not a single \ntype of equipment in these units, not a single category of clients, not a single \ncategory of suppliers, not a single law of those societies where all this should \nwork and bring irreversible benefits to various agent-owners of various systems \nwill be forgotten.\n```",
    "a2f841dda331c3b72779c060bac76107": "---\ntitle: Systemic levels are distinguished by attention. Example of bodily work methods\n---\n\nPeople think poorly about \"behaviors,\" poorly distinguish parts and wholes in dynamic (changing states over time) systems that require 4D representations of parts in space-time. Let's describe the methods/cultures/styles and roles used by the community of dancers practicing **social/partner dances**^[[https://en.wikipedia.org/wiki/Social\\_dances](https://en.wikipedia.org/wiki/Social_dances)] as a typical example.\n\nThe work of a \"dance outing\"/performance/\"dance execution\"::method is interesting because it only lasts a few minutes. The method of this work is performed by artists::role, in which the dancer::\"subrole of the artist.\" In our case, the artist (engaging the subrole of the dancer) — is executing the subrole of \"member of the social dance community\"::\"cultured person\"::person, example of other subroles of members of the social dance community roles — event organizer, DJ. One can easily add another systemic level, for example, to take not the entire social dance community but also an additional level of some social dance style community, for instance, the salsa community. To repeat: in these communities/parties it is not only dancing artists but also event organizers, photographers, videographers, DJs, teachers — and \"artists\" their artists are not called unless they are professionals earning from their dance creativity. The collectively performed behavior style/culture of this style community is a subculture, for the community of all social dances — sometimes this culture is called a \"subculture,\" sometimes just \"culture,\" it depends on the project for which modeling/\"type assignment for important objects in the domain area\" is being done. The artists::role prefer to call themselves \"dancers,\" but this characterizes their general dance training, we will see later that \"dancer\" is on a rather deep systemic level, above \"dancer\" there are still many different roles.\n\nSystemic thinking about a dance community or even an individual artist::role is more complex than systemic thinking about some electronic gadget. You can physically assemble-disassemble a gadget from its constructive parts; the functional parts of a gadget highlighted by attention at least roughly correspond to the constructive parts of this gadget, i.e., to components and their assemblies. It's impossible to assemble-disassemble an artist or even more narrowly an artist with the subrole of a dancer in the mind in the form of an explosion diagram/schema. The problem is that \"explosion diagrams\" — are not highlighting by attention functional moving and changing state during work parts, but merely physical disassembly (although it can be done mentally) of constructs, which is usually thought of during the system's creation and not during its operation. Here is an example of a bicycle explosion diagram, the diagram does not show functional parts but precisely constructive parts^[<http://solexclubspirales.free.fr/eclates.html>]:\n\n![](10-systems-levels-are-distinguished-by-attention-example-methods-of-bodily-work-34.jpeg)\n\nIf one imagines a human organism with its functional division into organs::\"roles in the organism,\" it immediately shows an error: such a \"physically disassembled organism from constructs\" cannot be imagined as alive-working: it would be dead in that form, \"disassembly time\"! An explosion diagram cannot explain \"how it works,\" changes::behaviors during work. To show changes, you need to somehow display the flows of matter or energy, the difference in potentials. For this, \"functional diagrams\"/\"schematics\" are used, on which something flows between functional parts (liquid, electricity, mechanical energy, heat), producing changes in functional parts. More on this later.\n\nThe problem is that the explosion diagram often unconsciously appears in the mind during functional consideration, as unconscious representation of functional decomposition. This is a gross error of systemic thinking. Note, the bicycle construct in the picture doesn't ride, it is impossible to describe its movement. Here are the constructive parts of a clock, an explosion diagram image:\n\n![](10-systems-levels-are-distinguished-by-attention-example-methods-of-bodily-work-35.png)\n\nThese clocks do not tick. But we need to discuss systems primarily during their functioning/exploitation, and highlight entirely different parts within them — this can only be done by attention. The correct way: try to imagine systems in the course of their work not as such static pictures, but as short videos, \"gifs\"/.gif — even if during the work/functioning of the system there are no moving parts, still imagine heat, electricity flows.\n\nAbout the artist::role (singer::subrole, dancer::subrole, juggler::subrole, and including subroles of specific genres/styles of the corresponding artistic/artistic culture/activity/method of the singer, dancer, juggler, etc.) we think during the performance/out/& performance, and its functional (i.e., during work/use) parts have to be highlighted by attention directly \"in the course of work,\" not disassembled. Disassembled into constructive parts in reality, not by attention — system no longer exists, for non-living systems it is \"still in manufacturing\" or \"already disassembled,\" and for living systems — \"already dead.\"\n\n**For a system, there is only one way to think about its functioning — to highlight functional (not constructive) parts of the used/operated/working/functioning system by attention during its work, and mental, even attentive assembly (disassembly) while still (or already) \"dead\" system at the moment of its creation (or destruction).**\n\nHere is a picture of social dancers, in which even a single dancer we need has to be highlighted by attention, and it might not be the first encountered dancer (who only distracts, as he looks directly at us, also in the foreground, and shown very sharply). No, we need the one we need — for example, the dancer framed in red:\n\n![](10-systems-levels-are-distinguished-by-attention-example-methods-of-bodily-work-36.png)\n\nIf we are interested in functional consideration, we need to transition to 4D — to see it not as a static picture but to add to the spatial three dimensions also the time dimension: to mentally replay the video, even if it is short.\n\nAnd now imagine that loud music is playing, you are being pushed from time to time, all dancers move quite quickly, and your attention needs to switch not only to individual people but also somehow to highlight parts of these people (not to disassemble into parts, but to highlight parts by attention!). Thinking in this situation of observing dancing people-artists is hardly different from what happens in some organization as a system-creator. Thinking for describing the work of weavers in the light industry (creators of fabrics) or nuclear engineers (creators of nuclear power plants) will be arranged in much the same way as thinking about dancers: there is no chance to imagine an explosion diagram, you will have to imagine something moving/changing and highlight this \"something\" by attention.\n\nMore about how to discuss working systems with people will be in the course \"Methodology,\" but already now one can notice that talking about methods for living people, strangely enough, helps to deal with highlighting system levels (defined functionally, during the use/work of the system) and for non-living systems. When asking a student to imagine a functional car engine during the work of this engine::subsystem in a moving car::system, the student involuntarily imagines an explosion diagram, and this is an error from the first second of thinking about the functional/role parts of the system. However, it is quicker to figure out an example of such thinking on people precisely because they are difficult to disassemble \"in the mind\" into composite constructive parts.\n\nThe roles/\"role objects\"/\"functional parts\" of agents-people, implemented by the constructive/material parts of the organism and working under the control of the \"method execution program\"/skill::system (considering the skill of involving the method's tools), are not obtained by \"constructing assembly,\" but by learning. Infants do not have much human behavior. Congenital roles in an infant are practically absent, an infant can be called a \"personality\" only in a general philosophical sense, and the intelligence of an infant is extremely limited, the sanity is minimal (because there is no ability to understand and speak), the methodological horizon is zero. In the early years, people's intelligence grows rapidly (including sanity/persuadability — with the appearance of speech, with the activation of the slow thinking mode S2, which provides the opportunity to understand and accept arguments), and then various roles are mastered/learned, turning the \"almost personality\" of a child into a full-fledged adult personality.\n\nLet us recall: an agent-person consists of (compositional relationship) the organism and the personality where the organism is the hardware/universal constructor (and calculator/computer as part of the constructor), and the personality is the software/programs/\"set of all kinds of skills.\" The personality gives the agent the skill to perform various methods, that is, to exhibit visible cultural (\"by a well-known method in human culture\") behavior.\n\nAn artist and a dancer are manifested as roles at the moment of dancing, they are recognized in some agent by their behavior through attention. In the agent::the creator, there is a program/software-on-a-neurocarrier/skill of executing the culture/style/practice/method of artistic performance (for the role of the artist) and dancing (for the role of the dancer).\n\nYou will immediately distinguish a dancer during a dance from a locksmith or a digger during engineering or ground work by the \"demonstrated behavior\"/\"method of performing work\"/\"pattern of behavior.\" The method/culture/style of Vasya's behavior during (work) dancing differs visually much from Vasya's method/culture/style behavior during engineering or ground work. We recall: we recognize the role of the performer of some work method through observation of work performed by this method (observed change in the state of important objects by the work) by some agent, familiarity with the agent's reasoning about his method, and demonstration of the objects of interest of this method by him, there is no other way — what the agent will do (by which method he will work) from the role is most often undeducible, but the role from the work method is deducible. Tell what the agent (person, robot, enterprise) is doing and saying/writing — and one can tell to which behavior culture he belongs, what his role is. The role often gets it the name-term from the method of its work, from the expected behavior pattern of this role. **This we discussed when talking about the systemic thinking mantra: first \"in what environment** **what** **does\"** **for the target system, then \"by what way/method** **creates,\" and only then —** **\"who does\"** **for the creator role, and agent-actor of this role..**\n\nJoint dancing of two dancers::role in \"social dances\"::culture/style/practice/\"behavior method\" is relatively simple compared to the behavior of a team of some agents-people in a project of creating and developing some system and especially in an organization (an enterprise), where many projects are carried out simultaneously. Why do we write \"behavior method\" and not \"work method\"? We use a more abstract type for \"work\" simply because social dancing is not usually considered \"work\" in the sense of a job, and the method is a way of working; in the Russian language, it is easy to confuse \"work by method as engagement of resources\" and \"work as occupation on a position\". **The important thing is not the used words-terms, the conveyed meaning is important, the understanding important! But apart from words for conveying understanding, we have nothing else, so words-terms are also important!**\n\nIn the culture/method of social dancing, usually, two dancers dance, the \"dance couple\": these are two dancers with predefined specific subroles (leader/lead and follower/follower/follow, often \"partner\" and \"partneress,\" but these are dance roles, not gender, and sometimes there is a dance for three — double trouble, one leader and two followers^[<https://vk.com/video52259628_456244076> and\n<https://vk.com/video73069173_456240091>,\n<https://vk.com/video-18525054_456240224>, double hustle methodology\n<https://1drv.ms/b/s!Ag1bdTHZ9O7JgQ84GsQZqL_x8m9V>]).\nThe leader and the follower do not even talk to each other in words, although in some dances they can talk, for instance, in \"Carolina shag\"::style/culture, the follower can call out the figure for the leader to dance.\n\nDuring this the, the leader and follower have clear objects of interest (they are taught in dance schools), they play a \"clear role-playing game\"^[Social dance can be understood as\n\"playing riddles,\" <https://vk.com/wall-179019873_1550>].\nIn most team projects of system creation and development, and even more so in any enterprise with many projects, the number of people with different roles is more than two or even three, with their methods/activities/cultures/practices significantly more diverse, and the interaction more complex.\n\nTo think systemically about a project or an enterprise means first of all highlighting there the roles/\"functional parts\" performing some functions/methods/practices/activities. For this, it is convenient to use the output/performance of social/partner dance as a transitional complex system.\n\nA dancer::role is not even a top-level subrole of a social dance community member. Dancer — it’s the role of an agent performing dance, not everyday movements, whether it be social, solo, or ritual dances (for example, shamanic dances). The whole performance, in general, is done by the artist::role, who is performing actions according to methods (meaning these methods should be taught, not expected them to be somehow picked up from \"just watching\"):\n\n-   the appropriateness of his \"outing\"/performance (\"was at a funeral, there was music, I didn't get confused — danced\")\n-   tracking the audience's reaction\n-   choice of clothing appropriate to the dance style,\n-   implementation of artistic/artistic ideas,\n-   beginning and end of dancing (possibly inviting a partner, escorting a partner from the dance floor to a place in the hall, tuning into a specific partner in leading, recognizing the end of the introduction and the end of the track in the music, etc.)\n\nA subrole/subsystem of the artist will be the dancer who performs dance movements; this is a narrower role, a smaller part of the personality (we remember that the personality is realized not so much by the body as by the \"program in the brain.\" The skill (similar to a computer program, implemented by the brain-computer) of dancing::culture/\"method of actions\" for the role of \"dancer\" is implemented by a smaller part of the brain than the general program of actions according to the methods of \"artistic activity\" by the superior role of the \"artist.\"\n\nWe do not know exactly how the \"brain program\" is implemented in the brain, but conditionally it can be considered that \"by size\" more neurons are occupied by the whole skill of artistic speaking, singing, playing musical instruments, pantomime, dancing, drawing, etc., that is, occupied by the entire artistic part of the personality, than only the skill of dancing, the dance part of the personality. The artist::role not only knows how to dance::\"method of performing dance movements to the music,\" but also knows a lot of other things — artistic activity clearly does not boil down only to dancing. Say, a theater or movie artist usually knows how to dance — but on stage or in the frame, they rarely dance.\n\nImagine systemic consideration of the culture/\"methods of agent's actions\" of social dance at the moment of the dancer’s work/functioning (we remember that **work method** **at the moment of its** **implementation in the physical world, i.e., when** **some physical/constructive object-agent is performing the role, playing out** **this method/way/style/type of labor** **—** **this is** **work/actions/functioning**).\n\nHere is a table of systemic levels as levels of roles/\"functional/role parts\" of a member of the social dance community, which approximately explains what is being told here (and what is written in the table headers will be clear later in the course)^[The full-resolution table\nis available in <https://disk.yandex.ru/i/QbcxOA1uuf5AAA>]. This table can also be viewed as a stack of dance methods/cultures/practices.\n\n![](10-systems-levels-are-distinguished-by-attention-example-methods-of-bodily-work-37.png)\n\nLet's add artistic details for clarity (\"rendering,\" as in computer 3D modeling when adding lighting effects and placing some additional objects into the picture from CAD, \"for vivid perception\"). This needs to \"ground\", objects in the physical world.\n\nIn the center of Moscow, in one of the clubs from 22:13 to 22:18, loud music plays, there is semi-darkness, and two \"non-conformists\"/\"members of subcultural communities\" in their subroles of \"participant of the event\" dance::work salsa::\"dance style\" in the middle of the club's dancefloor. Why is it so important for us to indicate the time and place? To make it clear that we are talking about a physical object that exists not only in space but also in time — and we are considering an instance of executing the method/way of working with \"specific resources, occupied specific time,\" i.e., work/work as understood in operations management. It doesn't matter that the subject area is not such that words from engineering and management sound usual in it. The important is to show that the reasoning is the same for any subject area — the power of intellect is just in this. Systemic thinking allows detailed discussion of the most important happening in a wide variety of subject areas, it's designed for this purpose.\n\nWe understand that our dancers::roles are quite physical, but further, we will discuss the culture of dancing as a subculture of general cultural life. In colloquial speech, this culture is called \"dance,\" but we will not use this word-term, for \"dance\" — it is both \"dance culture in general,\" and \"dance performance/out/&performance,\" and \"dance work.\" Compare: tango::dance — it can be both a dance style and a community of people practicing tango and a particular performance of the tango dance style. When saying \"tango dancing\" — it is clear that it is about behavior (function/practice/culture/style/method is usually named by gerunds, in English — -ing form of the verb).\n\n**A physiologist**::role glances at this couple and is clearly pleased: the partner::\"dance role\" is not limping, the person performing this role is **healthy::\"state** **of the agent's organism\".\" All bones, muscles, ligaments, fascia, etc., are intact, this doctor::\"superior role of the physiologist\" (we use \"doctor\" purely for stylistic beauty: as \"tiger\" to be called a more general class \"beast\") recently fixed (therapy — is \"repair\" in engineering) everything that concerned the systemic **level of physiology**. Others::roles",
    "b3b49b2780d0e08d20c0121d283a5e6f": "---\ntitle: Systems approach against both reductionism and holism.\n---\n\nThe Systems approach (approach --- this is the transfer of the concept of “system” developed in\nphysics to other areas, primarily biology) emerged precisely to combat **reductionism** ---\nattempts to describe complex objects without distinguishing systemic levels and\nassociated systemic effects (emergencies). Since\nreductionists do not distinguish separate systemic levels, they highlight the leading\nmethod/function and its discipline/theory/explanation of some lower\nsystemic level (parts of the system, sometimes several levels below\nthe level of the entire system being considered) as a means to explain\nthe behavior of the whole system. Thus, the behavior of a person may be explained by reductionists\nthrough chemical and electrical processes occurring in the brain between the primary brain cells, neurons. Is it correct?\nYes, it is, mathematically absolutely correct! But completely\nuseless! Remember the “tail of the herd”: it is difficult to understand what operations\ncan be performed with subsystems several levels below while discussing\nthe properties of the current level. Although, of course, one can somehow\ntrace how certain properties of the system follow from\nthe properties of its subsystems, it becomes increasingly difficult to track these properties\nwith every level of subsystem increase. For example, it’s still possible to trace that\n“brick houses are usually warmer than panel houses” if we notice that reinforced concrete\npanels are strong and therefore thin, while bricks require many layers making the walls thicker. But stretching this further across many systemic levels to materials --- fired clay, concrete, and rebar makes the explanation convoluted. Without “panels” and “bricks,” without “walls” (systems of intermediate systemic levels), explanations won't work.\n\nThe behavior of the current level in systemic thinking is explained by\nthe interaction of systems of many systemic levels up and down from\nthe current one, which does not eliminate the thesis of “simplification” at each\ntransition from higher levels to lower ones for explanatory purposes. But the systems\napproach does not randomly select systemic levels for such explanations but takes stable\n(although non-equilibrium, NESS) physical objects\nas systems used for explanations, and constructs explanations\nprincipally multi-level/multi-scale - and without skipping over systemic levels to avoid falling into reductionism.\n\nIn classic reductionism, there are no multiple systemic levels in\nexplanations, and references are made only to lower levels.\nIn reductionism, there are no intellectual means to prevent\nexplaining human behavior even not through the behavior of brain neurons, but\nthrough quantum-chemical processes involving electrons and\nelementary particles of atomic nuclei, which underlie chemical\nprocesses, or vice versa - cellular processes, based on\nchemical processes with cellular molecules. Very trendy are also\nexplanations of how hormones at the biochemical level affect human\nbehavior (a human as a whole is many systemic levels above\nthe level of biochemistry happening in the brain). Of course, the biochemistry of brain function\naffects human behavior, but this connection is so unobvious that\nmany systemic levels are needed to clarify it: the subject changes at each systemic level, roles focused on these levels handle them, and this knowledge is described in different literature. Thus,\nan enormous amount of pop-psychological literature explaining\nhuman behavior through low-level neurophysiological mechanisms\nmisleads, explains nothing, and does not provide a foundation for\nreliable work on changing human behavior akin to engineering work. Pop-psychology is just that - pop-psychology, not adhering to rigorous\nstandards of thought work, only giving an illusion of “explanations.”\nWhy does a rocket fly? Because fuel oxidizes in it! Why does the brain\nunderstand these lines? Because neurons are firing in it! All this is\ntrue, but useless for substantial and accurate engineering work\ntruth. To make this truth useful and precise for engineering work,\nmulti-level (regarding systemic levels) examinations are needed, and they\nshould not skip considerations of high levels, not allow reductionism.\n\nLet’s not reduce everything happening with a person to the realm of thought\nwork; a person also interacts with the physical world through bodily work.\nDancing, as one of the possible behaviors of a person (other\nbehaviors are life, rest, labor), can be “explained” reductively, as a set of chemical processes between molecules in\nmuscle tissue cells, or even as a set of movements of hundreds of muscles.\nOne could also mention that muscles are controlled by the brain, and during\ndancing (life, rest, labor) the spinal cord is involved. But the emergencies\nspecific to dancing (properties inherent in the dancer as an agent role when dancing --- expressiveness, aesthetics, set of figures,\ncharacteristic poses) will be missing, as will the discussion of the dancer and their\nbehavior (dancing). All these reductionist descriptions of\ndancing as muscle work will be logically correct but these will be\nreductionist descriptions, reducing emergent properties to the properties\nof system parts, including parts lying many systemic levels below the level convenient for describing the discussed emergent property.\n\nA herd of cows has tails (of Margarita’s cows), but discussing these tails,\none cannot discuss the herd. Discussing muscles and the spinal cord, one cannot discuss the dancer!\nTo discuss a dancer during dancing (and Vasya Pupkin is not a dancer if he does not dance --- when Vasya Pupkin has lunch, he is an “eater,” when he is treated - “a patient,” and a dancer --- only when dancing), one must describe both muscle movements, the work of the whole body in different “non-equilibrium balances,” using inertia of body parts (the head is 5.4 kg, a good swing of it will propel the body similarly as a melon of similar weight), principles of dance style (requiring aesthetics, culturally conditioned), how these principles are embodied in individual movements (dance vocabulary), and how these movements form an entire dance performance (choreography --- here), and why such dancing repeats in various dance master communities (e.g., why tango is danced in many places globally, and you can recognize it as tango, and people-agents dancing it somehow decide to learn and become tango masters --- that’s already community-level discussion, much beyond muscles!). Each step of this discussion involves separate objects; one cannot explain “how a dancer works” through “muscles and nerves,” a dancer's behavior is not expressible through the behavior of “muscles and nerves.” If describing a city block, one must not describe it through the arrangement and shape of bricks, even walls within buildings. One must describe the block through the location and shape of buildings and courtyards, lawns and squares, vacant lots and roads. Blocks, dancers, herds --- one must carefully consider at what “systemic level”/“object part level” we try to describe the system’s behavior as a whole.\n\nReductionist methods (describing a herd in terms of tails and horns, not cows) worked, but poorly. If reductionists happened to guess the convenient systemic level (a dancer using posture/“dance posture” methods, dance steps in rhythm, taking positions in a pair if it’s paired dances, a block consisting of buildings and courtyards, a herd of cows and bulls) --- reductionist methods worked, and when they did not guess (a dancer of muscles and bones, a block of bricks and blades of lawn grass, a herd of ears, legs, and tails), nothing good happened. Outwardly this seemed like “reductionism --- good!” (listing successful cases) and “reductionism --- harmful!” (listing unsuccessful cases).\n\nA classical example of initial systems where the systems approach was honed as it emerged as general systems theory by Ludwig von Bertalanffy --- is a blooming meadow in spring. Hundreds of plant and animal species, soil, puddles and marshes left from floods. How to discuss the seasonal changes happening in a meadow? Biochemistry of interactions of all living cells of all animals and plant organisms on the blooming meadow? Obviously, this doesn’t work, although formally correct --- but how to translate this intuitively obvious “doesn’t work, although formally correct” to the level of a clear principle? Here’s where the concepts of systemic levels and emergency come into play, thereby the “systems approach” emerged as the transfer of the concept of “system” developed in physics to other fields. Discussing such a complex system as a blooming meadow became easier. This complex object “fits in the head,” thinking about it “falls into place.”\n\nEmergency needs to be distinguished from **synergy** --- the effect of mutual amplification of properties. If upon merging two companies with small profits we observe their mutual benefit and profit sharply increase, we observe just a stronger resulting company, no systemic effect/emergency (appearance of new property, new characteristic, new subject of interest from interaction of parts of this whole) is present, just synergy of these initial companies in part of old properties. No new properties emerged, just past properties increased. No systemic effect, no emergency, no new subject and new roles associated with new properties of the whole made of synergistic parts of this whole. However, synergy is evident: properties strengthened! Systems approach has nothing to do with it.\n\nBut if you combine bricks and cement with water in the correct form, a house will emerge from their interaction --- and rooms, house residents can be discussed, which is impossible to discuss with just a solution and bricks. A brick in cement and water does not amplify anything, doesn’t contribute to anything, cement doesn’t amplify anything in the brick, but if taken in a sufficient and correct quantity and first combine cement with water (getting a solution: properties of the solution are not reducible to properties of water and properties of cement), and then bricks with the solution, you get a house --- house properties are incomparable with brick, cement, and water properties. And no synergy here, i.e., no mutual amplification of properties of cement, water, and bricks when combined in two levels: “bricks plus ‘cement plus water.’”\n\nPeople live in houses, not in bricks, even if piled up. Formally reside in bricks with solution (reductionism!), but in these terms it’s hard to discuss living. For example, a house has an architectural style (in the sense of construction architecture, “visual image”) --- modern, baroque --- but bricks with solution have no architectural style, it’s not discussed in terms of bricks and solution, it’s just in houses in their finished form. But elements of this architectural style are simply the arrangement of bricks, the plain truth. This is reductionism, “truth but useless truth,” discussing the house this way is impossible! Synergy (adding parts without new qualities but changing old qualities of parts) can thereby be discussed within reductionism, while emergency/systemic excludes reductionism.\n\nThe second error corrected by systemic thinking is the opposite of reductionism **holism.** However, poorly skilled people (and probably inherited from AI agents) associate systemic thinking with holistic teachings, explaining system behavior by the behavior of its supersystem. Dancers dance as they do just because humanity sustains the subculture of dancing (for spectators, for themselves, even for friends: belly dance in harems developed precisely as such entertainment). This dance subculture as a set of memes in people’s heads (now also on other carriers --- cinema, social media videos) makes people dance exactly like they do, and muscles and nerves of people execute this “order of culture,” help reproduce dancing as spreading these memes, they cannot escape, because “behavior of lower systemic levels fully depends on what happens outside them,” the main thought of holism. For holism, dance culture arises not because people dance and their pattern set (methods of work), performances, and thoughts about dances are called culture, but rather, for holism --- people dance (a phenomenon of dance culture) because it’s required by dance culture (a meme of dance culture) as a set of all ideas/memes/thoughts about dances and related human behavior. And for holism, thoughts about posture, dance steps in rhythm, thoughts about “muscle twitches,” musculoskeletal system and its state in dancing are declared insignificant. For holism, all this “somehow itself aligns with societal order” (and don’t ask what “societal order” is: ideas of high levels associated with communities and societies are rather vague, no good ontologies, therefore the language is more artistic, easy to fantasize within, even anthropomorphizing society --- attributing it, say, an “order”).\n\nWe will not give detailed explanations of why pure holism is as erroneous as reductionism because the ridiculousness of holism statements is quickly exposed; hence it is rarer. But it also exists, holism is widespread in the humanitarian field. It’s hard to convince an engineer in locomotive building that a steam locomotive’s efficiency during operation is so low because rails and stations made it so, and not physical processes determining the steam locomotive’s efficiency compared to that of an electric train. But a humanist can easily claim a dance performance of a dancer exists as it happened --- directly due to “societal need.” What is this “societal need,” “society’s requests” --- let’s not discuss. But the words are familiar and cause no questions to humanists. Though questions exist: what is “need” in “society” of many individual people with completely different ideas about dances and not only dances, and how does it manifest in a specific performance in terms of muscle and nerve work?!\n\nSystemic thinking is associated with holism because in multi-level considerations, the interaction of levels is taken into account (including inevitable conflicts leading to multi-level optimization of configurations for systems on all levels, resulting in disorderliness of these configurations and system complexity growth in evolution. Systemic thinking recognizes the existence of higher levels and their influence on the lower (influence of the whole on parts), as in holism. But systemic thinking also takes lower levels’ existence and their influence on higher into account (influence of parts on the whole), as in reductionism. And simultaneously, across many systemic levels top-down and bottom-up!\n\nIn modern (third generation) systemic thinking there is also talk of multi-level optimization of all these influences during evolution: because all these parts and wholes appeared as they are in evolution (bio/Darwinian, memetic, techno). In this, time scales tens of thousands longer than the time scales during systems' direct interaction during their use should be considered --- in dances some figure lasts half a second, but its emergence evolution took years, sometimes decades, and the appearance of muscles and nerves of dancing agents on slower-changing lower levels took millions of years, and this development continues. Thus, there is already a dance performance by an agent with six hands: two of their own and four mechanical from a backpack with manipulators^[<https://vk.com/wall-179019873_1747>],\nthe evolution of the dancing agent continues, but it is not very fast\nevolution.\n\n**Systemic thinking** **is both reductionist and holistic at the same time. Or neither reductionist nor holistic. It resolves contradictions between these two approaches to explaining system behavior.**",
    "2e77426b6444d0cbd236ab9f0b92e8c5": "---\ntitle: Continuous everything in engineering as techno-evolution\n---\n\nThe limitation of the **waterfall model**^[Waterfall model,\n<https://en.wikipedia.org/wiki/Waterfall_model>] was the\nidea of a one-time unidirectional traversal by creators of the life\ncycle as a set of works conducted according to practices, while the target system\nwas viewed as passively undergoing this one-time creation.\nTherefore, **agile approaches** developed in engineering, overcoming\nthe concept of a \"waterfall\" life cycle, and in 2001 the Manifesto\nfor Agile Software Development^[Manifesto for Agile\nSoftware Development, <https://agilemanifesto.org/>] appeared.\nIn 2017, the idea of **evolvability** as a key **architectural\nproperty** reflecting the idea of **\"continuous everything\"**\nfirmly established itself not only in advanced engineering practice but also\nin literature^[Neal Ford, Rebecca Parsons,\nPatrick Kua, Building Evolutionary Architectures, 2017,\n<https://www.oreilly.com/library/view/building-evolutionary-architectures/9781491986356/>],\nand **architecture** finally differentiated itself from **development** into a separate\nsubject area, as literature began to reflect the inevitable\n\"productive conflicts\" between architects and developers. Architecture\nworked on slicing the system into minimally interacting\n**constructs/modules** to maintain **stability** of the whole in\n**evolutionary timescale** (well-known to engineers\n**-ilities** turned out to be architectural characteristics), while\ndevelopers cared about maximizing functionality, which could lead to\ntemporary deterioration of architectural characteristics as the accumulation of\n**technical debt** (tasks aimed at supporting selected\narchitectural solutions but not directly affecting functionality),\nwhich turned out to be an **architectural debt**.\n\nIdeas of **techno-evolution** came to engineering, but they differed from the idea of\n**biological evolution** in that the **meme** as an analogue\nof the **biological genome** was not located in the manufactured system itself,\nbut was stored in **digital** (meaning exact replication without accumulating analog error) form somewhere in the\nsystems-creators. This allowed for a significant acceleration of evolution, as\nfor some technocrab it wasn't necessary to wait until a whole crab\ndied to replace a failed claw variant through\n**mutations** forming the claws' phenotype genes only together with the crab. Instead, it was possible to\nuse **smart** **mutations**, obtaining results, i.e.,\n**in real life** only testing claw variants that showed success during modeling in the\n**virtual world**— and changing only the claw, but not the entire crab. This provided high speed of techno-evolution and\nits results, unachievable by just a one-time offer of a new set of\n**features** (a one-time traversal of the \"waterfall\" for one instance of the system)\nor only evolution with random mutations^[Joel\nLehman, Jonathan Gordon, Shawn Jain, Kamal Ndousse, Cathy Yeh, Kenneth\nO. Stanley, Evolution through Large Models, 2022,\n<https://arxiv.org/abs/2206.08896>]. To understand\nhow successful a system is in operation, system modeling for operational time appeared—**digital twin**, reflecting not only\nthe current state of the meme but also the state of the system's **phenome**. So,\nit turned out that ontologies oriented on two times (1. operation and 2.\ncreating one **increment/feature**) were insufficient.\nNor were modeling tools for an entire **group of systems**\n(**product lines**^[Software Product Lines mature into\nthe next generation of Systems and Software Product Line Engineering,\n<https://www.softwareproductlines.com/>], sometimes **system\nfamilies**) as different variants of the system coexisting at the same time.\n\nThe solution was found in the idea of **continuous everything**^[The Continuous Everything (CE) concept\ndefined,\n<https://en.itpedia.nl/2021/06/02/het-continuous-everything-ce-concept-gedefinieerd/>]\nas an infinitely ongoing development with **continuous delivery**\nof new **versions** of the target system with ever-new changes, wherein the pace of development is not slowed down\ndespite the increasing complexity of the target system, supported by both\nan evolving architecture and evolving **teams** that carry out the development\n(using the **reverse Conway maneuver**^[Nicole Forsgren, Jez Humble, Gene Kim,\nAccelerate, 2018,\n<https://www.oreilly.com/library/view/accelerate/9781457191435/>]).\nIn software engineering, this idea developed within the framework of the\nDevOps/SRE/platform engineering (internal **production platform\nengineering**)^[Aeris Stewart, How Is Platform Engineering\nDifferent from DevOps and SRE?, 2022\n<https://thenewstack.io/how-is-platform-engineering-different-from-devops-and-sre/>],\nin \"iron\" engineering this idea is currently discussed in traditional\nSystems engineering examples like aerospace, where **testing** of engines\nof the next version starts before the tested engines of the previous version in the\nrocket fly in their first flight, and each new instance of the rocket has new\nfeatures and/or improved design compared to the previous instance. But already in this way not only aerospace but also\nautomakers and roboticists work.\n\"Continuous everything\" signifies a transition for engineering to techno-evolution projects, meaning smart (non-random) mutational/evolutionary\nchanges to the meme (**informational project model/design of the system**), and\nnot just changes to the phenome as \"finetuning with a file\"\nof a system instance. During evolution, the system is considered not as\nan instance (perhaps an industrial series with identical instances), but as a species— where the configuration of each instance can be unique,\ncontinuously discussing **smart**\n**mutations**^[<https://arxiv.org/abs/2206.08896>]**,\nmost likely leading to system success (in Darwinian evolution—these are random mutations during replication) and even unlike natural selection\nindustrial A|B testing is conducted, (and even more so, as not only two options are tested, but multiple options in many subsystems simultaneously) as a directed selection of such mutations.\n**Evolving system** development attempts to make it as close to infinite\nas possible, very long adjusting the system to inevitable changes both in the environment and in itself, as well as in\ncreation systems. In biology and life sciences, similar problems\nof approaching infinity in time are discussed as\n**open-endedness**^[Kenneth O.\nStanley, Joel Lehman and Lisa Soros, Open-endedness: The last grand\nchallenge you've never heard of, 2017,\n<https://www.oreilly.com/radar/open-endedness-the-last-grand-challenge-youve-never-heard-of/>].\n\nThus, ontology ideas of evolution appeared and began to be developed within the ***\nthird generation of the systems approach**,\nwhich not only considers systems creation from agents in their different\nproject/activity roles but also explicitly considers three times: system operation as a phenome, increment creation of the phenome\nfrom the meme (**design** and **implementation**),\nand meme change (evolution, continuous everything).",
    "4bd1a2a0a46445c06fca2012daef37e3": "---\ntitle: What's Next\n---\n\nSo, you have completed the course \"Systems Thinking.\" What's next? Of course, move on to the \"Methodology\" course. If something remains unclear, we recommend continuing with the full \"Organizational Development\" program, as each new course somewhat repeats the material of the previous courses and provides examples of the concepts introduced in those courses—therefore, many questions will be resolved. Do not get stuck on the material of one course, move forward and forward.\n\nNevertheless, consider what benefit you can gain right now from the completed course. Just think in your projects as described in the course and its exercises (compose and fill out tables in universal modelers or even in simpler forms—lists, plain texts, this is systems thinking in its current version!), use the meta-meta-model of systems thinking. Achieve fluency in systems thinking, do not postpone it to \"someday, when there is time.\" Systems thinking is filling out the same tables you have filled during this course; it is not something special that you have not tried before. Fill out these tables for your current projects, for new projects, do not be afraid to modify these tables. Use any modelers for these tables; it should already be easy for you to do so. This corresponds to \"Project-2\" from the section \"Applied Functionality vs. Universal Construction,\" meaning you need to learn to think systematically about your subject areas (meta-models), keeping in mind the types of concepts of the systems approach (meta-meta-model)—but do it fluently, without significant resource expenditure, with long strides of thought not on a couple of concepts of the meta-meta-model, but on a dozen or so concepts at once. Remember that after a month of music lessons or training, or a month of foreign language study, the results will be \"nothing\"; after a year, you will significantly differ from \"people off the street\"; after three years, you can make money from it; and after a decade, you can talk about winning in global competition. This fully applies to systems thinking.\n\nWhy do you need to use the course material? To critique the numerous ideas generated by you and your colleagues. You will save a lot of time if you avoid mistakes as indicated in the course. You will save a lot of time if you think more about the quietly silent important aspects of a project and less about the unimportant that screams and attracts (one might even say—distracts) your attention. You already know a lot, so use this knowledge! Make a report at a conference about your achievements, write a post in the club (not only \"thinking by systems modeling,\" but also \"thinking by writing\" significantly helps improve your fluency in systems thinking!).\n\nIf the material was difficult and you didn't quite understand what was being discussed in the course, try taking the course with an instructor or teacher, possibly as part of a corporate training group. Options for taking courses with teachers or instructors can be found on the School of Systems Management's website^[<https://system-school.ru/>]. Our experience shows that taking courses with a teacher or instructor and in a group of students is much more effective. And remember, if you \"skipped\" the prerequisite course \"Rational Work,\" you likely didn't save time, and the course probably wasn't fully understood.\n\nTo reiterate: after completing our systems thinking course, we recommend not taking a break, but continuing your education by studying the courses \"Methodology,\" and then courses on engineering methods—\"Systems Engineering,\" \"Personality Engineering,\" \"Systems Management.\" This direction can be called **\"the devil is in the details\"**: delve into the study of various engineering, managerial, creative, social work methods, i.e., study separate applied work methods. This is traditional engineering, managerial, and other specialty training in their connection to real life. Systems thinking will allow you to maintain the integrity of the studied set of overview and applied work methods and transfer accumulated experience from project to project. This is the education of an engineer, manager, entrepreneur/founder of companies, artist, public figure/politician, etc., a person who has mastered systems thinking and uses it to change the world for the better.\n\nBut an alternative option can be offered, **\"the angel in abstractions\"** (\"understanding principles frees you from understanding facts\"): generalize the proposed systems thinking to enhance fluency in using its techniques and spread it to various types of systems—for the expansion of systems thinking to new work methods, new classes of systems (for example, machine learning and artificial intelligence systems, youth subculture systems, etc.). In this direction, you can deepen your knowledge of the fundamental methods of the intelligence stack, for which we recommend taking the \"Intelligence Stack\" course. This is the education of a person who engages in endless cognition, endless development. A good support on this path would be studying the literature mentioned in the course, especially the literature from the last section of the course (this section is of a \"PhD\" rather than \"Master's\" level).",
    "a313f486da7c391e7150cd5227cbf384": "---\ntitle: 'Constructivism: Systems Perform Operations with Both Physical and Abstract Objects'\n---\n\nThe next thing that should be considered in the ontology of a system based on physics is the ontology of physics and mathematics itself. Such ontology is proposed in various works, but let's highlight the work of Deutsch^[David Deutsch, The Beginning of Infinity, 2011, <https://www.thebeginningofinfinity.com/>], in which it is proposed to consider **physics as the science of real objects** and **mathematics as the science of mental/abstract/mathematical objects, while computer science is an experimental science about evidence that the behavior of physical objects can somehow reflect the behavior of ideal/abstract/mathematical objects** (i.e., the science of **universal computers** as physical devices capable of performing **calculations/reasoning/inference**—traditional electronic, quantum, etc., including the calculations/reasoning of humans or even human collectives along with their computers). These ideas imply a shift of discussion from **models** and **data** to **universal computers** as physical devices interpreting such data and changing the state of the **environment** based on these calculations (inputting initial data for calculations and outputting results in symbolic form is just a specific case. Perceiving the surrounding world and changing it and/or \"oneself\" as an embodied computer/constructor is simply a more general case). Central in this **approach** will be the concept of a **creator/constructor**—a physical device that can interact with the environment, repeatedly performing some operations according to descriptions while maintaining its stability (for example, a catalyst molecule, a robot, or a human). Creators provide an approach to formally describing the second generation of systems approach: various **degrees of agentivity/intelligence** (from inert matter, robots, intelligent agents, and all their possible hybrids) create target systems based on some descriptions, and then everything can be discussed as in the first generation systems approach, that is, how target systems function in their environments.\n\nA similar approach, integrating physics, topology, logic, and computer science with a **shift of focus to operations with objects** instead of considering objects in their static relationships, was proposed by Baez and Stay in the Rosetta Stone approach^[John Baez and Mike Stay, Physics, topology, logic and computation: a Rosetta Stone (2011), in \"New Structures for Physics\", ed. Bob Coecke, Lecture Notes in Physics vol. 813, Springer, Berlin, 2011, pp. 95-174, <https://arxiv.org/abs/0903.0340>]. After moving from describing the interaction of systems as **processes in networks** (electrical, hydraulic networks, as well as **interaction networks in system dynamics**, usually associated with functional representations of systems, i.e., representations of operational time, the first generation systems approach), Baez proposes the use of the formalism of **symmetrical monoidal category theory** to describe not just processes but processes of **open systems**, implying interaction with the environment^[John Baez, Symmetric Monoidal Categories: a Rosetta Stone, <https://johncarlosbaez.wordpress.com/2021/05/28/symmetric-monoidal-categories-a-rosetta-stone/>].\n\nAgain and again, we see a move towards using category theory (rather than objects and relationships, based on classical set theory ideas) as the foundational ontology for system ontology, with the main move being the transition from expressing ontology in **static relationships** to **morphisms, changes**. This intellectual move corresponds to the move towards **constructivism in mathematics**, where from \"eternal classes\" and their relationships we transition to **construction operations**^[Constructive Mathematics, <https://plato.stanford.edu/entries/mathematics-constructive/>]. This allows a **constructivist reformulation of mereology** as the central ontological discipline of the systems approach, which precisely studies part-whole relationships^[Mereology, <https://plato.stanford.edu/entries/mereology/>], and since it deals with operations to create a whole from parts, constructivism also provides a path for formally expressing the ideas of creators (allowing for the description of ideas not only of the first generation systems approach but also the second generation).\n\nThis move towards constructivist mereology was proposed by Fine, whose mereology includes not only physical but also abstract objects^[Kit Fine, Towards a Theory of Part, 2010, <https://as.nyu.edu/content/dam/nyu-as/philosophy/documents/faculty-documents/fine/accessible_fine/Fine_Theory-Part.pdf>]. It proposes **operations of constructing a whole from physical and abstract parts** (for example, constructing a set from its elements). Although Fine doesn't explicitly state it, defining construction operations (as well as category theory morphisms) as performed \"by no one,\" these operations can easily be seen as conducted by a physical device-constructor from constructor theory, including for abstract parts—a physical device embodying a \"universal computer,\" including a quantum computer and a living mathematician—they are computationally equivalent and physical to somehow obtain information about the input and output data of the calculation. Fine's approach allows questioning the concept of a system extending beyond physically interacting parts, since the interaction of physical parts controlled by abstract objects can be in a computer—the definition of a system as interacting parts producing emergence remains, only the interaction occurs in the creator system rather than the target system. This line allows discussing system-ness in complex cases of communities that seem to exist but are difficult to discuss based on the interaction of members of these communities with each other: interaction occurs through conducting reasoning operations about these communities in the creator computer^[Kit Fine, The Identity of Social Groups, 2020 <https://metaphysicsjournal.com/articles/10.5334/met.45/>].\n\nThis line of work on the constructivist re-description of second-generation system ontology continued with the creation of **Core Constructional Ontology**^[Salvatore Florio, Core Constructional Ontology (CCO): a Constructional Theory of Parts, Sets, and Relations, 2021, <https://gateway.newton.ac.uk/presentation/2021-04-22/29947>], which offers a constructivist view of **parts, sets, and relations theory** and serves as one of the levels of foundational ontology for **engineering descriptions**. For it, the lower level of foundational ontology is mathematics, and above it, considerations for expressing **4D mereotopology of space-time** in **4-Dimensionalist Top Level Ontology**^[Chris Partridge, 4-Dimensionalist Top Level Ontology, <https://gateway.newton.ac.uk/presentation/2021-04-22/29946>].\n\nUsing some **mathematics** (most often in computational ontology, these are variants of first-order logics, but increasingly, it's a move towards morphisms and, accordingly, category theory) as foundational ontology, bypassing all other (**upper ontology, middle ontology**) **ontological levels** is usual for **physics**. Physics itself, from the perspective of system ontology, works with **functional objects** (for example, \"physical body\"), whose roles are performed by different objects in the physical world (chairs, stones, molecules, photons). Subsequently, through **speculation** and **experiments**, the behavior features of these functional objects are clarified and expressed in **mathematical relationships/formulas**. With the structural similarity of formulas describing different objects, a common nature of these objects could be assumed as **analogical reasoning**. This technique is also used for ontologies expressed logically in the form of **lattices**, an example being VAE (VivoMind Analogy Engine)^[John F. Sowa and Arun K. Majumdar, Analogical Reasoning, 2003, <http://www.jfsowa.com/pubs/analog.htm>]. An example of using this technique by physicists can also be works on **information theory** (\"free energy\" in information theory is named as such because similar formulas are used in information theory and thermodynamics^[Entropy in thermodynamics and information theory, <https://en.wikipedia.org/wiki/Entropy_in_thermodynamics_and_information_theory>]). So there is a tendency to use mathematical objects and formulaic relationships between them to also formulate **third-generation system ontology, that is, a physical explanation of evolution leading to major evolutionary transitions.**\n\nAll this formalization, of course, is mainly related not to the direction of generating new knowledge in the course of **system creativity**, but to the direction of criticism.",
    "74c07104f0a75d94c6a408d9ba308b9e": "---\ntitle: 'The Third Generation of the Systems Approach: Accounting for the Evolution of Time'\n---\n\nVanchurin, Wolf, Koonin, Katsnelson noted that reasoning by analogy in classical thermodynamics and information theory, applied to quantities in thermodynamics, **machine learning**, and evolutionary biology^[Vitaly Vanchurin, Yuri I. Wolf, Eugene V. Koonin, Mikhail I. Katsnelson, Thermodynamics of evolution and the origin of life, 2022, <https://www.pnas.org/doi/full/10.1073/pnas.2120042119>] leads to an unexpected common ontology (**framework**) for all of them. In other words, evolution could be described as **learning/learning**, and learning has a thermodynamic nature, i.e., a quite physical phenomenon. Based on these analogies, they formulated a theory of evolution as **multilevel** **deep** **learning**^[Vitaly Vanchurin, Yuri I. Wolf, Mikhail I. Katsnelson, and Eugene V. Koonin, Toward a theory of evolution as multilevel learning, 2022, <https://www.pnas.org/doi/10.1073/pnas.2120037119>] (deep — this is the multilevel nature of representations^[<https://ailev.livejournal.com/1045081.html>]). In this theory, the driving force of evolution is **conflicts** between objects of different system levels, leading to **frustrations**^[Geometrical frustration, <https://en.wikipedia.org/wiki/Geometrical_frustration>]. This concept of frustration was introduced into the systems language based on studies of spin glasses as an example of the behavior of non-ergodic (with memory) systems, where it meant geometric frustrations (the impossibility of stable spin geometry in glasses). Thus, evolution represents a process of learning/learning, which boils down to solving the **optimization problem** of finding the minimum free energy by changing the structure of numerous **system** **levels**. During this, evolution finds **quasiminima** but not the **absolute minimum**. Periodically, there is a **jump in complexity** (a large evolutionary transition, the emergence of another system level, another type of whole systems), which provides a sharp minimization of the free energy of the evolving system, but it still is just another quasiminimum, not the absolute minimum. In this series of works^[Yuri I. Wolf, Mikhail I. Katsnelson, and Eugene V. Koonin, Physical foundations of biological complexity, 2018, <https://www.pnas.org/doi/10.1073/pnas.1807890115>], the **physical nature of the complexity growth of systems** (using biological systems as an example, but the reasoning there is scale-free, meaning the biological nature of systems or the presence of consciousness does not affect the conclusions of the work) was shown. Thus, in the system ontology, there are also conflicts between system levels, and the phenomenon of frustrations due to these conflicts, as well as the conclusion about the inevitability of the growth of system complexity as the increase in the number of system levels.\n\nAll these researchers are in contact with each other (for example, there were discussions between Vanchurin and Friston), as thermodynamics and the understanding that all systems adhere to the principle of minimizing free energy during their existence, creation, and evolution form the basis of most of these works. Translating traditional formulas to express this ontology (currently, this ontology is expressed in the familiar formulaic form for physicists, typical for thermodynamic derivations) into the constructive form of category theory is a separate topic, but such a problem formulation is more or less familiar to mathematicians, and the research program on this topic can be discussed. The same can be said about reformulating the **differential form** to the **quantum-like**^[Irina Basieva, Andrei Khrennikov, Masanao Ozawabc, Quantum-like modeling in biology with open quantum systems and instruments, <https://www.sciencedirect.com/science/article/pii/S0303264720301994>], which could increase the accuracy of physical modeling of biological and techno-evolution (memetic evolution) due to the quantized/digital nature of most described phenomena, while also reducing computation time by working in discrete points rather than every point of continuous functions.\n\nThe third generation of the systems approach considers that above all, knowledge evolves (including knowledge of systems), not just the systems themselves, which are already closer to biological species. This is close to the shift in biologists' views on evolution as primarily the evolution of the genome, not the evolution of the phenome. Modern biological classifications are already based on the genomes of organisms, not their phenomes.\n\nThus, the modern/SoTA (third generation of the systems approach) ontology of systems:\n\n-   provides object types for multilevel attention targeting to ensure the evolution of target systems (continuous everything) by creator systems\n-   considers at least three times of system existence: operations, construction/evolving of phenome, evolution/development of genome/memome — based on physics, mathematics, and computer science\n-   views systems as stable entities within the minimum physicalism (including systems that are active towards themselves and the environment, systems seeking a minimum of free energy through active/embodied inference, regardless of their 'intelligence' level)\n-   offers scale-free descriptions of systems (phenomena of quantum physics are thereby taken into account), explains the emergence of system levels (complexity growth) due to multilevel optimization to achieve a minimum of free energy\n-   merology is already expressed not through 'eternal classes' and relationships between them, but through morphisms reflecting operations with physical systems during their interactions. It is also considered that operations with abstract objects are performed by creator physical systems with (universal in the sense of equivalence to a Turing machine) a computer in their composition, 'a mathematician reasoning about mathematics is also a physical object.'\n\nThe current development of the systems approach is primarily related to the development of knowledge about distributed representations, as all three generations of the systems approach evolved when the nature of distributed representations was poorly understood. These were more generations of the systems approach expressed formally in local representations and therefore convenient for criticism:\n\n\n![](07-the-third-generation-of-the-systems-approach-accounting-for-the-evolution-of-time-79.png)\n\n\nTo date, the task of creating a common local-distributed semantics, combining the classical semantics of local representations based on Frege's triangle, which unites local representations of signs (semiotics), concepts (abstract objects provided by mathematics), and physics (physical world objects reflected by concepts expressed in signs provided by physics) and the emerging distributed semantics in works on large language models in AI, where representation learning comes in place of semiotics (mainly vector/distributed^[<https://deepai.org/machine-learning-glossary-and-terms/distributed-representation>], disentangled^[<https://deepai.org/machine-learning-glossary-and-terms/disentangled-representation-learning>], continuous^[<https://www.sciencedirect.com/science/article/pii/S2666651021000206>] representations):\n\n\n![](07-the-third-generation-of-the-systems-approach-accounting-for-the-evolution-of-time-80.png)\n\n\nIt is quite possible that developing a theory of distributed representations and generalizing semantics to include not only semiotics but also representation learning will lead to the emergence of a **fourth generation of the systems approach**, but this is currently only a hypothesis.",
    "eef47a9936514eb4dc70f9e79a328d41": "---\ntitle: Scaleless Descriptions of Physical Systems\n---\n\nIn discussing evolution in biology, the systems approach manifested as **major evolutionary transitions** — transitions of **increasing complexity** between large molecules and cells, cells and multicellular organisms. Similar system complexity arises in techno-evolution: transistors are made into microchips, microchips into computers, computers into data centers, and data centers into a computer network. The analogy seems clear, but a **scaleless/scalefree** **theory** (description applicable to systems of any **scale**, from the micro-world considering quantum physics phenomena, to macro-objects) was needed. Scaleless descriptions apply to systems of various scales, including both living and non-living entities, as well as conscious beings and collectives of conscious beings (e.g., humanity as a whole). Scalelessness also implied **scalelessness in the fourth dimension** — time: accounting for the system's creation time, lifespan/use time, and **evolutionary time**.\n\nThe crucial point was the **transition to formulations of physical phenomena as informational**, and explaining the **phenomenon of stability of objects in the physical world** — why certain objects (e.g., molecules or humans) maintain their **shape in space-time**. Fields, Glazebrook, Levin, Friston proposed an ontological framework of **panpsychism** in the form of **minimal physicalism** to describe physically stable systems as realizing the **principle of free energy minimization** and encompassing a full **spectrum of complexity/scales** from elementary particles to humans and societies^[Fields, C., Glazebrook, J. F. and Levin, M., Minimal physicalism as a scale-free substrate for cognition and consciousness. Neuroscience of Consciousness 2021, <https://chrisfieldsresearch.com/min-phys-NC-2021.pdf>]. **Free energy** is defined as the informational characteristic of the system, rather than traditional mechanical or electromagnetic work. These systems evolve from elementary particles to molecules, to systems of inanimate matter, to living beings, with increasing complexity from single-celled to multicellular organisms and their populations. All these types of systems reduce **Bayesian** (or **excess Bayesian**, to account for **quantum-like** computations in biology^[Yukio-Pegio Gunji, Shuji Shinohara and Vasileios Basios, Connecting the free energy principle with quantum cognition, <https://www.frontiersin.org/articles/10.3389/fnbot.2022.910161/full>]) **surprise** — the discrepancy between the expectations defined by a **generative model**^[<https://en.wikipedia.org/wiki/Generative_model>] and actual measurements in reality.\n\nThis scaleless ontology of physically stable systems is formalized using **category theory** as a **foundational** **ontology** in terms of **mereology**^[Fields, C. and Glazebrook, J. F. A mosaic of Chu spaces and Channel Theory I: Category-theoretic concepts and tools. Journal of Experimental and Theoretical Artificial Intelligence 31: 177-213, 2019, <https://chrisfieldsresearch.com/mosaic1-pre.pdf> and Fields, C. and Glazebrook, J. F. A mosaic of Chu spaces and Channel Theory II: Applications to object identification and mereological complexity. Journal of Experimental and Theoretical Artificial Intelligence 31: 237-265, 2019, <https://chrisfieldsresearch.com/mosaic2-pre.pdf>] and expressed in a form allowing the description of **quantum-like active/embodied inference**^[Fields, C., Friston, K., Glazebrook, J. F. and Levin, M., A free energy principle for generic quantum systems. Progress in Biophysics and Molecular Biology 173: 36-59, 2022, <https://chrisfieldsresearch.com/qFEP-2112.15242.pdf>]. This line of **ontological engineering** clearly shows how to think about the functioning of systems of various evolutionary complexities, including applying **stochastic** considerations to **non-ergodic** systems, i.e., systems with memory. One of the strongest confirmations of this line of reasoning was the creation of a **hybrot**^[Hybrot, <https://en.wikipedia.org/wiki/Hybrot>], which learned to play Pong: a sufficiently complex system capable of learning (e.g., a **natural neural network**) should, by the principle of free energy minimization, demonstrate behavior that minimizes **external environment unpredictability**, as was demonstrated in the experiment^[Brett J. Kagan, Andy C. Kitchen, Nhi T. Tran, Forough Habibollahi, Moein Khajehnejad, Bradyn J. Parker, Anjali Bhat, Ben Rollo, Adeel Razi, Karl J. Friston, In vitro neurons learn and exhibit sentience when embodied in a simulated game-world, 2022, <https://www.cell.com/neuron/fulltext/S0896-6273(22)00806-6>]. In fact, this line of work formalized and mathematically grounded physics-based ontological ideas of the first-generation systems approach, yet due to the scalelessness of the theory, it can also consider other timescales: life cycles of systems and their evolution. Key to this was the quantum physics concept developed to solve the observer problem: **measurement as the interaction of systems**, not just **passive perception/observation**. The reverse is also true: the interaction of systems leading to change, i.e., creation, is described as the reverse of measurement. This means that any interaction, even a molecule as a system with its environment, can be seen as measurement or creation: the molecule is a proto-agent that somehow perceives/understands/measures and/or creates/changes the surrounding world, maintaining its stability due to adherence to the principle of free energy minimization.\n\nThis line of reasoning (perception/measurement as the reverse of change/creation and both being interactions of systems) was developed in **constructor theory**, proposed by Deutsch and developed by various **quantum gravity** researchers, as scaleless descriptions are very much needed there^[<https://www.constructortheory.org/>]. The **constructor** is a physical device that can maintain its own **unchanged/stable** state for a long time, while changing the environment through some predefined sequence of **operations** (e.g., a catalyst molecule, a robot with a universal computer, or a living being — advanced constructors can also **replicate** themselves, participating in evolution). Scaleless physical theories based on ideas of information-related **changes as computations** have proven highly productive. The constructor concept expanded the well-developed notion of **universal computation** and **universal computer** (all universal computers are analogous to a Turing machine: given enough time and memory, they can compute anything that is computable in principle, i.e., not forbidden by the principles of mathematics) to the concept of **universal transformation**: a **universal constructor** can, given enough time and materials, perform all possible transformations of the physical world that are not forbidden by the principles of physics (possibly, the universal constructor would need to create numerous copies/replicas of itself and various **tools**).",
    "f66fe1645bae6c7536bf4e6c91bc4bc1": "---\ntitle: 'Second Generation of the Systems Approach: Target System in Its Environment, Created by Creator Systems in the Creation Graph'\n---\n\n**Second Generation of the Systems Approach** was mainly based on the ideas of systems engineering: physical (including **cyber-physical**, including cyber-physical with humans) systems are created by humans, not self-replicating in a cycle, and these systems are mostly non-living. This **problematized** the concept of the life cycle, which turned out to be neither life nor a cycle, although the **concept** remained. Thus, the second generation introduced **enabling/constructor systems**, which, in addition to the **part-whole** relationship for systems, also introduced a **creation relationship** for **creators/constructors** who create and develop the **target** **system** (most famously studied in the works of Peter Checkland^[<https://en.wikipedia.org/wiki/Peter_Checkland>] in the late 70s and early 80s). In systems engineering, **systems engineering management** emerged, whose subject became the **creation and development** of enabling systems (creation **chains** appeared: creators of creators of target systems).\n\n**Diagrams** of systems engineering emphasized the **\"waterfall\"** **model of the life cycle**, in which the system was **conceived, designed, implemented, tested, operated, and decommissioned**, marking the usual end of a project. In **engineering**, these tasks were performed by creators, while, in the **living system**, most tasks were performed by the system itself (part of the work was done by **evolution**, which was usually not considered). Different **roles** (roles, stakeholders) in the enabling system exhibited different **interests**/concerns regarding the system and its project, requiring various **aspectual** **descriptions**/views, made from certain **description methods**/viewpoints well-suited for discussing the diverse interests of different **project roles**.\n\nThe ISO 42010^[ISO/IEC/IEEE 42010, Systems and Software Engineering — Architecture Description, <https://www.iso.org/standard/74393.html>] and ISO 15288^[ISO/IEC/IEEE 15288, Systems and Software Engineering — System Life Cycle Processes, <https://www.iso.org/standard/63711.html>] standards established the conceptualization of the system for systems engineering, ensuring that the second generation systems approach ontology was **shared** within engineering communities. The formalization of system ontology based on **4D extensionalism** (the idea that if two objects occupy the same **place** in **space-time**, they are the same object --- and this is a **physical object**) was proposed in 2003 by ISO 15926-2^[ISO 15926-2, Industrial Automation Systems and Integration — Integration of Life-Cycle Data for Process Plants Including Oil and Gas Production Facilities — Part 2: Data Model, <https://www.iso.org/standard/29557.html>], relying on BORO ideas^[Peter El Hajj, Business Objects Reference Ontology, <https://digitaltwinhub.co.uk/top-level-ontologies/business-objects-reference-ontology-r2/>], leading to several similar ontologies mainly for military applications, developed by the IDEAS Group^[IDEAS Group, <https://ideasgroup.org/>]. Notably, Matthew West proposed a 4D-based ontology in 2010 called HQDM^[<https://www.elsevier.com/books/developing-high-quality-data-models/west/978-0-12-375106-5>], where the system concept was central. These approaches assumed not just a specification of conceptualization but also a formal expression of conceptualization in **ontology description languages** (such as the rarely used EXPRESS^[ISO 10303-11:2004 Industrial Automation Systems and Integration — Product Data Representation and Exchange — Part 11: Description Methods: The EXPRESS Language Reference Manual, <https://www.iso.org/standard/38047.html>], and later the more popular OWL^[Web Ontology Language (OWL), <https://www.w3.org/OWL/>]) for creating **data models** in PLM system databases^[What is PLM (Product Lifecycle Management), <https://www.oracle.com/uk/scm/product-lifecycle-management/what-is-plm/>]. The main ontological premise was the use of 4D ontology, providing a good and compact description of **changes** the system undergoes during its creation from parts^[Ian Bailey, The Simplification in Integration Architecture that 4D Supports, <https://gateway.newton.ac.uk/sites/default/files/asset/doc/2105/Ian%20Bailey.pdf>].\n\nThe peak of this line of work on the engineering understanding of systems within the second generation systems approach was 2008-2013, after which interest in such **formal-logical ontological descriptions** of systems slightly declined: creating ontologies as explicit formal specifications of shared conceptualizations was no longer seen as a step towards AI development, even rebranding formal ontologies as **knowledge graphs**^[John Sowa, Knowledge Graphs for Language, Logic, Data, Reasoning, <https://www.youtube.com/watch?v=J9_kXpZAcQY> (Part of the Ontology Summit 2020)] did not help. Web 3.0, as a **semantic web**, was expected to be a future internet mainstream, but **semantic** **methods** supported by OWL-based **tools** remained niche. Ultimately, in **large language models** (LLM), distributed representations were used for generating explanations, while local (symbolic) representations were mainly handy for critiquing ideas rather than encompassing total thinking. Today, semantics includes both local and distributed representations, although the task of uniting them under one theory (neuro-symbolic computation) remains unresolved.",
    "1bf5e459c7b38cab9454377f2ada5ca6": "---\ntitle: Ontology of System as a Set of Descriptions for Conceptual Focus\n---\n\nPeople often ask for a **glossary** (brief dictionary definitions of key\nconcepts) of our course, ignoring the initial sections that state\n**definitions** are **a coffin for a sleeping thought**. So, we will\nfinish our course not with a glossary but with a short text outlining\nthe ontology of the Systems approach (meta-meta-model), in which we will\nremind you of third-generation Systems approach concepts and provide\nliterature on the theoretical foundations of the Systems approach. This\nwas discussed throughout the course on many pages, but for advanced\nunderstanding, we highly recommend reviewing the referenced literature.\n\nIf you need not an advanced (‘graduate level’) understanding but a\n‘regular student’ level, you can skip the material in this section and\nproceed to study the courses ‘Methodology’, ‘Systems Engineering’,\n‘Personality Engineering’, ‘Systems Management’ (in that order). If you\nneed to advance along the ‘graduate path’, try taking the course\n‘Intellect Stack’, which provides a brief overview of all the fundamental\nthinking methods of the intellect stack instead of the applied courses of\nthe engineering cycle.\n\nIn this section (and in the ‘Systems Thinking’ course itself), the\nmaterial from the ‘Methodology’ course is touched upon as necessary\n(because when talking about **methods** and **works** engaged in by\n**creators**, you inevitably need to refer to the concepts of **creation\nand development**, consider **methods** of creation and **objects** of\n**methods**). Partially, the ontology of Systems engineering is also touched\nupon. **Systems Engineering** as a **method/approach/culture/practice**\nof **changing the world for the better** is based on the **ontology of the\nSystems approach** (sometimes referred to as ‘Systems ontology’, including\nall concepts of the Systems approach).\n\nThere are several recent initiatives on the **ontological commitments** of\nsuch ontology, which we consider the **third generation of the Systems\napproach**, accounting for **thermodynamically driven evolution**. We\npropose ways to harmonize these approaches to creating a systems ontology.\n\nGruber, Borst, and Studer defined **ontology** as **explicit** **specification**\n**of a shared** **conceptualization** (an ontology is a formal, explicit\nspecification of a shared conceptualization)^[Nicola Guarino, Daniel\nOberle, and Steffen Staab, What Is an Ontology?, in S. Staab and R. Studer\n(eds.), Handbook on Ontologies, Springer-Verlag, 2009]. Let's define\n**conceptualization** as setting objects of perception important for reliable\n**active/embodied inference**^[Karl Friston, Embodied inference: or \\\"I\nthink therefore I am, if I am what I think\\\" In W. Tschacher, C. Bergomi\n(Eds.), The implications of embodiment: Cognition and communication (pp.\n89--125). Imprint Academic.,\n<https://www.fil.ion.ucl.ac.uk/~karl/Embodied%20Inference.pdf>]\nin the world. This allows us to formulate the task of creating\nan ontology in terms of **attention management**, and ‘explicit formal\nspecification’ here means that these objects of attention are highlighted\nnot spontaneously, but according to some explicit model of these objects\n(ontology), specified with another model-formalism (foundational ontology). As\na **foundational** **ontology**, we choose **objects and relations**.\n\nWe solve the problem of creating ontologies and explanations based on them\n(the emergence and improvement of explanatory theories that use alternative\nslices of the world into objects) according to **Popperian epistemology**\n^[Karl Popper,\n<https://plato.stanford.edu/entries/popper/>]:\n**objects** in ontology appear through **guesses**, the acceptability of these\nguesses for judgments about the world is questioned, but guesses that survive\n**criticism** are **taken seriously**. That is, good guesses that **the world\nconsists of systems** (guesses about what concepts are in the ontology of the\nsystem) and judgments that these guesses are useful for changing the world for\nthe better can be taken from the literature, and if we are not aware of their\ncriticism and cannot immediately propose **falsification** of these guesses by\nreasoning and/or experiment, we consider them **our best theories** (SoTA,\nstate-of-the-art) about the world, take them seriously, and further teach\n**intellectual agents** (**replicate the memes** of these\n**theories/knowledge/explanations/disciplines/algorithms**) so that these\nguesses about objects are **shared**.\n\nOf course, we do not just inform agents (people, AI-agents, organizations) of\nthe Systems ontology, but we teach them to identify in the world **abstract**\nand **physical** objects described by an explicit and increasingly formal\nspecification as the level of abstraction decreases. The upper abstract levels\nof the Systems ontology are usually represented in **distributed/neural\nnetwork** **representations**, so the presentation of the Systems approach is\nnot in a formal (mathematical logic) form, but in natural language text,\nintroducing concepts not by definitions but by their **use in different\ncontexts**. However, after transitioning to applied specializations in various\n**domains**, representations become **local/symbolic** and are expressed in\nformalisms convenient for processing by classical information technologies\n(that is, for processing in relational, graph, and other databases).\n\nOf course, if problems arise in using this ontology, it means its falsification,\nbut this is just an occasion to correct the ontology, fixing the identified\nerrors—the Systems approach ontology thus **evolves**, it at any given moment\nrepresents the best we know at that moment. We^[School of\nSystems Management, <https://system-school.ru/>]\nhave implemented a series of courses in which a few hundred people per week\nlearn to identify objects in the world described/**typed by the Systems\nontology. The main sequence of courses now realizes an approach of fully\nconscious and then interiorized ‘automatic’ **conceptual directing** of\n**attention** of students to objects described/typed by the Systems ontology.\nThe student learns how to:\n\n-   **direct their attention** and that of other **agents** to objects from the\n    explicit specification (ontology), that is, to direct attention conceptually\n    rather than spontaneously, as well as **hold** conceptually directed\n    attention for various durations, including collective attention in such\n    agents as a team or entire enterprise through leadership or community or\n    social influence (course ‘Rational Work’),\n-   direct attention to **systems** (course ‘Systems Thinking’),\n-   direct attention to **activities/practices** performed by\n    **system-creators** (course ‘Methodology’),\n-   structure **activities and roles** that must be held in attention during\n    **Systems engineering projects** (course ‘Systems Engineering’),\n-   teach **thinking** **skills** to agents, using both local and distributed\n    representations (course ‘Personality Engineering’),\n-   direct the attention of oneself and **organizations** (teams, collectives,\n    enterprises) to objects described by the **specialization** of the Systems\n    ontology for such system types as organizations (course ‘Systems\n    Management’).\n\nTo teach students **SoTA** (state-of-the-art, ‘the best known at the moment’)\nof Systems ontology, we **harmonized** several specific conceptualizations of\nthe system notion, which together represent the **third generation of the\nSystems approach**. As usual, each generation of the Systems approach includes\nall the achievements of the previous generation but adds something new.",
    "934f113e1973f35e3974df1515c82276": "---\ntitle: 'First generation of systems approach: system in its environment during operations'\n---\n\n**First generation of systems approach** emerged in the 1940s mainly as a result of von Bertalanffy's work^[<https://en.wikipedia.org/wiki/Ludwig_von_Bertalanffy>]. The concept of a system as a subject of consideration, separated from its environment, appeared in physics a long time ago, but systems approach as viewing the whole world as interacting systems emerged mainly after von Bertalanffy's work on **general systems theory**. **Approach** is a common term for the situation when ontology, successfully developed and tested in one **domain**, begins to be used in various other domains. The key here was the realization that systems are interacting **holons** (Koestler introduced this term to describe the **part of a whole**, which itself **consists of** parts^[Koestler, Arthur (1967). The Ghost in the Machine]), plus these systems somehow appear in the world and then disappear from the world, that is, they go through the usual **life cycle** for biology. Von Bertalanffy was a biologist and generalized the successes of applying systems approach in biology, that is the life cycle --- this is the cycle of birth-growth-reproduction and, separately, death (which after reproduction already does not affect the genome, therefore it may not be considered in evolution, but it is necessarily considered in techno-evolution). The interaction of **system parts** during **operations** results in **emergent properties** of the whole. The gears in a clock do not show the time, the clock shows the time, a house with a clock inside no longer shows the time. The key here was that the first generation of systems thinking operated with at least two different ways of partitioning into parts, depending on the time of consideration:\n\n-   **Functional partitioning** depending on the purpose of the system in the supersystem and the purpose of the subsystems in the system. It implied considering the system during its operations.\n-   **Constructive/modular partitioning**, needed for considering the **time of creation** of the system.\n\nThe difficulties in mastering **systems thinking** were mainly that it was hard for people to grasp the concept of focusing on dynamic objects in the world --- right during the system's operations. Most often, when mentioning parts-wholes, they imagined a **\"blow-up diagram\"**^[Bellami, Nikon F3-P Parts Diagram, <https://www.japancamerahunter.com/2014/11/nikon-f3-p-parts-diagram/>], at the same time losing the **multi-level** nature of such **partitioning**. It is clear that one cannot discuss emergent properties of a stopped and broken down into single-level physical constructive parts system, because interaction --- this is operations time and the consideration should be functional. But partitioning into constructive parts is also important because such a system needs to be **created**. For example, scissors functionally consist of a cutting block and a handle, and constructively consist of two halves of the scissors and a screw that holds them together. At the same time, the user is **interested in** the functional consideration, and the factory engineer --- in the constructive.\n\nBertalanffy included **systems engineering** in the set of systems disciplines he proposed, which developed rapidly. In systems engineering, the target systems were physical: this provided guaranteed **grounding**^[<https://plato.stanford.edu/entries/grounding/>] for all descriptions. At the same time, the **descriptions themselves were not considered as a system**, the **interaction** (i.e., changes over time due to each other) of parts of the descriptions, which would give **emergence**, strictly could not be discussed, **formalism** could not be built --- **mereotopological** considerations of **mental/abstract/mathematical objects** mostly ended in failure.",
    "b64dd040dcd4b7b339d8c5e0711f667f": "---\ntitle: 'Supersystem: it also needs to be identified!'\n---\n\nThe supersystem (sometimes referred to as using system) should primarily be checked to see if the target system is, at the time of operation (operation, work, functioning), an integral physical part of this system, i.e., literally part of the composition of the supersystem. Unfortunately, most errors occur due to inattention to this feature.\n\nSystems breakdown structure is a hierarchy in terms of composition/assembly/part-whole relationships, not any other kinds of relationships. An error in identifying the supersystem and target system is indicated by the detection of subprogram call relationships, classification and specialization, property belonging, role assignment, creation, and many other relationships besides the prescribed composition relationship for system breakdown structures (composition, is\\_part\\_of, inclusion as a physical part).\n\n![](11-supersystem-it-needs-to-be-identified-too-53.png)\n\nFor example, consider a man and a woman. What is their supersystem? Yes, they somehow interact, they have some functionality within a supersystem. What kind? In student audiences, this puzzle is solved in about five minutes, while in older audiences it takes fifteen seconds: the supersystem here is the family (students often say \"couple,\" emphasizing the possibility of a weaker bond), and the woman and man are within each other's operational/working environment, which is \"in the family.\"\n\nThe puzzles of identifying the supersystem are usually solved by identifying a missing, unnamed, or unrecognized system in the systems breakdown — and this identified system needs to be given a name (often a name for such a system already exists, like \"family,\" but it just isn't immediately obvious).\n\nIf people somehow think about the target system, then the supersystems for it (and there can be several!) are usually poorly distinguishable, and sometimes there are no established names for them. These \"missing\" systems have to be identified (i.e., describing their roles, functions, boundaries to their environment, taking another step \"outside\" the target system) and somehow named. How to name them? Just like any other system, i.e., mainly (if there is no clearly established historical name) by the role of this supersystem in its own supersystem and the function/method/service it performs, i.e., by the role in the super-super-system in relation to the target and the function/method/service with its service items in the super-super-system. We just consider the roles from the boundary of any system upwards through the systemic levels, and the roles of subsystems — later.\n\nA sign that some part of the target system actually belongs not to the target system itself, but to the supersystem (and the project team usually has to deal with both these systems) is that the team is not authorized to unilaterally change the supersystem or even its descriptions/models (concept of use, system concept, architecture of the supersystem). However, the team can change the target system and its descriptions, fully authorized to do so!\n\nAgain and again, we see that the line between different kinds of systems lies not in their properties as physical objects but in some human agreements: systems of systems (SoS, defined by the different ownership of autonomous systems in the system of systems), services (ownership of systems by creation: performing some method's operations on someone else’s method object), and in this case — the authority to change the construction of the target system and the supersystem, also ownership relationships. Even if we have a service that paints something, we are authorized to change the paint layer, but unlikely to change the system being painted and the systems that then look at the paint (if it is artistic painting) or impact the paint (if it is protective paint from some aggressive chemical environment).\n\nAnd it should be noted that the situation is not as rigid as it was just a decade ago. It was not supposed that the team could somehow influence the supersystem — they took it as given in the project and had to just interface their target system with the existing system environment. Today it is different: the project team is not authorized to directly change the system environment by their own decision. But the project team can influence the supersystem to be changed — independently by its owners, or by the project team in agreement with the supersystem owners, to match the characteristics of the target and the supersystem. For this, the project team (internal project roles) actively works with external project roles/stakeholders, influencing them, and this process is long since \"everything is continuous,\" the system evolves over a long period, not \"manufactured and forgotten.\" It's about multi-year joint evolution of the target system and its supersystem, with many versions of the target system and supersystem changing. After all, the target system is just a subsystem of the supersystem as a system; they must be engineered to be coordinated, and sometimes it is easier to change something in the supersystem than in the target system.\n\nWhen identifying the supersystem, remember that in foreign texts the supersystem is sometimes called the “using system.”\n\n![](11-supersystem-it-needs-to-be-identified-too-54.png)\n\nThis is because the engineer uses the target system as part of the supersystem. This use refers to the moment of creation, not the moment of operation. Although it is often said about the operation/functioning of the system, it refers to the environment that \"uses,\" \"engages,\" \"operates\" the system. But \"often\" is not always. So, if you mistakenly say that \"a woman uses a man,\" further linguistic reasoning may lead you to the erroneous conclusion that the woman is the using system. And equate it with the supersystem. That means the man is part of the woman (all the molecules of the man are part of the woman’s molecules), which is absurd. So be careful with the meanings of the word \"use,\" there are two:\n\n- Use of the target system by the engineer of this supersystem as part of the supersystem design in design-time. The clock is used in the interior of the apartment, but there is no \"use case\" here.\n- Use by someone or something in the environment in run-time/operations (it is necessary to figure out what this \"use\" generally is). The clock is used by the resident of the apartment to check the time (this is about a use case).\n\nWhen defining the supersystem, it is crucial that this is the nearest systems level (postman principle, the address must be precise — you can't refer to a too general object). The level of the supersystem should be the one where emergent/system effects from the operation of the target system are expected. \"I am making a flower that will improve the whole world\" — this is a wet dream, professional incompetence. You need to find the supersystem where the flower will change the state, give some property that would be different if there was no flower. The world as a whole is unlikely to change, but if it’s a \"date\" situation (you can consider it as an \"event,\" as a supersystem for the flower), the flower may improve the mood of the participants. Therefore, if you make flowers to be used for dates, say so. If for funerals, these will perhaps be paper flowers. Or a bouquet with an even number of flowers. Don’t mistake the supersystem, it’s important!\n\nA reliable way to identify the supersystem is to figure out which agents (first of all, of course, people) you have to talk to (remembering that we talk to roles, not the performers of roles!) to make the project happen. They are usually the owners of the supersystem. Let's say you are creating a \"system for transporting airplanes,\" used during airplane repairs. The target system is the repaired airplane that is flying again, carrying cargo and passengers (they will be in its supersystem during operation). What is the supersystem for your \"system for transporting airplanes\"? The aviation of the country, the Ministry of Industry? No, the postman principle says that while this is true, it is a useless truth. You could equally say \"humanity\" as the supersystem, or even \"the entire universe\"! In this case, it is fairly easy to find that mainly people from the operational service of one of the aviation enterprises are interested in the \"system for transporting airplanes.\"\n\n\"Operational service of the aviation enterprise\"::organization (not even the entire aviation enterprise!) is the supersystem for the airplane transportation system, and there the target system will be the airplane that needs to be transported among other things. The airplane transportation system here is one of the creators for the airplane, a tool for the operational service, used for performing transportation services. The team of the aircraft operational service (external project roles in relation to the airplane transportation system) has needs — they need to repair airplanes that do not fly. Therefore, they have some concept of using the ground airplane transportation system (obviously non-flying). That's it, from this moment (airplane transportation system as part of the operational service of the aviation enterprise = system as part of the supersystem) the project for creating the airplane transportation system can be discussed. Identifying the owners of the supersystem is usually highly productive: you still need to communicate with these owners, they are the most important external roles in your project.\n\nAnother mistake is when the supersystem and the target system are named the same (we have already talked about this mistake, but it is repeated over and over again, so let's repeat it once more, in different words). Divisions like \"A consists of A and B\" are inadmissible, it can only be \"A consists of B and C\" — and most likely this mistake is not because the division itself is incorrect in life, but simply because the names chosen for the systems in it are wrong. For example, \"the cell consists of the cell and the gasket.\" Detailed discussion shows that it’s about a cell consisting of the body and the gasket. \"The living room consists of a room and an interior.\" Detailed discussion shows that the living room consists of a space (construction part, box without finishing) and an interior (including even wallpaper glued to the walls of the room).\n\nAnd systematic thinking is that you must understand the structure of the supersystem to understand the role of the target system in it. In the picture in this subsection, taken from the works of Jan Dietz, this is indicated as reverse engineering for the using system (and ontology — these are various descriptions of the supersystem obtained through reverse engineering, identifying the supersystem structure). You will get the target system by straight engineering (but they don’t usually say \"straight engineering,\" they just say \"engineering\"): you will identify descriptions of the target system in terms of its use in the supersystem (concept of use) and develop (system concept) for the target system to perform the expected function in the supersystem.\n\nHow to produce these descriptions (methods for developing the concept of use and system concept) is dealt with in detail within the systems engineering course. In our systems thinking course, we only indicate that **you must understand the role of the target system in the supersystem and the function/method/service performed by this role; to do this you must identify the supersystem and understand its structure and why the target system is needed within this structure.**\n\nIf you don't first deal with the supersystem, don't deal with the higher systemic level, and only after that go to the subsystems, you don't have systems thinking. **The project attention shift from the target system to the supersystem and dealing with the nearby system environment first, and with parts of the target system later — this is the main point in systems thinking.**",
    "fbc50d2248fb053ca50c4283449f772b": "---\ntitle: Systems-products and services/methods of providers/creators\n---\n\nThe target system was often thought of as a delivered good (some\nitem manufactured for sale):\n**product/item**::system::“physical object”, in different industries it\nmay have different names, for example, in construction --- a building or\nstructure, which are not usually called products or items, but in essence, are the same.**\n\nThe product/item is usually made by its creator from raw materials purchased\nby this team and then physically delivered to its end\nconsumer for use, conditionally “crossing the enterprise border”,\nchanging ownership. And already in the consumer's ownership, this\nproduct/item performs its role/function, operating within\nthe top-level system during exploitation. After the ownership transition, the consumer\nof the product/item::system uses it in two ways:\n\n-   as part of their own target system as a construct-affordance\n    (for example, your client installs your watch-product in their\n    car-product and then sells the car as a product to their client, and the watch shows the time during the use\n    of the car)\n-   as part of systems in the creation of their product (for example, your\n    client installs your watch-product in their factory on the wall, so that workers\n    can keep track of time while assembling a car as their\n    product, and then sells the car to their client without your\n    watch or with some other, not your watch. Your watch ends up being used as part of the factory,\n    a system in the creation of the car).\n\nAn alternative option is to consider the target system immediately\nto be a product not for you, but for the client who came to you with their raw materials ---\nunfinished product, their target system, **subject\nof service/method**. Your work is not with your raw materials and there is no\ntransfer of your product to the customer, you as the creator of the client's product\nonly work by the method-service, using your craftsmanship and\nyour tools of this method (service, maintenance) work.\nThe work goes on the client's raw materials and the product remains with\nthe client, in their ownership. You only change the state\nof some systems that do not belong to you at that moment and will later\nbecome part of either the client's product, or part of the client's toolset\n(but here you need to be careful: if you worked on training\nthe client's employees, then the reasoning remains, only it is hard to consider the mastery\nof employees as a tool, and even as “raw material” they very\nconditionally belong to your client). In principle, the reasoning here is a bit\nmore complex, since services and methods of work, of course, are tracked down the chain to a system, but in real life, you may encounter some work with information (description of the system ---\ndesign of the “iron” system, processing exploitation data, etc.). Most\nreasoning about methods and services also works here, it is not necessarily the modification of systems, but it is mandatory that all these\nchanges to very different objects are somehow tracked through the (possibly very long) chain of changes to the target system. And if it is impossible to track, then it raises doubts about the usefulness of these works, maybe they do not need to be done at all, nothing will improve. Control question: “and if these method/service works are not done, what will happen to the target system?”.\nIf it is work with the creator, then further along the chain: “and then this\ncreator, what will he do better for the target system?” If the reasoning does not extend to the target system through some chain of cause-and-effect, then it's bad: it looks like you have encountered a disguise of useless work (although, of course, for the agent who will be paid for work unnecessary for the creation of the target system, this work is very necessary --- they want money for it, or they want to train their skills, or they want something local “for themselves”, but not global --- for the entire target system creation project).\n\nEven with all the nuances, the situation of performing service works boils down to\nthere being no product/item in your project, but you simply take part in the creation graph of some target system with your work according to some method. The method by which you change the state of other systems (another’s target system, other constructs that will then make up someone else's target system, or even another’s toolset in the creation graph) is called **service/service/service.**\n\nHere, you will only have works/behavior/changes according to your method (that is, works of your craftsmanship and tools according to the\nknowledge/theories/algorithms of the method) as a creator over a non-belonging target system, changing its state. Here you will only be a creation system, your team will provide the client only external behavior --- service works.\n\nIn the literature (including English-language, the same situation as in\nthe Russian language) many different opinions can be found on what \n“service”^[<https://yadi.sk/d/4hIEcpcn3Ny9iN>] is,\nthe main ones are:\n\n-   Service/provider, the role of an agent performing work on the subject\n    of the method --- for example, an auto service as a provider of car repair methods, microservice --- software as a provider of data processing methods (rare use of “service” for inanimate systems).\n-   Service/work by method on someone's subjects, for example “received \n    service for the client's car” (works of an unspecified service method for the car::client's subject performed).\n-   Service/method of performing work on someone's subjects, for example,\n    “performed the client's car service” (performed an unspecified method of work, i.e. work by method for the client’s car).\n\nIn Russian, “служба” is used to describe both service::process (method,\na pattern of action unfolding over time, externally observed\nbehavior) “provision of service”::work (words\nproviding/conducting/executing indicate that the method still needs to\nbe implemented by work), and the system that causes this behavior,\ni.e. server/servant/provider. And this is sometimes a functional “servant” (role),\nand sometimes constructive (agent). Occasionally, “service” is also called\nthe interface between the “servant” and the external world modified by this servant.\n\nIn our course, we adhere to the view that service is a method\nof performing work (we distinguish service as a method of work, general for all\nworks of some server/role and service/method work), and the role performing\nthe method/service is called server/“service\nprovider”/server/служба/provider. Thus, there is synonymy with\nrole/provider/служба, but there are same problems as with role/stakeholder\n(organizational role::“functional object”, or\norg element in the role::“constructive object”, an example being --- “either \nPrince Hamlet, or Vasya Pupkin”).\n\nWe still adhere to the opinion that a provider is an organizational role (server\nis more often used when talking about someone's agent tools, although in Russian, s\nerver is often translated as “служба”, and then it can also be an org role, not an instrument role).\n\nIn projects, a provider is usually a conditionally external project role.\nConditionally external --- external because it works “someone else's on our material”,\nand formally --- internal/team since in our creation chain,\nit works as part of a common extended team (consisting of many\nseparate teams in a large creation graph) on the common target system.\nIf the provider is spoken of as a role, any org element can be appointed as a \nservice-provider of some service/method in the course of org design.\n\nThus, service replenishes the synonym row\nmethod/way/practice/strategy/culture/style/service, and is used mainly when talking about creation works \non someone else’s material. Service is a method for creation works of various kinds, for example, measurement/description, changes in the physical world, prediction/design), performed on\nsomething external, “someone else’s”, “on contract raw material”. If we speak\nof the service “nail hammering”, then it is about taking an org element, \nplaying the role of a provider/службы and making it perform the work of its method/service (work\nof driving::method/service) for our nail. If we ourselves will drive\nthe nail, then everything is the same, just the terminology of the service and provider/службы won't be used.\n\nThe constructive object (org element) as a functional object\n(служба/provider/role) performs the work of the service/method on the object\nof the method. Our carpenter hammers our nail: “nail hammering”::“method\nwork to change nail state”, carpenter::role. Another’s carpenter\nhammers our nail or our carpenter hammers another’s nail: “nail hammering”::“service/method to change nail state”,\ncarpenter::provider/role. Everything is the same, just different words and in the words ---\nreference to “externity” (while there can be a long discussion about what is\n“ours” and what is “not ours”, this needs to be agreed upon collectively).\nProperty in economics is determined not by what you consider yours,\nbut by what those around you consider yours, with which they agree).\n\nFor inanimate creators (toolset: machines, measuring\ntools/instruments, tools/tools, gadgets, equipment and apparatus) it’s all the same:\nthe hammer just won't be called a service provider (but the owner of\nthe hammer might be), but a server (even “service server” will sound like “double butter”: “worker’s works”,\n“service’s service”). Hammer::server/tool::creator in the role\n“hammerer” performs the service “hammering”::method::behavior over the object “nail” changing its state.\n\nWe do not really distinguish in considerations about systems in creation graphs (if\nit is not about project roles played by agents developing their\nstrategies to achieve their goal --- the hammer cannot play a work/project role! The hammer is not an actor, it is not hired!)\nliving and non-living systems, server/службы/provider/servant/server can be both an enterprise, a person, and just some tool,\nthe difference here is more terminological. Their method of work as a creator in\nchanging something not their own --- service.\n\nWe have already encountered a situation where systems were classified on \ntheir belonging to certain owners, these are systems of systems (SoS).\nThe same with services: it is simply about the work of some\ncreators, only not on their product or their\ncreator in the creation graph of their product (for example,\ntoolset for implementing some method), but on someone else’s product\nor someone else’s creator, for example, someone else’s toolset. If you came\nto sharpen someone’s knives in their kitchen, and these are not your knives and not your\nkitchen --- then this means you came to “provide a service”, “perform\nservice works”/“perform works by method”.\n\nService “nail hammering” may turn out to be a function/method/means within\na larger method, working on a larger situation:\nfastening boards, preparing a mount for a picture on the wall, eliminating\na scratching nail, etc.\n\nSo do not be surprised when you hear two completely different\nconversations using different terms about the same object, the same\nproduct and its same behavior: this is the specificity of interests.\nService is usually about the behavior of the creator, the method of their work on “someone else’s”\nobject, which should change its state during the service work.\nService is the method (to hammer a nail), and the works are the\nactivation/provision of the service (to hammer ten nails --- these are ten\nworks according to the method “to hammer a nail”). As with the method, we distinguish\nprovision of service (execution of the method) and the service itself (method). Everyday \nexpressions like “provide a service” actually mean “provide a server that will perform the service work” (that is, provide an org element or tool,\nthat will do the work, being in the role of the executor\nwork by method).\n\nAn attentive student has already noticed that here we are simply training\ntheir neural network with ten repetitions in slightly different words of the same\nthing: an agent, being in a role, performs work by method, changing the state\nof objects of this method. The only difference is the ownership of objects\nchanging state during the work by the method: for different\nownership (ours or someone else's) the terminology differs markedly,\nall words are different, but the essence remains the same. In the case of “someone else's”\nthe target system for the provider is the very object of their service.\nFor the carpenter and even the hammer, looking for a target system is necessary where\nthe nails are, even if they are not theirs, but given for hammering! If you\nwere called to paint someone’s fence and even provided with paint, then\nyou can further choose --- the target system is the layer of paint in the right places,\nor the fence as a whole, transferred from the “ugly” state to a “beautiful” state\nby method/service “painting” (another variant of methods/services ---\n“rebuilding”, “drapery” and even “elimination”, because no fence --- no\nproblem of its beauty).\n\nIn this lies the power of systems thinking, the power of the meta-meta-model: reasoning\nwith objects of attention is carried out “conceptually” at a level of abstraction higher\nthan the level of storytelling about subject areas.",
    "ea9a739a54dca385c8783d039977ef81": "---\ntitle: The target system depends on who is looking for it\n---\n\nIt is common for top managers at some factory to admit that 50% of employees do not know what the enterprise produces — all they see are some parts of some time creation systems, but what there becomes tools for creating the target system and what the target system itself is, what characteristics of the target system are paid for, how their work is connected with this money, how the target system looks at the moment of operation — this is unknown. This is bad because it means that many people make suboptimal decisions: they literally do not know what needs to be done to make the target systems better. Should the detail weight be reduced, or the strength increased, or the price lowered, or the processing class made more accurate within the given budget — what is more important? It depends on where this part is planned to be used. And what if you don't know? The decision will be \"any,\" and hundreds and thousands of decisions will be made \"somehow.\" It is necessary to come to an agreement regarding the target system.\n\nYou are the manager of the creation system, you want to increase labor productivity, increase the speed of product release. If it is a service, the speed of product release must also be increased, but this product is \"on a tolling basis\" — you simply change the state of someone's foreign system material, not your own material. But this will be the target system: what you change with your project as a whole, with your skill and tools at the output of the large creation graph. The project is defined by the scale of collective agreements in your organization. So how to determine the speed of product release, you can't raise it without knowing what it is? It's the number of instances of the target systems that the creator system project manufactures (i.e., the number of instances at the output of the entire creation graph of the target system) in a small unit of time (speed is the first derivative of the number of products over time, and derivatives are defined in \"deltas,\" ratios of small values. So we ensure it is not \"systems per year,\" aim for the minimum unit of measurement — seconds, days, but not months and years, because you will know your results too late to change anything as an operational manager). If it is unknown what the \"target system\" (class/type of product/item) is — the speed of release is unknown. If the speed of release (throughput, but we are interested in the natural expression, not monetary expression) is unknown, it is impossible to say how some organizational change you started affects it. It is necessary to agree on what the target system is, all release calculations should then be conducted for it, not some other system. The first thing that should interest the manager is the target system, not the enterprise::creator::system. Because if you do not know what the creator should create, no decision about it will make sense. Should the number of welders be increased to speed up product release? The answer to this question will be clear only if we go through the systems mantra:\n\n- What the target system does in the systems environment.\n- What it needs to be made of to do that.\n- Do welders are necessary there at all.\n- And only here can we estimate whether to increase the number of welders by the critical chain method [^1] or some other operational management decision-making method.\n\nThis is a very subtle point: you need not to build the target system the way your organization can, but to make the organization (creator) such that it can release the target system. And the target system should be such that it will be successful. If you are a bad cook and will bake pies as you can (but organize the enterprise perfectly, will bake bad pies quickly and cheaply), then you will be doing this only until the investor's money runs out. You will have to deal with the target system:\n\n- What pies should be to be needed by someone.\n- What skills and tools you should have to produce good pies.\n- And only after this can you deal with the enterprise, until then you need to deal with pies.\n\nThis is extremely important: target system first, creator enterprise afterward. A manager who declares their organization as the target system is mistaken, losing the ability to agree within the entire project. At a minimum, he may not agree with the clients, their opinion about his delightful enterprise will be negative since clients care about the target system and do not care about the enterprise. Therefore, it is better if the manager and the clients have the same target system. There are also engineering technicians (they will be called differently: gardeners, teachers, radio electronics designers), but it would be good for the manager to have a common goal with them too. The bakery manager's target system is buns, not the bakery! And the bakery? For the manager, it is the creator of the target, it will be created within the creation systems graph. But first, let's agree on whether it is buns or bulldozers. And we will agree with everyone that it is buns, not bulldozers.\n\nThe target system is defined subjectively, \"the system in the eyes of the beholder,\" so determining \"the system you want to make\" starts with paying attention to who \"you\" are: how many of you are there, what are your interests. Systems thinking — this is thinking of collective/group activities, with its help large teams agree on projects with target systems with millions of individual details in each instance, with hundreds and thousands of enterprises in the graph of creating such huge systems. In labor division, setting a common target system for the project is important to maintain the attention of different agents in the most diverse roles on their common vital (target system!), so that without losing this attention to the systems as a whole, allow caring about subsystem details by individual members of each team.\n\nWhat to do if you are the development director of a huge holding with hundreds of projects for creating and developing hundreds of different types of target systems, a vast range of products and services? First, you need to understand that you will not be able to figure out all these target systems at once. You will have to deal with each system individually, not overgeneralizing. Otherwise, you will have some \"equipment\" or \"skills\" — and it will be impossible to meaningfully discuss anything at this level of generality. First, you need to deal with each target system in each project, and only then look at their common creator system, from parts of which the creator organizations of each target system will be composed — and discuss how common their creation graphs are, how much projects of individual systems compete for resources. You will still need to start with target systems, without overgeneralizing: take projects one at a time. And if you wave it off and make \"just a holding\"? It will not work! If you do not know what exactly the holding is doing, what its strategy is (what methods we will teach the holding to work, which target systems will be successful if these methods are applied) — nothing will work out, except for wild confusion and squandering of resources on incomplete projects. Do not be lazy, you need to deal with individual target systems of individual projects, although even in this, you can involve labor division.\n\n**There are no strict rules for determining the target system**, algorithm, order of thought steps, order of questioning some people, typology of cases (this is an entrepreneurial/creative/research task! There is no algorithm for entrepreneurship/creativity/research, only generation of guesses and their criticism!). One way or another, various agents in different roles will participate in the decision regarding the choice of the target system, trying to satisfy different interests by various working methods, and this concerns not only team members of the target system creators but also external roles. If you have a project you can manage alone, you will not need extensive systems thinking, fragments will be enough. But if the project is complex and works with a group, there will inevitably be a complex negotiation process, and you will have to agree on the target system as you progress.\n\n**Usually, the target system cannot be determined while sitting in one's workplace and thinking: it is necessary not only to read different documents and know your subject area well but also to meet and talk with many people, sometimes conducting experiments, including implementing models, prototypes.** Sometimes they even say that until you leave your workspace and start communicating with various agents, systems thinking doesn't happen — you will not know anything about the target system, you will not know what everyone has agreed on, and whether they agreed at all.\n\nDo not confuse:\n\n- **\"our system\"** (MySystem, OurSystem, engineered system \"my\" personal, or \"of our small team\") and\n- **the target system**, which is common for many teams, and the teams agree on it.\n\nWithout the target system, it is impossible to deal with \"our system\": for it, it must first be clear where it is located: in subsystems of a certain target level, in supersystems of the target, in systems of the creation graph. If we do not understand how our system contributes to the creation of the target system — our system will not be successful, you will not be able to explain why the creator team of your system has some questions for other teams creating other systems. And if there is a target system — whoever you talk to in the project, you are members of one team of creators!\n\nYes, if we make \"our system\" satisfying precisely our team interests (or even interests of the direct customer of our system — the external project role of our subproject of creating the target system) — we will be happy, our interests are considered, and even the customer's interests are considered, but the success of the entire project of creating the target system as a whole is primarily determined by success for the external roles of the target system project, not by success for the roles of our little team and even the external roles of our little team!\n\n\"Our system\" will, of course, be done, and we will demand payment for our work. But the money is usually paid for the target system: there is no connection between our system and the target system — there will be no money for work; our system project can be scrapped immediately, and if we somehow managed to negotiate payment, they will find a way not to pay: if our system does not help create and develop the target system, then how can payment be made from the general project funds?\n\nSimilar reasoning will apply in cases where we are not talking about monetary payment, but pursuing other goals. For example, if you conduct a political project and perform a small part in it, investing your labor resources and expecting non-monetary results from the realization of our system and ultimately the target system.\n\n**Every project is unique** **in its target system and its creation methods. Unique not only in the type of target system, but the systems in the creation graph are also unique, the methods of work of the creators and the degree of skill of creators in these methods are also unique.** Each situation in work with specific methods and types of systems is unique, so you will not remember and apply anything in the same form — you cannot enter the same river twice, you cannot make the same system in the same way twice.\n\n**Even if you (as a team!) are doing something very similar a second time compare to the first time, you have** **experience, you know the risks better than you did the first time, you have more information —** ** and based on this experience you can make completely different decisions, organize work differently, avoid the mistakes made the first time.** **Creating a system** **might** **use some** **specific work methods, but system development may involve changing work methods.** Say, the first time you hammered nails with a microscope, but the second time you are unlikely to do that — you will consider the failed experience of the first time.\n\n\"Remember the method we used and always do it that way\" — this is not about systems thinking; systems thinking draws attention to important thinking objects, but it does not cancel thinking itself, especially about systems in their environment, and then about the methods of work to create these systems. You will have to pull your head out of your pocket and think in every project, for every created increment of a system's functionality during its development: systems thinking helps to ask questions, but finding answers to them, talking with different people and making decisions after these discussions will still have to be done. Systems thinking gives types of objects for your thinking, but it does not think for you: what to do next with these objects — remains your applied skill and fundamental thinking skill (intellect, this question is: what to do when you don't know what to do — which method to use when the method is unknown).\n\nAnd once again, we remind you that reflections on achieving collective agreements regarding the target system, \"revealing the system\" (like all other design considerations) are usually done \"in classes/types,\" with system types, not with individual systems-specimens/individuals. Yes, you are working in a unique situation, but no matter how unique the projects and systems are, there is still an attempt to transfer as much knowledge from project to project as possible, accumulating knowledge, reusing knowledge, focusing on patterns rather than individuals. Even if you are doing something like the Eiffel Tower, you will still work with types, individuals will only appear during the manufacture and assembly of constructs of various systems levels of the target system.\n\nAll systems are in the eyes of many beholders, so you will need to:\n\n- Form your ideas about the target system (come up with these ideas yourself, or speak to different people if you have recently joined a long-running project). You \"reveal the target system\" for yourself, but this does not mean that this target system has become the target system of the entire project. Therefore,\n- Then you need to agree with the team and external project roles about the target system (and if you are the project organizer, not agree with them, but make them all agree with each other — and also with you), and about the supersystem with systems in the near and far environment. This will be considering the target system as a \"black box,\" creating a usage concept.\n- Only after that, discuss subsystems (the target system as a \"transparent box,\" functional decomposition) and what to make them from (system concept — with which constructs-affordances you will implement subsystems).\n- Discuss methods for creating the target system, i.e., methods of manufacture, assembly, testing, launch into operation of the target system, the general method of creating and developing (the system will need to be created not only as an MVP but also developed, released with many versions, possibly even releasing each version in small series or even setting up mass production).\n- Only after the methods of creating the target system are known, it can be discussed what roles are needed to support these creation methods,\n- and then discuss the different creation systems (including the team as one of the creation systems!) throughout the creation graph, taking into account the expertise of these creation systems in the necessary working methods, as well as the availability of tools for these methods\n- and still remember about \"our system\" among all these project systems.\n\nOf course, this we again presented the systemic thinking mantra in brief. You just need to reason in exactly this way in all projects, and this is the norm of systemic thinking: not just read that you need to do it this way, but take it — and do it. You don't just read that people usually brush their teeth and take a shower but also brush their teeth (even if you don't want to) and take a shower (even if you feel lazy). With systemic thinking, it is the same: you don't want to but need to. Sigh and think by the systemic mantra until you get used to doing it \"automatically,\" all the time, in all projects, subprojects, conversations with friends about their projects, asking these questions when participating in conversations. This is systemic thinking!\n\nOf course, each project participant (and there may be many interconnected projects, so participants of other projects too) has their opinion about the project's target system, different from others. And project participants may change this opinion about what is the project's target system — right during achieving the various agreements between them (agreements are specifically about this: about changing opinions, there was one opinion — agreed on something, it means someone changed their initial opinion).\n\nWhat to do in such a situation when opinions differ?! **Continuously agree, check the conservation of agreements—** **and continue to agree throughout the entire project, not just at its beginning.** **And if you are an organizer —** **continuously agree with those around you too.**\n\nYou will quickly accept this when you understand that any of your agreements will be violated if their participants, at the moment of agreeing with you, have not yet agreed among themselves. Then they agree — and their agreement will be stronger than the agreements with you, and when you agree with them anew, they will again reach agreements — and your agreements with them will again not hold. Therefore, it is better for you to agree on your own — and achieve collective agreements, as they will be more stable.\n\n**Systems are created collectively; they are agreed upon in these collectives.**\n**Systems thinking helps determine what to agree on.**\n**First of all —** **about what we are making: which system is the target, i.e., which system's success will be key for the project. No agreement** **on the target system —** **collectively** **we don't know what to do,** **each does something according to their understanding. There is no good** **in such a situation.**\n\nIt is easy not to recognize this situation when there are extra generalizations in speech and documents. If we are making \"shoes,\" it does not mean we have agreed. I think it is women's sandals size 36, neighbors considered it to be men's winter boots — and designed laces for them. Yes, all of it is \"shoes,\" but when these developed laces meet the already designed top of sandals, both teams will be surprised. And if the sole of the \"shoe\" was entrusted to a third team, it is only possible to guess what they will think of — felt boots? There is only one way: specialize the target system agreements to the maximum and ensure that the agreement result about the target system is known to all teams.\n\nWhy is it so difficult to define a system? Because in the culture, there may still be no understanding of the convenient system level at which the system is defined.\n\nSay, you are trying to propose a new way of creating a wall from large blocks, but at the moment only buildings are built from bricks (and the concept of a \"wall\" does not exist, only bricks). We gave this example when talking about systems thinking, which helps fight complexity: there are no meaningful operations with bricks in the building, but the concept of \"wall\" may not yet be formed; therefore, it is not worked with! The idea to define a wall as a system and give its alternative construction may be very, very fresh!\n\nOne of the real cases: it was required to create a system for transporting aircraft from one of the airfields to the manufacturer for repair. To do this, somewhere the gate opening needed to be increased, somewhere to add mounts on the carriage, somewhere to build an additional ramp. But all these tasks were solved as separate projects, \"as they arose,\" they did not have common funding (and the money was not allocated all at once, but for each project separately, and it was necessary each time to verbally explain why to spend this or that amount and perform this or that work; there was no overall list of works). There was no understanding that this all needs to be done to create a \"target aircraft transport system,\" there was no name for",
    "5bcadf5abd67125990ad875b2f3148a4": "---\ntitle: First to find the target system\n---\n\nThe first thing to do in systems thinking is not to ponder all\nsystems at once and make profound declarations such as \"everything is a system, and everything is interconnected.\" This is true, but there are not enough resources to think about all systems simultaneously, and connections vary in importance. Therefore, systems thinking helps to think not about all systems at once but rather to identify the most important connections between systems.\n\nUnfortunately, \"managerial versions\" of systems thinking from one-and-a-half generations ago suggest that it is important to think a lot but do not explain how exactly to think: they do not provide a thinking method. These \"managerial versions\" are detailed in the most published and popular books by foreign authors on systems approach in management, published at the end of the last century (when reading literature, always check the publication dates!).\n\nThis \"managerial version\" can be conditionally attributed to the \"one-and-a-half\" generation of systems thinking because it speaks of creation systems (enterprises), but engages the first generation of systems thinking: \"everything is very complex, the system-enterprise consists of parts, non-trivially connected, and the enterprise itself is in a very complex world.\" Unfortunately, it is simply proposed to \"think more, think more thoroughly,\" but it is not explained how exactly—except for the clear message that it would be good to add holism to reductionism and always think about the environment first, and then about the system itself. The message is correct, but such advice is of little use.\n\nTo get immediate and direct benefit in a collective project, it is necessary to understand that systems thinking should quickly bring everyone together—and for this, it would be good to understand why everyone is gathered here in the project. For this, it is necessary to identify the main system which you want to create and develop from scratch (greenfield) or to develop/modify (brownfield) in the project. In other words, the first step is to first identify the system in the creation graph for which various creators unite through thinking in the relation of creation. This system is called the target system, and without agreement on it, it will be impossible to agree on everything else.\n\n**First** **in a project** **it is necessary** **to agree on what the**\n**target system** **(system-of-interest) is: understand its function in\nthe metasystem and its boundaries, name it so that it can be discussed\nfurther.** **This is very difficult,** **as it involves**\n**creative/entrepreneurial/proactive decision-making, high-risk\nmodeling of an uncertain future.** **Different resources will be invested\nin the target system, so it should be successful—** **achieving benefit,\nrather than loss; and benefit is understood broadly here, not necessarily monetary gain.**\n\nMost often, the target system at the moment of agreements has not yet been created, the project is just starting, \"nothing is yet known\"—but systems thinking says that this is the reason to think: what are we creating, what will we develop? But if you get it wrong and do not come to an agreement, all project participants will create different systems—and the project will fail, resulting in the fable about the swan, crayfish, and pike fish.\n\nIt is especially important not to miss the point that if you are creating tools for a method (e.g., Software-as-a-Service, a server application, or tools for a service), the target systems are those to which you apply these tools, not the tools themselves. The saying \"nobody needs drills, they need holes in the walls\" is precisely about this, the focus should always be on the systems processed by your tools, even though the hardest part is creating the tool. Creators are often much more complex than the systems they produce. Building a factory for mass production of cars is much more difficult than building a single prototype electric car in a workshop, regardless of the cost of building that prototype.\n\nTo create a tool, you need to understand what you intend to process with it, what exactly you are creating with it at the moment of its operation. This “created by the tool” and “created by the enterprise” is often the target system. But \"often\" does not mean always, and this requires further investigation.\n\nMost initiated system creation projects fail, and we do not know about them only because failures are not publicized, successes are! The system needs to be created now, and for this, its success in the future must be predicted. But it is generally impossible to reliably predict the future, one can only guess—and often it doesn't work out, at least not on the first try, it requires several attempts. You must have some kind of \"generative model of the world,\" and you will need to model/render/imagine your target system based on this generative model with unclear accuracy and details—this is still a \"guessing\" in the end.\n\nYou must guess the target system rather than \"calculate it according to a formula\" or \"derive it by an algorithm.\" You then need to criticize this guess, try to improve it if it turns out to be worse than other guesses, and eventually pick the best one available (so usually many guesses are made, and only the one surviving criticism is taken seriously, that is, forming the basis of the system creation project).\n\nAbout the target system, it is said that it is “discovered” during strategizing. Strategizing is when you come up with/discover a method to improve your specific situation. This working method, which should help you, is called a strategy. Often, strategizing boils down to saying that your strategy will improve the situation by making a particular class of systems, for example, you will create: \"work method\" cars: \"result of the work method,\" will \"trade electricity\": method with result— \"transaction,\" will \"teach\": method \"golf players\": result of the method. Implementing the work according to the devised method (implementing the strategy, getting the result) should lead to an improved situation.\n\nSuccess means that no one will take the result away from you, there will be no dissatisfied people, you will gain resources, not losses from implementing the strategy. So the target system is what is created during the execution of some strategy: the method (usually strategies for some collective agent—an organization where everyone has agreed on how to use the resources to achieve the result in the work of the strategy). Of course, at the core of the strategy is a guess/hypothesis. Sometimes, this guess/hypothesis is called an \"entrepreneurial bet,\" as in gambling, because it is only a hypothesis that the team will win in implementing the strategy—the guess about the target system and the working methods to create it may turn out to be incorrect, resources will be invested, but there will be no \"improvement of the situation\"/benefit/\"exceeding income over expenses with discount consideration.\" Sometimes it is also scientifically called an \"entrepreneurial hypothesis\" (and assessing its accuracy at the start of the project is the role of the Schumpeterian entrepreneur, which in our courses is shorter called \"visionary\").\n\nIf you are not fluent in systems thinking, you will define the target system incorrectly not only because you poorly predict the future but also simply due to lack of thought. You will lose objects requiring your attention in your thinking, and this will bring risks to the project. For example, if you define the target system as a behavior—no one will understand you, you will not make agreements with anyone. A typical phrase: \"my target system is software development,\" and no bell rings in your head that \"development::method\" is not a system, the verbal noun usually refers to functions/methods::behavior, and implicitly mentioned software as a system and the creator of the software as another system, but we remember that with software it needs to be understood, whether it is just the program, or also look at who creates an organization that uses software to achieve the desired result. And additionally \"my target system\"—is it really \"mine\"? The target system is needed to reach an agreement with everyone, not for you to agree with everyone. Although, if you are the only investor—no problem, \"my target system\" will do, you will hire everyone else, but still, you should not call behavior a system, the hired ones will imagine any target system —and the project will fall apart, collective thinking won't happen.\n\nIf you define the target system incorrectly, you will simply be engaging in the wrong activities, wasting your time: the focus of your attention will not be on the important but \"close to the important\" or even \"far from the important.\" **Systems thinking** **is about** **consciously** **managing attention, keeping that attention on the important, defining types of objects in the systems approach—even when lazy, not want to, when thinking is hard.**\n\nSystems thinking requires coherence (and computer-assisted support: systems modeling results should be recorded to avoid the chance of forgetting them). For example, if you made a guess about the target system, systems thinking immediately says: \"look from the system boundary outward, into the metasystem. And don't think about a transparent box yet, especially during creation. First deal with the time of use, with the black box). It is hard—to withstand this comment, but without it, you won't understand what you need to do, what creators will be like, and what working methods these creators will use to create the system. It is difficult because it usually refers to the very start of the project when almost nothing can be said about the target system, but systems thinking demands to tell what it does in what environment, why it does it and why anyone would need it. This is a literal adherence to the systems thinking mantra.\n\nThe success (including commercial success) of the created system cannot be only \"designed\" and thus guaranteed (the uncertain future will always make corrections, studies show that the share of luck in the success of large projects is greater than the share of the same intelligence, this is detailed in the \"Systems Management\" course in the strategizing section). Nevertheless, luck can be present—but there is always a chance that it will be missed due to thinking errors. Systems thinking helps to avoid thinking errors in their most likely places; it helps to agree with very different people achieving mastery in different professional project roles and thus forewarns of different risks. These errors, systems thinking helps track throughout the entire project of creating and developing the system. You will repeatedly have to conceive, design, manufacture, test, and operate, and modify the system over and over, discard/liquidate unnecessary system instances, close the creation and development project due to the exhaustion of interest in the system—and systems thinking demands that you and all other project participants clearly understand which system is being discussed, so everyone can agree.\n\nTimely noticed signs of potential project failure to create the target system give the project team a chance to respond, including responding by closing the project—investing resources in a knowingly unsuccessful project is unacceptable, and **systems thinking helps detect the need to close the project sooner.** **Systems thinking acts as the forest's sanitary inspector: it immediately kills obviously doomed projects, saving everyone's time, nerves, and money.** If you realized that ERP software is being created, but a department that will use the software for enterprise planning needs to be created, but nobody is concerned about this department, everyone is only concerned about the software—this is a failure, leave such a project (if you, of course, don't think you can take the money for a useless project, and someone else will be responsible for the wasted money—that is ethically acceptable for you. If not—either reorganize the project or leave).\n\nSystems thinking also helps to find ways to continue a project heading toward failure, increasing its success probability—it suggests what to think about first, where to spend time contemplating the created and developed system. Systems thinking does not so much help overcome problems (come up with ways to solve problems) as it timely identifies problems, draws attention to them (literally: it is about managing attention!). Systems thinking is more associated with criticism than with guessing. Systems creativity involves guessing followed by criticism, so systems thinking tells only on what to make guesses (but does not provide a guessing method) and then helps criticize these guesses. Systems thinking itself cannot invent but can suggest what to invent—and then criticize if it turns out that you invented something wrong.\n\nWhat should be done if you have determined the target system, but the guess was wrong? Then systematic creativity: found conflicts and contradictions need either to adjust the current guess or to come up with a new guess. And here it is necessary to remember that there is no single correct solution, there are many solutions, but all are suboptimal, and the best among available solutions are roughly equal in quality (unsettledness). Radical improvements, \"genius guesses\"—are rare!\n\nEntrepreneurship/proactivity/activity (activity here as opposed to passivity) is understood in fundamental thinking methods not necessarily in the classical economic sense of the word (that is, systems are created and developed is not necessarily for making money, investing resources today at a low cost to get more tomorrow for processed resources that have higher value). But in any case **the doer/practitioner/worker/engineer,\ndoing** **something, performing some work/project,**\n**estimates its success:** **tries to imagine the future world where the project's result (system) exists—and tries to understand/learn** **(including actively, \"active probing,\" conducting experiments in the physical world, asking questions, etc.—** **this is not** **\"understand theoretically,\" this is conducting full-fledged research/learning with experiments!). Project participants must jointly imagine what the results of different project roles will look like—** **that is, to evaluate whether the project will be successful.**\n\nProjects can be very different. Someone may dance (\"make oneself an artist-dancer\"—do not forget that behavior is always related to some systems to be created), but even in this case, one must think about the performance being successful: the success of a dancer's performance is determined not only by the dancer's own perception. In some countries, dancing at funerals is not accepted, while in others it is accepted—with a coffin on the shoulders. It is necessary to look at the circumstances of the dance, not just the dance performance as a system related only to the dancing artists. And is only the artist-dancer a target system at the moment of performance, or is the artist during performance only a subsystem in something bigger. The artist-dancer is part of the performance as a micro-event, but we can go further—what is the performance part of? Festival, party, concert? Maybe collective agreement is reached on this, not on the preparation and teaching of the dancer to the artist level and the target performance?\n\nSystems thinking will not provide answers to such questions, but it provides types for you to ask such questions in your project—and as a result, quickly collectively agree on what you are creating and developing as a team. Also, note that the composition of agents in this \"you\" may differ significantly depending on which project you are thinking about, which project you consider yourself a part of. And if you are a part of several projects, they may conflict, for example, two projects may both urgently require you to dedicate 100% of your work time to them, and you need to explain how you spend your resources and why.\n\nProjects vary significantly in scale. For instance, someone may conceive a cultural revolution, imagining a community or even society that behaves differently than it does now—and this will be their target system. It remains only to find project participants for whom this same society will be the target system with the same characteristics (which will need to be agreed upon).\n\nIn any case, the project needs to realistically imagine what (which system) will be the result of the project. Moreover, it is necessary to follow all systems approach prescriptions: to not only assess what the target system will be and how it will behave during operation, but also the environment of this target system and the impact of the target system behavior on this environment, and what external project roles will think about this influence of the target system on the environment, and what the agents playing these roles will do if they like the project and if they do not. And we are not even touching on the systems in the creation graph yet! But these systems need to reach an agreement, this project result assessment (the target system with its function/method of operation in its environment, satisfaction of external project roles interests) must be common among the creators, and since the discourse is not only on creation but also on the development of the system, this project result assessment should be conducted throughout the entire project, not just at its start.\n\nThe entrepreneurial/proactive/creative/research nature of any activity in the project arises because all strategies and implementing plans are merely \"forecasts\" /hypotheses/guesses, and they are not \"objective\" (one does not guess them as \"natural laws\") but a subject of agreements (one guesses them as to what will be easier to agree on), plus agreements can \"be renegotiated,\" the future cannot be accurately predicted, and the class will be correct but unlikely to be correct for long.\n\nThis uncertainty forces both engineers-techies and managers as engineers of the organization with these engineers-techies, and investors in these organizations, and politicians engaged in higher-level systems, to think again and again about how the target system will eventually be used in its environment and what other effects may arise from this use, to keep attention on the situation of using the target system and tracking what is happening around this use, even though this usage is in the future.\n\nAll engineers create and develop their systems imagining them working already at the conceiving and designing stages—without this, there would be no engineering! There would be no classical engineering, nor enterprise engineering, nor social engineering! The uncertainty of the future does not negate the necessity to have a generative model (i.e., a model from which you can generate an image of the future as an option for realizing the target system in it with some parameters), from which you must necessarily generate/render/produce an image of this future and envisage all possible pleasant and unpleasant surprises in this future!\n\nIn systems thinking one should always think of the system in its systemic environment (time of use!) and about the opinion of external project roles throughout the entire creation chain (external project roles should be ready to pay for creating and/or upgrading the target system and its creation systems, but also remember those external roles who will consider the project unethical, no matter how much you are promised for its implementation. Creating gas chambers can be paid for well, but will you take up such a project?). If the system is of no need to anyone (i.e., no one needs its behavior in the metasystem, no metasystem needs the function of this system sufficiently to cover the creation costs), if the system is knowingly unsuccessful for commercial or ethical reasons—it is usually not made. Or it is made when someone is ready to pay for moral satisfaction. Cases where \"one is ready to pay, but not their own—e.g., stolen money or taxpayers' money,\" we do not consider.\n\nBefore trying to assess the system's success, it needs to be found/discovered. This is strategizing,\nentrepreneurial/pro-active/enactive part of engineering/activity/labor, and it must be conducted collectively.\n\n\n![](01-first-find-the-target-system-47.png)\n\n\nIn systems thinking, the target system is like the origin point in mental \"polar coordinates.\" All other decisions of various roles about identifying other systems—metasystems, systems in the environment, subsystems, creation systems—are made in relation to the target system. To understand what decisions are being made about, first agree on the target system. And success is also determined in relation to",
    "8a5442478a79340b66ce275b9e1e807a": "---\ntitle: Examples of Services and Their Providers\n---\n\nYou don't have to articulate types from the transdiscipline of systems thinking, as we do here in the textbook: \"fruit apple,\" \"furniture chair,\" \"system airplane,\" \"service-provider hair salon,\" etc. In life, it is important just to pay attention to the types of objects (keeping these types in mind silently) to ensure the correct identification of important objects from the diversity of surrounding objects and to check that you are performing the right operations with these types (not expecting a description to be a creator, not expecting the target system to be an enterprise, etc.).\n\nThe question is about memorizing a checklist of types, thinking about the objects they categorize, highlighting them in your work and personal projects. All these types from our course are interconnected by relationships, and it's easy to latch onto these relationships in your thinking, transferring attention from these relationships and types of the meta-meta-model to the specific objects of your project.\n\nIf you have identified the target system of your project, it must be surrounded by an environment and function/method/service (here, a long series of synonyms) in this environment. It must also have subsystems, each with their own function within the target system. And there should be a creator/constructor, often more than one—a whole graph of such creators—a creation relationships graph. Yes, we mention the systems thinking mantra again, albeit briefly.\n\nAll this works iteratively, and the relationships are traversable in different directions. If there is some creator, it will (possibly through a long chain in the creation graph) inevitably have a target system and its supersystem. Our system might, in general, be some third system (for example, a subsystem in the target or a subsystem of some creator in the creation graph).\n\nIf you do not distinguish all these types of systems in a project, you will miss out on important objects. If you have a project for creating a training course (say, you want to onboard, introduce new employees to your organization), then there has to be a target system—mastery (say, mastery of proper conduct within the organization). If you have a delivery system project (delivery service provider), it is a creating system, and the target system is a \"delivered parcel\" (handed to the recipient, not \"in transit\"). The key point here is to identify all these systems and ensure the project team understands what these systems are, even if you do not each time pronounce the type from the meta-meta-model (saying, \"we're all doing haircuts here, our hair salon is only for haircuts, not for its own sake\" instead of \"our target system is the haircut, our hair salon system is only needed as the creator of the target\").\n\nOnly geniuses can remember everything they need to on time and \"by intuition\" (though they can't either, they are just ordinary people). Systems thinkers are usually not geniuses, so they don't act \"by intuition\": they use the enumerations of systems approach concepts as checklists for their thinking objects.\n\nTypes of concepts from the systems approach (e.g., those proposed in our course) are useful in learning but then also in discussing within work projects what has been thought about and what should be considered. You should also go talk with knowledgeable people in the project and beyond (with some you can converse by reading their books, articles, regulations) because much need not be invented but discovered; look in the world for objects of the type already defined in our course, not just \"any objects\" that catch the eye. \"Any\" objects can be either important or unimportant. Objects of those types addressed by systems thinking are most likely to be important. Their types and importance seem trivial, but try asking your team members what is being created and developed in the project (in our terms—the target system, and in a small team within a large project—\"our system\"), and you will be surprised by the diversity of opinions. How can anything be created and developed quickly and effectively under such universal disagreement?\n\nThe small nuances of each project (e.g., differently organized project team) make a big difference in how conveniently various systems are highlighted in the project. Each time for each project, you need to do the work anew to identify the target system and our system, determine the required services, and apply all systems thinking. Therefore, below are not \"typical situations\" and \"thinking algorithms,\" but just examples. Take them as a starting point for reasoning and be sure to adapt.\n\nLet's consider the simplest example: a project fully equivalent to creating a hair salon (we said that service situations at the meta-meta-model level are all equivalent, objects are typed by the same types and linked by the same relationships)—but you will be making a grinding workshop. Amazingly, but people rarely dealing with grinding think little about exactly the same issues that come to mind when they think about well-known situations like haircuts in a hair salon, simply because everyone is familiar with a hair salon, but not with a grinding workshop. And this \"thinking about the important when it is missed\"—is where the strength of the systems approach lies, the very concepts of systems thinking, the types from its meta-meta-model (system in its kind variants, function/method/service/culture, work, role, agent, etc.) here are key prompts, a checklist of \"what to think about,\" \"what to tell when asked what we're doing,\" \"what to ask to understand.\"\n\nA grinding workshop as a provider of grinding services has what target system? Grind: that very worked surface finished by the grinding services (a physical object! Grind as a target system occupies space, characterized by its roughness, contacting the body of the grindable object on one side and another system in the environment on the other). Thus, the grinding workshop in general (or the grinder within it, depending on your project) is a system for creating grind.\n\nIt is imperative to consider the supersystem: why are we grinding? What will come into contact with the grind, or does the grind just need to shine for beauty? Should the grind be covered with varnish so it doesn't oxidize? What is the class of surface treatment? The significance of these questions will automatically come to the mind of an experienced grinder. But we are not experienced grinders, and we need these questions to come to mind as well! Systems thinking provides exactly this, forcing us to think:\n\n- about the target system (it's not simple to grasp that it's the grind—though it is fully equivalent to the \"hairstyle\" in the case of a hair salon, just instead of cutting and styling—grinding and polishing, and instead of hair on the head—a surface layer on the workpiece),\n- and about the supersystem (the grind in contact with the workpiece on one side and something else on the other side),\n- and the needs of external project roles (why are we grinding? What does the supersystem want if it has the grind?)\n- and the concept of using the grind (what behavior of the grind we want to achieve when it is used in the supersystem, what is expected of it?),\n- and the concept of the grind (what will the grind be like, will there be any additional coatings, sprays, varnishes?),\n- and how to justify the result (how to ensure that all interests are satisfied?).\n\nIf it is about a grinding service, think also about the functions of the grind creator (note that \"functions of the grind creator\" is synonymous with \"grinding service,\" as well as \"the method of the grinding workshop\"), which will be performed regarding the workpiece of the target system in the supersystem for creating the part as a whole: the function \"make a shiny surface\"—for this job you can simply paint the surface, nickel-plate it, or even cover it with shiny foil; \"make a smooth surface\"—for this job too, you can offer several methods other than grinding.\n\nHow they choose to turn to the grinding workshop:\n\n- first, determine the final state of the item by method/service/function,\n- and then choose from a range of possible methods/services/functions/practices.\n\nAnother way to say the same thing but in a bit more detail (close to the systems mantra):\n\n- first, define the functional object as the subject of the method (\"smooth surface\" and determine the properties of smoothness needed in the environment of this method subject at the time of use),\n- and then offer a constructive object to embody the functional object (grind on a workpiece, smooth paint layer, applied plastic film, etc.), the surface concept.\n- Next, think about what service/method/way can be used to achieve this (grinding! And the method subject for grinding is the grind. From this point, \"smooth surface\" is specified: \"grind\"::“smooth surface”).\n- Next, think about who can be the creator, that is the provider of such a service (the provider of the grind creation service can be a grinding workshop, or even a grinder, or even manual grinding, although in the latter two cases \"our employees, our tools,\" we continue talking about the method, but in the first case \"external workshop\" we talk about the service).\n- Choose the constructive object, performing the role of the grinding workshop (e.g., LLC \"Whrrr\").\n\nSystems thinking will also make you think about external roles (engineer::client who needs the grind), internal/team::role (who will grind?) and external to the creator::system (who needs the grinding workshop, but not the grinds themselves). It will force documenting the interests of external project roles and the grind usage concept (describe the grind's supersystem—what external project roles expect from the worked surface plus what adheres to it), the grind concept itself, which provides the expected properties (surface treatment class, the necessity of some coating after grinding, e.g., varnishing: how to ensure those grind characteristics that are important at the time of use).\n\nThe same reasoning needs to be done in other cases. So, you create a business trip processing system, and you suspect that your client here is the accounting department. Systems thinking drives through the following reasoning (more detailed reasoning about the administration services are given in the course \"Systems Management,\" they are typical for almost everything related to administration):\n\n- Since we are talking about software (although we don't yet know if the \"business trip processing system\" includes people, or is it an organizational unit, or just a software tool without a separate org unit for it), this software describes something in its data. What does it describe? A trip, or in formal language—a \"business trip.\" So, the target system (for which everything is started, including processing through your future software) is a business trip, understood as a composition of quite material objects: a person (not necessarily an employee!) who travels somewhere, a starting point, an ending point, transport, a travel document (ticket, description of the trip), a place of stay, a stay document (receipt, description of \"staying\")—and all this on some time segment.\n- Now refine the target system. Three candidates for target systems emerge: 1. Remote work (the trip doesn't matter here, the point is to achieve some changes in objects, although these changes are impossible without the trip). For example, a boss instructs an employee on remote work, or the employee decides that work needs to be done. 2. The business trip itself—as the employee defines it. It includes performing work and the trip itself—transport, overnights. 3. The formal part of the business trip—this is the object of interest to the accounting department: only those parts of the trip that are somehow related to payable (not all) transport and payable (not all) overnight stays. In most administrative-related situations, you need to distinguish similar three target systems.\n- The client here is not the accounting department, but those who need remote work (e.g., managers of those traveling) and the business trip (the travelers), the accounting department turns out to be a subordinate role of the external service provider for the creation of the formal part of the business trip. So, then you need to decide: is this software a toolset for the manager to process remote work, for the employee to help with the trip, or for the accounting department to process the formal part of the business trip.\n- If you understand whose toolset the created software is among these three and support managers and employees first, and the accounting department last (and not vice versa—convenient for the accounting department processing method but inconvenient for managers and employees as clients of the accounting department, then driving managers and employees into an inconvenient service under the threat of taking their money and nerves, thus saving the nerves of accountants), the project team with the results of its work will be needed first and foremost by all managers (who want remote work) and employees (who want to go on business trips), and not only the firm's accountants, who need to process these trips but don't really need them (\"could not process—didn't go, the consequences of failing to complete remote work are not our, the accounting department's, concern, so shut up and follow any stupid processing rules\"). This significantly changes negotiating positions in the project! From the enemy of all managers and employees, the team developing the toolset (software for processing remote work/business trips) becomes the friend of all managers and their employees! And they all join forces against the accounting department, for whom zero trips (zero work on providing the service, and it's not a classical service, they're not paid for it!) is ideal/preference, as it reduces their worries regarding processing. Such role reversals are typical when systems thinking is involved: you have to honestly answer the question of who needs what and negotiate a balance of interests for the created system, whatever it may be. The help from the types of the meta-meta-model is that the objects regarding which negotiations are to occur become understandable (the negotiation subjects, usually the subjects of some methods used by negotiating agent-roles), and it is clear who to negotiate with.\n- What working methods need to be employed so that the target system \"the formal part of the business trip\" is created, brought from the state \"the formal part of the business trip does not exist\" to \"the formal part of the business trip is created,\" then through several stages \"the formal part of the business trip is completed\"? What exactly needs to be done, i.e., in what way to change the state of which objects (but so far, do not consider the agent: who or what will carry out work on these methods)? The creator using the tools (accounting staff with software, but we already discovered that you should consider travelers, their managers, and even cases of \"self-boss,\" self-send on a business trip) should register the need for a trip and open a mini-project of remote work, allocate funds for the trip (and there may still be part of the funding for the work itself!), buy tickets, possibly book a hotel, issue per diems, process documents (business trip certificate, tickets, hotel reservation, shipping documents for any equipment being taken), accept the trip report—and there are many variants depending on the adopted business trip methods. Somewhere business trip certificates are unnecessary, somewhere even reports are not needed, somewhere lawyers protect employees more, somewhere lawyers insist on the standards for business trips from Soviet times (when air travel was extraordinary).\n- Which creator should execute these methods? Software (and there the software creator is a team of programmers, \"the creator of the creator\"), or a service/service provider of processing (software on servers plus accounting staff working with this software as operators? The terminology \"service\" and \"service provider\" will only be used in this case, but even here the variants: the more external the service, e.g., an external service provider of accounting, the more suitable this terminology, but if these tasks are done by employees of the same firm processing trips for other employees—the word \"service\" for the working methods or \"service\" for the people with their skills and software-tools may not be heard, \"the language resists\")? What will be considered success for the software creation project, service creation, business trip creation? What roles are required for these different projects of creating the creator of the business trip (creating the processing service, then creating the software), the business trip creation project (and we immediately found the service operator, the manager of the traveler, the traveler agent—but the roles of programmers and service managers were left in the previous service creation project and there inside software creation)? Who performs these roles in the team of programmers, the team creating the service managers, the team creating the business trip (even if there is no sense of a team in this final team and no one considers it a project, it is still a project, and many people participate, they need to negotiate and be able to play their role). Trouble comes if you consider \"our project\" to be the software creation project, and at the time of project acceptance, or in the moment of difficulties from lack of performers of other roles in the full-fledged processing service team (system creation time) they will ask the current software developer! Explanations that \"we thought only the software was needed from us, and someone else would take care of the people,\" nobody will listen! Ultimately, fully processed business trips, or even complete business trips (where employees manage to dine in an unbillable restaurant or spend the night in a hotel that did not issue any payment receipts) are important. If they fail due to business trip or processing issues, these are \"your internal issues, but report on completed tasks!\" Only the expected overall results of the business trip count, and if some service processing people are lacking or the software itself cannot provide them, you will have to \"create\" these people too, i.e., train additional people to new working methods, and also train new working methods to managers and self-sent agents too!\n\nNotice, everything said about the project of creating software for trip processing does not give a clear answer to the question: how to organize trip processing. But it shows how systems thinking gives a set of objects convenient for discussing alternatives. You can't avoid discussing what exactly needs to be discussed. You need to discuss systems, their environment, external project roles, creation graphs and creators within them (as a tool, as providers/services or just individual or collective agents), working methods, roles, etc. —thinking involves objects of not just any types, but these types specifically, and these types are taken from the courses \"Rational Work,\" \"Systems Thinking,\" \"Methodology,\" \"Systems Engineering,\" \"Personality Engineering,\" \"System Management,\" and other fundamental (on methods of the intellect stack, for example, \"Intellect Stack\") and applied (on engineering methods) courses.\n\nAnother example: a store provides a purchase service—it creates a purchase as a set of items in the ownership of the buyer in their hands upon leaving the store, and the buyer's money in the store's accounts (thinking of money as gold, we can ignore the non-physical nature of cashless transactions). The store helps to make/create/produce (engineering terminology!) the purchase: it connects the buyer with its shelves and cash registers.\n\nImportant: distinguish two meanings of the term \"purchase\":\n\n- Process/method/service, shopping—store's working method, changing the state of goods from \"laid out on the shelf\" to \"became goods in purchase,\" and money \"in the buyer's wallet\" to \"payment for the purchase.\" For example, \"to complete the purchase, click the 'pay' button.\"\n- Goods that were purchased and ownership transferred to the buyer's hands. For example, \"unwrap your purchase, let's see what you bought.\"\n\nIf it is an online store, then \"purchase\" in this meaning becomes alongside the payment \"delivery,\" and there's the same confusion delivery::method/service goods::\"service object\" and \"payment\"::money service::\"",
    "c4f3562f269b442dc2e9a4375bf0ee9b": "---\ntitle: Signs of the Target System\n---\n\nThe target system is discovered situationally, agreed upon by the team, and there is no algorithm or \"typical situations\". Nevertheless, there are **heuristics** (rules that often work but not always^[<https://en.wikipedia.org/wiki/Heuristic>]), which help to find the target system for a collective project among numerous different systems in various systems breakdowns. Yes, the systems world appears chaotic with a collection of diverse subjective opinions, but humans tend to organize chaos and find patterns in it — the symbol of chaos is not accidentally quite structured:\n\n\n![](08-signs-of-the-target-systems-50.png)\n\n\nThere’s no reliable algorithm for identifying the target system; you will simply make many guesses and then criticize them to take seriously the guess that survives the criticism. To take it seriously means to act as if this guess is correct and act this way until a better guess appears, then quickly abandon the old guess and switch to the new one, operating in the real world based on this new guess. There are many thinking techniques that will help you quickly formulate and then evaluate guesses about what the target system will be in your project.\n\nThe word '**discovery**' here is not used by chance: it is believed that the target system exists, it is defined by the type of meta-meta-model \"target system\"::system and needs to be discovered with your attention, define its boundaries — possibly by talking to many different performers of various roles. We are not confused that we are talking about the future — in the space-time this system already exists, only in the future segment of time, not right now, this does not prevent describing the target system and its role in the supersystem today. Nor does it matter if \"talking to everyone\" doesn't necessarily mean learning their opinion, you can agree with them that they agree with your opinion about the target system. It doesn’t matter who exactly made a good guess about what the target system in your project is. It can be you, it can be some AI, it can be a project participant. The main thing is that the guess is stated and then it survives criticism.\n\nThe concept of usage as a description of the functionality of the system’s \"black box\" in the supersystem — it is not \"invented\", not \"developed\", it is discovered, negotiated what will be there with the system’s functionality, and it must be documented. It is incorrect to use the term \"fix\" instead of \"document\", that is, to secure the description. The concept of usage — is a guess, it will be clarified and corrected up to the very end of the project, changes will constantly be made to the model of the system as a \"black box\", nothing \"fixed\"!\n\nAgreeing on the target system to then make agreements in relation to it about all other important systems, including \"our system\" — is to prepare the concept of usage, in which to describe the target system as a \"black box\" inscribed in the supersystem, satisfying the interests of external project roles. The main thing in the concept of usage — is usage scenarios, that is, the behavior of the target system in different situations presented to it by the environment. As to how the target system will be arranged — this will come later, it will already be the concept of the system. In the concept of usage, it becomes clear what in the world refers to the target system, and what falls into its environment at the time of usage. Decisions on how the system will be arranged (system concept) and how its creation and development will be arranged (decisions on the composition and structure of the creation graph) are logically made later, although usually, they are developed in parallel: the concept of usage considers the limits of the possible (so it doesn’t turn out to be a concept of some kind of magic tablecloth or flying carpet, which are unclear how to make and who will be manufacturing), but still the question is posed as \"first describe what the system should do, that is, what objects in the surrounding world to bring to what state, and then — what to make it from and how it should be arranged, then — by what methods to make it, and only then — who has the skills and tools to support such methods by which the system can be made\".\n\nFor example, you want to entrust some other people-contractors to create some system in your project (a creator's tool in your target system creation graph or just a subsystem of the target system), so as not to make it yourself, that is, you want to buy a ready-made system or ask to develop and make a system \"to order\". You formulate and document what exactly you want to buy from the contractor, this is formulating usage concepts of this ordered system (previously, based on this concept, requirements were made, filtering and distorting the information of the usage concept — that very \"broken telephone\"). For you, this will be a creator’s tool system in the graph of creating your target system or just a subsystem of the target system (or even all this is not the target system, but your system), but for the contractor — this will be his target system! And he will have to understand not the \"system he is manufacturing\" (time of manufacturing), but the \"system you are using\" (time of usage, and this is exactly what you will write in your usage concept of the system for the contractor).\n\nBased on the usage concept, you make a purchase. Today it is usually not a single and final purchase, but one that assumes support — constant improvements of the system after its creation, sale, and start of operation. That is, it is assumed that you are not buying a product, but the service work for product improvement, the world is becoming not product-oriented, as before, but service-oriented.\n\nThe target system exists in the physical world, it certainly is not some description — although if you are a printing house or an art workshop, then your target system may well be a book or a painting, but you will not be concerned with what is described in the book or painting (documented description), but only with the \"document\", and what’s described there — these are problems for authors and readers, not yours. But if you are not a printing house and are interested in working with the content of information (what the document is about: book, painting), and not the information carrier (what paper it’s made from), then immediately look at the content, not the information carrier — the system must be sought in what is described, the system is not your description! If you say \"my system is the project documentation\", then you are a courier, or a printer owner. If you are an engineer busy with project documentation — then the first candidate for consideration will be the system described in the documentation.\n\nIf you are making any information models, writing texts, creating databases (e.g., developing software), drawing diagrams or blueprints, then you usually make just the description of the system, embodied in the physical world as system documentation, but not the system itself! The description, even documented — is not the target system! Ask yourself the question: what is described in the document, in the database, in the information models, reflected in the graphs and diagrams, described in the texts? Perhaps another description is described there (text, table, diagram describing other texts, tables, diagrams — objects of the mental/conceptual world, dealing with \"description of the description\"), but maybe your target system or at least its subsystem, or the creation system from the creation graph (systems of the physical world) will be described there. Divert attention from the information carrier (computer with software, the software itself), pay attention to the software data: there will surely be hints where to look for the target system in the physical world. Remember, if a plane assembly process is described, it is a description of the aircraft factory (creation time, creator's operations described — assembly::aircraft method::”method object”), but if you have an aircraft factory, you’ll certainly recall the aircraft (it will be the \"method object\" for assembly) — and further you just ask about the aircraft usage time: you understand that its place is not at the aircraft factory, but in the sky, to fly somewhere with cargo and passengers. For this very \"airplane that flies with cargo and passengers,\" all this is done: aircraft factory, and for the factory a description of the process/method of aircraft assembly is made. The target system is the airplane, the factory — the creator in the aircraft creation graph, people-consumers do not pay for the factory, but for airline service, the airplane is a tool of the airline as a service provider, and for the factory — it is the target system (it produces airline tools, it gets paid for it).\n\nIf you say that \"the system is in the physical world\" — and point to the information carrier, they will only believe you if you produce the carrier itself, not the information content on it! The target system \"book as a document\" is not for the writer, but for the printing house or online e-book store. What about the writer? If it's an engineering project, it would be the embodiment of the world fragment described in the book. The form of the book here would not be important, but the decisions taken for the arrangement of this world fragment would be important. If it is an educational project, one could talk about creating a section of the student's brain (a specialized \"wet neural network\") as the executor of some method of work with the help of the book. This section of the brain will later manifest itself as a service provider of thinking (or executing some other method of work, considering not only the brain's calculator but also the body, and even tools as sensors and effectors) in some situation, for which this part of the brain was trained – and the target system here is not just \"a section of the brain\" but \"a section of the brain at the moment it is used to execute the method.\" This section of the brain in its functional role as a calculator for executing the work method we call \"mastery.\" What if considering all the mastery of an agent performing all the methods that the agent possesses? It will be the personality of the agent (and besides the personality, there will be also the organism/body). If we have an educational course, we look first not at the carrier (data center computer, teacher's brain, book), but at the course content — knowledge/theories/explanations/algorithms that describe some subject area. And there are two candidates for systems we are looking for:\n\n-   Mastery for which this educational course was created\n-   Method object described in a course (say, if the course is about growing cranberries — it's cranberries), and we treat the course as a reference guide on the method object — the system. Not all methods work with systems; some work with descriptions of systems or even descriptions of descriptions, but some method objects are systems.\n\nSuch a thinking technique/method likens projects on changing people's behavior by changing \"brain software\" to projects on developing computer software (one could call this \"neuro-linguistic programming,\" but this term was already taken in the mid-70s of the last century by a specific method of such programming described by John Grinder and Richard Bandler, and thereby it became unavailable for general use^[What happened with neuro-linguistic programming and similar approaches can be seen in the links in the text \"psychopractices of movement along the spectrum of formality of thinking,\" <https://ailev.livejournal.com/1461939.html>]. And yes, John Grinder and Richard Bandler used first-generation systems thinking and were aided by a prominent systems thinker of this generation of systems thinking — Gregory Bateson^[<https://ru.wikipedia.org/wiki/Бейтсон,\\_Грегори](https://ru.wikipedia.org/wiki/Бейтсон,_Грегори)]. This technique/method is not uncommon when modeling changes happening with people (educational projects, promotion of some products and services, psychotherapy, etc.). And remember, the target system is determined at the moment of its operation: that is, at the moment when the mastery as a corresponding functional part of the brain (implemented today by not very well-understood constructive parts, but quite material!) will be engaged in executing the work with the method the brain was taught during the training / therapy/ programming / coding (yes, the word \"coding\" was used!) and etc. We have already repeatedly mentioned in our course how to think about systems that are not made from separate parts, but are trained. More about this will be told in the course \"Engineering of Personality,\" and considering that the organization also learns to work with new methods (although it is conditionally \"assembled\" from separate people, AI, and their tools, but still people and AI in it then learn to work by new methods), also in the course \"Systems Management.\"\n\nWhat will be the target system in a Montessori kindergarten?^[<https://www.livingmontessori.com/montessori-kindergarten-vs-traditional-kindergarten/>]. A child? So what do the parents do/create (develop and grow), him, the child? Kindergarten, a service that performs a work method on the child that the parents do not perform? Kindergarten — storage for a child where they keep him while the parents work? Heuristic: in a Montessori kindergarten, an educational process is going on, the child is taught. This means the target system is most likely some kind of mastery: a functional part of the brain that will be engaged in certain life situations already beyond the kindergarten. And the kindergarten will only be a provider of the educational service. The operation of mastery as a calculator/part of the brain — beyond the kindergarten.\n\nLet’s say the child must be taught there the method of reasonable caution (not hiding behind parents all the time, but not rushing headlong into any available trouble), reciting verses, not getting lost in an unfamiliar environment, being collected and not losing attention. This means the mastery (i.e., the prepared calculator as part of the brain) should not just at the graduation morning party in the familiar environment of the assembly hall recite a verse from a stool, but confidently reciting a verse at some festival, where the child will be placed on an iron barrel, flashes will be from all sides, parents will be pushed aside somewhere, but the part of the brain trained in the kindergarten will activate, provide calmness, confidence, and recital of that very verse. This is mastery as a result of education, a quite material object (implemented by constructive parts of the brain). And this will be a year after graduation, the mastery must be manufactured (engineering terminology! It allows us to speak more precisely!) so that a year later the skill is not lost. All Montessori kindergarten staff should understand this: the results of their work should be looked at not in the kindergarten itself, but beyond, perhaps in a year. Well, the same applies to school, and even university, although the university provides applied education, so you can ask about situations where mastery obtained at the university is applied. But with school and kindergarten, such reasoning is more complicated: the answer is usually \"we prepare for exams\", and exams can be considered part of the educational process, not the use of mastery in life (if taught not what is needed, then the exam can be organized on what is not needed -- there will be no mastery in the method taught, but there will be mastery in taking exams).\n\nWhy describe it in such detail? Now you know what the target system is in your educational project (performed creative/research/entrepreneurial work, answered the question \"what to teach\", what mastery to teach — and the answer is more or less detailed with a list of what exactly the graduate should be able to do), and only after that should you ask questions to the creation system: what methods can create/manufacture (in our case — teach) such a functional part of the brain? How should education be arranged for the method chosen to teach? Teaching mathematics, growing carrots, and reciting verses at festivals must be done by different methods — and only after it becomes clear that this needs to be taught (for example, that children need to be taught to recite verses, spending their childhood time on this skill)!\n\nThen discuss teaching methods and teaching situations, each time asking how this affects the result: mastery that will be manifested outside the teaching situation. And if the school says, \"we teach children to pass the Unified State Exam (USE)\", then one may doubt that \"mastery of passing the USE\" is exactly the mastery the school should teach. After discussing what this mastery should be, one can discuss methods for manufacturing this mastery: methods of manufacturing the mastery of passing the USE can be quite different from mastering the techniques of practical skills and fundamental thinking skills that a school could produce.\n\nThis turn to consider the target system not at the moment it is created but at the moment it is exploited — it is extremely important, and often mistakes are made here. A hairstyle is considered in the situation of meeting the groom, not any hairstyle at the moment of being in the hair salon, during a cut and styling, with some intermediate states of hairstyle observed. Grinding is considered at the moment of usage (after the grinding and not even at the moment of handing the grinding to the client, but the moment the client has installed the part with the grind in his system, and it works). All grinding methods are chosen so that everything is in order with this grinding usage. The same is true for teaching people and any other project situations. You must stretch your mind to the situation of using/exploiting the target system, and when negotiating the target system with other project participants, it’s necessary that they also recognize the target system at the moment of its usage, not at the moment of its creation or sale, or even setup. No, the target system must be presented at the moment of its exploitation/work/functioning/usage.\n\nYou will always have to discover the target system in a situation of insufficient information and diverse opinions about it. In each project, it will be unique, no \"typical solutions\" reference book or magical algorithm for its detection, only examples can be given — in the hope that these examples will not be perceived as \"do exactly this\", but the neural network will still notice some patterns in these examples.\n\n**Systems thinking provides only a set of **types** to find objects in the project to necessarily think about these objects. ** It just manages attention in the project, it does not indicate how **and what to** think about **(it indicates what to think about in the meta-meta-model, but to think about at least the meta-model’s objects, it is necessary to identify these objects with the types of the meta-meta-model: execute the detection of systems, understand the systems’ relationships. For example, in an educational project, understand what mastery will be the target system ** – then everyone agrees on this mastery.) If it is **difficult for you to make a decision** about the target system**  **– it means you understand something poorly about your project, and you'd better think more, and also collect more information, talk to performers of different roles in the project.**\n\nDocumentation (paper or electronic) — is not the target system, even if it is a thick stack of project documentation for a high-rise building or the source code of a computer program, or a script of an urban festival, or some competence in someone's head. Maybe the target system — is what you describe on this carrier. Maybe you describe not the target system, but a system in the target system’s environment, or a subsystem of the target system, or a creation system somewhere deep in the creation graph. The main thing here is not to confuse systems with descriptions (even given to us as documentation). **The target system —** **is not a description! The target system is often ** **",
    "c3a2deee036ccdd454ef6a5fbbbc0ccf": "---\ntitle: Naming the system\n---\n\nIt's not enough to identify the target system; it needs a meaningful name to ensure quick comprehension. If I named the target system Murka, it suggests something large and alive (unlikely a cockroach), and it's a female (cat or human—it doesn't matter, but it's probably not a male). I might suspect it's a name for an instance, not the system type. But if I named the system \\#78F3, I'd have to explain—whether I named a type or instance, and what it is: animal, electronic gadget, territory, or not a system at all but just a description, like \"document \\#78F3.\"\n\n**A system is usually named** **according to** **the narrow** **type** **of its main** **role, performing some fundamental** **function/service**. This is how the team developing the higher-level system for this system names it. If a product manufacturer, who doesn't fully understand the affordance chosen for their product, names it, they usually give the most general name for the expected role for which the system will be purchased.\n\nIf we talk about a creator and his service (method, the creator will use to perform tasks for method instances provided by other creators), then the creator will name his subject in the most general way, as it would be named by the owner of the target system template for whom the service customer is working. The creator will also name himself based on his role as a service provider.\n\nSo whether we're talking about a creator or some target system—name it by the role of performer of the function/service by which the system changes its environment (function in the higher-level system, service for the environment), not by construction (i.e., not by reference to creation time, the name refers to use!). Sometimes indicating construction is important, but mainly as a clarification of the name by role/functionality/method/service/practice and added only as a marker of some architectural characteristics—what seems important to the potential system user (an external project role who will want to use your target system, either as part of their tool chain somewhere in the process of creating their target system, or as a subsystem in their target system). But:\n\n-   First, the system should match its role: purpose/function, the main method of operation (initial consideration of the system as a functional object, i.e., role in the higher-level system)\n-   Only then—by construction, which affects architectural characteristics (reliability, maintainability, efficiency, etc.).\n\nIn other words, a system is named as a role-played object if you use it. But if you manufacture it, then in the manufactured system, you also try to anticipate its function in the expected higher-level system, indicating its role (by type), although sometimes specifying construction to reflect architectural characteristics in the name (they depend on the construction!).\n\nIf you have a box in your car that connects various electronic devices (ignition lock, speedometer, etc.) to the internet (some cloud servers), what do you call it? By type, and you can base the type on a prototype type—some other, well-known system type that your system resembles.\n\nIn a house, a device that connects various home electronics to the internet is called a router. Great, for a car, an automotive router will connect automotive electronics to the internet! Done, the type (data packet routing device from local devices to the \"big internet\") is defined, and you'll save many minutes explaining what your target system is. Primary purpose: routing::method \"data packets\"::subject of the method, clarification—that this routing will be done in a car. The project will fail if you call this automotive router \"car electronics,\" \"internet apparatus for cars,\" or something else, where the function is not apparent: what exactly is involved with the internet, car, electronics—without a verb, it's unclear what it does, there's no traditional system type name to clarify the purpose, if the name is generalization like \"electronics\" or even \"internet.\" If it's \"router, like the one at home connecting home computers and phones to the internet but for car computers,\" in two minutes, you will explain what you do to both the project team and external project roles. Each conversation will save you five-ten minutes—throughout the project. Identifying and precisely naming the target system is needed for quickly and reliably coordinating collective project work.\n\nSystems are named by primary purpose/function/service, as role-played objects not only for target systems but all others (higher-level system, systems in the environment, subsystems), i.e., naming a system as a functional object, role, \"black box\" of a given purpose, not as a transparent box with known construction or method of operation, and this naming ties to behavior, playing a typical role. This typical role will be the system's name. Therefore, naming the system depends on the expected environment of the system. Service providers and tools also strive to be named as a generalization of the expected role and function as a system in the higher-level system.\n\n![](10-naming-the-systems-52.png)\n\nThus, a microscope is intended to play the role of a tool for examining small objects: view::method micro/small objects::\"subject of the method\". If it is sometimes used to hammer nails, that's not considered its primary purpose, though it will occasionally be its behavior/function in the higher-level system. This rare purpose is a feature of some usage scenarios. Therefore, a microscope cannot be called a \"microscope with nail-driving capability\" or \"hammer microscope.\" No, only by primary purpose. But if you use a microscope in your system specifically as a nail-driving device, call it that!\n\nThe seller's name and the buyer's name might differ: the expected system function and inclusion in the system's name as a constructive object to highlight a potential role in the client system's architecture are usually done by the seller and express an expectation of possible use. For example: \"water pump.\" But a functional object is bought and named by actual use—\"pump for filling tank of the third fire protection circuit on the fifth floor.\" If you buy a microscope (manufacturer's name) as a nail-driving device (name given by the consumer based on actual use!), don't be surprised by two names.\n\nWe name a class/type of systems, not a unique system instance. Often it's a role-played object, \"operator of the method's object\" (assembler assembles assembly objects, loader loads cargo, cutter cuts), but not only. The purpose of \"scissors\" (to cut something, derived from \"two knives\") is well known, so scissors will likely be called scissors—but adding clarifications based on the subject of the cutting method by the scissors tool (e.g., \"metal scissors\").\n\nRemember that over-generalization in selecting a term for the type is a big mistake. A microscope should not be called an \"optical instrument\" (as a telescope is also an optical instrument, leading to confusion), and scissors should also be clarified—hairdressing, or metal scissors.\n**Clarifying/specializing is good,** **generalizing is bad.** If you called a system a \"fruit\" instead of an \"orange,\" don't be surprised if there's a fierce backlash, discovering it's not a peach. Because a peach is \"fruit,\" and buyers will think that \"fruit\" will fulfill any role in that category. If not any—people will rightly get upset. So name it precisely, never generalize. If you bought a \"beast,\" expecting a \"tiger,\" don't be surprised if you get a \"mouse\"—it's also a beast, what you asked for, received!\n\nThe most common mistake made when naming systems is listing all possible functionalities in a long description and also adding the construction. Instead of \"bus,\" it becomes \"system for boarding, road transportation, stop notification and driver-passenger communication, passenger drop-offs, and door closing for safety, enhanced with halogen lights.\" This is unacceptable: any lengthy listing of functions in a name is impermissible. Sometimes, there is already a conventional name—use it—just say \"bus.\" If it's a type, everyone will understand what such a system does.\n\nAnother equally common mistake is indicating not a role-played object, i.e., actions/function in the higher-level system (role, performing a method: system \"welder\" for performing the \"welding\" method, system \"tooth-puller\" if it pulls teeth—that's how it should be!), but immediately the construction. The construction usually references the time of the system's creation, \"what and how we made this system.\" Instead of \"metal scissors,\" it'll be \"metal system with a screw,\" an obvious mistake. Instead of \"plastic antistatic\" (method to remove charge \"antistatic\" and subject of the method—plastic), it'll be \"system for inserting carbon tubes into plastics\" (from which the antistatic is made—carbon tubes, purpose of tubes omitted, mistake one, and another—talking not about the tubes themselves, but the \"insertion system,\" i.e., instrument-system with the service \"insertion\" for nanotubes, meaning we're selling not an antistatic, but seemingly an instrument for inserting some unclear substance \"nanotubes\" into plastics—but why?!). No, the system name is given by primary/usual/typical system purpose by the role/functionality in the typical higher-level system for such a system type you are naming. And don't confuse—selling a system, service, tool for some method, what's it? The name must be precise by type!\n\nRegarding the \"postman principle\" violation (primarily indicating a too-general role-play, too-general action/function), we've mentioned it many times but will repeat. \"Cutting system\" instead of \"metal scissors\" or \"vehicle\" instead of a \"bus,\" \"fruit\" instead of an \"orange.\" The role should be specified precisely, without over-generalization. Immediately think of another completely different system that would fit perfectly under the name you gave your target system. Hard to invent? You have a good name! Easy to invent? For your tiger, called a \"beast,\" did you easily come up with a mouse and a zebra? Then change your system's name to tiger (or Amur tiger, not to be confused with other tigers).\n\nYou can't just say \"calculations,\" you need to specify what exactly the calculations are for (not just \"calculation,\" but \"mid-term risk calculation\" or \"order completion date calculation,\" or strength calculation—and not just strength calculation, but specifying the subject of this method, for example, \"strength calculation for the rupture of the mine conveyor belt\").\n\nThe name of the target system must clearly suggest the subject area from the system level of the higher-level system, no over-generalizations to the level of \"engineering in general,\" \"IT in general,\" \"management in general.\"\n\nProgrammers especially stand out for ignoring the subject area: they have everything \"calculations,\" \"services,\" \"databases\" without indicating what they do in the applied subject area (not in programming, but the area they are programming for!). No words from the subject area where these \"calculations\" and \"services\" work—something is named incorrectly, an over-generalization is obvious since a \"risk management system\" could work with risks of anything, but in life, it turns out deeply different: the risks in it can only be those for which it was designed, but not others. Clarify, conduct DDD^[<https://en.wikipedia.org/wiki/Domain-driven_design>], \nthe word \"domain\" (subject area) for the applied subject area is not accidental there!\n\nAnother note is the unjustified use of the word \"system\" in names: \"metal scissors system\" should be immediately replaced with \"metal scissors.\" Check if the word \"system\" is in the name of your target system—immediately eliminate it, name it with a term from the subject area that this system works with.",
    "86dd4981583a3b5b4c8ed4dff3cc0baf": "---\ntitle: 'Systems Approach: for all types of systems, not just the system of interest'\n---\n\nSystems thinking possesses the property of recursion in its application: it unfolds in a similar way for each system within extensive and deep systems decompositions. Distinguishing the system of interest among the numerous systemic levels of some systemic decomposition is necessary primarily to remember what constitutes a collective goal, i.e., for working in certain team projects. This is a novelty of the systems approach in its second generation, a practical (subjective/postpositivist, i.e., determined by the intention of some agent to change something in the physical world) introduction of the system-of-interest. **The system of interest is always highlighted by someone and for some purpose** **(i.e., it is used somewhere, rather than just \"existing\"),** **this identification of the system of interest** **is not** **\"objective\"** **and** **\"correct/true\".**\n\nHowever, the concepts of systems thinking are applicable to all systems, not just to the system of interest and not even just to \"our\" system. Around any system, one can build a hierarchy in terms of composition and construct a creation graph in terms of creation.\n\nThus, the system of interest, the supersystem, the subsystems, and any other systems in the environment and even creation systems in their long chains, all have their own supersystems and subsystems (super- and sub- here always refer to composition relationships; in systemic decompositions, these prefixes are not used to indicate type and kind, variants). Distinguishing descriptions (mental object) from system documentation (carrier with the description), as well as distinguishing the system description from the system embodiment, is necessary for all systems. All systems are primarily named for their primary purpose/role in the environment and the function/method/service they perform, very rarely referring to the construction. In all systems, the subsystems interact to exhibit emergence/system effect, although in some systems this interaction is cleverly arranged—it occurs through creator systems observing the emergent properties of such systems. For example, the clientele as a system interacts with the product creator, and such characteristics as market capacity relate to the entire clientele, not to individual clients.\n\nThere may be many systems of a certain kind in a project, not necessarily just one. For instance, **the supersystems** **for one system of interest** **can be many. The system of interest can enter into multiple** **supersystems, each with its own group of external** **project roles concerned with their various needs for each of the numerous supersystems.** **And the creation** **systems** **for one system of interest** **can also be multiple.**\n\nFor example, one company designs a building, another constructs it, a third operates it, and the same third demolishes it, a fourth rebuilds it, \"restores its historical appearance\"—each company will be a separate system in the overall project of building creation and development. There is emergence/system effect arising from the fact that all these companies work in some sense together (and often this joint work is stipulated in contracts among these companies), and it can be said that all these are not separate creation systems, but subsystems of one creation system. But saying so is not at all necessary; usually, it is not done, and we often talk about a creation graph with creation systems in it, rather than one creation system, within which we consider the graph of creation subsystems of this encompassing single creation system.\n\nAnd we usually consider exactly creation graphs, not just chains (linear sequences of systems in terms of creation). One creator can create and develop several different systems, including several different creators, and one system, including the creator, can be created by several different creators, each providing different services for this.\n\nEven in the biological world, in the creation of most organisms, not only the female is involved but a population of two organisms: male and female, each providing their own service/method for creating offspring.\n\nLet's also recall a common mistake of managers: the attempt to highlight a typical system of interest that they deal with in the most different and dissimilar projects. This creates serious complications: since the supersystems of these systems turn out to be completely different, it is impossible to generalize the different needs of the most different external project roles of the most different creation projects of the most different systems as if these were all external project roles with their set of needs for one super-generalized system of interest. No, projects for different types of systems of interest, which will be used in different environments and work there, providing different services/functions/methods for this environment, need to be separated, not trying to artificially unite them in thinking. If there is no emergence from unification (new properties at the moment of usage! Not at the moment of creation), then there is no need to unify some parts into an artificially created “system.”\n\n**If a manager receives ten projects in different ways, there's no need to pretend it's one large project** **and there’s a systemic effect from uniting these ten projects into one, these ten systems of interest into one: we already mentioned many times here that** **ownership relationships, influence and resource allocation relations—** **these are not** **composition/“part-whole” relationships.**\n\nThe presence of several different systems decompositions (at least, the presence of consideration for allegedly one system of interest with various supersystems with their different external project roles) should be alarming: most likely, it's not about one project, but several—and you simply need to understand that many projects are going on simultaneously in life, and these projects somehow influence each other.\n\nIt's not about finding various decompositions by their type: functional, constructive, placement, funding sources, etc. It’s about getting several different functional or constructive decompositions of one type—and it's hard to unify them into one (although, of course, all these decompositions enter the decomposition of “the supersystem of all supersystems,” the Universe, but we are always concerned with not theoretical/formal unification, but unification for the convenience of some working methods, practical/functional unification).\n\nLet's say you are engaged in painting sepules and assembling widgets. Do not try to unite these projects, to define the \"sepule-widget system.\" You will have to deal with sepule painting separately, understand their supersystems, have some paint specialists (or dyers, the specifics of sepules in this regard are important!), plus have the painting tools for these sepule creators/provider units/enterprises, as providers of painting services for sepules. And separately, you will have to deal with widgets and their assembly, understand their supersystems, have a separate project with separate widget assembly specialists, separate assembly tools. Whether these projects have one chief, or even the same team handles them, the systems in these projects will be different, and nothing good will come from merging these projects in thinking (by inventing a sepule-widget system).\n\nDon’t mix these systems, don’t mix these projects. Work with them separately. Most likely, these projects will have completely different situations, requiring different engineering, management, creative solutions, different modeling, interaction with different external project roles. Each time a generalization or unification of projects and systems occurs, the question needs to be asked: which issues will become easier to solve through this generalization or unification? Quite possibly none—and it’s better to unfold systems thinking individually in different projects, not trying to create a \"super-project\" from them.\n\nIn summary: to find your system of interest among others in a systemic decomposition, you need to ask questions not only about it but also answer many related questions. Questions for yourself, the beloved:\n\n- What is *your* system of interest?\n- What is the system of interest *of your* client?\n- What is the system of interest *of your* team?\n- What can *you* change with your decision, and what can you only influence?\n- What can your client change with their decision (there are different subroles! And they may have different opinions on the solution!) and what can they only influence?\n- What system do you call the system of interest for *yourself* when thinking? *Your* client? *Your* team?\n\nQuestions for yourself, as a team member:\n\n- When *you* (who is included in this \"you\"? where are the boundaries of this \"you\", determining who and what is outside, and who and what is inside?) communicate jointly with the client, team, which system will *you* call the system of interest—yours, or the client's, or the team's? Remember the theatrical proverb: \"as on rehearsal, so on performance.” It's better if in different conversations the same systems are consistently called the same.\n- Whose team is it—*yours*, or your client's? Is your team inside the company \"against everyone and the client\", or is the entire company one team \"against the client\", and there isn’t your “team against the company\"?\n- When different people say *“we”* in the project —who's included in this \"we\"? Who in this \"we\" ultimately defines (does not approve someone else's choice, but really thinks and defines itself!) the choice of the system of interest, determines its boundaries with the environment? Who is concerned with the supersystem, i.e., whose needs are we satisfying?\n\n**There are no prescribed answers here,** **no thinking algorithms on these topics,** **but systems thinking prompts you to reflect on the answers to these questions and come to a conclusion.** **These are questions of the second generation of systems thinking: important are not only the part-whole relationships in the systemic decomposition where the system of interest resides but also creator systems, which must be considered.**\n\nAt the same time, a lot of communication is required (systems thinking—is collective thinking!) as well as action, working within the project, making engineering decisions, not just \"understanding\" as an “observer/analyst,\" not \"just thinking.\" You need to conduct negotiations with various external and internal project roles, team members, and external people, each of whom may have a particular interest, to conduct actions that lead to agreements on these interests, and to change the situation so that the system becomes successful—these interests are satisfied. Systems thinking is about agreements (and, of course, subsequent implementation in practice). You need to reach agreements within the project, and systems thinking suggests on which questions it is important to achieve these agreements. The first of them—is to agree on the system of interest, to define its boundaries, its role, and functions/services within the supersystem.\n\n**Only after** **considering the organizational situation** **can you make a decision: what to consider** ***the system of interest*****, and what to consider** ***your*** ***system*** **(not necessarily will these systems coincide!).**\n\nThe last thing to do is imagine yourself as an \"objective\" systems thinker riding a white horse \"above the fray\". No, you must clearly understand—what your own project role, or set of project roles is, how professionally you can play your role, how likely you will make beginner mistakes in this role, how poorly you will perform due to the lack of skill and/or tools for the work methods you use in the project (don’t say you don’t use any methods! If you work, you use them—the other issue is that you haven’t thought about which methods they are, nor thought about how to change them).\n\nSystems thinking will help here, but it does not contain \"objective answers.\" Systems thinking will only assist in spending more time thinking about the important stuff, preventing forgetting about this important stuff: it will help manage attention in a large project. And it might (but not guaranteed) save you from mistakes in complex situations, not letting you get bogged down in insignificant details, help unite labor in conditions of deep labor division across various project roles scattered among various executors of these roles.\n\nIn thinking, you should practically follow the systems mantra. We won't repeat it here; we hope you can now reproduce it from memory.",
    "df7fe3599d21379dd00df5f1db402d8b": "```markdown\n---\ntitle: Example of a Hair Salon as a Service Provider\n---\n\nLet's take a step towards specificity and consider an example slightly more complex than a carpenter with a hammer driving someone else's nail. A hair salon (role/provider, implemented by the LLC \"ChickChick\") provides hair cutting services. The word \"service\" indicates that the hair there will be external, belonging to others, brought directly on the head, \"the client's material.\" The reasoning doesn't change — whether it's cutting one's own hair or someone else's hair, only the terminology changes. For one's own hair, they say \"perform hair cutting::method,\" and for someone else's — \"provide hair cutting service.\" In \"provide hair cutting service,\" the word \"service\" is used as a type of \"cutting,\" similar to how sometimes, for greater persuasiveness, people say \"airplane system\" instead of just \"airplane.\" One could also say it shorter, without mentioning the type \"service\" — \"perform a haircut,\" and it immediately becomes unimportant whether it's someone else's head or your own. The language of methods and roles is more universal than the language of services and servers.\n\nNext, we will consider a small checklist of important objects in the service situation. We first give a type from a more abstract meta-meta model (e.g., \"service\"), and then specify this type of meta-model for the subject area of hair cutting (e.g., \"cutting and styling\" for the service subject \"hair,\" a metaU-model from a hairdressing textbook, or even a metaS-model from this hair salon's situation, such as the regulations for haircutting and styling for this salon).\n\nWe attempt to show that the objects of discussion are defined by their meta-meta model types from our course, and then we find life objects matching these types/roles in the \"work project,\" rather than randomly selecting objects from life and then trying to find types from the course for them.\n\nWhy is this checklist needed, why go through it in a project? To discuss the project in a structured manner, not missing anything important. In the case of a hair salon, it's easy, everyone knows this subject area. But in the case of new types of services, it is not so obvious and requires thought. The types of the meta-meta model help not to miss any important objects in discussions about the subject area, i.e., the meta-models. Discussions on the subject area (meta-models) then help not to miss important objects of the concrete real-life situation model in a specific work project, in physical space-time. Here's the checklist, and remember, this is just the beginning of thinking, further systems thinking covers many more concepts and makes you consider a much larger number of important objects:\n\n-   **Target System:** hairstyle (role/functional object). Obtained from hair (in this case, the client's hair, directly on the client's head, which is important for service wording) by performing haircutting and styling methods. Another wording: the hairstyle is achieved by providing services/service for the client's hair. Another wording: the hair salon performs haircutting and styling services for the client's hair, resulting in a hairstyle.\n-   **Service:** haircutting and styling hair (specifically the client's hair - the type \"service\" implies the subject of the service is someone else's hair). These are methods/functions/ways of the hair salon's work as the role of the agent-org unit.\n-   **Service/Method Subject:** raw material/preform - hair, target system/product - hairstyle. You can discuss the change in the state of hair during creation (\"uncut,\" \"cut but unstyled,\" \"cut and styled\"/\"combed\") or the hairstyle as a whole (\"formless,\" \"haircut exists, washing head is important as a household hairstyle,\" \"target hairstyle exists\"/\"cut hair styled\"). It's good to agree. Emphasis on the hair gives details in the hair salon's work, emphasis on the hairstyle reduces issues of \"all hair work done, but the hairstyle is bad.\" The trick is the hair salon cuts hair so that even without styling it looks like a hairstyle (and with styling, it should be irresistible). If the hairdresser lacks cutting skills, the haircut leaves the hair in a state that without styling, the hairstyle is unpresentable, \"horrible.\" It’s also important to note that the **target system is usually physical, but if your service/method outputs a description, the subject will be a description, and the target system will differ.** For example, an online hairdressing service will have the hairstyle sketch as the subject and the actual hairstyle as the target system. In any case, method work (including service work) changes states of subjects in the method/service subject area, and we're interested in the final state of the service subject, the one for achieving which the works are conducted.\n-   **Suprasystem** **in** **the** **environment** **of** **the** **target system:** immediate surroundings of the hairstyle as a role/functional object: \"head for a date\" (but not \"head for eating,\" for example, or \"head for sports.\" The definition of the object by purpose/function/target behavior). It's vital to take the system environment as close to the target system as possible: the client's head in a specific situation (suprasystem — date), not the entire client's body. Here \"closer\" means closer by system levels, but remember that system levels are directly related to proximity in space-time (since the relationship of composition, parts-whole,” which links systems of different system levels, works exactly over parts and wholes of space-time areas).\n-   **Need** (client as an external org role, owner of the head with hair on it): \"impress the partner on a date with the head's beauty\" (the phrase describes the suprasystem for the project's target system haircut-styling. \"Beautiful head\" - the client's tool for his target system \"impressed partner.\" The hairstyle is part/subsystem of the \"beautiful head\" tool::system, the other part will be - makeup::system (not to be confused with \"makeup application\"::method or even work on a method with the subject of this method \"makeup\"). The client wants to handle makeup application (creating a beautiful face to impress the partner on a date). We (the hair salon staff::service/role, \"we\" are discussing this project - always track the composition of the accidentally thrown \"we\" - who is it, how many are there, what are they doing?!) do not discuss whether the client wants to impress the partner not only with the beauty of the head but also with the overall beauty of the body draped in clothing.\n-   **Usage Concept:** the scenario implies the partner transitions to the state \"impressed\" after showing off the head with the hairstyle on the date. There are also various other scenarios (rain and wind on the way to the date, sleep before the date, what happens to the hairstyle after a shower when styling disappears, etc.). We, of course, consider the broader environment — scenarios including the head with makeup, the entire body with its drapery, the surrounding situation, for example, an indoor or an open area with rain and wind. Our target system should work well in a wide variety of situations, and these situations must be considered — some situations can be learned from the client, but part of these situations are considered from method knowledge/theories; the client may not know they were protected from something, a need was met they weren't aware of, which will arise if they suddenly find themselves in some variant of the usage scenario. Of course, if considering more and more scenarios/usage situations in the usage concept leads to an increase in the system's cost or usability, it will be necessary to agree on this with the client.\n-   **Architectural characteristic** of hairstyle survivability: styled hair must look stunning, and without styling (if had to take a shower on a date) reasonably acceptable.\n-   **Target System Creator:** the system providing the service. Hair salon::provider/service/server/provider/role - that's the creator of the hairstyle::“target system”. The fact that there is a hairdresser inside the salon who creates the hairstyle using skill and tools is not important now, we treat it as a black box and do not consider the internal division of labor in the hair salon; robots could be working there, too. The creator::role - this is normal, it’s just a functional review of the creator (and not constructive, the org unit here is LLC \"ChickChick\"). Service (hair cutting and styling) is not the hair salon itself or even its work. Service (hair cutting and styling) is the work method, there will be many instances of works for instances of hair by this method. Service is the behavior of the hair salon, described as the content/method of works, not the hair salon itself.\n-   **User of the target system:** \"hair salon client\"/\"combed person\" (there seem to be no special names like \"player\" or \"steelworker,\" so we take general meta-meta model types \"client\" or \"person\" and add subject-specific words role \"hair salon\" or indicate objectness in subject-specific action — \"combed\").\n\nThe service here is \"haircutting and styling\" (considered as two separate services, \"haircutting\" and \"styling\"), note the **gerund form** (in English it's \"-ing\" form of the word\"), this is typical for functions/methods.\n\nDifficult? Yes, for the first time it is complex. It gets easier with time. More and more service situations will fit this \"hair salon\" pattern (the example was chosen to definitely be a \"service/provider,\" not \"commodity production\" — and it was roughly clear what we're talking about. But the brain then uses this example, reasoning within the prototype theory of concepts — \"all services are somewhat similar to a hair salon\").\n\nWhy so complicated, why not reason about a hair salon without mentioning all these meta-meta model types from our course? So that in discussing services (and just any work methods) in various situations, attention is drawn not to random objects but to the main/important objects of the situation. Think of it as a fragment of a checklist of objects to discuss to organize a group of people (creators of the hair salon, hair salon staff, clients) for collaborative work.\n\nOf course, there are many more types of the meta-meta model indicating things of primary importance for their collective understanding in a project — our course also has many more types. This checklist is given here only as an example of systemic reasoning. But in life, there is fuss, haste, emergencies, sleeplessness, and clouded mind from simple exhaustion. Important objects derived from concepts of the intellectual stack as a whole (and systems thinking in particular) help keep scattered attention on what’s important.\n\nFor example, this checklist includes the needs/interests/preferences of the project’s external roles — why the client wants to turn to the service. What makes the external roles happy, not the internal team roles' happiness (which certainly also have interests and preferences, though they are rarely called \"needs\"). If there is a hairstyle, but the head ends up not in order after the hairstyle (for example, not only the hair but also the ears are cut off during the haircut), that's bad. If the hairstyle is for sports instead of a date — it’s a disaster. We always discuss/describe the target system (hairstyle, just an example) and the suprasystem (head, just an example) in pairs. Describing the suprasystem — needs of external project roles, describing the target system — usage concept. **Usage concept** **traces/describes** **the system's functionality description** **to the needs/interests** **of external project roles.** **Whether you like it or not, you need a** **usage concept.**\n\nThe chosen client service of the hair salon will be \"cutting\" or \"styling\" or both together. Choosing a method — it is strategizing, to achieve the result \"impressed partner,\" the client chooses the method/service \"hairstyle creation\" and seeks works by this method from the service provider, the hair salon role organization. The hair salon has mastery of work execution by method (its staff’s skills — human or robots) and tools (mirrors, chairs, scissors, and clippers, combs, shampoos, and lacquers — all necessary for \"providing the service,\" i.e., performing work by sets of hairstyle creation methods, that is cutting and styling methods).\n\nThe work of the service provider (service work, role work, and method work) takes definite time, uses specific equipment and resources, and changes particular hair on a specific head. And if speaking about the functional aspect \"how it’s usually done, described in textbooks,\" a service is — a method/practice/culture of work, not the actual work. It could be \"washing head and styling by a friend,\" \"covering head with a hat at home to hide hair,\" etc. **Service is chosen** **during strategizing,** **it's executed as a strategy, for it planning is done —** **concrete resource use actions.** Planning occurs after method selection, that is, after choosing the method to achieve the result — impress the partner, including the client’s choice to conduct the work independently or purchase it from a provider (buying services). Lacking methods to achieve the result (didn't strategize — methods to choose methods) means you didn't think thoroughly (more on this in engineering and systems management courses). But to choose, distinguish:\n\nWorking towards a result — can be done with different methods, ways, using various resources. Rationality is the method of intellectual stack thinking. Rationality defines the way/method to generate alternatives and then use decision theory where you choose the best from alternatives and act accordingly. In economics, talking about opportunity costs means exactly this: you can achieve results with various methods/ways, these ways compete, but eventually, one is chosen (most resource-efficient), and this method/way usage is the work. Work with different resources can be done repeatedly by the same method. You can drive a nail with a hammer, stone, or microscope, but before that, you decide — drive the nail or screw the screw or glue it.\n\n-   Method/way/culture of work execution. Multiple works can be done by one method, meaning numerous resources used to gain results (changing the state of the method's subjects) by the chosen method. If you hammer nails by a microscope, multiple nails can be driven by this method.\n\nThe head (target suprasystem) and hair on the head (subsystem) belong to the client; the hair salon — the creator, realized by an organization with its mastery and tools (including premises, but mobile service is possible). Hair salon — creator role performing works by a typical set of methods with client hair: changes hair state creating hairstyle, can also add its materials as hairstyle parts (ribbons, extensions, lacquer, etc.).\n\nWhat is the target system? Hairstyle! If we organize our hair salon? Still — target system hairstyle, and the hair salon then is \"our system\"! We perform full systemic thinking with our hair salon, but it is in another system break, unlike hairstyle — hair salon refers to the creation system break seen during the hairstyle creation time/realm. Hairstyle's surroundings handled during use/operation/working time, and hair salon surroundings — during salon work (not creation!). Relation between hair salon::system and hairstyle::system — creation::relation. This relation builds the creation graph, but no \"system levels\" by it; hierarchy of system levels constructs by composition, applied at use. A hair salon as a system can be implemented differently: \"private hairdresser\" working at client’s home (clients love night-time appointments which can’t be done with other types — visiting a salon itself), as a department of a large holding, as a family business in a private apartment room. Hair salon (here service/provider) could be part of a salon holding, city block, having parts like salon chair, mirror, scissors. Discussing what happens during haircutting and styling methods execution — identical across all salon organization types. It is an economy of thought: the situation might change, thinking ways remain stable, and some thinking results stay, common for many situations.\n\nWe create not only target systems but creating systems for target systems too — hence talking about creation graphs, not just separate creation systems. Hair won't cut and style themselves, they're not alive (only a butterfly creates itself from a chrysalis, chrysalis from a caterpillar, caterpillar — from eggs). For service haircutting and styling, we create a hair salon with skills and tools, and for this, create a salon creator (like a construction company specializing in salons. But it doesn’t cut hair itself, as clients don’t, hence touching the division of labor, agent specialization on various work methods, on services).\n\nIf needed to do with rockets instead of client hair, we’d make a rocket design bureau and factory, not a hair salon. If it was about skill, opening a school, or university, or courses. First understand what to do (target system in its surroundings), then how (methods/services), then which creator-agent can skillfully and tool-wise execute works by the method/service. Many work providers for each service, they compete. We also create these creators if not existing yet (sometimes creating a creator chain). We teach skill to intellectual agents (considering labor division), supply tools (capital), and organize (make known who can delegate what, who will do what).\n\nWith hair salon creation, selecting service provision methods and salon arrangement depends on the method variant underlying the service, tracked to our system's suprasystem needs (e.g., owners' needs) and hair owners' needs (the target system's owners’ needs getting haircuts).\n\nDescription is for both hairstyle (target system) and hair salon (our system). System embodiment applies both to salon (our) and hairstyle (target). External project roles with their interests and preferences cover both project to create a hair salon and hairstyle creation — roles differ, interests differ (even with same interests!), can’t forget anyone, linked to hairstyle and salon success.\n\nBut the target system remains — hairstyle, for otherwise, losing sight of creating the hairstyle (instead of \"our\" hair salon, just a service provider), the hair salon works well but shortly, collapsing investor money as all client/product orientation lost.\n\nUsually paid for creators’ work results — service provision, not creator creation. Paid for target system after creators (service providers) changed it to a new state, improving something, satisfying needs, easing concerns, meeting interests. If hair salon service (haircut-styling), paid for work giving a hairstyle used on groomed head. For hairstyle sketches and hairdresser talk on choosing model they might pay, only if final hairstyle usable. If not, customers will return to protest hairstyle, sketch, hairdresser talks: it’s service's internal matter to resolve why service behavior and results failed. Target system remains hairstyles; from their class, styling service priced 100 rubles, 1000 rubles, or even 10 thousand.\n\nInterestingly, any engineer understands this reasoning on salons, consumer goods delivery services, but when his target system (e.g., industrial pipeline design) hits a project step, he seeks unconditional payment independently of final target system usability. Same as a hair salon: wants pay for a pipeline sketch regardless of its realization or not. Worse never seen their working target system \"in metal,\" neither at a plant, nor with a client. No, target system here is working the industrial pipeline, if bad, not paid, and designer doesn't get due share. All businesses on earth are \"generalized hair salons,\" all practical business and engineering reasoning akin, at",
    "fe20b93a07afb40d57f06bb08bb3417e": "```markdown\n---\ntitle: Service Orientation. World of Providers.\n---\n\nThe shift in thinking from delivering products as target systems to providing\nservices (performing instances of services/methods by the provider/supplier of the service/method on someone else's object of work)\nhas proven very productive and is referred to as\n**service orientation** in modern terminology. We see more and more providers ---\n\"Internet providers\" come from this very concept, \"suppliers of internet access service.\"\nThe subject of their service, also the target system, is \"internet access,\"\nimplying a certain physical state of the customer's and provider's equipment\nenabling data transmission between the customer's equipment and the equipment of all other customers of all other internet providers in the world who have \"internet access.\"\n\nSoftware suppliers that operate as cloud-based tools processing other people's data by some method use\nthe SaaS business model, software-as-a-service. Here, one must consider that in\ninformation technology, service is often seen as a server\n(microservices are essentially microservers rather than microservices as\nfunctions/methods of servers); at the very least, it is an inanimate \"machine,\"\nbut not a method/behavior, the method can generally be omitted in discussions, and\nit immediately proceeds to \"calling a service\" as conducting the provider's work,\nthe method of this work is not discussed separately. We always try to clarify what\nthe interlocutor means when they use the term \"service,\" remembering the multiple dictionary meanings of each term! Software-as-a-service is software that provides a service, software here is a service/server/service provider.\nHowever, the provider can also refer to an organization that has\nthe expertise to provide a service, and the software here is the tool. If it were\na workshop where knives are sharpened, the consideration here would be the same ---\n\"machine-as-a-service\" one could bring their knives, just as in SaaS the data is brought and sharpened like the data is processed in SaaS, and retrieve the knives after sharpening as the data is retrieved after processing. Payment is only for the execution of the\nservice/work; there is no need to pay for the knives or the data.\n\nAll projects transitioning from goods/products/items to services\n(service orientation) are similar in how to think about them. Service orientation\nhas begun affecting traditional products and items, i.e., physical objects manufactured as \"goods\" --- meaning that goods suppliers are also transitioning to service supply business models (more accurately, server supply by the method of service).\n\nFor example, let’s take cast iron ingots, \"foundry gray cast iron\":\n\n![](05-service-orientation-world-of-providers-48.png)\n\nTaking service orientation into account, the service would be \"supply,\"\nthe subject of service would be \"cast iron\" (cast iron ingots) and it would be better to say\n\"supplying cast iron,\" since typically leaving too generic words in the names of\n\"work methods\"::\"behavior patterns\" (supply, development,\nmanufacturing, creation, purchase) does not allow for a substantive\nconversation; it lacks specificity, at least to the level of meta-model,\nthe subject area.\n\nVerbs are usually few and very general; this transfers to derivative\nnouns (-ing form of the verb in English), they are few and very\ngeneral. Therefore, for specificity, the objects of the methods indicated by the verbs are specified --- the specifics of the subject area are introduced with the terms of the method objects, not the terms of the\nmethods/functions/cultures/methods/strategies/services themselves.\n\nThe transition from \"selling cast iron\" to \"supplying cast iron\" increases the\ncapabilities of the enterprise, transforming it from \"supplier of own goods\" into a \"service\" or \"provider of access to cast iron\": the cast iron product remains the same --- but if you focus not on the cast iron itself, but on the method of supply, the states of objects in the subject area of the supply can change significantly. The specification of cast iron includes the specification of the supply service, \"supply conditions\" (in the service-oriented approach, this is often referred to as SLA, service-level agreement^[<https://en.wikipedia.org/wiki/Service-level_agreement>]).\nJust in time^[<https://en.wikipedia.org/wiki/Lean_manufacturing>] supply for production,\nthrough enterprise stock or directly to the remelting point, maintaining a minimum stock throughout the year or just a large batch delivery, credit possibilities upon supply, third-party firm supply, etc. — there are many variations\nof the \"supply\" methods for the item \"gray cast iron.\"\nThus, by these service supply variations, we significantly expand the range, although the service subject (cast iron, which will eventually be \"supplied,\" transferred to the receiver's ownership) remains the same.\n\nServices/functions/methods are usually easily recognized in the language --- they are gerunds with a hidden verb (behavior), although remaining used in speech as a thing. If the action/process is \"to teach,\" the service will be \"teaching.\" If the action/process is \"to supply,\" the service will be \"supply.\" In English, services are usually expressed with verbs in their ing-form. However, one should not be misled by the high level of abstraction in the names of the method/service (teaching, supply). Remember that both the object and the method are usually specified: teaching Braille, teaching dancing, teaching Systems Thinking uses entirely different methods, but the term in the method name will be \"teaching.\" Supplying freshly made hamburgers, foundry cast iron, boxed software also uses entirely different methods, but the term in the method name will be \"supply.\" Be interested in the objects of the method, as well as demand specification of a particular method variant (for example, \"cleaning\" could be for a pipeline and teeth, \"teeth cleaning\" could use different tools --- \"ultrasonic deep teeth cleaning,\" \"toothbrush and toothpaste cleaning,\" \"flossing teeth\"). Clarify: both when you speak and when you are spoken to about methods/services/cultures! If you don’t clarify, you will probably be misunderstood, or you will misunderstand your interlocutor. Always choose the right level of abstraction for discussion!\n\nThe transition from \"things\" to \"behavior,\" changes, dynamics proves to be very productive, hence service orientation rapidly displaces product orientation. The Windows 10 operating system was already considered by the firm Microsoft not so much as a product (target system that is delivered to the client), but as a service, i.e., a method/culture of keeping the product constantly updated (the target system as the service object, i.e., Windows 10, belongs to the client, but Microsoft changes the versions, adding new features and fixing bugs --- improving the target system with its external behavior). Microsoft has turned from a supplier of \"boxed\" software tools into a software service provider. Transition to Windows 11 in practice just meant a marketing event, a name change, since nothing fundamentally new was introduced: Windows 11 in practice is just the next version of the same service from Microsoft. Further, Microsoft transitions customers-buyers of the former boxed MS Office product to the SaaS business model, i.e., from office software as \"goods\" it provides only its external behavior, making the server/cloud MS Office (now Microsoft 365) its tool, placing this software in its data centers, leaving on the computers of client-subscribers/service subscribers (and not boxed software buyers) only the familiar MS Office interface. The subject of this service is the client’s data (note that methods/services work not only with systems, but also with various objects of the method/service domain, which we call subjects, and which can change their state from initial upon entering the method to final after applying the method --- client data changes its state from initial to processed output after applying Microsoft’s software::provider’s::creator’s tool. Subjects, not target systems --- methods/services can work with descriptions as well).\n\nService orientation wonderfully expands potential markets: there are not many types of methods in the world, a few thousand (hence there are only a few thousand verbs in languages), but there are millions and millions of different kinds of things (hence there are millions of nouns). Thinking about methods/services is efficient: the same increasingly universal services work with millions of different goods. These services correspond to the most diverse expected roles of creators-providers in the most diverse creation graphs. A cast iron supplier typically merely supplies cast iron goods. However, when it comes to a service specializing in supply methods/services,\nit easily provides something else besides cast iron. It can even become a \"marketplace.\" When it comes to payments, one can pay for anything. When it comes to supporting cloud software, essentially, this software can be anything. Not only can different things be done with the same product::method, but the same doing::method is well applicable to different products.\n\nA modern store (say, internet-aggregators of retailers, \"marketplaces\" --- they include today, Yandex.market, Wildberries, Megamarket, Ozon, Amazon, linked with delivery services and a network of order pickup points with fitting rooms) mainly provides not the purchased product itself, but offers the service (work method with some service/method object) of selling::service and delivering::service the product::object. The skill and toolset of the marketplace as the service provider \"delivery against payment\" with the object \"delivery against payment.\" Here, one can easily confuse with the same name service and service object, since \"delivery\" and \"payment\" on one hand are gerunds (names of work methods with goods/product::\"method object\" and money::\"method object\"), on the other hand, a system in the physical world, where the product is delivered and transferred into the customer’s ownership, the payment's money is delivered to the product supplier's accounts and transferred into their ownership (thinking about non-cash money roughly the same way as about cash: with nuances, but it boils down to a pile of gold in the bank’s basement, so money is about the physical world, not descriptions).\n\nIt’s important to understand that the target system of the project of creating and developing the service provider and the service object is with the client. The provider's service changes something in the client’s systems (target or some creator in the creation graph, like a tool of some creation method) or even not the system, but the descriptions of the client’s system (sometimes through a long chain of \"descriptions of descriptions\"). For example, the service may modify the description of the target system, reflecting it in the project documentation. The service may change the content of its database with the description of the client’s target system --- and then this description might be used for physical changes in the embodiment of the target system (manufacturing or repair), and the whole idea of engaging the provider might be precisely for this ultimate physical change. All such chains of changes associated with service providers/services/servers stretching to the physical world must be traced and comprehended.\n\nIf you are instructed to \"create a service\" (usually this means \"create a provider that will provide services, i.e., conduct instances of work by some work method\"), you can make a serious mistake: considering the target system to be the provider itself: its tools and expertise. No, the target system is the system we change with the service/method (possibly by a chain of descriptions, if the service object is some description, not a system, and sometimes the object will be the expertise or toolset of creating the target system).\n\nThe service created in this case is the method::behavior of the new created provider (who works on someone else’s target system, effectively joining the team), and this provider is \"our system.\" Moreover, you yourself are the creator for \"our system,\" meaning you must also create yourself as the producer of work to create the provider, i.e., it’s about a chain of creation in a large creation graph of the target system. The target system remains the system everyone involved in the creation graph needs to agree on --- your project of creating a new provider makes sense only to the extent that someone needs to do something with their target system, and they invite \"your system\" (provider) to participate in the project.\n\nYou will then need to ensure that the created provider/service/server indeed creates the target product/system with the required quality level, and also you demonstrate sufficient speed and efficiency in creating the provider itself.\n\nWhy are creation graphs so complex? Here’s one of the creation chains in the creation graph of a hairstyle (not a hairdressing salon, as the target system in the hairdressing salon creation project is a hairstyle, the hairdressing salon here is one of \"our systems,\" and there are other \"our systems\" in the creation graph):\n\n- System-1: you, as the creator of the team creating the hairdressing salon. You\n  organize a small engineering-management team and suppliers\n  of goods (chairs, scissors, hairspray) and services (room repair) in a\n  project that will create a hairdressing salon (and we don’t even consider\n  the beginning of the chain: after all, you are \"commissioned to create\"\n  a hairdressing salon, meaning you are not at the beginning, but you were created as a creator!)\n- System-2: the engineering-management team and suppliers of goods and\n  services creating the hairdressing salon (this team is organized\n  by you)\n- System-3: the hairdressing salon (people with hairdressing skills,\n  premises with tools, managers), created by your\n  engineering-management team\n- System-4: the hairstyle, the target system of the entire project, created\n  by the hairdressing salon in a case/project for each client\n  of the hairdressing salon.\n\nThis chain needs to be clearly understood. Without a clear understanding\nof who creates what system and who is responsible for what, you cannot understand the\nproject, and the risk of failure will be high.\n\nSo, in the project of creating a hairdressing salon::provider for performing\nworks of the hairdressing service, the target system (product) will be\nthe hairstyle of someone else’s hair, which changes its state from \"was not\"\nto \"become.\" Specific methods comprising all the complete work methods (service)\nfor cutting and styling hair include choosing the style, cutting hair, styling,\npossibly mixing hair with spray and decorating with ribbons and flowers (if provided). This is the creation and development of a hairstyle (since these hairstyles will be made repeatedly, becoming better and better each time). The work of creating and developing the hairstyle\nis the performance/work of the service/method of LLC \"Chickchick\" with all its\npeople-hairdressers and premises with the tools of hairdressers in their role\nas a hairdressing salon.\n\nA splendid hairdressing service (the hairdresser working on the client’s hair with golden scissors on a throne-like chair under a live orchestra) resulting in a poor hairstyle is not what is needed, clearly, it will not be a successful target system. In a service, the main thing is achieving the state of the target service object (object of the work method, i.e., the object of creating\nthe hairstyle --- achieving the target state of the hairstyle). A sports hairstyle instead of a date hairstyle is also not what is needed, right? When we engage in system creation to provide a service for creating the target system (developing server software, opening a service provider company), never forget the target system and its higher system.\n\nIt's very easy to forget why the creator-provider exists, why the service will be used -- and once that's forgotten, the target system ceases to be successful (and everything is done for it), happy clients suddenly become unhappy, and you lose them. If a manager thinks of the aircraft manufacturing plant as their target system, the plant may be super-duper advanced, people super-duper collaborating, work processes super-duper streamlined, but if the produced aircraft do not fly (the target system is a used, therefore, flying aircraft), then the plant producing such non-flying aircraft is not needed (moreover, it’s harmful: it burns through investors’ money).\n\nIf you think about the target system and the external project roles in its\ncreation and development, think in writing: document these thoughts and discuss them with\nthe team and these external project roles. And check against various checklists,\nwhether you’ve thought about all the important objects of the project, whether you’ve let things take their own course, whether you’ve made mistakes in your thinking, whether you’ve missed anything in your work.\n```",
    "e60c3cd2bf2c413a9623121e2319ab1a": "```markdown\n---\ntitle: Frequent mistakes in identifying the target system\n---\n\nThere are not many signs of a target system, but agents (humans, AI, and even entire organizations) still make errors in identifying the target systems of their projects. The issue is that **systems thinking doesn't indicate what is the right choice** **of the target system** **and doesn't indicate what will be in the environment of the target system.** **However,** **the advantage of systems thinking** **is that systems thinking** **emphasizes that it is the most important object in the project —** **and** **forces you to choose, it doesn't let you avoid this choice!** How to understand this? Much like when you enter a huge grocery store with the understanding that you need to buy \"food\": the store has thousands upon thousands of products that all fall under the concept of \"food\" — but what specific food do you need at this moment in time? The type \"food\" — everything that can be eaten. But what exactly do you need right now? Three jars of mustard? Or a sweet bun? Smoked mackerel? Groats packaged in a 1kg bag, and then you eat it even without boiling, crush it into flour — and eat it raw? If you do not proceed to describe specific types of products and do not understand what to do with the purchased specific products afterward (for each product — something to do by different methods! Bite and chew something, subject something to \"culinary processing\" of various kinds, drink something), the task of buying \"food\" will not be solved. You need to decide what exactly to buy, the general type \"food\" will not suffice. But it definitely won't be a stool, not a car, not a fence, because none of these are of the type \"food.\"\n\nWith systems thinking, it's about the same: for the type of meta-meta-model \"target system,\" you need to find the type of meta-model for the system, which should be much more specific than just \"target system,\" already belonging to a subject area. But these shouldn't be objects of the non-\"target system\" type.\n\n![](09-frequent-errors-in-identifying-the-target-systems-51.png)\n\nWe have already written about many errors in identifying systems that you want to declare belonging to the type \"the target system of my project for the creation and development of this target system,\" but let's repeat again to have a small checklist handy of why university students fail \"Systems Thinking\" (and if they fail three times, they get expelled as unprepared to study), and entire teams in working projects go for project retakes, including very large teams:\n\n-   **You mistake the description of the system for the system.** Programmers consider that their system is the source code, not the program in the moment of execution (when all the program variables hold the program state!), and certainly not the enterprise service (organizational unit: project team), which delivers the result required from the program, and without this service, the program cannot deliver this result. But the source code is a description; it is information, not a physical object that can store the state of the world at the moment of its use and change the world state around. Designers and engineers consider it to be design and engineering documentation (whether electronic or paper). The same: \"documentation\" is an information carrier, and the information itself is not a system. A screenwriter thinks it is the script of a play or film, rather than the play or film during the viewers' viewing. A choreographer thinks it is his carefully thought out set of movements he shows to dancers (the choreographer himself, demonstrating this set of movements, is the \"description document\"; choreographers rarely make recordings in some notation), rather than the performance/\"dance composition,\" which the artists-dancers will later perform, even if the performance is also a target system, but its description is considered more important. A data modeler thinks his target system is the data model, not the data structured according to the model (for example, a database built according to the data model/schema), and even the final step is not made: usually, the target system is described by this data, it is not the data itself! All of these, unfortunately, are more than typical mistakes. The thought of the target system needs to be brought to the moment of changing reality during the exploitation of the system, to implementations, not to descriptions of changing reality! To describe is not to do, not to change the world! And it's not enough even to use \"design for manufacturing\" (although this is also necessary and important). Design should primarily be concerned with exploitation, manufacturing here is only an intermediate stage. Describing something convenient for manufacturing is not the physical something that brings benefit at the moment of exploitation! You cannot consider that \"another person, organization, tool deals with the embodiment, and I prepare the description.\" No, you prepare the description only so that it is later embodied. This embodied object will be your system or target system, even if you don't personally make it with your own hands. You participate in a collective project to make a system. And this system is your (and everyone else's) target system. Descriptions are not the system. But if you work with some method of creating descriptions, then this description can quite be the subject of the method. Some method subjects are systems, but not all. Some of these method subjects can quite be descriptions, and work methods are used for the most diverse objects.\n-   **Creator/\"Creation system\"/tool/\"Service Provider\" as the target system.** This is a typical manager's mistake: to consider the organization creating the target system as the target system itself (and also add \"this is my target system\" — an added confusion between \"our/my system\" and the \"target system of the whole project\"). The mistake leads to the organization's prosperity for a short period until the investor's money runs out. If such a manager is tasked with building an aircraft factory, he will build an aircraft factory that will work excellently and all the workers there will be fed and cared for — but the aircraft of this factory will not fly, because the factory will be built as the target system, the focus of the whole project and its participants will be precisely the factory. The planes produced by the factory will not be at the center of this manager's attention, and the manager will not allocate enough resources for the production of quality planes, he will be concerned with the quality of the factory life, and the planes for him will just be \"production output numbers.\" A typical result of such an approach is that the manager allocates more money for computers for the financial service than for the engineering calculations of the target system. To be fair, engineers often make the opposite mistake: they overlook creation systems without which the target system is impossible (that is, they have first-generation systems thinking, not yet reaching in their thinking the importance of discussing the creators and their methods of work), but more on this in our course later.\n-   **Identical names of the target system and its part** (or the target system and the super-system), you probably need to specify one of the names used, calling the incomplete system differently (say, \"the house consists of the box/building part of the house, communications, finishing\" can be said, but \"the house consists of the house, communications, and finishing\" cannot. \"The cell consists of the body and the gasket\" can be said, but \"the cell consists of the cell and the gasket\" — cannot).\n-   **Identical names for very different systems.** Remember that a \"business trip\" can be 1. Work done remotely, including a business trip to the place of work. 2. The business trip as everything that happens during this trip. 3. The formal part of the business trip as only that part of the trip that can be accounted for (say, train travel can be accounted for, but taking a taxi cannot, in the formal part of the business trip this taxi ride will not exist, whereas in the business trip as a whole — it will). Someone considers \"we sell smartphones\" as \"we sell a smartphone with a power block\", while someone — \"we sell a smartphone without a power block\". The term \"smartphone\" here will denote different systems (with a power block and without) with different prices, different weights, different behavior during charging.\n-   **Too high system level** (reference \"to the village to grandfather Konstantin Makarich\"): ignoring the closest super-system when determining the target system. The tail of a herd, a brick in a house, the target system \"light bulb\" suddenly works not in a room, but in a \"smart home\". Masked by the words \"used everywhere\" (a reference to any super-systems), or completely indefinite addresses. \"— Where is your drilling machine used? — In mechanical engineering!\" \"— What dances will you accept for staging? — Any!\" If you see names of industries, ministries, countries (these are huge super-systems, too large!) as super-systems — beware of such super-systems. Beware of words with universal quantifiers and loss of specificity of the subject area (\"any\", \"every\", \"all\", \"universal\", \"multi-purpose\", etc.). \"Made in China\", \"used in Serbia\" — these are very bad references.\n-   **Overgeneralization** (pointing to some superclass instead of a specific class of systems). The mistake is to say and write \"equipment\" instead of \"washing machine\" or \"transformer substation\", food instead of mustard and fried chicken. If you understand that you have blurted out (yes, not \"said\", but \"blurted out\") a term from a textbook that applies both to the system from your project and to thousands of other systems that are nothing like the system from your project — it’s a mistake. \"My target system is equipment\" — for such a general phrase, one should be fired immediately, this is the pure truth, but useless truth, a demonstration of the inability to think. Do not talk about meta-meta-model relationships, this is already covered in our courses (for example, the course \"Systems Thinking\"). Talk about the relationships of objects of your project, your subject area! If terms from your subject area do not appear in your speech and documents — you simply do not think, you do not master the operation of typing.\n-   **Relativism** (the mistake of those who are unsure of belonging to some team). That means anything is defined as a \"target system,\" ignoring the presence of one's own team, one's own organizational unit, which may have some \"our system,\" not a target one. Systems thinking in this case ceases to serve the purposes of coordinating collective/group activities. If you agree that \"any system in our project can be target\" — this is a poor understanding of recursive system consideration (you can conduct system reasoning about any system). If you have a project to create a target system, then specify for what target system (and this should be an indication of a functioning target system, its usage time) all other systems in the project are united! Yes, the target system is also a system, but all other systems in the project are gathered in the project precisely for its creation and development. And it's necessary to agree for which specific system everything is gathered; you cannot just agree that \"all systems are important, let's work on all of them.\" No, you need to work not on everything, but on what leads to the success of the target system — the one for the project.\n-   **The target system as all kinds of systems of all kinds of projects managed by the agent (most often a large enterprise with many types of products).** This is a very common mistake of a top manager who got many projects. This is very similar to the overgeneralization situation. If you received a project for the manufacture of a home electric meat grinder (one target system) and New Year's fireworks (another target system) simply because some owner bought two companies, or for some other reasons, do not try to depict them as a target system. Leave them as two different target systems! Do not fall into the overgeneralization mistake, because it will end with you calling the so-called target system \"equipment\" — and then everything will be bad, because what is good from the options of working methods for meat grinders will not be good for fireworks and vice versa, with few exceptions. Separate from your all-encompassing creation graph its parts for projects creating different systems, honestly name these systems as separate — and then discuss whether it is advantageous (to whom exactly it is advantageous) to have a large common part of the creation graph for different target systems, or it is not very advantageous and better to get rid of some projects, because it is easy to fall into the situation jack of all trades, master of none (\"engaged in everything, master of nothing\"). First, you need to determine which system you are making, and then soberly assess if you can make this system — or you were simply taken \"on weakness\" and given an obviously losing deal, and you took it.\n-   **Ignoring the primacy of the main** **function/method of the system's operation.** That is, the system is identified not by its main action in the environment (function/method::behavior, by which it changes the objects of its environment as part of the super-system during exploitation), but by some other considerations. For example, you are trying to say that some group of assets::\"physical items\" belonging to one owner is your target system. There seems to be a part-whole relationship, an \"asset in the group of assets\", but there are no interactions in such a group and interactions with the system environment, no new properties emerge from combining assets into a group, i.e., not a system, no system effect. For example, an \"enterprise information system\" is very often defined precisely through the ownership relationship to the enterprise, and this is a mistake. To say that the \"enterprise information system informs\" is to say nothing about its role/function/purpose in the super-system (most likely, this super-system will be the enterprise as a whole!). This is too general a characteristic. The example with the dog is usually well understood in compliance with this principle: you need to say \"guard dog,\" not \"Vasiliy’s pet\" (ownership relationship) or \"yard animal\" (overgeneralization and lack of a role in the super-system). \n-   **Missed system.** The department of working with disabled people designs a learning program for them, this learning program is transferred to the university’s academic part, the academic part of the university sends teachers to teach disabled people according to the special program (because they often cannot follow the general program). The target system here seems to be the trained functional part of the disabled person’s brain (let’s call it \"skill\"), which will be activated in situations for which the disabled person is being trained. But who trains the disabled person, what system creates his skill? A team of teachers sent by the academic part! This organizational unit is the provider of training as a skill creation service (\"tool\", instruments of the academic part/dean's office, but one can consider the academic part/dean's office as the organizer/creator for this teaching organizational unit, this is already not so important). Guessing that a group of teachers is practically indistinguishable from a team of programmers programming some application is very hard, because separately sent by the academic part teachers from the general pool of university teachers are not perceived as an organizational unit. And for good reason: you missed the existence of an important subject of discussion, missed the system. It's not the target (the target is skill), but without discussing it, you won't get a normal creation graph.\n-   **Fleets, pools, agencies, client bases.** Often they miss some “fleet”::\"active transport means — electric locomotives, tractors\" or \"pool\"::\"passive systems — wagons, carts\" as a separate system with many other systems as its parts. Even an agency as some multitude of agents and \"client base\" as a multitude of all clients. Interaction of such a system's parts here isn’t obvious, but it’s cunningly arranged — through joint processing, joint description, joint competition for resources, joint creation (common creation graph). Moreover, there are emergent characteristics (for example, for the client base, its growth is important, this characteristic is not present in individual clients, but the total number of clients characterizes the client base as a whole, and one might be interested in the growth of the client base, the growth rate of the client base, the client base growth acceleration). This is a very controversial question, whether to consider such \"collective systems\" like client base full-fledged systems of systems approach, but modern systems thinking is getting closer to the so-called \"constructive\" definition of the system — and the system is defined not just as existing in the world of objects and relations, but as a result of operations for building such a system from parts, and the description of the system is a result of operations for building descriptions by the creator-agent. And if there are new properties at each system level — it’s OK, and the interaction of systems with each other is considered indirectly — through the creator-agent conducting some creation operations. Kit Fine^[Kit Fine, Towards a Theory of Part, 2010, <https://as.nyu.edu/content/dam/nyu-as/philosophy/documents/faculty-documents/fine/accessible_fine/Fine_Theory-Part.pdf>, Kit Fine, The Identity of Social Groups, 2020 <https://metaphysicsjournal.com/articles/10.5334/met.45/>] pushes this line of \"constructivism\" in mereology (the study of parts and wholes). We will tell about this approach as a modern trend in systems approach in the last section of our course.\n-   **Pointing to a system associated with the target one, instead of the target one itself.** For example, you say \"Uralnatria’s order\" instead of pointing to the system. It then turns out that Uralnatria has many orders, they change, but the system has already been made and resold to Siberpotash in a completely different configuration. It would be good to understand that \"order\" is not a system, but it can be an indication of an agreement between the supplier and the customer about a deal. But the system itself is not an \"order.\" Usually, this is a manifestation of metonymy: the clumsiness of people when they call another object instead of the one they try to name, related by often rather uncertain relations to the object they are trying to name. If you identified the system “Uralkalin’s order,” how many people will understand that you mean the state of your company and Uralkalin, who entered into a deal to make something unknown (the word \"order\" can imply an order for anything — pigs, clock towers, tunneling machines for salt mines, training a couple of thousand employees in Chinese — order/deal/agreement), and how many people will understand that this is the named target system — say, the same tunneling machine, which will be the target system, and which is mentioned in the \"order\", and in the order there will also be money, and deadlines, and much more, but the target system itself is exactly this tunneling machine for salty mines.\n\n... many other mistakes manifesting in many other situations. We repeat that systems thinking simply defines your objects of attention, but it is not step-by-step/algorithmic, it does not provide a clear formula for obtaining results. You have to guess, make a hypothesis about what your target system is, and the set of concepts of the system approach will provide",
    "7f7e89b12be801748c5c0b24402d7706": "---\ntitle: You Are a Team Member\n---\n\nThe target system is usually identified for the team of a large project and becomes known for coordinating work within the project. It's assumed, of course, that a large company may produce several types of products and they can't be represented by a single target system; this doesn't significantly alter the reasoning. The error is that the target system is identified individually in each small team, and then these small teams try to merge into one large project. It often turns out that if one team declares its target system as the \"liver,\" another as the \"intestines,\" and the third as liver disease medicine, they then try to unite in some project, but it will be difficult: the liver turns out to be from a pig, the intestines from a field mouse, the medicine for horse liver diseases, and the project is suddenly about treating a human. No, here the target system will still be a healthy person, with a sick human liver at the start, and the creation graph will be built based on this target system. Veterinary divisions will either be repurposed or excluded from the project as unnecessary, regardless of how much they insist they're systematically identifying their target systems. Their systems are not target systems, and generally only a few people in the project might consider their systems as target systems, while for the rest it's selfishness, an attempt to pull the blanket over themselves.\n\nRemember: the target system is introduced not as something \"objective,\" but to coordinate work within a complex creation graph to understand what all these people, AI, and organizations are doing, and what should appear as a result of the project.\n\n**Systems thinking** **will** **coordinate** **project activities** **of various agents in various roles using various methods, not just provide** **thinking superiority of some** **agents** **over others. This is not a combat/sport thinking** **of competition and victory** **(although it helps to win in competition),** **but rather thinking** **of agreements and** **cooperation.**\n\nAs a \"team member\"/\"internal project role,\" you are not necessarily working on the target system as a whole. You might be developing a subsystem for the target system, or even a subsystem of a subsystem, or creating some creator (tool or even an organizational unit with people, AI, and tools) within the creation graph— but it will be just your personal opinion that you are working on a \"personal target system,\" you can keep that opinion to yourself.\n\nYou are working on \"your system\": this is, of course, also a system, but simply not a target system, but important to you and your team. Within the project, in communicating with your team, you will discuss the subsystem or even subsystem of the subsystem entrusted to you, or even the creator of some subsystem within the target, or even the clientele as a system. You can certainly call such your system \"my system,\" and this will not confuse anyone, it's purely true. But do not require the team to acknowledge your system (a system that is only an engineered system for you, a small cog in a large machine, or five subprograms in a huge software complex, or even the entire company engaged in the release of the target product/service or providing service for other target systems) as a full-fledged target system for everyone. No, you have to do three things:\n\n-   Confidently name the target system. If you don't understand what the target system is, then whatever you bring to the project, whatever you do—it may be unnecessary. Therefore, let's first understand together what we are doing in the full project to create the target system, and only then deal with your issues in your mini-project.\n-   Confidently name your system, and here everything is the same as for the target, only it concerns you or your small team in the big project.\n-   Do not forget that your small project is needed only for the success of the target system. Therefore, make an effort to show the cause-and-effect connection with the success of the target system in what you are doing and occupied with.\n\nThus, a top manager may have three projects: A, B, C. And spent a week dealing with project B. At this time, he calls project B \"his system.\" Let's check:\n\n-   Does he confidently name the target system for which project B ultimately works? Or is he historically engaged in project B, which is no longer needed?\n-   What about his system? Is \"Project B\" the behavior of the project's working group? Then the project is not a system, and it's a mistake from the start. We change the understanding: this manager's system is the organization: the project B team, \"the working group of the project.\" It's better already, but if it's a top manager, it would be better if his system for the project was considered to be the product of the project B, and if it's about service, then his system is the system whose state the project B team changes with their service. The focus must initially be on the result, not on the creator, and on the creator only after understanding the expected result! Excellent, now this looks like systems thinking.\n-   And here's the third point: it is necessary to show the cause-and-effect connection that the manager's engagement in project B will somehow help the release of the target system. Either the quality of the target system will be better, or the cost will be lower, or objections from some external roles for the entire project will be removed (not the system of project B), or the release speed of the target system will increase? To do this, one needs to understand where this manager's system is located in the creation graph and provide the cause-and-effect linkage, the rational justification of the decision. If it turns out that nothing in the target system will change, then the manager has wasted time on nonsense, a trifle, a hobby. He needs to justify why he wasn't working on A or C, but on B. For this, one can refer to the justification from the viewpoint of the theory of constraints (operational management, in the course \"Rational Work\" you are familiar with the modern version of this theory, TameFlow^[<https://tameflow.com/>]).\n    A troubling sign here would be that while dealing with B, the manager confirms that his actions will have no immediate effect on the target system, and he’s making \"preparations\". \"Preparations\" are harmful, they are dead capital, and work in progress, and operational management fights against these \"preparations\", this is the introduction of risks into the work. This **link between \"our system\" and the \"target system\" through the chains of production relationships and part-whole relationship—** **it should** **be presented, and the time spent on engaging in \"our system\" (one of all possible project systems)—** **should be justified.** **Why did you engage in our system, and not some other, not helping the neighbors, for example?** **If the connection is not presented,** **and the time spent on our system is not justified,** **then you cannot tell whether** **this** **work is beneficial or harmful.**\n\nYou may also be involved in developing a creation system (for instance, implementing a project to develop some organizational unit: hairdressing salon), that is, you won’t be directly dealing with the target system. But that doesn’t mean you should call the hairdressing salon the target system for the entire project. Throughout the project, you need to create hairstyles, and in your project—to create a hairdressing salon. Do not confuse these two projects, do not consider them as one. You shouldn't consider that the target system for you is the one that will be the creation system for everyone else. No, your target system is the same as everyone else's, which is changed by the works of creation systems, including those creation systems that you are making in the work chain, i.e., your systems. You are in a project to create hairstyles, so explain how your actions with the hairdressing salon result in creating hairstyles. For example, increase the production of hairstyles in an existing salon, or expedite the production of hairstyles in a yet-to-be-launched salon, or provide for the production of a more profitable type of hairstyle, or reduce the cost of the hairstyle production process, and so on—everywhere here it's important that the discussion is about the hairstyle, and if there's no hairstyle in the reasoning, then your work on improving the hairdressing salon will be immediately questioned.\n\nIf you are organizing an airplane factory, the target system is the airplane, if you are consulting the organizers of the airplane factory, it's better to consider the airplane the target system rather than those organizers! The airplane that flies (in the moment of exploitation)—this is the target system, so explain how you achieve the airplane flying and flying well, and being cheap. If you are consulting the factory organizers—how do your consultations help the airplanes? If they don’t, then without your consultations, everything will remain the same—unless you’re consulting not the airplane factory organizers, but, for example, owners of some stock packages they want to redistribute. But then the factory has nothing to do with it, it's about consulting an investment project, and things must be called by their proper names—this honesty will help everyone.\n\nAs in maps, each person does not build a map with polar coordinates around themselves. Agreed on a planetary scale about the North Pole as the origin of coordinates—and everyone on the planet uses a single reference system, the pole doesn’t hop around on the whim of any one person or even one team of travelers, it's common to all. The systemic approach recommends just such an approach: to agree on a common target system for the entire large project team. And all agents agree on joint activities, showing the cause-and-effect links of their work with the success of the target system.\n\n**The project team—** **it doesn't necessarily have to be a project group under your control! Most likely,** **\"you\"** **in this** **\"we\"** **occupy** **a few** **role positions, doing part of the large task, not keeping the whole system in mind, but engaging in some separate practice/culture/type of work** **(thermal engineering, management, programming, choreography), or some part of the system, or the clientele of the system.** **If you have part of the** **whole** **system, or a system in the creation graph—** **this will be** **\"our system\"** **for a small team or** **\"my system\"** **for you personally.**\n\nFor it, one can and should fully unfold systems thinking, just as for the target system, except it should not be considered or called a target system. The first step here is to find the real target system for the whole project (as usual in systemic thinking: look not into the details, inward, but from the boundaries—outward, in this case, from the boundaries of \"our project\" outward, into the large project of creating the target system). The target system needs to be identified to determine the place of \"our system\" relative to it—and then agree with everyone about our system (qualification of \"practices\" in organizational development) and even engage everyone (qualification of \"master\" in organizational development).\n\nIt is necessary to carefully identify the target system, with the choice of which all project participants will agree, synchronize actions relative to which everyone will do, and then deal with that system closest to you (or the one most needed by the project right now—if you’re a top manager, and justify why you're dealing with some chosen system rather than neighboring ones).\n\n![](07-you-are-a-team-member-49.png)\n\nA big mistake is to consider yourself an objective and neutral systems engineer, systems manager, a sort of systemic knight, all in white with a halo over your head leading the team to the project's success. Not at all, it’s not so. **Systems thinking is often needed precisely to raise** **your** **awareness:** **to allow** **yourself to realize what roles you have in** **the large** **project of creating** **and developing** **the target** **system, what methods you’re working with what subjects of these methods, what skills you need and tools, what are your** **role** **interests,** **what is your place in** **the large** **team** **and authority over resource management** **of the large** **team,** **which subsystem of the target system** **of your** **large** **team** **or subsystem of one of the many creators** **in** **the creation graph** **of the target system** **you’re dealing with.**\n\nThere are no recipes here, everything is determined by the current situation, there are no algorithms on this topic—but there is a set of objects for a meta-meta-model that sets the list of important objects of the project, which you need to think about and then agree on on the scale of both the big team of the entire target system creation project (e.g., mechanical watches) and your private project (e.g., the project of creating and developing mechanical watch hands).\n\nThe project team can be a couple of thousand people employees of the enterprise, or it can consist of a couple of people, and sometimes even one person. Although, in the case of one person, thinking systemically may seem excessive, but look at the multitude of external project roles, look at the multitude of creators::systems (for example, organizational systems-creators: your contractors, suppliers of tools and equipment, providers of various services), and you will not think that you are so lonely in the project allegedly \"for one,\" even if you alone will perform all the numerous internal project roles as engineers and managers, performing all the work methods needed for the project’s success. Considering external project roles, thinking in the project will still be collective, not \"personal,\" you will have to make agreements with external project roles and bring them to agreements among themselves.\n\nDivision into external project roles and the team can be even more granular: internal project roles of the *enterprise* (legal entity) as a \"big team\" and the team of the organizational unit (separate project or division within the *enterprise*) as a \"small team.\" Internal project roles of the enterprise as the big team (e.g., the enterprise’s financiers, lawyers, operational managers) are interested in the success of the target system but actively pursue entirely different interests than the small project team for its \"our system.\" If you suddenly have an extra \\$1000 in the project—where would you spend it? This is not a trivial question:\n\n-   Improve the target system by this amount without increasing its cost—i.e., gift it to the client?\n-   Improve the team's resources—hire more qualified people, buy more expensive equipment?\n-   Allocate dividends to the enterprise owners? Spend on the needs of the \"small team\"?\n\nThe interests of all roles differ, and these interests can be towards different systems—and actions to pursue these interests thus turn out to be different, often very inventive, unexpected for others. It would be better for all of you in the project to agree before these actions start, or the active realization of the most unexpected strategies of the most unexpected agents begins. But for this, you need to understand that “agreeing in the project” means agreeing on improvement regarding the target system release. If your connection to the target system is unclear, then you are an outsider, there’s no trust in you, agreements with you have weak force—and will be immediately broken if it turns out that for the project's success as a whole (success of the target system), it’s necessary to engage in something else.\n\nUsually, many would want to complete an obviously failing project, as the project roles unrolls wish to get a salary and care little about the project’s result. Actors would gladly play their roles in an empty hall: whether the theater gets money for this show, they care little (the management will still pay), and the fact that there are no spectators, even better: they can skimp on role performance! The same happens with obviously failing projects. **Systems thinking helps to realize that the project** **in terms of the target system's success** **is failing, and then insists on an ethical review of the situation.** **“Our project” may not be failing! But ethically, it should not be done if it doesn't lead to the success of the target system.**\n\nYou need to collectively/group agree on what to consider the target system, what goals the project pursues, what are the project's possibilities. And also need to understand which collective/group agrees to create and develop the target system, it’s often unclear at first. But first, you need to still figure out what the target system is, and then with \"we\": if you don’t understand what we are doing, it’s unclear who is involved in this doing, who \"we\" are, who with what mastery (and even with what level of mastery, it’s also important) will be needed in the project, and who came just to eat up/chop up resources, not lead the target system to success, contributing nothing, or even causing harm.\n\nChanging what you/you call the target system every five minutes is wrong. **Relativism** (when everything is considered subjective and relative, wobbly and uncertain—there’s inherently no reference point, any fifth-grade student is esteemed in his opinion about building a nuclear power plant, any savage is honored in his choice of the target system, and they all change their opinions every five minutes without agreeing with anyone) in thinking won’t help. Agreement on the target system must be achieved based on some principles, not arbitrarily, and for a sufficient time—preferably not changing the target system during the entire project, although understanding of what this target system is might be constantly refined. Of course, in business, there is also the pivot scenario, when a startup changes the target system. But don’t be deceived: during this \"pivot,\" everyone understands which new system they will engage in. And not all \"we\" in these projects survive the pivot.",
    "c1768a131f465d2a0226e424d62fe0c4": "---\ntitle: Transition to Using Thinking\n---\n\nReading the course material is absolutely insufficient --- it's like reading a textbook on riding a bicycle, without practicing the actual riding on a physical bicycle it doesn't help much. Answering the questions on the simulator/quiz is not enough --- it's like riding a bicycle only on a straight, specially equipped path. You need to immediately practice setting tasks in your work projects and systems thinking in real life (riding a bicycle off-road in the mountains) --- and only then, the blooming complexity of work projects begins to recede and yield to a brain trained in systems thinking.\n\n**First and foremost, engage in** **meta-modeling, that is, 'making tables' and modeling, that is, 'filling tables'. Beautiful diagrams of squares and arrows ---** **this is a pop/household/common understanding of systems modeling. Tables and even texts are more adequate here. This is systems thinking,** **moreover, it is 'thinking by writing', 'thinking by modeling'. Assignments on modeling** **(filling tables)** **in our course ---** **these are the first steps in systems thinking.**\n\nReading a textbook from the course, reading a book (there is no modeling in it, but there is in the course) --- this is not making 'first steps', this is just reading about 'first steps'. Answering questions --- these are answers to questions about the steps, not taking those first steps! But when you start making and filling tables that are roughly the same and in the same way as in our modeling assignments on the material of your projects --- that's it, this is 'thinking systematically', this is not reading about first steps, this is doing them, already walking down the endless road of systems thinking!\n\nDuring our course, you will already benefit from your work projects by engaging in modeling, so go ahead and do this modeling during work hours, not just during separate study time! You can still engage in reading the 'textbook' and answering the simulation questions during separate study time, but assignments on modeling your work projects should be done right in work hours, this is the application of systems thinking to work tasks. If you postpone the modeling tasks in our course, then it's procrastination squared: both procrastination of learning and procrastination of strong thinking in the work project.\n\nThere are not many basic ideas of the systems approach, each of these ideas is understood fairly quickly. To express the systems approach in one paragraph, it would be something like *'for the success of the system, that is,* *to satisfy the interests* *of the external project roles,* *you need to understand the functions* *of the working* *system in its environment (make a usage concept),* *then* *figure out how the system functions* *within itself and offer a system design, linking it with spatial layout and assessments* *of the total* *cost of ownership (make a system concept).* *Make architectural* *decisions* *(principles of module separation and organization of connections between modules, the sum of such decisions is the 'system architecture'), evaluating a multitude* *of conflicts between system levels* *and choosing the least bad solutions, because there won't be any good ones* *(no equilibrium, all are just unsettlement!). Achieve a detailed system description accurate enough for manufacturing on the chosen production platform ---* *and manufacture it. Gain some evidence-based justification that the system is successful.* *Operate the system, repeatedly revisiting everything to improve some parts of the system or even completely change the system. And for all this, you need* *a system-creator (most often ---* *an organization),* *which does all this, performing various* *tasks by the best-known methods. Thinking about the creator* *is structured similarly ---* *functional parts are project roles there, constructive parts ---* *organizational units. This* *thinking and associated project actions to change the physical world occur* *recursively at many levels* *considering systems* *as parts of supersystems and examining them as consisting of sub-systems, as well as* *building creation chains from creator systems.'*\n\nWe will formulate this chain of reasoning about the system several more times, slightly more structured, in our course it's also called the 'systems mantra.'\n\nThe problem is not even that these statements in the previous paragraph are entirely composed of terms (like 'usage concept', 'architectural decisions', 'production platform'), the meanings of which need to be known. All these provisions are deeply interconnected and very rarely used individually. So, some **fluency** in their simultaneous and combined use is required --- in much the same sense as finger fluency in playing the piano or typing, or fluency in speaking a foreign language. Each key on the piano or keyboard is clearly understood how to press, any kitten can press a key! There aren't that many keys. The only problem is pressing different keys in time, quickly, and the ones needed to produce music, sometimes pressing several keys at once (a chord). It takes several days of training to master the computer keyboard, but several years to master piano keys. In mastering systems (and any other) thinking, as in mastering playing the piano, there are no royal roads except many repetitions of some thinking operations during modeling in different situations, gaining experience in thinking using systems concepts in life. Thinking operations are practiced primarily when making and filling tables precisely like this, as it happens when completing course assignments.\n\nEach table involves at least three ontological levels of modeling:\n\n1.  type of type, specified in the column name of the table, is not represented in the table at all, kept in the head of the table creator\n2.  Type name in the table column,\n3.  Object in the table cell of the type specified in the table column.\n\nUsually, in work projects, the type of type in the table column is a type from the meta-meta-model (a set of concepts of the trans-disciplines of the intellect stack thinking methods, given in our courses on strengthening the intellect, including our systems thinking course), the type in the table column is a type from the meta-model (model of the applied subject area of the work project), and in the cells --- objects of the subject area. In our course, many tables come with such a type layout, but since we also teach how to make tables, there can be other options in the assignment.\n\nUnfortunately, training thinking using the types of the meta-meta-model of intellect stack methods takes time. Therefore, it's desirable to enhance the intellect: not only to read fiction literature appealing to fast thinking S1 but also literature with strict/formal typing to develop slow strict thinking S2, and also to get used to writing texts yourself with a strict use of types, as well as not only 'thinking in your head' but also documenting strict models.\n\nLet's repeat once again, this is important: if you're not writing --- you're not thinking, including not thinking systematically! Making and filling tables for a work project --- this is systems thinking, which includes working with a three-level ontology (three-level hierarchy of types, three-level classification), and this is the form in which systems thinking takes place. Of course, there can be many variations, but the most typical variation looks like this:\n\n![](08-transition-to-the-use-of-thinking-8.png)\n\nIn this example:\n\n-   types of the meta-meta-model (concepts from our intellect stack courses) as types for table columns, kept 'in the head' and not presented in the table, you don't discuss them with colleagues in the work project if they are not familiar with systems thinking. But you use them yourself for thinking! **Systems thinking is exactly in this: it will be invisible in the table, but it will be present, it is needed for assigning types to objects 'table column'!**\n-   types of the meta-model (textbook on work methods in some applied subject area of the project as the metaU-model/'model from the Textbook for everyone', types of some corporate regulations/instructions or even standards as the metaS-model/'Situational model --- like ours', in the picture only the type of the metaS-model is shown) as the type of cells indicated in the table column name --- and thus you make a type assignment for all objects in the cells of this column.\n-   values of the model (no 'meta') for some objects in the cell from the rows of this table. It is also necessary to consider the representation relation between the description in the cell and some described project object, which is not in the table, as there is no type of the meta-meta-model. But the described object exists, in the cell only its description!\n\nAll this requires fluent work not with systems thinking concepts, but with types --- fluent possession of 'theoretical theory' (theory theory in the theory\nof concepts)^[<https://iep.utm.edu/th-th-co/>],\nas well as hierarchies of types (ontology). Mastering such type and ontology work is provided for in our training program in the 'Rational Work' course, passing it is a mandatory prerequisite for our systems thinking course.\n\nFluency in thinking is important. If it's difficult for you to fill tables, and each table is expected to be an adventure for three days, then you just won't think systematically. If filling tables is a five-minute task for you for each table, then you will have systems thinking. The difference? In the first case --- no fluency, in the second --- there is fluency, because the speed difference between 'doing it for the first time' and 'doing it for the hundredth time' can be at least an order of magnitude or more. It's like translating from a foreign language: if you look up every word in the dictionary, translating one page can take several days, but if you already know the language, you just carefully read the source text and write the text in the foreign language in a matter of minutes. In some way, systems thinking is also a foreign language; you need to be able to translate 'from systems to subject, and back' (from talking in types of the meta-meta-model/trans-disciplines to talking in types of the meta-model/'applied disciplines work methods in the project's subject area', and back).\n\nFrom the materials of the Viewpoint Research\nInstitute^[<http://vpri.org/>], systems thinking is also hard fun:\n\nWe want to help children develop real fluency in many areas of education, including thinking, mathematics, and sciences. Each of these subjects does not lend itself to 'natural learning' (as people learn to walk and talk). Quite a lot of time and energy need to be spent to gain fluency above the threshold. Here is an interesting similarity with art, music, and sports, for each of them it also takes quite a lot of time and energy to gain fluency. These arts could be called 'hard fun'. Mathematicians and scientists know they are engaging in art, as well as hard fun. 'Thinking' is a higher category than 'just' mathematics, science, and arts. It represents a synthesis of intuitive and analytical approaches to understanding the world and behaving in it.\n\nPeter Senge in his book “The Fifth\nDiscipline”^[<https://en.wikipedia.org/wiki/The_Fifth_Discipline>]\n(1990) wrote:\n\nRecently, during a five-day introductory course conducted by the MIT Learning Center, a woman-manager from Ford's design department succinctly described the situation: '*After a couple of days, ---* *she said, ---* *I begin to understand what all this systems thinking and intellectual models stuff is about. It reminds me of the time when I was just beginning to get acquainted with higher mathematics. At first, I felt completely lost. It was entirely alien to me. But then I started* *to 'get it'*. *A year later I was quite proficient in it. Five years later it became the core of my profession.'* Then she added: '*If higher mathematics were invented today, none of our corporations would be able to master it. We would send everyone to three-day courses. Then everyone would be given three months to see if* *'all this stuff works'*. *When it turned out it didn’t, we would start trying something else.'*\n\nIf you engage in languages, any of them can be brought to level C1 (sufficient for admission to a European university) in a year, if you intensely engage --- for a language without flexions (English, Spanish) you need to spend 600 hours on this, with flexions (Russian, German) 1100 hours, for languages of a completely different structure (Chinese, Japanese) 2200 hours. If you engage for a year, you need to spend about 1.6, 3, and 6 hours per day respectively, and on the internet, you can find enough examples of how motivated people allocated approximately this time in their schedule and succeeded. To achieve mastery in a language, you need to spend about 10000 hours (this is a very contentious assertion, but the order of magnitude is correct) --- that is, to engage in the language for several years. In the case of a foreign language, this is not even 'thinking' or learning about some new things and their connections, this is just 'renaming already known things with other words'! Systems thinking belongs to the same kind of methods: it needs to be practiced to achieve fluency in life, not 'thinking with a dictionary' in cases where 'decided that systems thinking should be applied in this case'. And remember that besides systems thinking, you need to achieve fluency in other techniques of qualitative fundamental thinking. For example, to present the content of systems engineering methods, and simply to be collected, to maintain attention in lengthy meditations and to handle a 200-page book in three (not thirty-three) sessions of several hours each, not getting distracted by social networks every fifteen minutes and only handle a five-season series in three sessions.\n\nThe situation where systems thinking exists at the level of conscious competence ('understood'), but unfortunately, not fluency in possession ('mastered'), and moreover not applied in work projects despite the understanding, will not be considered at all. **The question** **'in which projects to use** **systems thinking?'** **is roughly the same as** **'in which projects should you think?'.** **Managing attention with a set of systems thinking concepts is used in all projects, there are no projects that are better performed with randomly chosen objects from the surrounding world, mindlessly forgetting the various important methods of work needed to complete projects** **--- to forget to check** **the system's embodiment for operability** **(perform works of engineering substantiation method ---** **testing, trials, interpretation of test results), to forget the need** **to gather and organize** **a team** **for project execution** **(surprisingly, but this happens quite often: the project seems to be open, but no one is concerned with the team in it, no resources are allocated for this, it is expected to be done by agents already 100% loaded with other work).**\n\nAlthough yes, the project of brushing your teeth in the morning can be done without systems thinking. But such projects are available even to children in kindergartens; these projects do not require strong intellect at all. However, where intelligence is required, it makes sense to engage systems thinking. There is no division in life into projects where it makes sense to turn on the brain and where it does not. And once several people participate in the project, systems thinking will help even in minimal doses: it will not tell you exactly where to go, but it will give you a map of the area and thereby prevent you from getting lost or going into the center of a swamp.",
    "0062863d34ceddb3e22b02e0a7f590f6": "---\ntitle: Formality of Systems Thinking\n---\n\n**Knowledge**, unlike \"just facts\", is something that can be used in different situations, something that can be taken from project to project. Most often, these are some explanatory theories. **Facts** can characterize specific projects and objects within them. Knowledge about meters as units of measurement is common to all projects. The length of a path in a certain project is 14 meters — this cannot be applied to other projects, so it is not \"knowledge\", it is just a \"fact\".\n\n**Logic** (rules of reasoning leading to plausible conclusions from plausible premises) in science and engineering is not necessarily boolean/discrete with values of \"true\" and \"false\". Modern logic is probabilistic, and when using logical reasoning in rational thinking, it has recently been about Bayesian probability, not frequentist. And now it turns out that even Bayesian probability is not the last word here, but it is about \"quantum probability\" from the mathematics of quantum physics, although this probability has nothing to do with the behavior of particles in the micro-world, but characterizes completely different scales in thinking (sometimes called quantum-like)^[A small review on modern rationality: <https://ailev.livejournal.com/1619025.html>].\n\nModern logic uses probabilistic (Bayesian and quantum-like) reasoning, and experiments ultimately do not prove or disprove anything but only shift the probability of plausibility^[See literature in points 1 and 2 <http://ailev.livejournal.com/1311261.html>.]. Life does not consist of \"truths\" and \"falsehoods\", it is assessed by statements about probabilities, and even more: life consists not so much of statements as of actions chosen in a rational way — statements here are auxiliary! We have already discussed that \"a building consists of bricks\" — this is an absolutely true statement in logic, but in life, this may lead to you having to discuss the construction of the building by indicating the position of each brick. It will be much simpler to combine the bricks into walls, and then discuss the position of the walls in the building — and Systems thinking works precisely with this, \"convenient grouping.\" Not everything that is logically true will be appropriate in Systems thinking; a connection with life is required — with some methods/practices/cultures/styles of work for which reasoning is conducted.\n\nBut now we will consider another branch of discussion about the connection between Systems thinking and logic. Is Systems thinking formally/strictly (expressed in symbolic form, available for strict logical inference through values \"true\" and \"false\") or informally, i.e., intuitively, with a higher probability of error? Another formulation of the same question: can it be considered that Systems thinking requires strict/formal typing of its objects, as in mathematical logic?\n\nThe main thing to discuss here is the presence and importance for transdisciplinary thinking (and Systems thinking is transdisciplinary) of informal, intuitive, and inexpressible in words and other signs knowledge in distributed (for example, neural network — in the living brain or computer AI systems) representations, including distributed knowledge about systems. This is the knowledge of fast thinking S1 according to Kahneman. Today, such knowledge can be possessed not only by people with \"wet neural networks\" (Kahneman studied them) but also by computers programmed to work within the connectionist/neural network paradigm. Modern achievements in artificial intelligence are associated with the development of precisely \"computer intuition\" (and not the development of logical programming languages) within the framework of machine learning in general and the field of deep learning in particular.\n\nIn the **connectionist** **(connectionism)** **paradigm**^[See more in <http://ailev.livejournal.com/1228029.html>.] knowledge is represented not as a set of discrete concepts connected by some relationships from formal logic, but as distributed across many specific simple homogeneous elements (today these are usually \"neurons\" in neural networks, both artificial and natural). This is a rather powerful concept of **distributed representations** in contrast to local/symbolic representations. Semiotics within semantics deals with symbolic representations, while distributed representations are still being studied within AI research projects, most of all in the field of **deep learning**, which deals with hierarchical distributed representations (for example, in the form of multi-level/deep neural networks).\n\nThe idea that knowledge/information can be represented within the framework of distributed representations through theories of informational physics can be easily generalized to recognize the scale-free knowledge distributed throughout the universe (including human knowledge), see more detailed works on representing the universe as a kind of neural network, where an eternal process of cognition is taking place^[Most clearly, this can be seen in the works of Vitaly Vanchurin in the last couple of years, <https://scholar.google.com/citations?hl=en&user=nEEFLp0AAAAJ&view_op=list_works&sortby=pubdate>, there is a special website for the \"world as a neural network\" project, <https://artificialneuralcomputing.com/wann>].\n\nThe human brain uses a neural network for thinking and therefore works to a significant extent with distributed, not local representations, although on a neural network it can also organize a \"virtual logical machine operating with types and relationships between them,” that is, the brain can slowly and with errors work as a classical logical calculator.\n\nThe human brain works poorly with formal/mathematical/strict/symbolic representations of knowledge and facts, its computations are probabilistic and require checks. The brain of animals practically cannot work with symbolic/local representations, the skill of working with signs distinguishes humans and animals.\n\nModern machine learning and artificial intelligence systems use principles for their work similar to the principles of the human brain. Today, knowledge is understood far from being only as formal/strict mathematical models. The combination of methods of formal, \"scientific\" work with knowledge and methods of \"informal\" intuitive work in neural networks (artificial or natural, in the human brain — it does not matter here) represents a scientific and technical frontier, we will not touch on these issues in our course. In any case, we can sharply reduce the number of errors in informal probabilistic reasoning if we simply give more time for calculations. This is now a hot topic in research on large language models — can we refer to the answer several times to a slightly modified question to get a more reliable and error-free answer? Yes!^[<https://arxiv.org/abs/2311.16452> with a description of automatic query selection variants, Jason Wei's intuition <https://twitter.com/_jasonwei/status/1729585618311950445>].\n\nDaniel Kahneman states^[Daniel Kahneman, \"Thinking, Fast and Slow\", [https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow](https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow)], that a person has two thinking mechanisms: fast low-cost intuitive S1 and slow laborious conscious S2, triggered when there are problems using \"fast\" intuitive thinking. Here S2 represents the possibility of sequential engagement of S1 thinking acts, thus providing the possibility of logical sequential/step-by-step thinking.\n\nIn fact, it is about a whole spectrum of thinking from intuitive informal through probabilistic (with some estimates of these Bayesian or quantum-like probabilities from various sources of prior evidence and experimental data) to classical formal based on mathematical logic. Here is a diagram by Pralion Medvedeva, illustrating this full spectrum (this was explained in more detail in the \"Rational Work\" course):\n\n\n![](01-formality-of-systems-thinking-2.png)\n\n\nUsually, intuitive guesses at the level of \"feelings\" are pulled out as explicitly formulated heuristics, and heuristics are checked by critique: logical (including probabilistic Bayesian logic or quantum-like logic). In the case of confirmation of guesses, formal slow thinking S2 about a certain type of task can then be trained (through the solution of many tasks) so that it becomes automatic and \"intuitive\" S1, not requiring special mental efforts, solving this class of tasks moves from the part of the spectrum with \"reflection\" and \"focused attention\" into the zone of fast intuitive without special engagement of the expensive resource of concentration. Physicists develop \"physical intuition,\" mathematicians develop \"mathematical intuition,\" systems thinkers develop \"systems intuition.\" The brain is plastic, the neural network of the brain is well trained (and recently these \"intuitive\" reasoning has begun to be gradually transferred to neural networks in computers).",
    "3700370b7dd5b4af8ce737804ba59a74": "---\ntitle: Subject Specializations of Systems Thinking\n---\n\nSystems thinking develops through its application both in \"true\" natural sciences (which develop explanatory theories about the world — physics, chemistry, biology, etc., in English sciences) and in various branches of engineering: from the most general systems engineering to its applied variants — enterprise engineering (management), systems chemistry^[<https://en.wikipedia.org/wiki/Systems_chemistry>, see the example of creating a replicating artificial bacterium with DNA augmented by unnatural bases <https://www.bbc.com/news/science-environment-27329583>] (which studies not so much the behavior of molecules in reactions, but the behavior of various molecules in reaction networks, including biochemical systems — and leads to the engineering of such reaction networks), systems biology^[<https://en.wikipedia.org/wiki/Systems_biology>] (which goes beyond reductionist systems chemistry in studying biology and takes into account higher levels of organization of beings — macromolecules, cells, tissues, organs, organisms, populations — also targeting engineering, including genetic engineering), personality engineering (various methods related to training intelligent systems in different types of mastery, dedicated to our separate course \"Personality Engineering\"). Systems thinking is also being tried in social engineering, often unsuccessfully, even though it draws on social sciences. Social sciences are usually normative, meaning they prescribe \"how it should be\" rather than explain, and they don't consider the systemic/multi-level nature of phenomena and the unavoidable disturbances arising from the multi-level organization of society — individuals, organizations, communities, societies. One of the utopian ideas of social engineering is the construction of communism, which inevitably fails every time due to the weakness of its theoretical premises^[See, for example, critiques of socialism/communism theories in <https://www.sotsium.ru/ekonomicheskaya-teoriya/socializm-ekonomicheskij-raschet.html>, In this work, J. Huerta de Soto draws on the theory of the impossibility of economic calculation under socialism, developed back in the 1920s by Ludwig von Mises and Boris Brutzkus, the concept of tacit knowledge by Michael Polanyi, the Mises-Kirzner entrepreneurship theory, Hayek’s spontaneous order concept and his ideas on the role of knowledge in the economy.]. Nevertheless, systems thinking is being tried even for obviously flawed engineering ideas, although the limitations of such application are built into systems thinking — and as generations of systems thinking shift, they exclude the most blatant errors. For now, we advise treating ideas of engineering social reorganization with great suspicion: the road to hell is paved with good intentions. Always remember that in concentration camps, the gas chambers were the most thoughtfully engineered part, while everything else (barracks, roads) was cruder. So be careful with using systems thinking to organize how people should live according to your (or your clients') views.\n\nThere are other, less common specializations of systems thinking in various fields of engineering, where the word \"engineering\" is traditionally not used but in fact, it is systems engineering, based on systems thinking. For example, there is a systems thinking specialization for dance improvisation (dance engineering) Viewpoints^[<https://en.wikipedia.org/wiki/Viewpoints>], the systems-based text \"Dance Thinking and Its Development\"^[<http://ailev.livejournal.com/1332624.html>] also relies on the systems approach.\n\nIn all these numerous applied engineering fields based on systems thinking, knowledge accumulates on typical engineering (hardware, software engineering, management, dance creativity, state-building, etc.) solutions for one or even multiple types of systems of one or multiple systemic levels.\n\nBut when you need to do something for the first time in the world (as when they flew to the Moon, and since 2015 SpaceX has been making the first recoverable and since 2017 reusable rocket systems, or when attempts are made to create distributed autonomous organizations DAO^[<https://en.wikipedia.org/wiki/The_DAO_(organization)>, this was in 2016, after this, there were many repetitions of this construction with different variations, <https://en.wikipedia.org/wiki/Decentralized_autonomous_organization>.], or since November 2022 OpenAI has been making AI based on large language models^[<https://en.wikipedia.org/wiki/ChatGPT>]), there are two options — to invent something haphazardly, \"by intuition,\" or to think systematically, to somehow consistently set and solve problems, find and eliminate contradictions (systematic creativity), reduce the risk of forgetting something important in a multi-year project (system modeling and based on it configuration management^[<https://sebokwiki.org/wiki/Configuration_Management>]), conducted by hundreds and thousands of people.\n\nSystems thinking, used in methodology, helps divide the solution of a problem among different agents (for example, people) in a team, organize the execution of work by the method/\"type of labor\" by different agents specializing in sub-methods/\"sub-types of labor.\" This is **division of labor**: the development along the line where the English manufactory appeared (when, instead of craft production, where all operations of making a pin were conducted by one person performing almost three dozen different operations, it became production with many people of different specialization, each of whom performed only one-two-three types of operations) and the Taylorist factory conveyor (where each worker had to do literally one feasible operation; in the limit, even disabled people could work on the conveyor, as the labor was so divided). Division of labor includes the execution of some work methods initially massively performed by people using machines (automation). Systems thinking allows navigating the emerging diversity of system creators (enterprises with a huge number of people, AI agents, equipment), which create some complex products — rockets or ice drilling rigs.\n\n**Often** **the engineering** **solution** **and its implementation** **cannot** **be obtained in reasonable timeframes** **by one person** **or a computer** **AI agent,** **even if it's a genius person or super-genius** **AI.** **The work of large teams** **of** **many** **organized** **people together with many enhancing their capabilities computers** **and other equipment, along with the addition** **of AI agents, is required.**\n\nFor this agents, playing the roles of \"hardware\" engineers and software engineers, managers/enterprise engineers, investors, dancers^[An example of such a dance project using systems thinking is the systemic modeling of social multi-dance, <https://vk.com/buffdance>], government members or election campaign staff, other members of the project/organization/enterprise/\"authority body\"/\"social initiative\" (the distinctions here exist but in this context, they are not important — these are all \"organizations\" as system creators of various systemic levels) explicitly discuss their work methods, engage in methodology. In doing so, they not only \"generate the main engineering, management, creative, political, artistic, and other solutions\" but also use systems engineering methods, i.e., in their inventive activity, they develop a full **concept** **of system use, the concept of the system itself** and a number of other system models and models of systems creating this system. The professional language of applied engineers, managers, and even dancers, based on the systems approach, allows them to quickly agree on what to do and in what order when setting and addressing numerous problems during the creation of various systems — spacecraft, organizations, dance performances, professional associations, countries, i.e., everything that people do, today supported by AI agents and sophisticated equipment.\n\n**Systems thinking says nothing about the content of thinking** **(what actions with which systems are being thought out),** **it concerns** **only its form —** **using** **concepts of the systems** **approach as types of attention objects to be used in thinking.**\n\nSay, the type \"system\" (from our course on systems thinking, the meta-meta-model of the world). You need to understand which type of object in your subject area (the meta-model of the world, from a textbook on this subject area) corresponds to it. Is this system a cyber-physical device? A being? An intelligent person? An organization? A community? A society? Some of their parts? What do textbooks in this subject area call these objects, which in the course of systems thinking are called \"system\"?\n\nIn working projects, you also need to understand which objects in the real world (instances) correspond to these types \"from textbooks,\" i.e., model the instance.\n\n**Systems thinking manages attention** **by guiding it through** **the upper levels of the hierarchy** **of types/classifications/ontologies, levels above the level of subject areas (the concept of \"system\" from the meta-meta-model, but not the meta-model of the applied systems area —** **there will be \"rocket,\" \"plant,\" \"mastery of not fearing spiders\").** **The objects of attention themselves can be from entirely different** **applied** **subject areas, defined by entirely different meta-models** **(level of textbooks** **on explanations/theories** **of applied** **methods** **and the level of established understanding in a specific enterprise in a specific project). But all these meta-models will be typified by the objects of the meta-meta-model from our course. It will not be just \"the door is closed,\" but \"door::system is closed::state.\"** **And all this** **modeling (systems modeling!)** **must be** **documented/recorded, that is, holding attention with technical means, not relying on doing it \"in the mind.\"** **If you didn't understand** **the content of the current paragraph, then** **you poorly** **understood the materials** **of the course** **\"Rational Work.\"** **Working at different levels of abstraction/different levels of meta-modeling** **is** **the \"connection of systems thinking with life\"!**\n\nIn this sense, systems thinking is fundamental/transdisciplinary: it does not touch on the concepts of applied disciplines from the applied methods of work, but it provides types of important objects for the concepts of these disciplines. If the applied method of work (remembering that it is a discipline/knowledge/theory and the tools supporting it) is cooking (the theory/discipline is presented in culinary art textbooks, the tools are realized through kitchen utensils), then the target system can be, for example, borscht. The very concept of borscht — it is from the subject area of cooking as a work method with its knowledge/explanations and tools, but the fact that borscht is of the \"target system\" type in some project — this is already from systems thinking.\n\nIf the meta-model includes borscht::system, then in the meta-meta-model, there is a part-whole relationship between borscht and the supersystem. The types \"system,\" \"supersystem\" — they are from systems thinking. What would be the supersystem for borscht? Let's say the supersystem would be a formal dinner at a restaurant (and the borscht clarifies: it's the name of one portion of borscht, not the type \"borscht\" as a type of culinary product). And in the meta-meta-model, there is a relationship of creation between the target system and the creator system. Then I inevitably ask, what is the creator system for borscht? Borscht::system is created by some creator system, this line of thinking is not from cooking, but from systems thinking. And then I can assume that it's the chef::creator-system (and not a housewife or cook, as I already know that this borscht as a portion will be eaten in a restaurant at a formal dinner, not at home or somewhere in the field). Systems thinking will not allow me to forget about the chef; further, one can ask questions about the degree of the chef's mastery in cooking.\n\nIf initially, I think not about the food, but about who cooks the food::creator-system, then systems thinking will not allow forgetting about what exactly is being cooked, making me think about the food::target-system, and further will necessarily lead not inward, into the subsystems, into the composition of the food, but to the supersystem: asking about what will surround this food at the moment of use. And if this is the organism of the eater::supersystem, digestion::use, then one will have to think about the dietary characteristics of the food::system — and the one who cooks the food::creator-system will have to follow some methods of dietetics/nutrition science, possibly even methods of nutritional genomics^[<https://en.wikipedia.org/wiki/Nutritional_genomics>]. And if in the systemic surrounding of the target system, the situation of a formal dinner at a restaurant::supersystem is found, it will still be the chef::creator-system.\n\nSystems thinking will not let you think about the sun's reflections on the kitchen walls or the clink of kitchen utensils, the peculiarities of the tablecloth, and other not-so-important things. This may come later, but not immediately. Immediately, systems thinking will make you think about the target system in its moment of use/problem-solving/functioning in the supersystem \"how it works, what it does with the supersystem\" (for example, borscht brings the eater into gastronomic ecstasy, and then provides the necessary substances for digestion to the organism). After this, systems thinking will make you think about the composition of the target system (from what and how we make it, what methods/practices/styles/cultures of work are engaged), and then about the creating system at the moment of creation (who will execute these work methods).\n\nIf this sequence of reasoning **\"first the target system in its environment, then what it is made of, then the creating system\"** is somehow disrupted (for example, the conversation begins not with the target system at the moment of use, i.e., not with borscht at the moment of eating or at the moment of digestion), then systems thinking will simply make you refer to this consideration of the target system in its environment (in the supersystem composition) as soon as possible — and not let the discussion go further. This is the power of systems thinking: it will make you think about the important, will not let you forget about the important.\n\n**The world is composed of some systems; they are many —** **but in the world, special systems are singled out by attention, \"target,\" and further use the \"target systems\" as the reference points for attention, unfolding the shift of attention from considering one system to considering another system in relation to the target systems: from the target system up and down at the moment of its operation by system levels, and at the moment of creation from the target system along chains (or even graphs) of creation.** **In any case, attention passes through some systems, each time anchoring at the target system of the project as the start of consideration.**\n\nThe concepts of the systems approach from the meta-meta-model, taken as types, govern thinking. These types, as well as the sequence of reasoning with them, are taken from our course, learned once, and then used in all subject areas.\n\n**When you start dealing with anything, you already know quite a lot about this \"anything\"! You know that there will be objects of types from the systems approach, which will make you pay attention to important aspects of the situation** **and even prompt what to think about first and what to think about later.** **For example, you must always first think about the target system in its environment, and if you haven't found it, you need to search for it!**\n\nIf the applied method of work is quantum computing, then the target system can be a quantum computer. And there will be this same reasoning: you will first have to consider the quantum computer at the moment of its use, then understand what it consists of to be used this way, then — how to make this computer (what are the methods of its creation), then — what will be the creating system for this computer. And no matter how you try to dodge answering these questions (and these are very difficult questions!), systems thinking will make you answer them. If there are no answers and none foreseen, then it’s a “dead project,” run away from it. If answers can be obtained, then obtaining them is systems thinking within the project. **Systems thinking will help not to forget the important, it will govern your attention.**\n\nIf the applied method of work is state-building, then in the subject area (domain) of this method of work, the system can be the Ministry of Attack (no state will call its Ministry of Attack otherwise than as the Ministry of Defense for propaganda purposes, but we can call things by their names here!). This means that systems thinking will literally make you think about what the Ministry of Attack does at the moment of its use (by whom? Systems thinking will not allow dodging this question. It will not allow saying “by the people” for example. This will be discussed in more detail in our course). Systems thinking will make you think about how this Ministry of Attack is arranged inside, what it is made of. And further will make you think about which methods it is created by and who will create it (who can perform the work by such methods?). These are literally “questions from the systems thinking course,” not from the state-building course. One of our students said: “I got an assignment, then I asked my boss questions from the systems thinking course about this assignment – and immediately received a place on the company’s board because I knew what to ask, what is the most important in the surrounding chaos.” And this is not a one-off but a typical story.\n\nSystems thinking will govern attention to objects of applied engineering, where causal links have explanatory theories from various applied methods of work. **Systems thinking will** **point to the important things, you cannot not think about.** **You will be required to indicate the target system, indicate its supersystem,** **propose a division of the target system into parts in at least four ways,** **indicate the creating system or even the chain of creating systems, etc.** At the same time, the order of this enumeration matters. If you started with the creating system, for example, started describing the company’s structure, then the mastery of systems thinking will first ask, what system does the company create — and you will be interested in the moment when this system works for the client, not the moment when the company makes it. But then you will definitely ask (yourself or participants in the discussed project) how exactly this system is made by the company. And then you will definitely ask about the company’s structure, but only after answers to the previous questions. Because if you don’t know what the company does, no structure of the company will help you assess how well the company is organized to do this. More about what a systems thinker cannot ignore, about what they cannot not think about, will be in our course further.\n\nDeveloped on the foundation of systems thinking, systems engineering and its applied variants (software engineering, robotics, personality engineering, systems management, social engineering, etc.) do everything so that in every working project there is no need to invent much, to “reinvent the wheel” each time. No, the goal is precisely to maximize the use of the best known conceptual (which functional parts to implement with which structural parts/affordances) solutions for the inevitable problems arising from conflicts between systemic levels (supersystem-system-subsystems — and further up and down these levels). These conflicts lead to disturbances at these systemic levels. Engineers devise various optimizations to maximize eliminate these conflicts between levels.\n\nThis also applies to creating systems, and their working methods (applied variants of engineering",
    "cea696ebaf06b551860f18adb8f59517": "---\ntitle: 'Applicability of Systems Thinking: Everywhere and Always'\n---\n\nThe last obstacle to thinking systemically is simply the lack of such thinking, failing to consider types of Systems thinking in discussions. You just don't look for target systems in the world, you don't initially consider their systemic environment at the time of operation (even if the operation will be in the future), then you don't consider their parts-subsystems, methods of their creation, and only then do you pay attention to the creators. The author has encountered cases where people spent a lot of time mastering Systems thinking and even reached some fluency in its use when they were clearly pointed out the need for systemic thoughts in a complex situation. But in the critical situations of their own work projects, they simply forgot to use it! This is unsurprising and not specific to Systems thinking: usually, people know how to perform this or that task well, but only masters actually use this knowledge, often absolutely automatically—that's why they are masters.\n\nNon-masters generally know about the correct methods of work and thinking but simply forget to apply them, or they're too lazy to do so, because non-automatic S2 reasoning is very labor-intensive compared to S1 intuitions.\n\nThis feeling of lostness after starting training (let's look at you in a couple of weeks—will you still be on course?), the inability to reorganize your life to allocate enough time for training (it is known that foreign languages are taught for years at school and university—but they are never really learned. But if you engage properly, for instance, for immigration purposes or for work use, then it all works out!), and the non-use of the results of long training in work projects are usually associated with one reason: misunderstanding why these new extensive knowledge are needed, why use Systems thinking. People live without this Systems thinking and live well, don't they?\n\nThe summary here is simple: **if you want to make fewer mistakes in complex\nprojects,** **then master Systems thinking and then use it in life, all your life, in all projects.** **In**\n**some real complex situation, the habit of thinking systemically will save you: you won't make silly mistakes even in those situations that seem very complex to the people around you.** **You will gain a competitive advantage over slower-thinking people (and sometimes even** **AI systems).**\n\nThe main mistake in evaluating the applicability of Systems thinking is to consider it an applied method of thinking that works only for some specific type of systems. For instance, systems of only one scale and complexity, say, only for \"iron\" engineering systems, or only for software, or only for management. No, Systems thinking is a set of thinking techniques from fundamental thinking methods. Fundamental disciplines/theories are called trans-disciplines because they lie \"beyond\" traditional subject/applied theories/explanations/disciplines that provide methods of working for some specific type of systems, scale of systems, some particular field.\n\nSystems approach concepts are introduced and used in many fundamental disciplines of the intellect stack methods of thinking, starting with physics, which introduces the very concept of \"system.\" These concepts are used for managing attention/provide a convenient system of types for important objects in conditions where the specific project involves multiple applied areas and thereby employs many applied thinking and action methods. In a project, there is engineering work with specific types of systems (roses, steamships, transnational holdings, clientele, cities, countries), requiring the involvement of a huge number of various methods by many organizational roles of creator-agents. Creators can also create (often not from scratch, but all the same—change the embodiment) each other, forming complex creation graphs where the nodes are creators and nodes are linked by the creation relation: \"Ivan trained::creation Masha in machining programming, Masha\nprogrammed::creation machine, the machine produced::creation part #3.\"\n\nRemember that even if you are dealing with roses, the system-rose in the system-garden should be grown by the system-gardener, and the system-gardener also has to be developed by someone—and you immediately have four systems in consideration (if you write them down, you can easily keep them all in mind). Applied methods/practices/activities/work cultures here will be for changing in the physical world:\n\n- roses (e.g., roses need to be tied up—performed by the gardener),\n- gardens (e.g., laying out on the terrain, determining where the roses are—performed by the gardener, but gardens cannot be tied up),\n- gardeners (e.g., they need to be taught horticulture—performed by those who teach gardeners, but gardeners cannot be tied up or laid out on the terrain),\n- those who teach gardeners (e.g., they also need to be taught teaching, so they can teach gardeners, but we didn't even mention that someone has to do this too—that will be the fifth system, and this chain can continue, \"teachers for teachers\" also have to be trained).\n\nWhen it's written down, it is easy to understand. Systems thinking helps to slice the world into objects that are convenient to discuss—but more importantly, helps to find important objects. So, in the example with roses, we in fact \"automatically” posed a question about the fifth system (who teaches the agents who will teach gardeners), which was out of focus at the start of the discussion. This is a great value: you can easily notice a cockroach in a bowl of soup as it is extra, but you won't notice the lack of salt or roots in the soup—it will just be tasteless, but what is missing, why is it tasteless? Seeing what is forgotten in the project but should be there—the strength of Systems thinking is in this. If in a project they forget to keep attention on the target system in its environment at the time of operation (which is hard, because the system doesn't exist yet!), the project output will be not so much a well-functioning system, but a system that is easy and convenient to make (if you forget that you will have to eat the soup when making it, you might not salt it, not put roots in it—this is \"extra work,\" so it’s easy to forget about it). Systems thinking will surely correct this, remind you of what is forgotten. Nine out of ten times it will be trivial, and the tenth time—it will save the project.\n\nManaging attention can be quite difficult even in a simple project, where one person plays multiple roles and manages their own attention, distributing it across objects from several applied areas that may be in this project. A wheat field and agronomy, a farm team and enterprise management, marketing as engineering the client base, financial engineering for organizing investments in the farm, engineering of cyber-physical systems for an agro-robot—suddenly, the \"simple\" project is not so simple. Systems thinking, at a minimum, allows you to track and organize thinking to handle keeping the entire project's scope and diversity in mind (and records in a computer to help the mind!).\n\nA question like \"how can I evaluate the applicability of Systems thinking for my specific task/problem\" precisely shows this misunderstanding of the difference between fundamental knowledge and applied knowledge. Let's replace \"Systems thinking\" with \"attention management\" and ask again: \"how to assess the applicability of attention management in my specific task/problem\"? It seems like no one would say that, as it makes no sense, because managing attention is always necessary, in any task/problem. No question of \"applicability\" arises here. Similarly, no one questions the applicability of logic, because fantasizing in reasoning at work is no good, logic must be employed in all reasoning. Concepts of Systems approach should be applied (i.e., assigning the objects of the project types of Systems thinking) the same way: always, like logic, like managing attention! Essentially, this is attention management: conceptual (directed by the types of the meta-meta-model) attention management. Think this way during the project, constantly directing your attention to objects indicated by the types from the Systems thinking course. You are currently studying this course, although we have not yet reached the actual concepts of Systems thinking; they will be explained in the next section.\n\nOur Systems thinking course aims to use the learning outcomes in projects, so the course is engineering-focused (goal: changing the world, even if it is about changing people—it is still engineering). It is not a course on the history of Systems thinking, which is why we do not provide detailed descriptions of General Systems Theory, do not quote Bertalanffy, do not elaborate much on the systems theories of other thinkers of the past century, nor do we discuss much the reasons for the failure of cybernetics as almost synonymous with Systems science. The course discusses what to think about when doing something. But the course does not discuss how exactly to do something applied: what applied methods to use for project tasks, what roles to take in the project.\n\nThe \"Systems Thinking\" course is not a course on methodology, Systems engineering, personal engineering, organizational engineering (management). These will be other, subsequent courses. In our course, we only teach thinking about the world in terms of systems. Everything not related to the concepts of the Systems approach from fundamental disciplines of the intellect stack thinking methods remains outside our course. For example, we do not elaborate on decision theory from rationality, do not provide basics of rhetoric. The course also does not address applied work methods in various fields (military affairs, medicine, genetic engineering, rocket science, AI agent creation, software engineering, horticulture). The material of our course is substantial enough without it.\n\nSystems thinking turns out to be practical/cultural/activity-based/engineering/stylish and applicable everywhere: it enhances your intellect in any projects, not just projects of a certain type. This is applied thinking of orthodontics or drilling in viscous soils that is applicable only to a narrow class of tasks. Systems thinking cannot be compared in this regard to applied thinking methods that allow reasoning about objects in projects of a certain class, in certain fields. With Systems thinking, you think systemically in all projects, including situations of switching from project to project, formulating/defining a new task/problem, organizing a new project, dealing with a new field for you.\n\nThe Systems thinking course is a semester-long university course (5 European credits, about 30 hours of learning time per credit^[[https://en.wikipedia.org/wiki/Credit\\_(education)](https://en.wikipedia.org/wiki/Credit_(education))\nand\n[https://en.wikipedia.org/wiki/European\\_Credit\\_Transfer\\_and\\_Accumulation\\_System](https://en.wikipedia.org/wiki/European_Credit_Transfer_and_Accumulation_System)]).\nThis means allocating 2–3 hours a day for 20–30 days to read the course material and complete course tasks, and another 2–3 hours for ten-twenty days will be spent reading additional literature, meeting with the instructor (if you choose this format), working on the project. In reality, this means restructuring your daily routine.\n\nAvoid taking several courses \"mixed together.\" Courses are designed for sequential completion. To avoid forgetting the material, the courses include repetition. There are also blocks with answers to questions in the courses—if you have a question, you will likely find the answer either within a few pages of the current course or in the next course. Thus, our course's materials will be repeated in the courses \"Methodology,\" \"Systems Engineering,\" \"Personal Engineering,\" \"Systems Management.\" After completing all these courses, many explanations in the Systems thinking course will become clearer. So we recommend not getting stuck on one unclear piece of our course for too long; just later go through the entire sequence of courses again, definitely with doing homework. Repeat: do the suggested modeling during work hours, as it concerns using the thinking proposed in the course in work projects—so work on, think about work questions during work hours, even if it’s an assignment from our course.",
    "55e8d7a43bf2c355690008f3529798d5": "---\ntitle: Temptation of Complexity\n---\n\nA common mistake among novice Systems thinkers is to choose extremely complex cases for their first attempts at Systems thinking, which would be difficult even for experienced Systems thinkers. Primarily, these are situations related to long information technology chains. In programming, the conversation is usually not about the physical world but about manipulating long chains of descriptions stored in the databases of various applications, somehow related to software-implemented algorithms and not evidently connected to the physical world. The course clearly states that systems are physical. Some schools of Systems thinking allow for non-physical systems, but not ours—this usually leads not to rigorous reasoning but informal fantasizing, detachment from physical reality, a lack of grounding. The course will provide studies on future generations of Systems thinking, which consider how to think about parts and wholes for descriptions. However, grounding is achieved through understanding that a physical agent is thinking about these parts and wholes. But this is clearly a complex case, a frontier of Systems thinking, which has not yet entered textbooks.\n\nSoftware and its databases are descriptions, and these are not always descriptions of the physical world; often, they are descriptions of other descriptions. In the case of software, “reaching out to the physical world” often also means understanding the engineering of the enterprise that will use the software, implying some knowledge of management. Patience and qualification to untangle these long chains of descriptions and acquire knowledge of applied engineering of various systems (including the most complex systems-enterprises, systems-personalities) are lacking in novice thinkers, and warnings to be cautious when working with IT projects are not heeded. Therefore, they immediately say, “my target system is a program that implements an algorithm,” although our course discusses numerous mistakes that often occur when making such statements—these mistakes become apparent a little later but are initially not perceived by students as mistakes. The same applies to mastery as a target system, as it is just another “program implementing an algorithm for some method,” only not for a classical computer, but for an agent based on a neural network computer (human or robot) and tools. Sometimes, a community or even a society is chosen as the first target system: a system consisting of many individual agents with strong intelligence and unclear boundaries. Similarly complex is the case of the target system “internet” or some other computer network.\n\nIt's like a first-grade music school student trying to play the latest orchestral hit heard on the radio on the piano for the first try—yes, directly all the instruments in this orchestra, let’s try on my piano, tell me how to play this by evening, especially this wonderful drum part! The teacher can only sadly say that right now—it’s impossible to play, especially the drum part. Dealing with complex corporate IT projects and human agents are the worst options to start working with Systems thinking. Unfortunately, this remark stops few people. But it exists, go back and reread it. Surely, somewhere in your large work project, there is a small subproject involving individual systems for which you can easily determine their boundaries in space-time (furniture in the office, a physical computer with a power supply, a building), meaning you can easily agree on what exactly the physical objects that are these systems are. Start with those.\n\nBy definition, org-projects are complicated because they involve people. People are very, very hard to model because personalities are much more complex than classical cyber-physical systems. We have a course “Engineering of Personality” that discusses this in more detail, but it is taken after the courses on Systems thinking and methodology, as well as Systems engineering. Mastery is part of personality which, in turn, is part of an agent. Besides mastery implemented by the “hardware” of the computer, the agent also has its organism, actually the hardware. It turns out that an agent with strong intelligence (e.g., a human) is a software-hardware complex, where the personality is the “software,” and “mastery” is one of the application programs in this software. This is not so complex; after a couple of months of studying Systems thinking, it should be clear. But taking the system “mastery” and “personality” as a target system right away will immediately lead to many, many mistakes. Like riding a mountain bike on the most difficult course of the steepest and wildest mountain instead of trying to ride the first one hundred meters on a flat road. This can, of course, be done, but be prepared for bruises and fractures.\n\nAn organization is the next systemic level after personalities, which means it is even more complex (it is necessary to understand the frustrations that arise between people and the organization, the organization and the surrounding communities, as well as society as a whole). We have a course “Systems Management” that tells more about the engineering of organizations. The main idea there is that functional systems are organizational roles performing some methods/practices of work, whereas org-links are subdivisions, commissions, project work groups. And the minimal org-link there would be a person or AI-agent. The analogy to “mastery” there would be the “org-capability” of the organization to carry out work in some role by some method. This “org-capability” will consist of the coordinated and supported with resources and authorities mastery of the agents making up the org-link. So, all the complexities of \"mastery\" remain, but they are multiplied by the fact that in the organization, the work of various agents is coordinated at the moment when they engage their mastery in the work. “Engage in work”—we remember that \"method/culture/style/strategy of work\" differs from the very “work,” right? The details on this difference will, of course, be there, but they will mainly be given in the methodology course, which will come after the Systems thinking course. So, we do not recommend choosing an organization as a target system. In fact, we do not recommend choosing an organization as a target system even for managers, which is a common mistake among them. For managers who consider an organization to be their target system, it works splendidly, but the engineering systems it produces do not. People are fed, machines are lubricated, computers are buzzing—but there are problems with the products, as they do not fall into the manager's consideration, so the organization is not target. The target system of an organization, the product of the enterprise (including a product that the organization changes with its service)—this should be the target system even for a manager.\n\nYou need certain knowledge and experience to think about all these types of complex systems involving classical computer software and not very classical “knowledge software” for agents with strong intelligence (people, organizations, AI-agents, collective systems of people, organizations, AI-agents). It is important to have “knowledge and experience,” not just “life experience.” You already need to have sufficiently strong intelligence, as the behavior of people and AI-agents is surprising in its diversity and presents unexpected challenges in projects. Intelligence is needed to understand these surprises and solve numerous problems. If you have a hammer in your project, it will behave roughly as described in the textbooks on hammers. If you have Vasya or Dasha, they will not behave necessarily as described in textbooks on people. Moreover, they will deliberately behave differently if they know you want to manipulate them based on textbook knowledge. You also act like this, so why shouldn't they? If you have an organization of a couple of thousand Vasyas and Dashas, it also might not behave as you expect—and strong intelligence (including mastery of Systems thinking) will help you understand.\n\nBut besides intelligence, you need some kind of knowledge support in thinking about these complex objects. Our courses on Systems engineering, engineering of personality, and Systems management (as the engineering of organization) will help you with this. Ideally, further courses on community engineering (including communities such as the clientele of an enterprise and investors—those who have invested in the enterprise) would help, but we do not currently have such courses; we are only developing them. You will take these courses only after completing the “thinking minimum” to enhance your intelligence (courses on rational work, Systems thinking, methodology, Systems engineering).\n\nAnd yet, most of the first systems that novice Systems thinkers want to think about turn out to be systems with software and people, because we work in a world surrounded by software and people, and recently also by “undead” (AI software, which behaves more like humans than classic computer software). Of course, we try to quickly cover how to think about software, people, AI-agents, and organizations created from them in our courses, but try not to take such systems as your target ones. It’s too complex! You will get confused! A first-grader shouldn't tackle differential equations; they need to start practicing arithmetic first!\n\nIf you are talking about a city (community) or a country (society), the situation in Systems modeling is even more complex than with an enterprise. In an enterprise, you might still manage to influence something as there are provisions for issuing instructions—people are organized. If people are not organized (it's unclear who is the boss and who is the subordinate on some issues, you can't assign work), then the possibilities of purposeful action by one person or even a team of people are small (unless you are, of course, a commander of a small armed detachment financed by taxpayer money). Your thinking about communities and societies will be unproductive—novice Systems thinkers’ thinking will be rife with errors due to the extreme complexity of such situations.\n\nVarious agents that you want to organize in your community or society creation project will have different preferences; they all try to do something on their own to realize their “wants” of varying levels of thoughtfulness, they are not waiting for your actions and generally (often justifiably) consider them unthoughtful and not conforming to SoTA (best known today, State-of-The-Art) work methods, do not consider them stylish/cultural, are not waiting for you to think systematically about them—they do not dream of you planning their lives and will surely fiercely resist your proposals. Just as you would do when someone from this course decides to plan your life. So, do not plan their lives, neither in your country nor in a neighboring one! First, deal with simple \"iron\" systems, then with yourself as a personality, then learn to organize small teams, then large organizations, and with such organizations' efforts, you will be able to significantly change their environment, that is, communities and societies.\n\n**Go back and reread these warnings: where there is a lot of information technology**, **including AI-agents, and** **people** **(and often in the project there is both software and people and** **AI—and something of it is even unnoticed, “a fish does not notice water,” even you yourself—it’s people, and your** **work is supported by software), be careful with the first examples of Systems thinking. Don’t take such examples. Don’t start with your most confused work project; you will only get disappointed. If you started learning Swahili yesterday, don’t get involved in a situation of simultaneous translation at a business meeting of** **military and businessmen, except for troubles, nothing will come out of it. Wait until you achieve some fluency. Practice on simpler projects with less information technology and fewer people.**\n\nOf course, this creates enormous difficulties in organizing the training: a person has maximum difficulties in his current projects, and he learns a tool to reduce this complexity, but just hitting this epicenter of complexity with his current skills is not possible; you need at least some training on simpler examples before that!\n\nEstimates for achieving initial fluency in Systems thinking (taking our course) are approximately **20-30 active days of two to three hours daily** plus **approximately** **eighteen to twenty** **hours** **of classes** **with an instructor** **or teacher.**\n\nSystems thinking is not the only course in the intelligence stack that a modern adult needs to take. We aim for about a year's work, completed over two semesters (our course is in the second semester of this work).\n\nFor such training, you need to change your lifestyle because those few hours must come from somewhere, rearrange your typical daily schedule. It's like enrolling in a full-time or part-time physics and math school or evening master's program: working hard for several years to get other life opportunities. Studying, in general, is an ungrateful activity: if you studied all weekend from morning to evening, no one would praise you—it’s not a job that can be significantly advanced in a couple of days, and everyone will notice. No, you will have to spend many days without immediate rewards. But this will later allow you to claim other jobs and another level of rewards. For the Systems thinking course, there is a mandatory prerequisite course “Rational Work,” which teaches, among other things, how to gather yourself and reorganize your life to find time for education (learning intelligence stack thinking methods, enhancing intelligence) and applied learning of different methods/cultures of working with some specific types of systems.\n\nA “specialist” is someone who understood everything (mainly from a textbook, not in life) and can talk about problems; they can appropriately quote a textbook describing some method. The specialist will do nothing but talk.\n\nA “practitioner” is someone who managed to fit into a project and bring benefit to it, agree with everyone (a sign of success: they coordinated their work with others). A practitioner should already be able to think about how the project is arranged to agree with everyone, so they must be able to think about organizations of all kinds of agents (people, AI, and even other organizations).\n\nA “master” (here we use another meaning of the term “master” as a name for the qualification degree in mastery. **Several different meanings of the term** **“master” are discussed in the “Engineering of Personality” course**) already understands that “agreeing with everyone” is useless—if the agreements of other agents (people and their organizations) regarding the release of the target system change, then their agreements with everyone also change. Therefore, the master is engaged in organizational development: agreeing everyone, changing the organization, reorganizing enterprises, teaching people to do something new. And here, of course, one needs to think about people as systems, about such systems as AI-agents, about such systems as organizations of people and AI-agents. The next qualification is “reformer,” where it turns out that “you can't make a clean production in a dirty puddle,” and you will need to create clubs, business ecosystems, communities (clientele)—and here you will already need developed thinking about community systems. A “revolutionary” thinks about societies. But for now, let's start with the “specialist” and learn to think about some simple systems, for which it is obvious what physical objects they are.",
    "52152a20777c6c2b723fe98429343d3f": "---\ntitle: Student States in the Process of Learning Thinking\n---\n\nIn learning Systems thinking, the student goes through the following\nstates. This is just an example, these student states are easily\ndetected when learning various methods/ways of working. Note that\nthe states are formulated according to the already discussed naming\npattern, similar to \"the door is closed\", here instead of the door it will be \"the student\", and what happened to\nhim --- will be further in the enumeration of states:\n\n**1.** **Realized incompetence.** You::the student realized (note\nthat not \"realize\", that is, in the process, but \"realized\", this is like\n\"the door is closing\" and \"the door is closed\"), that the Systems approach is\nneeded for some reason. This is the transition from **unconscious incompetence** (\"I don’t even realize that I don’t know how to think systematically\") to **conscious\nincompetence** (\"I know that I don’t know how to think systematically\"). **This\nis the most difficult step on the path to fluency** **in thinking, realizing your\nignorance.**\n\n**2.** **Interested.** The student wants to spend time, nerves and various\nother resources (for example, money) on learning. This state is difficult\nto maintain. No motivation --- there will be no labor investment, no hard\nfun^[<https://dailypapert.com/hard-fun/>]\nin Seymour Papert's definition, the fun criterion^[fun --- it’s when the very process of evolving\nideas goes smoothly in terms of combining without “jitter” of explicit, implicit\nconscious, as well as not yet conscious ideas in thinking (thinking with\nexplicit ideas --- this is \"logic\"),\n<https://www.youtube.com/watch?v=uQ2GHzFYxaI>] David\nDeutsch, no metanoia by Peter Senge will occur. On commercial courses\nadults come already interested, and they succeed (although not all). Young\nstudents usually come to “lectures” uninterested --- and not all\nbecome interested even by the end of the course. But then students often\nreturn to study for the second time, interest appears after passing the\ncourse: most often this happens after accidentally\nusing the material of Systems thinking and getting an unexpectedly\nstrong result. At this moment comes the desire to consolidate the success.\nThis interest in Systems thinking must be maintained\nthroughout the training.\n\nHere we can note that in classical pedagogy, a methodologist in\ninstructional design highlights motivational design, and the leading teaching method is\nleadership, that is, the ability to keep a person in the role\nof a student^[<http://ailev.livejournal.com/1316601.html>].\nIf you are your own teacher, that is, you are engaged in self-education,\nthe ability to gather yourself and “persuade yourself to learn,” spend time on\ntraining your neural network --- this will be your leading skill,\nleading ability, “self-leadership.” You can be aware for many years that\nyou can’t do something, for example, you can’t dance, and want to learn\n--- but never start the training.\n\n**3.** **Well-read.** You are familiar with some fragment of the set of concepts\nof the Systems approach. The material of the textbook or course (or even several)\nis mastered at this stage in terms of knowing the meanings of words, being able to retell\nsome fragment of text, reproduce some reasoning, support\na conversation about the content of the textbook or course text. For example, you are now\nwell-read: you know that Systems thinking deals with parts\nand wholes arranged in many levels. You know there are creators\n(systems for creating systems, systems-creators). You know about the\nsynonym row \"method/function/culture/style/activity/...\" and\nyou can even add a couple of terms to this row, and you also remember that\nyou should not confuse this with “work,” which is carried out by this method. You\nstill do not know what to do with this and how to apply it in your projects, but\nthese knowledge/explanations of the meta-meta-model you already have!\n\nIt’s right to think about the state of “well-read” as a student well-read by a book on\ncycling. Well-read about trips, but never having ridden himself, a student may\nlong tell you about balance, the need to pedal, and avoid\nrocks. But demonstrating riding he cannot do.\n\nBeing well-read and seeing are necessary for thinking, but they are completely\ninsufficient for confident fluency in thinking. To provide “correct\nwell-readness,” just the part \"textbook\" of our course was developed.\nThere, the content of Systems thinking is presented and some examples of its\nengagement are given. However, well-readness --- this is not even a transition to\n**conscious competence**, when you can independently and consciously\nconduct some “reasoning from the textbook” on some material from your\nor someone else's project. From the textbook or course, we take types of\nmeta-meta-model, from a working project --- types of meta-model and examples\nfor grounding. Being well-read does not provide fluency in type\nassignment operations.\n\n**4.** **Understood.** The student understood what the terms of the Systems approach mean\nin their numerous variants of different schools, can productively\nuse the concepts of Systems thinking in discussing various\nsituations. Besides memory here already appear some cognitive\nintuitions, part of the necessary cognitive moves is made “automatically.”\n\nPart of this skill is achieved by the “**sergeant\nmethod**”^[Read more about the \"sergeant method\" by following the links in\n<http://ailev.livejournal.com/1287293.html>.], that is\nby solving simple and similar to each other, numerous\n**trainer** **tasks**, which the authors of the course formulate for\ntraining, not for knowledge control^[The main use of the \"textbook\" in the course is as a “help” for performing tasks\nof the online course, where the main focus is on “thinking by modeling” and\n“thinking by writing”. Learning occurs in the form of filling out tables\n(modeling), answering questions with written explanations, performing\ntasks. Simply reading the text as “text in a textbook,” alas, teaches very little.]. An example of such a task: “Peter claims that it is necessary\nto start purchasing functional parts of the system, and Elena claims\nthat it is necessary to purchase not functional, but constructive parts. Who is\nright? A) Peter B) Elena”. You can answer such a question/quiz only if\nyou know about the differences between functional and constructive parts of\nthe system --- for the answer, somehow correlate the situation in the task with\na place from the course, where this difference is discussed. After several\nrepetitions of different variants of the question, the answer will be self-evident, no\nreferences to the course will be required. While solving trainer questions, just\nthere are “rails in the head” formed, the set of concepts is assimilated, on which\nlater conceptual thinking will ride.\n\nIt is important that these questions specially train counterintuitiveness,\ndifference of the proposed way of thinking “by the given method” from\nthe use of popular/common sense. Verification\nof following the set, and not “any, from popular beliefs” method, is done\nthrough the use of the **conceptual\ndescription**^[<http://modeling.asu.edu/R&E/Notes_on_Modeling_Theory.pdf>]\n(concept inventory, sometimes conceptual inventory). The verification method consists\nin necessarily offering in knowledge assessments of students' questions\nwith trap answers corresponding to “folk thinking”. This was\nproposed in physics to test the understanding of Newtonian physics in\ncomparison with \"popular\" Aristotelian physics. In Aristotelian physics, a finger\npresses on a table (because it is alive!), and a table does not press on the finger (because\nit is not alive!). In Newtonian, they press on each other with the same force, which\nis counterintuitive, does not correspond to “common sense” (but corresponds\nto Newtonian physics). Questions, composed according to the principles of conceptual\ndescription, check --- what on this topic after the course of physics\na graduate thinks. And if it turns out that he answers questions on\nNewton's third law with correct application of formulas, but at the same\nbelieves that the table does not press on the finger, then something in the training went wrong,\nand more training is needed.\n\nQuestions/quiz for the Systems thinking course are composed in the same manner:\nthey test systemic thinking, correctness of reasoning with\ncounterintuitive concepts of Systems thinking, departure from everyday and\nfamiliar thinking of “common sense”. Again, “understood” in some\none subject domain does not yet give a general ability to think.\nFor example, if understood something in physics, it does not make you smarter in other\ntasks^[Materials have appeared, discussing beyond concept inventories towards measuring how students think --- <http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2830154/> (concerns about measuring student thinking as opposed to student knowledge, but all these attempts poorly transform into reproducible method compared to the method of concept inventory). More on this topic in the text \"Notes to \"Notes on Modeling Theory\" by David Hestenes\" --- <https://ailev.livejournal.com/1197467.html>.].\n\nOne of the students of previous versions of the course noted that his mood during\nsolving tasks was --- “fury”. Because his first answer was consistently\nwrong, and correct answers, it turns out, were almost quotes from the course text!\nAnd so task after task: tasks forced him to re-read the course text, reading\nnew and new content out of it.\n\nNo matter what the questions/quiz are, they just give the opportunity to remember\nthe meanings of terms and some ideas about the connection of concepts ---\nno more. They will be well answered by “crammers”, who well remember the textbook text.\nSituations in these questions are simple, all distractions are removed: in the field\nof vision only necessary for the correct answer situations, as well as\na limited set of “thinking traps”. It’s like in a cycling textbook to ask where\nthe brake of the bike is --- and show several correct and incorrect answers.\nNot a fact that the student, correctly pointing to the brake, can use this brake in life.\nWhile riding a bike, all his attention and skill will initially be taken up by\nmaintaining balance, and the thought of the brake if it comes to mind, it is unlikely\nto be implemented.\n\n**5.** **Mastered.** The master (no longer a student) can think systematically in the wild, \nthat is, in real projects, and quickly, not straining to choose\neach cognitive step, as at the stage “understood”. This is a totally different\nquality: to be able to solve already set tasks (even of an Olympiad level of\ncomplexity) from a problem book versus the ability to set tasks. **Setting \ntasks** --- this is extracting from the tangled, noisy, rapidly changing \nsurrounding world with a huge number of insignificant and clamoring details \nthe correct objects, assigning them types, described in the textbook. After\nthis, you can **solve the task**, which is formulated already in terms of\nthe subject domain of the working situation, moreover objects for solving\nthe task already received types of concepts of the Systems approach. However, there\nwill also be needed types of other transdiscipline, and it will also be necessary to well\nimagine types of objects of the subject domain itself --- the objects of these types\nin life also find not just. Systems thinking --- this is just a part of the complete\nthinking of an individual as a whole (including intelligence and practical skill).\nCompletely overcoming some work problems only due to Systems\nthinking will be impossible (miracles do not happen), but much easier, than without it.\nSystems thinking makes a person smarter, but not so much smarter\nthat quickly solve absolutely all problems.\n\nAnyway, **in** **life there are no tasks from a textbook, no** **even words**\n**from the textbook,** **in life \"objects from the textbook\"** **need to be** **identified,\ndetected, that is, set a task,** **“apply”** **book knowledge to** **life.** In the diversity\nof most different objects of the surrounding world in your\nproject/your situation you will need to find, for example, an object of the type \"target system\".\nBut there are thousands and thousands of objects, and in large projects\nsuch as the creation and production of an airliner project --- their many millions!\nAfterward, after assigning the type of the meta-meta-model (you know these types and\nwhat they are for because you have already gone through the state of “understood”) you can already in familiar\nterms from the textbook solve the set task.\n\nIf you need to know how many apples are in two piles, you need to guess that\napples --- the type of “countable objects from an arithmetic textbook”, and not the type\n“fruit: what is usually eaten.” If you want to describe the product\nyou are developing, then you need to identify, what objects in the world\nare for it super system (that is, assign to some objects type\n“super system” from our course), and what roles (also a type from our course)\nof agents (people, organizations) are interested in this system,what agents\n(most often today --- people) in these roles want from this system.\nAfter this you can put forward a hypothesis as to what system (let’s call it a target) can fulfill\nsome functions in this super system, so that it would satisfy the interests\nof the people you found (all this will need to be found in life: some\nobjects, which you will assign these types from the textbook/types\nmeta-meta-model). Then you will document the hypothesis about the target system\nand super system at the moment of their\nfunctioning/operation/use/application in the form of a use concept\n(this is also a type --- a type of model, describing behavior\nof the target system in its environment, will be discussed\nin more detail further in the course, as well as in the course “Systems Engineering”). Real projects\nin the training course appear only here, and here comes the state of\n“mastered”.\n\nYes, you will have to engage in a work project right during the course,\nthis is a feature of the course. Roughly speaking, you will immediately ride not on a training\nbicycle, engage in a training project, but on a real bike:\nengage in Systems thinking for your work project.\n\nOnly at this stage the main skill of Systems thinking is trained:\nSystems modeling as conceptual (driven by types) attention\nfocus on the main/important in work projects and ignoring\nthe non-main/unimportant. This Systems modeling as conceptual\nattention focusing and holding (concentration) on the main and discarding\nthe non-main is needed to fight the complexity of the real world, to save\nthinking. It is necessary to be able to find a needle in a haystack: to choose with your\neducated/trained/tuned thinking important objects of the real\nwork project. Educated/trained/tuned thinking --- this is\nknowing/understanding and quickly able to correlate objects of a work project\nwith types of a meta-meta-model/concepts from the course on strengthening the intellect, in\nour case --- concepts of the Systems approach, primarily\nlisted in the section \"Basic concepts of the Systems approach\".\n\nThen you will contemplate these objects, and the types of these objects will\nsuggest, what else needs to be thought about, what else needs to be considered to issue\nthe most accurate forecast for the future situation in the project and\nplan the most effective actions that will lead to\nproject success.\n\nIn trainer tasks, there are greenhouse conditions,\nas nothing distracts from applying the course material --- neither\nabundance of insignificant details, nor the lack of important information, which needs to be found,\nnor emotional involvement in the situation. For example, you\nunderstand that you need to determine the method, which the agent uses, working\nin some unknown project role. But try to figure out,\nwhat method the boss yelling at you from this unknown for now role is using! \nMost likely, initially you will not be able to do this, will be distracted by the form, \nthe yelling of the boss, the situation of a very nervous conversation! \nHe yells as “operational manager”::role for operations management work::method, \nbecause you break his expectations for deadlines, or as\n“requirements engineer”::role in the requirements engineering method, because he cannot\norientate himself in how to live in a world without requirements, as he studied long\nand stuck in a long gone profession, requirements engineering as a work method having died long\nago? You need to respond to these roles differently, it’s not because of yelling \n“I’m the boss, you’re a fool”, but because of some problems in the project! \nIn trainer tasks no one will yell at you, there will be time to think --- this is not like situations \nin real projects.\n\nTrainer tasks definitely have a solution, but in life, in real\nprojects, the existence of an acceptable solution --- not a fact. Also not a fact,\nthat you are solving the correct problem. First, you need to set the correct problem\nonly later solve it!\n\n“Project learning” happens exactly here, the result of assignments \non the material of your real work projects will give the desired\nmetanoia: the brain neural network of the student learns to think systemically,\nSystems thinking after this no longer requires conscious effort in\nreasoning, including no effort required for linking its concepts to\nobjects of the surrounding world. This is the transition to **unconscious**\n**competence**, we can also call hitting the state\n“mastered” in learning Systems thinking **system**\n**metanoia.** After systemic metanoia, you look at the world, \nwhere agents-systems create some systems in long chains, performing some\nmethods/practices/cultures of work in some roles, and this happens\non many systems levels. And with this view of the world, this world will\nseem a bit less confusing (you already know a lot about the world! You\nknow the object types that you will find in this world!), there will be\nslightly fewer surprises, you will make slightly fewer mistakes.\n\nWill this help you in life? Yes, you will compete with other\nagents, who will not have this advantage. And you will not become a genius, but\nwill still become smarter, and this will give you a certain\ncompetitive advantage over other agents.",
    "da7707657f32dcea3f7e12f51eea0a93": "---\ntitle: Metanoia\n---\n\nLet's call this property of passing some threshold of understanding, after which it is difficult to remember the difficulties, **metanoia**. The word is amazing, try to write it in different cases, and even in the plural, you will get very interesting effects. This term came from religious practices and means \"a change of mind,\" a complete break with past and current thinking. You study and study in some seminary, and it seems like your thinking is not set up as expected by the priests. Then suddenly at some point, click—and you show everyone that you have the same thinking as is accepted among priests, from this moment you are \"real\" and not pretending. This was called \"metanoia,\" a small western variant of enlightenment. The word \"metanoia\" was recommended for use instead of the word \"learning\" by the guru of systems management Peter Senge^[<https://sardertv.com/metanoia-peter-senge/>], because the word \"learning\" in his view is already quite worn out and does not mean a fundamental change in the way of thinking as a result of education. He borrowed it from psychologists, who used it to denote fundamental positive changes in personality^[<https://en.wikipedia.org/wiki/Metanoia_(psychology)>]. We do not like the religious connotations of metanoia, but the phenomenon described by this word—\"forgetting the difficulties of learning\"—is quite secular.\n\nWhen metanoia has occurred, then in the new state of thinking, with \"new tracks in the brain,\" it is completely unclear to the person (or, more generally, the agent of different nature) what the problem was earlier, with \"old tracks of thinking.\" Imagine: I know that the Earth is flat, I argue for a long time that the Earth cannot be round, but at some point, I am convinced otherwise. And I, in my projects, initially automatically act as if the Earth is flat, then by willpower remember that rationally it should be round, then do it at the reflex level, and in the process see thousands of evidences of this roundness of the Earth. And at this moment I can no longer understand why I thought the Earth was flat. Rationally remember that I once thought the Earth was flat, I can. But to understand how I moved from the state of knowledge of the \"intuitive theory\" to the state of mastering the \"counterintuitive theory,\" I can no longer. And therefore, I cannot realize the educational actions necessary for me to achieve this metanoia of the roundness of the Earth in my students. But the very fact of paying attention to this passed metanoia (bringing it into consciousness) gives a chance to figure it out. The work of creating the correct exercises to achieve such metanoia in students is hard work but possible. Creating an adequate training course based on already existing theory can take a couple of tens of years, and if in addition to the exercises, a new theory needs to be created, then hundreds of years, like it was in the transition from the Ptolemaic to the Copernican understanding of planetary motion. All these discussions about the difficulty of creating a theory/explanations/knowledge and a training course to achieve fluency/metanoia in students' thinking fully apply to systems thinking, and to all methods of the intellect stack, and to applied engineering methods.\n\nSpecial attention needs to be paid to the fact that in the case of metanoia, it usually involves learning not any methods of thinking and action, but \"counterintuitive\" ones, which the brain resists strongly; it \"intuitively knows\" how things should be and actively resists the new knowledge! It is much easier to teach something anew, but if you have already caught somewhere \"folk intuition,\" then it will be very problematic to teach you something more effective and new: you will have to go through metanoia, and this requires a documented model of target thinking, organized into a sequence of exercises training course, time to pass these exercises, and considerable **concentration**—because all the intuition of the students will show that they are being taught some kind of madness! The chances of going through this metanoia \"self-taught\" are practically nil, unless you are a genius. Thus, you will not by any means be learning from a self-instruction manual the explanation of the roundness of the Earth if you adhere to the flat Earth theory. Your chance here is only to attend some courses where you will literally be forced to familiarize yourself with the arguments about the roundness of the Earth, and then also be trained (against your will! Simply forced!) for fluency in using this knowledge.\n\nCounterintuitiveness can await in the simplest actions. At school, they taught to jump over a bar \"scissors style\"— you run up and jump. But if you need to jump very high, then after the run-up to the bar, you need to turn your back and jump backward-upward (Fosbury Flop, invented in 1968^[<https://en.wikipedia.org/wiki/Fosbury_Flop>]).\n\n![](05-metanoia-6.png)\n\nThis is absolutely non-intuitive but allows you to fly over even a two-meter bar. You need enormous trust in the coach to start training such a jump—because at that moment it seems that many, many trainings will give the chance to overcome additional tens of centimeters \"scissors style\" or \"rollover,\" which is not the case at all. And then there will be metanoia: you will not understand why people still elsewhere jump over a bar not using the Dick Fosbury technique—even if you no longer remember that it was Dick Fosbury who started such jumps, and people began to jump this way just a year before the Moon landing in 1969. And it is about what people did for thousands of years: high jumping!\n\nIn thinking, there are such counterintuitive ways that allow thinking according to the sports motto: \"faster, higher, stronger,\" leading to \"high-performance sports.\" **Systems thinking** **is a set of specific** **counterintuitive** **thinking techniques invented by different people that allow thinking to be** **stronger (more universal and** **effective) than its previous,** **\"folk\"** **variants.** **In particular, systems thinking is primarily an effective way to manage attention in a project, it allows to template-like highlight in a project objects worthy** **of immediate** **attention.** **You will know what is important in a project even before you begin working on it!** **The concepts of systems thinking define types** **of important** **objects that you then need to find in** **the project, this allows you not to wander hoping that sooner or later you** **will come across something important, but actively look for and find this important thing.**\n\nThe main substantive metanoia of systems thinking is that you start to think of the world as consisting of nested systems in relation to part-whole, which also interact with each other, and some systems are created and developed by other systems, this is a creation relationship. In the third generation, this also includes the understanding of the evolutionary time scale and the inevitability of conflicts between systems of different levels.\n\nIf you understand the system not as \"any object that we consider,\" but as \"system from the systems approach,\" this turns out to be extremely counterintuitive, so it requires special training and subsequent long-term practice of such systems thinking.\n\nThus, \"intuitively,\" when trying to tell something (for example, about borscht, the Ministry of Attack, or a quantum computer), people primarily talk about the parts of the discussed subject (the components of borscht, the organization of the Ministry of Attack, the composition of the computer). In systems thinking, it is exactly the opposite: the discussed object-system is immediately declared a part, and the story is primarily about the environment at the moment of functioning/operation of the target system. This is the situation of lunch and digestion when it comes to borscht, the situation of attack in the case of the Ministry of Attack, the situation of using a quantum computer: borscht, the Ministry of Attack, and a quantum computer here will only be parts of their usage situations. And only after clarifying the system environment (what surrounds borscht during lunch and then during digestion, what surrounds the Ministry of Attack during an attack, what surrounds a quantum computer during its use), after the \"look outside the system,\" the subject of interest for the systems thinker will be the \"look inside,\" the system's parts. First—what happens outside the system's boundary, and only then—what happens inside! This is very, very counterintuitive!\n\nIn mathematics, the term \"intuitive\" is often replaced by the term \"trivial\"—the ability to be repeated by \"any\" person (AI has not seriously worked with mathematics yet) in a given community, and non-triviality—the inability to repeat (thanks for discussing this issue to mathematician Roman Mikhailov). Demonstration of something interesting due to non-triviality makes this \"something\" trivial after a couple of cycles of interested training, because the definition of \"intuitiveness/triviality\" and \"counterintuitiveness/non-triviality\" implicitly includes the moment of time \"right now.\" Any \"counterintuitive/non-trivial\" of one generation becomes \"intuitive/trivial\" for another generation of thinkers. This \"triviality\" can well be added to the list of synonyms for \"intuitiveness.\" Intuitiveness/triviality and counterintuitiveness/non-triviality are \"moving targets,\" the assignment of these types to some objects is quite dynamic, the result significantly depends on time.\n\nWho knows, maybe today's systems thinking for future generations of people and thinking machines will be \"folk,\" \"intuitive,\" \"trivial,\" and it will need to be overcome, obtaining metanoia in a completely differently structured thinking. But so far, systems thinking is deeply counterintuitive in its current version, mastering it is difficult, metanoia turns out to be inevitable.\n\nIn our discussions, we use both the everyday and non-everyday meanings of the word-term \"intuitiveness.\" In everyday life, \"intuitiveness\" often means not the result of rational logical reasoning, but the use of \"gut feeling\"—getting the result of reasoning by insight, inspiration, enlightenment, and this result can be very non-trivial. We talk about such results of thinking that they are exactly the opposite—\"counterintuitive,\" that is non-trivial, hard to reproduce by different people, they do not belong to \"common folk knowledge,\" common thinking automatisms, typical intuition of the surrounding people, as well as one's own intuition. But in our course, we often refer to the second \"folk\" dictionary meaning of \"intuitiveness,\" when we talk about quick \"intuitive\" S1 thinking. We hope that from the context, students will understand which meaning was intended by the course authors in each case of using the term \"intuitive.\"",
    "3328bb2a457603e0bef58b2d21aa945b": "---\ntitle: Systems Creativity\n---\n\nSlow, \"formal,\" rational thinking, despite its merits, may encounter substantial problems, even when people are willing to spend adequate time on it. A well-formulated problem typically contains an explicit formal contradiction that needs to be \"resolved\" --- it's only at this moment that **creative** **thinking** is engaged, only then that one needs to \"sit and think\" (as opposed to \"recall and apply,\" which is routine, automatic thinking). Sometimes it's said that thinking emerges when problems need to be \"translated into tasks,\" i.e., to create a list of tasks that are clearly actionable and collectively solve the problem, resolve the contradiction, eliminate collisions.\n\n**Problem-solving through formulating and resolving contradictions** is inherent in both Eliyahu Goldratt's Theory of Constraints (\"evaporating cloud\"^[<https://en.wikipedia.org/wiki/Evaporating_Cloud>]), Heinrich Altshuller's TRIZ methodology^[<https://ru.wikipedia.org/wiki/Теория_решения_изобретательских_задач](https://ru.wikipedia.org/wiki/Теория_решения_изобретательских_задач)], and the systemic thought-activity methodology of Georgiy Shchedrovitsky's school^[<http://www.fondgp.ru/>]. All these schools of thought claim to be based on a systemic approach, hence the commonality of thinking techniques.\n\nWhere do contradictions come from? They can be of two types:\n\n-   **Contradictions in the sense of logical contradictions, formal incompatibility of statements within some logic.** It could be Boolean logic with two conflicting statements (x=3 and x=5, where both statements are simultaneously true!), but it could also be probabilistic Bayesian logic, where according to E.T. Jaynes' works, Boolean logic is a special case^[<http://www.med.mcgill.ca/epidemiology/hanley/bios601/GaussianModel/JaynesProbabilityTheory.pdf>]. Furthermore, irresolvable Bayesian-logical contradictions might also exist in Bayesian logic, in which case one has to compute using quantum-like logic as detailed in the works of Andrey Khrennikov^[<https://scholar.google.com/citations?hl=en&user=wdhkzPMAAAAJ&view_op=list_works&sortby=pubdate>, see a brief discussion on quantum-like rationality in <https://www.preprints.org/manuscript/202103.0395/v1>].\n-   **Contradictions/conflicts in the interactions of systems at different levels, leading to \"disorders\" and consequently to the complexity of systemic organization at these levels.** A good overview of how this is structured in biology can be found in the work by Wolf, Katznelson, and Kunin \"Physical foundations of biological complexity\"^[<https://www.pnas.org/doi/10.1073/pnas.1807890115>], 2018 --- and it’s best to read it along with the referenced literature for complete understanding. In 2022, these authors, along with physicist Vanchurin, suggested that these contradictions/conflicts between systemic levels, which lead to disorders at these levels and generate evolution, make the world/things/universe sort of a physical neural network that \"learns itself.\" More precisely, parts of the world (systems) learn some other parts of the world (systems), and the thermodynamic balance is maintained because knowledge in these well-learned parts of the world can be \"unlearned/forgotten,\" but evolution still prevails and other parts of the world acquire a lot of knowledge^[<https://artificialneuralcomputing.com/wann>]. Evolution primarily occurs with non-ergodic systems, i.e., systems with memory. At the slowest evolutionary levels, memory becomes digital, as it involves exact replication (without error accumulation), for instance, DNA is such \"digital memory.\" In the case of memetic evolution in humans, speech and writing serve as instruments to ensure memory and precise copying, allowing for the accumulation and infinite copying of knowledge without distortion. The same happens in technological evolution: principles underlying devices are reflected in their construction. The central dogma of molecular biology, stating that information flows from genotype to phenotype, from informational models in KB (design bureaus) to product samples in one direction, but in the opposite direction absolutely different ways of transmission (not \"biological growth\" or \"factory manufacturing,\" but mutations, engineering design, and other methods altering the genotype --- definitely not through copying phenotypic adaptations) was confirmed by ideas from physics-mathematics in the 2022 work \"Toward a theory of evolution as multilevel learning\"^[<https://www.pnas.org/doi/10.1073/pnas.2120037119>].\n\nThus, creativity can also be diverse: if it's about a logical/mathematical contradiction, one can re-describe the world within a single mathematics/logic framework, rather than multiple ones (by highlighting other objects of attention, other concepts --- switching to another \"logic\"), thus resolving the contradiction. For example, if you conclude that x=3 and x=4, you might consider the physical meaning of the statements and find that different units of measurement were used in the first and second cases. This is a simple case: describe the world using the same units of measurement to avoid contradictions! Another simple case: if you find out that the same person is both a physicist and a manager, it doesn't necessarily mean two different objects, but just two different descriptions. Describe skills as professional competencies, i.e., as role capabilities (mastery here will be part of the functional decomposition of personality, and personality --- a functional part of a person, their \"software,\" and there is also the organism, their \"hardware\"). People are described as agents performing roles --- and the contradiction is resolved.\n\nIf it's not a logical/mathematical contradiction but a conflict between systems at different levels, the behavior of these systems has to change. Much depends on how reasonable these systems are as agents. If it's a mechanical part, its design needs to be mechanically altered. If it's a cat --- with a stronger intellect, the higher reasonableness, it can be trained. If it's a human with strong intellect, high reasonableness, they can be \"convinced\" with rational arguments, change the \"software\" rather than \"hardware\" through neurosemantic programming (text!). This is detailed in the \"Intelligence Stack\" course. Changing the description won’t help here. If the conflict is that a virus, in its survival behavior, conflicts with the organism's need to survive, the solution will be the emergence of an immune system in the organism and variability in the virus, and a vast variety of implementations of immune systems and ways of virus variability to deceive the immune system. This is still an evolutionary solution, done by evolution, though it takes many years (sometimes billions), the immune system emerges as a \"mental-like brain\"^[<https://www.frontiersin.org/articles/10.3389/fnint.2023.1057622/full>]. This is all life, Darwinian evolution, where the genome is in each cell.\n\nAn alternative solution is engineering, in the course of techno-evolution. If you're an engineer and find a contradiction in the surrounding world, you can create a new mechanism or alter an existing one, propose a smart mutation to a meme. A meme --- is like a \"general kind of genome,\" a meme/meme --- like a gene/gene, but not necessarily in DNA. These solutions are thought of not only by people; they can arise spontaneously, evolutionarily in the course of memetic and techno-evolution. For instance, meme-viruses (ideas that people consider interesting to spread) can be similar to regular viruses: controlling human behavior (such viruses in nature, changing host behavior, are called \"zombies,\" and there is rabies --- a virus changing the infected individual's behavior towards aggression, increasing the virus spread). John Doyle says humanity needs to think engineeringly about the memetic immune system issue before memetic viruses destroy humanity^[<https://www.youtube.com/watch?v=Bf4hPlwU4ys> and more links about his ideas in <https://ailev.livejournal.com/1622346.html>].\n\nAn example of an engineering solution that reduces mortality is democracy. When democracy (elections aiming for bloodless change of dictator) didn't exist, power either didn't change at all (autocracy of some kind), or the issue of power was resolved by civil war --- as \"God is always on the side of the big battalions\" with equal armaments and knowledge level. Power changes occur, but many people perish in the process. There came an engineering solution: instead of combat, conduct voting to determine who holds more power^[<https://ailev.livejournal.com/1616855.html>]. This can be considered \"evolution,\" but the solution was conceived and approved by people, hence it can be seen as one of the social engineering solutions. However, there can be many different options for solving a problem; societal complexity increased, and problems haven't vanished---the problems are just different with democracy! But with power changes, people no longer die just for the power to change; monarchies on Earth have significantly decreased, and in many cases, monarchs no longer wield real power, as power is elective. Sure, this \"virus of bloodless power change\" hasn't reached all brains on the planet, but progress is evident. Why change power at all? Karl Popper provides an answer: if power suits everyone, that's fine. If it no longer suits, there was a mistake in the previous choice, then democracy provides a bloodless way to rectify the mistake. The error correction mechanism of public choice --- that's the essence of democracy!\n\nEngineering solutions as \"smart mutations for techno-organisms\" rely on the knowledge that contradictions/conflicts at systemic levels are inevitable, but optimizing these contradictions/conflicts for all systemic levels, leading to an overall reduction of disorder/frustration through increased complexity of systems, can be achieved through engineering design, not trial-and-error evolution.\n\nSystems thinking doesn't dictate how to resolve contradictions. Our course contains no \"creative thinking methods,\" no solution tables, ways to conduct brainstorms, or imagination development techniques (they might be in other courses. For example, creative imagination development techniques are used within the applied methods of systems engineering under the general name TRIZ).\n\nThere are no miracles; solving problems here requires no less and no more thinking than any other school of thought. Systems thinking allows understanding and accepting the inevitability of problems due to disorders/frustrations from conflicting interactions at different systemic levels and addressing these problems without losing sight of the entire system, both a few levels above and within it. Systems thinking helps not to lose the forest for the trees, the tree for the leaves, and the leaf for the plant cells.\n\nSystems thinking allows purposeful identification of contradictions, demanding their resolution, documenting these solutions. Pointing out important contradictions, not missing them, and not ignoring them --- that's the task of systems thinking. Afterward, one needs to take the head (and often a modeller in a computer), and think, using various other methods.\n\nHow does it work? Agents in the real world don't clearly understand how to dissect it into objects. Here's a metaphorical example --- try naming the objects you see and identifying the important ones:\n\n\n![](02-systems-creativity-3.png)\n\n\nThen the cycle of rapid hypothesis generation and slow, labor-intensive critique works. Hypotheses/explanations/knowledge/theories generation proceeds in the form of generative models --- such models can predict the future state of the world, and the critique comes via discriminative models, where one can discuss class membership (thus finding a \"logical contradiction\"). The picture shows the cycle of cognition/creativity, which is detailed in the \"Intellect Stack\" course, even without this picture. However, different elements are discussed in various ShSM courses; we note here that at the formalization step, systems are taken as significant objects, the essence of the systems approach mainly influences this step in the cycle:\n\n\n![](02-systems-creativity-4.png)\n\n\nThis all means that systems thinking implies not only informal reasoning within connectivist/neural network/S1 representations and their expressions within prototype theory (metaphors), but also quite formal reasoning using symbolic representations of theoretical concept theory, where we talk about objects and relations, all of which have types. Don't be misled by the natural language text of our course: the text of the course has quite strict typing. Thus, we don't confuse \"method of work\" with \"work,\" \"system\" from the systems approach and \"system\" from Stanislavsky's system. In systems thinking, the primacy lies in dealing with objects and relationships using logic, not metaphors and analogies using artfulness. **Follow the types of objects and relationships, they are important!**\n\nSometimes in systems creativity, \"invention\" is particularly highlighted --- a system is dissected into parts (different systemic levels are distinguished within it) in various ways, one of which necessarily includes a functional description (behavior expected from the system when used), and the other --- a constructive description (those material/constructive objects from numerous objects of the physical world, which can be adapted to embody functional objects from the functional description: affordances/fittings) under constraints from the spatial location of these parts and the cost of assembling affordances into a working system.\n\nThis is sometimes called systems creativity, \"modular synthesis\" (affordances --- these are modules), and invention. In any case, systems thinking allows for detailed discussion of these \"inventions,\" thorough discussion of the essence of creativity.\n\nInterestingly, engineering also discusses \"foolproofing\": the impossibility of incorrect use of certain items. Systems creativity then includes ensuring that the \"fitting\" not only fits the necessary function but also doesn't fit the unnecessary one^[<https://sketchplanations.com/affordance>]:\n\n\n![](02-systems-creativity-5.png)\n\n\nAnyway, systems thinking is primarily creative thinking. Of course, it's not reckless creativity or random ideas. No, there is a place for randomness (mutations are the basis of evolution) in systems thinking, but we strive for these to be smart mutations, the ones most likely to lead to a system’s success^[<https://arxiv.org/abs/2206.08896>].",
    "5594c8e70ebfe50a925d10515c461c33": "---\ntitle: Can You Teach Thinking?\n---\n\nKnowledge, including knowledge of Systems approach, fits into the head in steps, from simple to complex. How to identify these steps? What needs to be trained, what unusual mental work for the brain should be made habitual?\n\nHere we need to introduce the concept of **counterintuitiveness**. We live in an intuitively understandable world. Our brains run on the intuitive, inexplicable mental rails of \"fast thinking S1\" according to Kahneman, like a tram—on the same route. We were born, and these rails gradually laid themselves in our brains (in the case of many years of work, this is called \"experience\", in arts— \"exposure\", in literature— \"reading\"), and thinking rides on them and usually bypasses the effective modern ways of solving problems known to today's civilization, making it impossible to solve complex problems. Because new knowledge does not get into \"exposure\" and \"reading\", you just haven't seen it yet! You can't remember what you haven't memorized! You can invent, but there's no guarantee that you will always invent something truly effective and brilliant.\n\nWhere do our intuitions come from, how do we know that this is exactly how we should think? Most often, we can't even remember where we first learned that teeth are brushed with a toothbrush and paste, and not a chewed twig of the sacred Udumbara tree, as was customary in India. Reflection (awareness of past thinking situations) leads us to suppose that there can be other options besides intuitive ones—counterintuitive.\n\nLook out the window—and there the Earth is flat. When we are told that the Earth is round, what do we respond? \"That's not true, look out the window.\" They reply: \"What are you talking about? The Earth is round, look at the horizon...\", but we persist: \"You are talking about unnecessary things, what's beyond the horizon, but everyone can see that there's nothing there. No need to talk about the distant horizon and what's beyond it, let's talk about Earth, here it is—the flat Earth.\" All life intuition shows that the Earth is flat, people walk on it with their feet, and the feet certainly know that the Earth is not round! But somehow, some people, concerned with scales not only of 10 kilometers but of 1000 kilometers, get the thought of \"Earth—round\", they begin to think so—and find no contradictions in such thinking^[<https://theflatearthsociety.org/>].\nAfter some time it turns out that besides Earth there is also Space with its vacuum, spaceships fly there \"always falling but never falling\". This is already incomprehensible because with the idea of a flat Earth, the flying of spaceships in a circle with sufficient speed so as never to fall—this is impossible to understand. There is a discrepancy with experimental results/measurements. The explanations about the round Earth are counterintuitive, they do not correspond to the \"folk theory\" of the flat Earth, but it needs to be taken seriously (i.e., build your projects based on it) because it gives better predictions than the theory of the flat Earth.\n\n**The concept** **of \"counterintuitiveness,\" which can and should be heard as \"anti-popularity\" and \"culturalism/practicality/method-following,\" is important. Every time problems arise with understanding how geniuses work, possessing some art that no one can understand and after understanding repeat and improve, deeply counterintuitive explanations are to be expected.**\n\nThe tram of thought in geniuses runs on completely different rails than those laid in the brains of most people. Finding these \"other rails\" in a genius's brain, laying them in your own brain, and running your brain tram on them is usually very difficult.\n\nA genius somehow, often not consciously, did something completely different from everyone else, he just started to do something contradicting the intuition of everyone else, and he began to succeed. And everyone else acts intuitively, \"in a folk way,\" \"like everyone,\" and they fail. And while at the level of the genius's consciousness, or those who try to model the thinking of the genius, it has not come to conceptual thinking, what exactly this counterintuitiveness is, new objects have not got their names-terms, you cannot transmit this knowledge to other people, you cannot teach anyone this knowledge.\n\nYou cannot teach a director of development (here we give, of course, a conditional job title) of a large holding, a dancer, or a politician if you do not conceptually know at the level of consciousness what he should do in his work, following the best methods/practices/processes/culture/style/strategy. After all, one must teach what he should think about, what concepts to use in thinking. The director of development must be taught, he should not just grow by himself like a tree in a forest. From hunting and gathering talents, we need to move to sedentary agriculture, growing talents. This is engineering, changing the world for the better. Moreover, such an approach allows later automating the work of the development director, shifting some of the work to AI, or shifting some work to employees if a corresponding AI has not yet been found. But this is possible only if you understand what part of the work can be shifted and what cannot, how to describe the shiftable part of the work of enterprise development, why this developmental activity should be conducted at all, what its essence is, what concepts will be involved in thinking about the development of this large holding.\n\nHow does art differ from engineering? In art—once you got lucky, inspiration came, a masterpiece turned out. Another time you were not lucky, there was no inspiration—there will be no masterpiece. In engineering (hardware, software, genetic, enterprise, dance, personality, community, etc.), we cannot do so, **we need to work** **consistently well, we need** **the best (and not any) methods** **of thinking, giving invariably excellent results** **in typical cases.** **And only from this already high** **'typical'** **level of quality** **in typical cases** **does art begin, distinguishing brilliant breakthrough works** **in atypical cases.** **Of course, there is no art** **without** **art, but still in engineering we want stable success and most often realize this desire!**\n\n**Wishes** **'not to limit creative freedom with templates'** **are not suitable here: people massively inventing mental bicycles are very likely** **to get not the best solution.** **Arguments** **'creativity instead of templates'** **are true** **only for individual** **geniuses,** **and even they in rare cases. In** **most other cases, template mental solutions** **give** **high** **quality while minimizing mental effort.** **It is unlikely you are the very single** **genius, and you have the very single** **case** **'beyond the limits known to civilization',** **when you can demonstrate the highest art of working with solutions invented by you personally** **'beyond textbooks'.** **Most likely, you do not understand very well how you think, what** **thinking methods** **you follow. This needs to be urgently corrected: understand how you think and learn better thinking methods.**\n\nAgain, geniuses are not called all \"creators\", but only those who show the quality of thinking better than the best known at the moment (state-of-the-art) mental templates—and after that their solutions become templates, not genius. These newly appearing in civilization templates of good thinking must be immediately made explicit, documented (preferably in the form of training courses as an adequate form of documenting thinking methods, but instructions/regulations/corporate standards can also be used, and consider how easy it is to teach those agents for whom they were written. Learning to work by regulations is bad, they are only good for checking how they already work!).\n\nIdentifying templates/\"executing algorithms\" in methods/styles of good thinking is the work of a **culturologist**, describing them—a **methodologist**, forming these templates into training courses—the work of a **methodist/instructional** **designer.** For more on these (and many other) typical roles in engineering some mastery in humans and AI, see the course \"Personality Engineering\".\n\nHow is non-reflected, unconscious art or craft transmitted? A student looks at dozens, hundreds, thousands of works of masters, learns to understand the slang of professionals as they learn their native language (without textbooks and dictionaries, just \"from conversations\"), constantly looks at how real masters work and tries to copy it—right according to the saying \"monkey see, monkey do\". This is the term \"experience\" (joking here about \"twenty years of experience—is a one-year experience repeated twenty times\"), \"exposure\" (which many had in college, then they froze in their development). Then, three out of ten students start having some correct rails for their professional mental trams in their heads, and they begin to think fast and make few mistakes in typical situations. And seven out of ten—do not develop, and they continue to make many mistakes in typical situations. Learning art or craft is not \"transmission of conceptual knowledge\", it does not use human rationality.\n\nWe need nine out of ten students to be able to learn a new method (say, the method of Systems thinking). It is quite possible to imagine that there will be one out of ten students who is completely incapable (severely undereducated in childhood, \"from the jungle\"), or extremely lazy, or just did not allocate enough time for learning due to some insurmountable external circumstances (for example, got sick), so we will not teach all ten even in the best case. But teaching only three out of ten students won't suit us, we need to teach more, nine! This means we need to take such counterintuitive knowledge for teaching that it cannot come quickly to the minds of students, make its minimal compact and understandable description (conceptual! So that it can be expressed in words!), and then somehow transmit it to the students, so it fits into their heads. The question is: is this possible in areas traditionally considered \"art\", and considered impossible to teach rationally? Yes, it happens all around! This is the **way of Western civilization: turning** **\"art\"** **(including the art of thinking)** **after its modeling and rationalization** **into quickly** **conceptually** **transmitted mastery from person to person in the course of structured learning.**\n\nWhen you find the right concepts and the right mental operations with them, and the right exercises for speeding up the \"automation\" of thinking (repetition of mental moves helps translate slow, conscious laborious thinking S2 into fast, effortless S1), then after learning students won't even understand what was difficult for them to do before learning. They will think fluently in a new way (S1), but will be unable to recall what \"folk rails to nowhere\" their thinking rolled on before learning (S1) and how hard it was to think during learning (S2). Therefore, masters (yesterday's students) will be amazed by the behavior of untrained novices, including their own behavior in the period before mastering one or another method/culture/style/method of work. Ask a child why he was very bad at multiplying just a year ago—he won't be able to explain why. Now multiplication is quite natural for him and does not require the exertion of all his mental efforts as it did a year ago. But give him to multiply matrices—and everything will repeat: first, it will be incomprehensible, then difficult, then again it will be poorly remembered what was incomprehensible and difficult there.",
    "9398874df34b2b16341ff1c5a9d5c16f": "---\ntitle: Peculiarities of Answers to Training Course Questions\n---\n\nIn practice/activity/work/engineering according to some method, an **assumption of an open world**^[<https://en.wikipedia.org/wiki/Open-world_assumption>] is usually made: \"that which is not explicitly described is simply not described, but it could exist in the world.\" Vasya has three apples. Can it be expected that he has four apples? Why not. You know that he has three apples, but nothing is said about the fourth apple. He might not have it, but he might. Vasya might even have a hundred apples; you were simply informed of three.\n\nThis is significantly different from the **assumption of a closed world** in textbook problems: \"what is not mentioned simply does not exist.\" Alan has three apples. If he has a fourth one? No, of course not. It is said that he has three apples, not two and not four!\n\nTraining questions are most often composed from the assumption of a closed world, while experienced engineers and managers, assuming an open world, when answering these questions, start to invent increasingly unusual and improbable circumstances, logically leading to incorrect answers. Their task in this case is not to train themselves but to point out an error in the author's answer.\n\nAt the same time, the power of systems thinking is implicitly used. From the situation described in the question, we think outward, to the environment. But since the environment is not explicitly described, we significantly change it, make up things: \"if we are talking about Jupiter, and the rocket pilot is not afraid of the enormous gravity and plays the saxophone in the methane atmosphere, then your correct answer would be incorrect, and my incorrect answer correct.\"\n\nThe desire of an engineer to invent increasingly exotic circumstances, making the most likely answer not too likely, cannot be overcome. He has been trained for this for many years! He must be able to imagine his system working in various environments, to consider various reasons that might lead to the failure of the target system --- and then change the system's design so that it continues to work. The only advice one can give to such an engineer: remember that **course questions** **are composed from the presumption of a closed world, and inventing** **\"possible unaccounted-for** **circumstances\"** **---** **is developing an open-world assumption, an engineering or managerial task rather than a task** **for brain exercise through answers to training questions/quiz** **from our course in systems thinking.**\n\nIndeed, the small likelihood of circumstances related to the formal correctness of the answer is irrelevant (even an extremely unlikely event can be formally correct, \"logical\" in mathematical logic) and formally \"mathematically\" the student can be right. But in educational life (not in the ideal world of mathematics!), generating such additional unlikely conditions from the assumption of an open world does not help to answer training questions, but only hinders this. In working life, on the contrary, accounting for various unlikely conditions can help; it is necessary to be able to imagine the various situations the future system, which you are just designing, might face and want to ensure its operation in various external conditions. It is essential to clearly distinguish these two situations: answering training questions during learning versus designing/scenarioing during a specific engineering, managerial, cultural project.\n\nSpecial attention should be paid to training questions at the initial stages of learning --- when the correct answer is not intuitively clear, not standard. **When** **a student** **knows the material poorly, they turn on** **a \"clever brain\"** **to change assumptions in the questioned material.** They look at 2\\*2 and start: \"It can be any number greater than 1.0 and less than 9.0, since we do not know how and to what extent the initial numbers were rounded. It can be anything in the answer that starts and ends with 2 since an asterisk does not always mean a multiplication sign. Often an asterisk means any number of characters. And it might involve symbolic multiplication, so the answer will be 22. And let's not discuss situations where the number system is not decimal, deal?\" Of course, they are smart and knowledgeable enough to suspect answer 4, but not confident enough to not assume additional pitfalls and make up some interfering circumstances.\n\nTwo out of ten people studying systems thinking are like this --- they did not read the course text (that is, they skimmed it diagonally from their smartphone screen when they had about five minutes), but they are good engineers or managers, they are articulate, skeptical about the course material (which is not bad, just skeptic thinkers), and they are usually the most active in the group. In exams, such active students with a \"clever brain\" demonstrate good knowledge of their work project and poor knowledge of systems thinking. Attribution of systems thinking types to work project objects does not occur, and a lively description of the project in the language of the applied systems area without demonstrating typical moves of systems thinking --- it only proves that mastery of systems thinking has not occurred, and there is no understanding of systems thinking concepts.\n\nThe result is two points in systems thinking (which does not happen in the School of Systems Management, there are no grades. But at MIPT it quite may be). At the same time, the student's applied knowledge can be excellent! But systematicity, that is, the use of systems thinking concepts in reasoning to manage attention in the project --- does not exist. Hence five points for applied thinking, and two points for systems thinking.\n\n\n![](07-peculiarities-of-answers-to-training-course-questions-7.png)\n\n\nThe goal of \"experienced engineers\" is often not so much to exercise in systems thinking and the use of its concepts, but to try to \"bend\" the proposed questions along with the very ideas of systems thinking, to test their strength with formal-logical \"common sense.\" These people make good Fair Witnesses from Heinlein: \"*Anne was standing on the diving board. Jubal shouted to her: - Do you see that house on the hill? What color is it? Anne looked and said: - It is white on our side. Jubal turned to Jill: ---* *You see, Anne did not say that the house is entirely white. And all the king's men won't make her say that until she goes and looks. But even then she won’t be able to claim that the house stayed white after she left*.\"^[[https://ru.wikipedia.org/wiki/Чужак\\_в\\_чужой\\_стране](https://ru.wikipedia.org/wiki/Чужак_в_чужой_стране)]*.*\n\nAnd remember that mathematically and physically correct answers can be systemically wrong: \"the house consists of molecules of the house\" --- this is absolutely correct in physics and mathematics, but in systems thinking, you will immediately be pointed out a reasoning that ignores system levels, and the error will be noted. \"A house made of bricks\" will also be bad. \"A house made of walls, and walls made of bricks\" --- that's acceptable. A \"clever brain\" will immediately start pointing out that the roof, porch, interiors, and house residents are omitted --- the house consists not only of walls made of bricks. A \"clever brain\" does not want to deal with what specifically is being trained by the training question. And in vain, one should simply consider: in questions --- a closed \"toy\" world, training some thinking operation from the systems thinking course, not training wit. Questions on understanding the text, knowledge of terminology and main ideas of the text, rather than on demonstrating ingenuity. Not olympiad problems, but training questions.\n\nHow could we fight this? **The obvious** **wrong move** **is to strictly formalize** **the questions, achieving unambiguity of the correct answer.** The more formally the \"textbook\" questions are posed, the further they are from real life! Life is not formal-logical; life is probabilistic! Interested in general patterns, most frequently occurring cases, not unlikely exceptions and special situations! If we consider the question of what to drive a nail with --- a hammer, a stone, a pillow, a hand, a microscope, the answer here should be \"a hammer\" (and not \"a hammer, a stone, a microscope, and a hand too, because the hand could be in a steel chainmail glove\"). But if the task is \"what to drive a nail with if you find yourself on the road, and there is no hammer?\", then it will have other answers! Questions are situational, they are not absolute, their solutions are probabilistic; in educational tasks, the answer with the highest probability is required, not the absolutely correct single one.\n\nThe most reliable way to avoid all these changes in situational assumptions (\"task condition adjustments\") instead of answering the question for the purpose of training some course point --- is to use the situation in your own project for solving tasks. One cannot easily adjust real life in terms of conditions, so the task will have to be solved, not the situation adjusted to a proposed solution, as happens with educational tasks. Therefore, a significant number of tasks in our course are not answers to questions with \"traps\" for \"folk thinking\" but a proposal to model your work projects. Work ones --- those at work, not \"educational projects\" or \"course case studies.\" All from life, moreover from your life, not proposed by the course.\n\nAll the educational **questions** and even work **assignments** **---** **educational/training** **and work-related, not exam-based**. They provide merely an occasion to understand and discuss the course material; formalism of \"the only correct answer\" is not crucial for them and even incorrect.\n\nAnother source of potential \"formal illogic\" in systems thinking is that the systems approach was presented in standards and public documents, from which we draw its provisions. In each such standard and public document, the set of systems approach concepts is presented not as a whole but as a small piece. These pieces, taken together, do not represent a logically consistent system of concepts and their relations. In various standards and public documents, different terminology was used. This was partially overcome when translating into Russian, but not completely. Each standard has its small set of concepts, not claiming completeness and consistency with other sets of concepts, only \"for the purposes of this document,\" and no more. Often the standard in the terminology section starts like this, \"for the purposes of this document, the following terms and definitions apply\" --- a warning that the authors of the standard do not claim the all-inclusiveness of the term.\n\nThe probabilistic nature of concepts and presentation in a natural (most often English rather than Russian) not-too-formal language only adds uncertainty. Translation into Russian also does not add formality to the presentation. In real \"life\" projects, it is also very difficult to compile a consistent systems description of the situation (in real projects, different people use different versions of various methods, including different versions of systems thinking methods), so using systems thinking will be much harder than in specially composed training questions. Therefore, the problems are intentionally not too formal; they are training; no \"trick\" is expected on the specificity and uniqueness of the situation, but good knowledge of the course material is expected.\n\n**If you do not quite understand what is required as an answer to a** **question** **or what the result** **of modeling** **in the table filling assignment should be, ask yourself these questions:** **\"What does the course author want to test in my understanding? What does the course author want to train me in?\"**",
    "64b59c1319eb8700c1b1badf92ba6c14": "---\ntitle: Apples from Life, Apples from Problem\n---\n\nIn the real world, we see specific physical objects that we deal with:\n\n-   If it's about the task of invention, then this is a physical object (which can have roles, constructs, places, etc.). Functional objects exist only when they are embodied by a construct in the necessary space-time location.\n-   If it's about tracking the states of the method's objects, then it’s “work products”/artifacts (physical objects, but some of these objects can be documentation, and then we are interested not in the physical object itself but its description). The states of the alpha as an object of the method can only be tracked through work products, not “speculatively.”\n\nPhysical objects (including work products) can be touched, kicked, pointed at with a finger (a symbolic finger if they are too small), loaded into a cart (if they are not too large). They have space and extend over time (beginning to exist at some moment and disappearing at another).\n\nIn the real world, we see constructs or artifacts “apples” and actions with them as objects of different methods, for example, “eat apples,” “count apples.” Apples are thus represented by two different types of objects from two different theories/knowledges/ontologies/disciplines/models/explanations/algorithms of two different methods:\n\n-   Type “food” from the method “eat” (food::“object of the method” eat::“way/method of work”).\n-   Type “countable object” from the method “count objects” (“countable object”::“object of the method” count::method).\n\n**If you don’t know the method of work, then you don’t know the type of object (it will be a type from an unknown to you theory/ontology/explanations of an unknown method). If you don’t guess the type of object as the type of the object of some method, then you will not understand what and how to do with this** **object ---** **this will be a problem, “I don’t know what to do in this situation: which objects to consider and what to do with them to get the desired result.”**\n\n**This is the connection between life and** **the course or** **textbook: you must figure out here what type from the meta-model (subject area) and meta-meta-model (fundamental disciplines: physics, mathematics, logic, including the types of objects from the Systems approach) from the textbooks encountered in life.** **And if the method says that an object of some type should be ---** **then you need to actively search for this object (and sometimes create it if you can’t find it) and then bring it to the state dictated by the theory of the method, by the actions set by the algorithm of the method, that is, work according to the method. Remember: the method is performed, and the discipline/theory only describes the method, so you also need to guess what the method is and what tools are hidden behind the discipline, what skill will be required ---** **and then act!**\n\nHere we need to tell a story about apples from a problem and from life, for example, in this variant^[<http://yandex.ru/yandsearch?text=%D1%8F%D0%B1%D0%BB%D0%BE%D0%BA%D0%B8+%2F%2B1+%D0%B8%D0%B7+%2F%2B1+%D0%B7%D0%B0%D0%B4%D0%B0%D1%87%D0%B8&lr=213>]:\n\na teacher who had read about the didactic function of visual aids came to \\... school and believed that everything had to be taught using visual aids. And they were working on an addition problem: “3+5.” She brought three apples and five more apples, laid them on the table, and said, “Children, you see here --- one--two--three --- three apples, and here --- one--two--three--four--five --- five apples. Now I combine them, how many apples in total?” The children stared at the apples, drooling, but didn’t understand the problem. The second day passed, the third --- a record: usually, they passed this in one day. She came to the teachers’ room and complained that she was using new methods, all visually, but there was no result. And on the fifth day, a hand stretched from the back desk, and a student said, “Ma'am, I now understand: these apples you laid out on the table are not real --- they are apples from the problem.” --- “Yes, and what?” --- “Well then, ma'am, that's a completely different matter.” And from that moment when the class realized that these were not real apples but apples from a problem, everything clicked. Why? When you put real apples --- what needs to be done with them? They need to be eaten. But for counting, you need drawings.\n\nHere's more of the same^[[https://ru.wikipedia.org/wiki/Золотой\\_ключик,\\_или\\_Приключения\\_Буратино](https://ru.wikipedia.org/wiki/Золотой_ключик,_или_Приключения_Буратино)]:\n\n--- Let’s do some arithmetic\\... You have two apples in your pocket\\...\n\nPinocchio winked slyly:\n\n--- You lie, not one\\...\n\n--- I say, --- the girl patiently repeated, --- assume you have two apples in your pocket. Someone took one apple from you. How many apples do you have left?\n\n--- Two.\n\n--- Think carefully.\n\nPinocchio squinted, --- thought really hard.\n\n--- Two\\...\n\n--- Why?\n\n--- I won't give that Someone an apple, even if they fight!\n\n--- You have no aptitude for mathematics, --- the girl said sadly.\n\nAbout physical bodies from a physics textbook (the discipline/theory/thinking of physics, documented in the textbook), we know that with the presence of gravity they fly::move::method in a parabola. Acceleration and mass are the characteristics of physical bodies as objects of methods/ways of movement. If you throw a stone and can't relate it to a “physical body” as an object of the method “mechanical movement,” you can't say it will fly in a parabola! There are no textbooks describing the flights::“mechanical movement”::method of just stones as objects of the method! Richard Feynman in his physics teaching notes regretted precisely this: physics students worldwide cannot relate their excellent textbook knowledge to the surrounding physical world phenomena^[<http://www.abitura.com/modern_physics/Feynman1.html>].\n\nThere are countless artifacts by which types of method objects (alphas) “from the textbook” are realized, you can’t write textbooks about each of them! Therefore, textbooks write about alphas as typical method objects: a short text from a textbook can thus be applied to thousands of life situations, textbooks are written at a certain level of abstraction, they don't describe specific objects and too narrow types.\n\nAlpha is not just a method object but only such a method object, changes of which are important for tracking during the project. Alphas are needed to manage attention to changes in the project. But the reasoning about the method objects and the fact that it's not easy to find these objects in life, even if they are described in the textbook, fully applies to alphas.\n\nAlpha is usually not very formally specified. Ontologists/methodologists insisting on strict and unambiguous formalization of the world remain dissatisfied with how alphas are defined. The alphas themselves appeared as follows: the OMG Essence development team asked the question: what is present in every software development project? What method objects change their states in every software development method (software process)? And in 2011-2013, they reviewed about 250 specific software development projects, arriving at the proposed set of 7 basic alphas of the standard (kernel in the terms of this standard, this set of “example kernels” from the standard we stopped using in our course, it is hopelessly outdated and very specific to software). And what they found, they found: no additional formalization, bringing to a single ontological type for alphas (the method concepts themselves, alphas, work products --- language in the terms of this standard, kernel objects are typed by language objects) was done.\n\nThe task of a thinking person is to match the description of method objects from the textbook as a type for playing them in life, work products as physical objects in their various hypostases, and descriptions from documents as work products. Only after this can theoretical knowledge from the textbook be applied to real-life situations. There is nothing more practical than a good theory (knowledge/explanations/discipline/ontology/algorithm) if you recognize objects with types from this theory in life, that is, if your attention can capture some corresponding objects from the surrounding colorful background of various objects in the project.\n\nAn example when the inability to work with types combines with ignorance of the basics of Systems thinking can be the discussion among active inference/pacragement approach developers (in which you change your world and self models in cognition but actively --- changing not only models but yourself and the world!). The concept of Markov blanket was proposed as a “system boundary,” but “strangely” --- the strangeness was noted^[<http://philsci-archive.pitt.edu/19726/>] and sparked a huge discussion^[<https://www.reddit.com/r/PredictiveProcessing/comments/rycjcg/commentaries_on_the_emperors_new_markov_blankets/>]. If the discussion participants were familiar with modern fundamental thinking, including Systems thinking, they would quickly find three sources of confusion (all are noted in our course as important for thinking):\n\n-   Confusion about whether the Markov blanket is a mathematical/mental object or a physical one (say, the boundary of a cell is meant geometrically as a mathematical object, or it's the boundary of a cell in the physical world, and then what it consists of and its thickness?)\n-   Confusion between a functional and a constructive object. Is the Markov blanket a functional object with some behavior, or a physical object or group that will demonstrate the corresponding behavior? Is the boundary of a cell with some behavior irrespective of what it consists of, or do we clearly understand that it's about the cell membrane, or a membrane “with everything attached to it inside and outside.”\n-   Confusion between the concept of **interface** and **interface module**. Interface --- is the boundary between two constructs/modules, ensuring their connection during work, while the interface module --- is a construct having two interfaces: one specified and discussed outside the system, and the other “inside the system.” Thus, the Bluetooth interface --- is the junction/boundary between two systems, the method of working of systems at this junction, and the objects of this method are described by the Bluetooth interface standard, while the Bluetooth interface module --- is some chip, having on one side the very Bluetooth interface, and on the other side an interface to the rest of the electronics inside the system, some pins through which signals and power go. And this is still not a complete description, as we did not touch the antenna question as an interface module: on one side it has the high-frequency electric signal interface of Bluetooth standard, and on the other side the interface of Bluetooth radio waves --- and this antenna either is part of the Bluetooth interface module or not. Discussing a living cell: is the Markov blanket there an interface (zero physical dimensions, “interface”: that which is between modules) or an interface module? Because in conversation it’s either the cell boundary on the outer membrane, or the cell membrane having both an interface to the external environment and another interface to the internal environment.\n\nAll these discussions could be greatly shortened using Systems thinking: quickly agree that for the discussion we need not one concept/type of Markov blanket, but a whole set of concepts/types: system description, system embodiment, functional part, constructive part, interface, interface module with two interfaces. Using the single concept/type of Markov blanket for all this --- is to delay the project for a long time due to total misunderstanding of what exactly is being discussed!\n\nUsually, those engaged in our course go through the following stages when studying Systems thinking:\n\n1.  **Understand nothing because they can't relate the course material** **to** **the world around them** **(that is, the types of objects from the course to the objects around).** Indeed, in their engineering, managerial, cultural projects there are no alphas as method objects changing their states during the project. And in the course, there is no description of work products they have in their projects: juicy grapes, thick crude oil, excited crowds, and angry headlines in political media, informational models of a building, and marketing staff skills. Moreover, every project is unique --- there’s nothing common in them (they all work with very limited kinds of systems tied to specific scales), and the course is the same for these very different projects (scale-free and as de-anthropomorphized as possible in its descriptions)! And these projects are not described in the course, specific examples from them are not given (**although in the literature the course refers to,** **these examples are many! Are you looking at that literature through the links? Examples are there!**). With a physics textbook at this stage it's exactly the same: no physical bodies are found in kitchen and production situations, and not one chapter of the physics textbook describes these situations! Strange questions arise like “what situations is what’s in the textbook applicable to” --- expecting that a situation will be found where for Systems thinking there will be a “target system,” and for mechanics there will be a “physical body.” But it’s not about “an obvious situation will be found,” but about simply performing the operation of assigning a type, as discussed in the course “Rational Work.” Further, in all courses, just various types are described, which need to be assigned to objects of the surrounding world. These are the types of different methods of work --- thinking methods, description methods, creation methods.\n2.  **Understand everything about the provided course examples,** **and about** **projects of classmates and colleagues,** **but still understand nothing about their own projects.** Of course, because others' projects are “projects from another problem” (remember, “apples from the problem --- they can be counted”), and their own projects --- are “real my projects” (“apples from life,” they need to be eaten!). That is, with types we work on others' projects, because we don’t know the details of these projects, “everything is transparent, it’s all like in the textbook.” If you don’t know the project details, not involved in it, you quickly find the main thing, ask questions about it, inclined to act according to the course's manner. You are focused because details don't distract your attention!\n3.  **Understand everything about their projects and others' projects. But don't do anything from what is understood,** **because Systems** **thinking is studied not to be applied** **(that is, to compile and fill tables with important for tracking in the project objects), but** **“for self-education and development,” “for passing the test”** **and so on.** Applying knowledge is hindered by bosses, routine, laziness, lack of like-minded people, no help in applying knowledge. This is true for physics as well. They will solve the task on static friction from the physics task book, but why it is so hard to move a table across the kitchen remains a mystery! Congratulations, you are an analyst, not a practitioner! Qualification degree in SSM --- “specialist.”\n4.  **Apply course material** **in their projects because it turns out to be of higher quality, easier, and eventually faster to work this way.** Very often, this happens only a year or two after getting acquainted with the course, after gaining some fluency in using Systems approach concepts. This was detailed in the first section of our course. With the physics textbook (or any other textbooks), it's about the same: it takes time to gain mastery in the method. Of course, this is not about the “ten thousand hours rule” for achieving mastery^[<https://vc.ru/flood/17116-10000-rule-not-work>], but usually for serious methods it’s about years of deliberate practice, not a couple of months. Our experience shows that for mastering Systems thinking, a couple of years are enough, but in that couple of years, you need to raise your experience in other fundamental thinking methods (to set the fluent work of the “types machine,” learn to hold yourself in rational thinking, raise the level of focus, and so on). It’s like in sports: after three months of training, the results usually won’t be visible, but after a couple of years of training, there will be substantial differences from “people on the street,” after a decade of training --- you can think about championships. This is the SSM qualification level of “practitioner.”\n5.  **Apply course material to organize the activities of other people** **on the scale of an organization or even a community.** More on this --- in the courses “Systems Management” and the upcoming course “Community Engineering.” Here, it's not just about organizing your own work according to some method, but organizing other people to work by the method. SSM qualifications here --- “master” for organizing work of people on the enterprise scale and “reformer” for organizing work of people on the community scale.",
    "d9d30f092e47a8b833de141ea27c2a43": "---\ntitle: Alternative Options for the Main Types of System Partitioning\n---\n\nFunctional objects, structural elements, allocations, parts of the total cost of ownership --- this is not the only way to see parts in a system. There are countless ways.\n\nHistorically, different schools of thought have identified system parts very differently:\n\n- ISO 15926 --- **two** main types of parts: functional objects, physical objects. Others can be introduced as needed.\n- IEC 81346-1:2022 --- \"at least\" **five** (function, product and component as a custom product, location, type as an arbitrary grouping by certain properties, and \"other\" --- which can include anything, such as the creators' descriptions: administrative, logistical aspects related to the creators in the creation column, rather than aspects of the system itself). In our course, we mainly rely on this option, adding recently appeared cost as \"other\" and not particularly highlighting \"grouping by type\" --- it is indistinguishable from \"other\" (and the standard suggests making an agreement for \"type\" and \"other\" so the team understands what was chosen).\n- Kosyakov, Svita, Seymour's book \"Systems Engineering. Principles and Practice\"^[<https://www.ozon.ru/context/detail/id/28160736/>] --- **two** types: functional element, component (structural object).\n- SMD methodology --- **five** (processes, elements and connections, external functions, morphology, material)^[<http://webcache.googleusercontent.com/search?q=cache:CLJYHzTDPj0J:www.mmk-documentum.ru/glossary/6>]\n- ... and so on^[<https://en.wikipedia.org/wiki/View_model> --- here are examples of various options for enterprise architecture systems], on average 3-7 main types of parts, aspects of the system. However, \"aspects\" are also called differently everywhere: structural aspects, types/kinds of descriptions performed on a given type of parts as subjects of different methods in different systems thinking schools. And everywhere it is stated that this is \"at least,\" that is, it is recognized that we are only talking about the main options that cannot be overlooked. And there can be many partitionings, they are made as needed, different in different projects. But the main partitionings are done in all projects.\n\nIn our course, we follow IEC 81346-1:2022, accepting that systems have three main aspects --- functional, structural, and allocation, adding a fourth aspect: cost, which is already a de facto main description in the digital twins approach^[<https://ailev.livejournal.com/1570630.html>], and continue with \"and these four are the minimal number of aspects/variations of partitioning as the basis for various types of descriptions, based on different partitioning methods.\n\nWe also remember that the candidate for the next, fifth, main partitioning, which has not yet been included in engineering standards as \"mandatory,\" but is increasingly encountered in real projects --- this is work breakdown structure from project management. It is needed to easily connect product partitioning and work partitioning and check: each job is done with a product, and there are no products without jobs and jobs without products. Difficulties with its introduction:\n\n- Project management is very popular in engineering, but it is based on the old concept of the \"life cycle\" (a project implies a single passage through the system's life cycle, today this is replaced by creating an MVP and then continuous system development). Project management requires upfront planning, which is impossible for most projects. Details --- in the courses \"Methodology\" and \"Systems Engineering\".\n- There is a huge confusion of work methods and the works themselves. Work methods in engineering have become the subject of situational engineering methods and standards for engineering methods were released, which were dedicated precisely to the \"life cycle model\". This development led to the work being cases, broken into sub-cases, but most importantly --- it does not require planning from the very beginning. This means that it is impossible to present a WBS (work breakdown structure) in a project at some point, unless it is a project of quite a narrow class --- it is most often about construction projects. And the understanding that the partitioning of methods is more fundamental (work planning is based on understanding the methods used) than work partitioning is not yet widely spread.\n\nIn the presentation \"8D digital twin experience\" by SNC-Lavalin at the June 2020 digital twins conference, 8 aspects^[<https://www.youtube.com/watch?v=OjH1OPezfak>] were presented, D there stands for dimension, \"measure\" (another word for aspect, emphasizing the fact that the system exists as an object in many dimensions). Everything here is exactly the same as it was a decade ago in work on product lifecycle management (PLM), but today it's already about digital twins, not PLM, as the focus is not only on creating the system but also on its operation, and therefore, engineering data is supplemented with asset data, and the ultimate goal is autonomous operation (without a human, somewhere in an absolutely deserted area) based on a \"single source of truth\", the digital twin as a model of the system supporting agreed various descriptions of both the target system in its operational environment and the creating system. Note that so far this remains the \"second generation systems approach,\" as multiple versions of the target system are not provided, meaning not just a single passage of the system's life cycle but continuous development of the system:\n\n- 1D metadata, documentation (texts). We remember that in mechanical engineering, 1D-modeling refers to the physical modeling of a system's functional characteristics, but in the digital twins' world, the system's 1D aspect means something entirely different.\n- 2D drawings (where \"regular 2D electronic drawings\" still exist, \"native files\" from CAD --- we remember that digital twins thrive on construction sites, and design methods and tools develop very slowly there, with 2D representations still found everywhere)\n- 3D information models (this is a representation of the physical form/geometry/arrangement of the system indicating materials and many other characteristics)\n- 4D \"movie\" of construction/assembly over time, adding a plan/schedule for construction or assembly to the 3D model\n- 5D is resources, material status/cost, adding cost\n- 6D is operation, real-time data (and we have moved from the enabling realm to the operation realm, and from this point, it is accepted to talk not about the PLM system, but the digital twin of the already created physical system)\n- 7D is live streaming, transmitting a video stream of the working target system and its environment (from cameras, from satellites --- separate from real-time data from sensors, as it's huge volumes of data).\n- 8D is analytics, predictive systems of machine learning (ML predictive data)\n\nIt is clearly visible that the basis here is not so much dynamic work method determination followed by planning but directly planning the work for creating the system --- it is assumed that this planning is possible. All this is mainly done for construction: \"design once, build once, project/design modernization and building modernization are far outside the project's framework.\"\n\nBut the trend is obvious even in this narrow class of projects: there are always more than the four aspects we proposed (including arbitrary groupings by types and \"other\" if there were not enough types), and even these four partitioning options can be complex inside themselves, not \"one aspect --- one description --- one document.\" And these aspects in pure form are usually not found, they are often tightly intertwined with each other (\"hybrid\"). Systems thinking recommends untangling hybrid descriptions, restoring the initial objects of interest/important characteristics, determining the objects of work methods of different project roles. And, of course, using multiple names for the same systems in these hybrid descriptions --- just to not confuse but untangle the hybrid descriptions.\n\nOften, the hybrid appears because some product partitioning at the next system level is suddenly made functional, \"jumping between times\" --- partitioning in development-time is suddenly continued as partitioning in operations-time. This needs to be tracked, as \"automatic jumping\" can lead to errors, which we will consider later in the course.\n\nSuch \"jumps\" from type to type of system parts are many, leading to various types of errors: the placement partitioning (for example, breaking the house by floors) suddenly turns into product/structural partitioning (breaking by units of equipment on the floor). Or an engineering document suddenly transforms into a summarized-specification for procurement, and procurement prices come to the forefront. Is this possible? **You can do anything if you understand what you are doing. If you don't quite understand, then it's better not to do it --- and in any case, you must understand which aspect of the system you are discussing, what type the object-system under consideration is: functional? structural? placement? cost? other?**\n\nFor different roles in the project, the system will be presented in its different aspects partially, following the method of a particular partitioning option, but in systemic transdisciplinary thinking, it will remain holistic --- in terms of object types and relationships of these aspects (role and function, structure, embodiment, and composition, etc.). **System parts are highlighted in the physical system by attention, led by knowledge of transdisciplinary meta-meta-model types and domain-specific meta-models (we can also highlight metaU-models as in textbooks and metaC-models as in regulations). Different system partitions for one system --- this is simply the result of different criteria for highlighting parts with attention!** **And then based on the parts of the system held by attention, we construct various aspect and (even more often) hybrid descriptions of the system.**",
    "412570421689530d09483f39208145cb": "---\ntitle: Mismatch of Functional and Structural System Decompositions\n---\n\nPartitioning a system by different types of parts, which will be the subjects of methods for different design roles, also ends up being different because \"the system is in the eye of the beholder,\" or rather, in the eyes of one not just watching, but working according to the method. Each partitioning with its way of highlighting objects from the world for attention is convenient for discussing some subjects of interest in the role's work by its method, but inconvenient for discussing others.\n\n![Image](06-mismatch-of-functional-and-structural-system-decompositions-56.png)\n\nIn working projects, system boundaries are usually chosen so that the functional/role part, product/structural part, and placement occupy the same place in space-time, as shown in the picture as a whole cube. But if you simultaneously start dealing with how such a system works (its roles, functional parts, and their functions), what to make it from (structures/modules, product/structural parts), how it is composed (places/placements), and what the costs are (cost parts), you will find that sometimes the functional parts, product parts, and places in it fully coincide (and they will be called \"subsystems\" — since subsystems are systems too), but sometimes there will be no such coincidence — and this is intentional, it's normal!\n\nFor example, TRIZ (theory of inventive problem solving) enhances the ideality of the systems invented in it by performing several different functions (remember: a function is the behavior of a functional/role part of a system during the operation of its supersystem, that is, the function of a system is the function of the system in the supersystem, the function of a subsystem is the function of the subsystem in the system) with fewer constructs — in an ideal system, all functions are performed by zero constructs (there is no construction at all, but the role functions are performed!). TRIZ directly calls such a situation important, using it as a basis for inventiveness. It's immediately clear that one construct can perform multiple functions as affordances, thus participating in the realization of various roles from the functional partition: \"— What is the use of this picture on the wall? — This picture on the wall has great use. It covers a hole in the wallpaper.\"^[E. Uspensky, \"Uncle Fyodor, Dog and Cat,\" <https://youtu.be/qPeUokgTRik>].\n\n![Image](06-mismatch-of-functional-and-structural-system-decompositions-57.png)\n\nUtility/purpose/function/method (all behaviors leading to results — the transformation of some method objects into some target states) can be performed by various \"constructs-in-roles\" — you can nail both with a hammer and a stone. But both the hammer and the stone can perform the role of both a \"nailer\" and a paperweight, even in the same project. For instance, a carpenter nails a nail with a hammer-nailer and then places this same hammer, but already as a hammer-paperweight, on a paper sketch of the construction being assembled so that the sketch is not blown away by the wind. Two functions, one hammer — although these roles are performed at different times. But the case of performing different roles by one construct at one moment in time is also quite common.\n\nIt is impossible to guarantee that the system/functional partition, as well as the product/structural partition and spatial partitioning, coincide. In nine cases out of ten, they may coincide, but you will have huge problems in the project with the remaining one case out of ten if you don't take it into account!\n\n**Do not confuse** **roles/\"functional parts\"** **with** **constructs/products**. Do not confuse the role of Prince Hamlet and the construct of Vasily Pupkin, even if during the performance they are one and the same, coinciding 1:1. If you talk to Vasily Pupkin backstage, calling him \"Your Highness,\" and on stage, address Prince Hamlet with \"how are your wife and kids?\", people around will look at you strangely, and Vasily Pupkin will be very puzzled in both cases.\n\nWe have already considered a teapot, which has only two products/parts/constructs (body and lid) and quite a few functional parts (capacity, spout, filling hole in the capacity, handle of the capacity, lid, handle of the lid, steam vent hole).\n\n![Image](06-mismatch-of-functional-and-structural-system-decompositions-58.jpeg)\n\nIt seems that it is difficult to confuse functional and structural parts in a teapot? Alas, it’s easy! For example, you have received a list of functional parts and want to manufacture them all. You might ask one factory to make the handle of the lid and another factory to make the lid if you haven't figured it out. Look at the picture of the teapot — it’s absurd, right? But if you have never seen a teapot and are working with project object lists (unspecified which) and planning deliveries — you will definitely have this sort of mistake.\n\nLet's consider the example of scissors and what happens if people confuse functional parts (operating time roles, working with the environment according to their purpose/function/method) with structural/product/modular parts (creation time, worked over by creation systems for their design and manufacturing).\n\nFor scissors, engineers come up with different shapes for the handle and blade block, thinking of the handle and blade block as functional parts. They discuss the handles and blade block as physically existing (the handle is held, its length and diameters of the finger holes and smoothness, as well as the sizes of the finger rest on hairdressing scissors are designed^[<https://mustang-professional.ru/parikmaherskie-nozhnitsyi-s-uporom-zachem-nuzhen-upor>], the blade block cuts — its length, strength, and sharpness, the opening angle are designed). If procurement managers perceive the scissors as consisting of such functional parts as products/modules, they will try to order the manufacture of handles and the blade block separately: handles from a company knowledgeable in ergonomics, and the cutting block from a factory that knows how to make knives (the term \"scissors\" actually derives from the word \"knife\"). Engineers will be shocked, as they start thinking about scissors for manufacturing and assembly purposes as consisting of modules/working products: two solid pieces of metal of special shape, connected by a screw. One can only order constructs/products/items/materials, while the handle and blade block of scissors are just role/functional elements — their role is not played if there are no constructs/products/modules assigned to these roles! Constructs in scissors will be only two halves of the scissors (and also the screw). If the handles and blade block are made separately as constructs and then somehow connected, it will be a poor and unreliable engineering solution. Here are the scissors at the moment of \"how to make\" (the result of modular synthesis: constructs that will perform the functions of the blade block and handles):\n\n![Image](06-mismatch-of-functional-and-structural-system-decompositions-59.png)\n\nManagers in situations of mismatch between functional and structural parts initially heed the engineers' arguments, but then... they look at the assembled scissors, see them in action (operation time) the handle and blade block — and again try to do something separately with them not at the moment of \"play/performance/work\" (when the scissors are assembled and used — the blade block cuts, and they are held by the handle at that moment), but at the manufacturing moment — the manager does not care about usage time, he considers himself responsible for manufacturing! That's why managers need to keep attention not only on the creators but also on the target system at the moment of its use!\n\nMost often, the manager tries to separate the work of assembling the handle and blade block, although when connecting the scissor halves with a screw, it is fundamentally impossible to separate the work of the handle and blade block. The intermediate mistake here is that the manager's attention (usually an operations manager) is only on \"resources and work,\" not on work methods. Yet work is needed only to implement some work method, and the work method should bring some objects to the desired states. Engineers think this through; managers do not, hence the mistakes, and the image of the manager as a complete idiot in the engineer's eyes.\n\nOr the manager might create a catalog of handles and a catalog of blade blocks and then try to force the engineers to release these supposedly \"scissor parts\" as spare parts. The list of errors and misconceptions here is endless, and these mistakes will not stop: managers constantly find role \"blade block\" and \"handles\" in the engineering documentation and try to handle them as assembly/structural units.\n\nThe truth is, in scissors, different design roles observe two different partitionings: one — functional decomposition (\"analytical\"), and the other — structural/modular synthesis/assembly (\"synthetic\"):\n\n![Image](06-mismatch-of-functional-and-structural-system-decompositions-60.png)\n\nNote the prefixes before the same names. They denote different types per IEC 81346-1: 2022: \"=scissors\" is a type of functional object, and \"-scissors\" is a structural object. If the names coincide, it is impossible to tell from the name alone whether we are talking about functional or structural scissors, discussing usage time or manufacturing time: it is required to either indicate the prefix or infer from the context, and if the context is insufficient, always ask for clarification.\n\nThe target system is unified as a functional part, and it is also structural (completely coincides), but further \"functional structure\"/\"system partitioning\" and \"modular structure\"/\"product decomposition\"/ \"structural partitioning\" can vary significantly.\n\nIn engineering modeling languages, the concept of the \"iron\" system as a description of the embodiment of role/functional parts by structural parts (formerly called \"architecture\" before architecture had its own subject of work on optimizing the coherence of constructs/modules to obtain acceptable architectural characteristics of the system) as well as in enterprise modeling languages, functional and structural parts have different symbols, representing different types of these objects. If you do not understand the difference between objects of different types, using modeling languages becomes incorrect and harmful rather than beneficial. Many managerial errors come from attempts to make managerial (logistical, disconnected from functionality) decisions about functional parts when, in fact, their authority is limited to decisions about structural parts (they plan creators' resources for creating and developing structural parts).\n\nIf in classic project management you make up-front (that is, predetermined when all manufacturing details are already known) schedules of the embodiment/implementation/manufacturing of constructs/modules (say, finalizing the descriptions of modules-containers in software engineering) and the implementation of functional parts (in programming, for example, they may be called \"features\") — they will be absolutely different, but both can make sense! **The main thing is** **that these are the creators' decisions** **on which** **construct parts** **realize** **what required functions/work methods for the system's operation, thereby starting to play some roles (i.e., embodying functional objects). Usually, this requires describing** **both functions (behavior),** **and functional parts (role parts that perform the behavior/function), and** **structural parts/modules/products/items, and where all this is located** **(composition), and cost parts (how the total cost of ownership is distributed, and at the same time the cost of creation).**\n\nIn complex cases, both functions (behavior) and functional parts (role objects that behave in some way) are modeled separately. In simpler cases, either functions/behavior or functional/role parts are sufficient — but never only structural parts/products/modules, because the subject of interest \"how it works\" should always be discussed, it cannot be skipped. **\"How it works,\"** **functionality** **(what benefit the system brings to the supersystem, what service the system provides to the systems in the environment)** **as** **an area of interest** **is the main area/zone of interest** **in** **modern** **systems thinking, the main subject of interest, the most important characteristic of the system!**\n\nThe importance of functional partitioning is emphasized in the most modern studies, where systems thinking is used to explain phenomena such as evolution and life. The functional aspect is introduced through the concept of affordance^[<https://en.wikipedia.org/wiki/Affordance>, see also <https://arxiv.org/abs/2110.14602>, <https://www.activeinference.org/>], implying the unity of the agent and the construct object used by it for its purposes (performing some function) suitable for performing the required function from among many objects of its environment. The agent understands what function an external construct object can perform, and the word affordance emphasizes the \"subjectivity\" of functionality; its assignment depends on the agent, who imparts some desired function to a functionally neutral physical/construct object of the environment in the target system, thus making an **invention**, that is, guessing which constructs can perform the required function — this is \"to invent,\" to select a construct for a known function, modular synthesis — this is \"invention.\"",
    "8265cfaa0753adeba8243a72b943e31f": "---\ntitle: Fundamentality/transdisciplinarity of Systems Thinking\n---\n\nOnly after discovering the target system in its environment (the first step of attention in systems thinking is always outside the boundary of the target system!) as a \"black box\", can one then look inside this \"black box\" and see what subsystems must exist so that their interactions provide the system's function relative to its environment. Only the second step of thinking can be inside the boundaries of the target system, the first step is always from the boundaries of the target system to the environment! If you do not know what is required from the system as a whole, describing the parts of the system and their interactions will not help you. If you do not know, you need to measure time with your sensor, or air pressure, or water temperature, no discussion of the sensor's internals will help you. But we know the role of the \"sensor\"? Isn't that enough? No, it's too general a type, in the previous section we already discussed that too general names do not help, we need to figure out what exactly needs to be measured, with what accuracy, how much the measurement could cost and how long it should take, in what format and where to transmit the measurement data. This is all about the sensor as a black box. And only after these clarifications can we discuss from which functional parts this sensor must be made to provide the needed function, and then look for affordances in constructive objects to implement the functional device system idea.\n\nWe will need the following concepts:\n\n-   **breakdown** of the **system** (and there will be four main ones, which we will describe in the next subsection). It’s important that breakdown as a hierarchy of part-whole/composition relationships belongs to the physical world, it really exists. If you have gears of a mechanical clock hanging on the wall in your room, these gears are related to the clock as parts to a whole. And these are relationships between real objects, it is not a description of relationships! We distinguish breakdown from the description of the breakdown - it is information (model) about parts and wholes. In life, of course, very often \"breakdown\" refers not to the breakdown itself, but to the description of the breakdown, and even more often - a document with a description of the breakdown. But it’s one thing to have a clock divided into a case, gears, dial, hands, springs, and another thing - a computer file containing a description of this breakdown. The breakdown is in the clock itself, and in the file - the description/model/information of the breakdown.\n-   **description** of the **system** - in the simplest case, it will be a description of the breakdown, but descriptions can be very different. For example, functional (role-based) breakdown gives functional parts of the system (subsystems). Using the knowledge of these parts, we can describe some flows (of energy, substances, information) between the parts at one or even several system levels, obtaining a \"schematic diagram\". Or we can describe some physical characteristics of the system as a whole, depending on time and the set, and the state of the subsystems (so-called 1D modeling). The main thing to remember here is that, in addition to breakdown descriptions, there are many other descriptions.\n\nAnd here we again face the fundamentality/transdisciplinarity of the systemic approach: many different project roles are present in system-related projects, which work with very different subjects of methods in different ways, and each of them, guided by their role interests/preferences and creatively realizing them, will offer their own version of the system description, advantageous for the realization of the preferences of this particular role to the detriment of the realization of the preferences of other roles.\n\nIncluding **roles will offer** **their** **vision of the system breakdown** into parts. The system will be the same **(they will agree on it when making the usage concept), and the division into parts from different roles - different.** **And then these parts (even if they agree on** **what they are) can be described in very different ways.** **And, of course, during the discussion of the system concept -** **agree that all these different system descriptions (including different descriptions of breakdowns) correspond to one system, not different ones.**\n\nSomeone::role is interested in **the functions of parts** during operation::time and will say that the teapot consists of the functional parts of the container, the pouring spout, the filling hole in the container, the handle on the container, the lid, and the handle on the lid, and also the steam release hole in the lid (otherwise, when closing the wet lid, water will splash out of the spout), all this is \"for what is needed\". Another::role talks about the fact that the teapot consists of only two **details** (that is, non-disassemblable parts) in the **design** of the teapot, which need to be manufactured because their subjects of interest/important characteristics lie in the manufacturing time of the teapot, the subject of interest here is the design, \"what to make it of\". A third::role says that the lid and teapot should be stored nearby, it would be better if the lid were right on the teapot, objects of interest in **placement**, \"where in the Universe are the parts of the working teapot located\". A fourth says that the main thing in the teapot is its **cost**, so it would be better not to make it out of gold and not too fancy a shape, to make it cheaper to form, and then it should not break and not lose heat, so as to avoid repair costs and make the operation of the teapot cheaper (and here part of the descriptions relates to the time of operation, and part - to the time of manufacturing).\n\nThe fundamentality/transdisciplinarity here is that the systemic approach initially agrees with the multiplicity of system descriptions at each system level and is ready to work with these descriptions, coming from different applied/private/subject methods (material science, tea culture, dishware production, etc.) with their different knowledge/disciplines/theories/algorithms and tools supporting this knowledge. Systems thinking \"beyond disciplines\"/\"at the basis of thinking about disciplines\" all these methods of work of all these very different project roles, which employ very different applied methods:\n\n-   Systems thinking takes into account **different types of descriptions that we make** **for systems** **at each system level**, because due to emergence, new properties need to be described at each new system level. We already said that the description of the work of cells in the muscles of a dancer is absolutely not the same as the description of his performance, the description of the work of a battery in an electric car is absolutely not the same as the description of the movement of this electric car from Moscow to Vladivostok, the description of people's thinking methods is absolutely not the same as the description of the work methods of neurons in the human brain. Systems thinking, as the use of fundamental/subject-independent/transdisciplinary concepts of the systemic approach, takes into account all these applied descriptions; it is common for reasoning about them; it is transdisciplinary in relation to the descriptions of individual applied methods. We always use it, regardless of the applied subject area.\n-   Systems thinking takes into account **different types of descriptions that we make at one system level**, because different project roles have different interests in systems at this level and to satisfy these interests, they need to build some applied models of these systems that help them predict the desired system behavior. Some project roles want to know how exactly the system works within itself to perform a role/function in the supersystem, while other project roles want to know what the system is made of/designed, third are interested in where all these parts of the system are located in the Universe, fourth are interested in financial questions regarding the system, fifth are interested in work on creating and developing the system (that is, the behavior of the creators of the system), and so on - over all subjects of interest of all roles.\n\nSystem descriptions are carried out by very different methods and help very different applied roles reach an agreement regarding the system, work methods for its creation, regarding the work itself, and resource use, as well as the system development. System descriptions not only are performed by different methods of these descriptions but also support the work of various applied methods because systems thinking as a method of thinking with its set of concepts is \"beyond\" (trans-) this multitude of descriptions, systems thinking does not disappear when discussing questions of other disciplines, it permeates all reasoning in the project - and thereby allows reconciling all these system descriptions into a non-contradictory whole. \"To reconcile all these descriptions\" means that different applied roles (of applied types of engineering, management), united by systems thinking, **agree** on what system needs to be made, as well as on how successful it turns out to be, whether the decisions made are justified.\n\nIn conditions of modern labor division in complex projects, visionaries make their rational decisions, developers - their decisions, architects and \"security officers\" - their decisions, engineers of the internal production platform - theirs, managers also make roughly the same set of decisions with roughly the same role division, only regarding organizations in the creation graph. Systems thinking - is part of the methods of thinking the intellect stack, so it does not \"turn off\" when applied reasoning of all these roles takes place. Systems thinking helps to keep the attention of all roles on important project objects, on which agreements will need to be reached. Systems thinking highlights contradictions in descriptions and raises the question of reaching agreements on these collisions in front of all roles participating in the project. Descriptions of systems thinking do not replace applied descriptions; they define types for applied descriptions of very different other disciplines used in the project. Each role cannot say what other descriptions need to be made, and then what to do with these descriptions in terms of resolving contradictions. Each role deals only with its own descriptions, and systems thinking tells that there are many descriptions, prompts which of them are the most important and cannot be omitted, and also forces everyone to agree on these descriptions.",
    "3f26f53067d7096fce41e5a2d46a7c53": "---\ntitle: Alphas and Artifacts/\"Work Products\"\n---\n\nOMG Standard\nEssence^[<http://www.omg.org/spec/Essence/>]\noffers a special type of functional objects for monitoring the change in project state — **alpha** (ALPHA). If we want to coherently think about how far the creators have advanced in creating and developing the system, then according to the OMG Essence standard, we need to focus our attention on alphas, which they define as method items, rather than any arbitrary objects in the project.\n\nOMG Essence is a standard for describing development methods, one of the latest standards of so-called method engineering^[<https://en.wikipedia.org/wiki/Method_engineering>]\n, and later, situational/situational method engineering^[<https://ailev.livejournal.com/750878.html>].\nThe main difference between OMG Essence and previous standards of method engineering (there have been many, all hopelessly outdated) is that:\n\n-   It is created not for the convenience of method developers (method engineers), but for the convenience of those using the methods described in it. Descriptions of methods according to this standard are convenient to use in work, while descriptions of methods according to previous standards were convenient to develop but not very convenient to use in method work. The key point was that the standard proposes tracking the execution of the method through checklists that control the passing of method items through some expected set of states. It becomes immediately clear to the one applying the method what to do: it is necessary to conduct method items through states according to checklist points.\n-   The standard includes not only a set of domain types \"methodology\" (language in terms of OMG Essence), but also an example of the highest level description of modern software development using these types (kernel in terms of OMG Essence). Previous standards of method engineering were limited only to the set of types (language) and did not provide an example of using these types (kernel).\n\nIn our course, we recommend using OMG Essence, but we only take the language from it, not the kernel example described in it — precisely as required by the standard, because for each new development domain you need to develop your kernel, not take the software development method description from the standard.\n\n**Alpha, according to the standard, is an important method item that changes its state during the project. Alpha is needed to explicitly model this important method item as an object of collective attention, requiring state monitoring during the project.** The method is characterized by its knowledge/theories/explanations/algorithms that describe the method items, which will change their state in the course of applying/engaging the method during the work of the craft and toolset of the agent implementing the method.\n\nAlpha was named by the authors of the OMG Essence standard as \"ALPHA\" because any word was needed for the method item. Therefore, a short word was chosen for the object \"something important for the project that changes its state\" to avoid confusion. Long after the term “alpha” appeared in the OMG Essence standard project, developers came up with an acronym for ALPHA, but this decryption is absolutely unimportant, we will not even mention it here (just invented to somehow justify the choice of the term, referring to \"project health\", also an arbitrarily taken metaphor).\n\n**Alpha is a method item whose states are important for the project so much that it is necessary to collectively monitor them throughout the project.** The project as a whole is considered the team's work through the sum of all methods used in it. This cumulative method is called **method/process/practice** **engineering** or **engineering method** (engineering process); sometimes exploitation and even manufacturing are not included and they talk about **method development/development process**. For us, this is a tautology, as engineering is itself and a method, but in language, they often confuse work by method and the method itself, so when they want to emphasize it is the method and not the work by method, they add some synonym of the method or indicate the specifics/specialization of the method, adding \"type\". So \"labor\" is a method, but it is sometimes used as \"worked\" in everyday use. When they want to emphasize it is the method, they say \"type of labor\" or \"method of labor\". This is mostly done with terms for which you cannot say \"work method\", for example, \"labor of work\", \"engineering work\", \"activity work\", \"service work\". With \"process work\", \"practices work\", \"culture work\", \"style work\", \"strategy work\" this does not happen.\n\nThe method item can be both an abstract object (description) and a physical functional (the method works with functional objects during the agent’s working time executing the method, and they exist only when their role is performed by constructs), so the OMG Essence standard offers the type **work product/artifact** (work product, artifact, i.e., an object of artificial origin) for material objects generalizing the concepts of the document (material information carrier) with descriptions of the object and construct for the functional object. \"Work product\"/artifact is what we work on in the physical world, what can be found in the surrounding world. Although the physical realizations of some alphas are hard to imagine as “products” (for instance, the alpha \"external project roles\" is realized by living people, it is difficult to think of them as \"work products\" or “constructs”), the sense remains: even if \"products\" are living people, you need to work on them, change their states during the project. Organizational units (teams and collectives as teams of teams, where there is at least one intelligent agent — human, AI-agent, or robot, or even an organization as internal organizational units) are also constructs.\n\nAlso, be careful with words: product/item/system and “work product”/artifact are still different concepts: products are usually physical, and work products, despite the physical nature of documents, can be descriptions. If you receive a lab report on this batch of milk instead of a bottle of milk in a grocery store, you will be surprised, but for a milk creation project, it would be quite a work product. “Work product” is still not “product”.\n\nThe peculiarity of alphas is that they track the states of method items with different domain areas of their private methods, as well as various ontological types, and do it very informally. For instance, the alpha of the target system (e.g., a building) in the simplest case can have\n\n-   a state of \"conceived\" when it does not have even a detailed description, possibly no concept of use, no team assembled, the building project formally not yet started, no resources allocated for development!\n-   then comes the state of \"design developed\" — the building as a physical object does not exist, but only the building description exists, detailed enough for its construction,\n-   then it can be in the state of \"built\", that is, the building is ready (intentionally skipping engineering rationale, sales of building spaces, etc.)\n-   then the state of \"operated/used\"\n-   then the state of \"modernized\". Not specifying any sub-states of items of the major repair project, cosmetic repair, etc., it's just important to emphasize that after the building has entered operation, something can still happen to it, and later it will again return to the state of operation/use — the alpha reflects the states of the method item of creating the system not just as a \"chain of transitions between states\", it is a full-fledged graph of states, with cycles, conforming to the concept of \"continuous everything\" (primarily — continuous commissioning, not only creating MVP of the system but also its development).\n\nIn alphas, the state names of the method item are given through the names of smaller methods for changing the state, but these methods are given as results of works from these methods — transitional verbs in past tense (“door opened”, “door closed”, where opening and closing are methods of working with the door).\n\nFor example, Vasily Pupkin, when being onboarded into a project team by some method (most often this method in terms of bringing people onboard is called onboarding^[<https://en.wikipedia.org/wiki/Onboarding>])\nshould accept the role of the financier of the customer (an organizational opportunity of the financier of the customer should appear) and say \"yes\" and sign the documents in response to the question \"to be or not to be?\". The alpha \"customer’s financier\" is needed to track the state of the object \"customer’s financier\" throughout the project:\n\n-   we recognize that \"the need for a customer’s financier is acknowledged by the team\", the first state is always the hardest, most often it's “nothing was there, and now we know what should be”\n-   the \"description of the external project role of the customer’s financier is formulated\", in fact, this is a description of the financing method of the project by the customer,\n-   the \"organizational unit for the customer’s financier role is selected\", in reality, it will be Vasya Pupkin (when designing states, it’s impossible to write that Vasya Pupkin will be chosen for the role of deputy head of the financial service of the customer, so we speak about the type of the object)\n-   \"the performer of the customer’s financier role took the role\", it’s Vasya Pupkin’s state, who was informed that he is now the customer’s financier, he knows what to do, and agrees to work by the method described in the role description.\n-   \"customer’s financier cooperates\" (here “cooperates” means an important state after performing leadership practices — there's no past-tense transitional verb, as usual), meaning Vasya Pupkin is already working on the project — saying his \"yes\" and signing off things, not delaying anyone in the project.\n-   “all works of the customer’s financier are finished”, Vasya Pupkin left the project.\n\nThe project team gradually advances the alpha \"customer’s financier\" through these stages, applying the onboarding method (it doesn’t matter that the role is external, not internal — external project roles need to familiarize with the project’s accepted work methods), as Vasily Pupkin without the onboarding method team's work will go drinking beer and forget about the project. The team remembers it needs to ensure that both internal and external project roles are played by someone, and conducts work for this — as the work cannot be done \"in no way\", it defines this method/way and clearly tracks the states of method items: models the project situation as a set of alphas.\n\nWhat will be work products here? The thing is, the state of an alpha is defined/monitored (in the OMG Essence standard the term is “witnessed/evidenced”) by many work products, i.e., documents with role descriptions while there is still no selected role performer, and later by Vasya Pupkin himself. Work products evidencing the state of an alpha will have to be described when describing the states of a method item — but usually, the alphas correspond to metaU-model (as in textbooks of the domain), and work products significantly depend on the enterprise situation, this is already a description of the metaS-model (as in enterprise standards).\n\nThe method description as operations transferring alphas/method items from one state to another as method work is performed splits well: using a method to bring something to a specific state can be thoroughly described as having its alphas. Detailed descriptions will be in the course \"Methodology\", table forms of modeling work methods in projects (working processes, practices, work culture, etc., the number of synonyms is impressive) and using various information systems for this modeling will be provided.\n\nWork products/artifacts evidencing the states of project alphas are different in all projects, and work methods and thus the items of these work methods with their states (alphas) remain more or less the same, with minor variations — and this greatly saves thinking. The external role of \"customer’s financier\", responsible for “allocating and executing the target system procurement budget”::method, will be in nearly all projects, but in one project this state will be taken by Anna Pavlovna, in another by Vasya Pupkin, in the third by Vitaly Viktorovich, all working in different positions at the customer’s organizations. The thinking about them will be arranged the same, in functional terms of the method and its alphas/\"method items\", not in terms of constructs — these different people as role performers. Moreover, even if one project evidences “role description” by the work product \"customer’s financier instruction\"::document, and another by \"standard methods for external work roles\"::document, not much will need to change in thinking.\n\nHow to know in what state the \"nail hammerer\" is in the project? Look at the “work product”/artifact performing its role: initially, it will be project documentation, and later (after being implemented by stone or microscope) the physical object embodying the nail hammerer itself. The alpha \"nail hammerer\" may go through various states in the project:\n\n-   needs identified, usage concept understood (work products here will be in project documentation, and a specific document needs to be indicated where this can be read — in projects, nothing is trusted “from the air, by rumor”! Not recorded — means doesn’t exist! Brain is a poor memory for a project, more reliable information carriers are needed)\n-   having specific functionality but still not chosen construct (the work product here is still project documentation, possibly different documents),\n-   selected and still not purchased (these can be different documents again, like electronic documents in the procurement information system),\n-   purchased, (work product — the nail hammerer itself in the form of a hammer or microscope, stored in a warehouse)\n-   issued for work (work product — the nail hammerer itself),\n-   tested in work (work product — the nail hammerer itself).\n\nThis will be in the attention of project participants, these state changes will be tracked, and alpha states documented in project work products.\n\nAlphas do not necessarily characterize the state changes of the target system during the project. No, they can also witness state changes of the systems of the environment, as well as the states of the creators in the creation graph. Systems thinking — it applies to all project systems (but not detached from the project! If you don’t want to make anything, that is, you don’t have a project, system thinking won’t help you), the target system is just a system at the start of the collective thinking coordinates, the main object of attention for all project participants. But the attention of project participants is also retained on other systems, alphas help model these systems and their descriptions — to monitor their state changes during the project.\n\nExamples of the most important alphas (essentially indicating the kernel in terms of the OMG Essence standard, we here offer a more universal variant than in the standard with fewer alphas):\n\n-   system embodiment (typically this is the target system, emphasizing its physicality, tracking readiness/embodiment level in the physical world, while the alpha is a tricky ontological object allowing to model the system embodiment as existing still in the form of raw materials or unassembled components, untested, not yet commissioned, including indicating the system embodiment as already operating),\n-   system description (in real life state changes of the system description can be tracked by various work product documents, including database records),\n-   way of working (way of working (W)), functional behavior description of the system (if inanimate system — called \"function\", if intellectual or collective creator — \"method/way of working\"), this is operating time of the system.\n-   system works (this relates to the operating time of the embodied system, as the system creator works make another alpha! The state of works is evidenced by some Gantt chart or list of works from the project management information system, issue tracker).\n\nThese four types of alphas are worked with in enterprises as projects for creating and developing systems (remember that \"service enterprises\" also have target systems, though they may not be their own) using various methods over various method items:\n\n-   commerce/promotion methods (main item for these methods: clientele::\"created and developed system\" — as a set of enterprise clients),\n-   business methods (main item for methods: investment::\"created and developed system\" — as a set of enterprise investors),\n-   and methods for systems engineering at the proper level (not all of which are even called classical \"engineering systems\", for example, \"craftsmanship\"),\n-   systems management methods (main item of the method — organization), including organizational management (team engineering tuned to some work method) and operational management (resource load for work and verifying real work progress).\n\nAgents in the organization performing roles for all required project work methods move their works by these main alphas through their states during the project.\n\nAlphas as an ontological object are very complex, in part due to the fact methods work with descriptions, the tie to the physical world is challenging (even documenting different states of a complex method item will be in different documents, they are difficult to monitor), objects in different states can be called differently and even considered different objects (eggs, caterpillars, pupae, butterflies — these are stages of the same butterfly, but alpha can monitor them even before eggs — as gametes and zygotes of parents!). Ontologists here are holding their heads, but overall such an informal approach to monitoring state changes of important project items fully justifies itself. Alphas exist to model the complex graph of state transitions of complex method items — including modeling the states of method items of such a super-complex method as \"engineering process\" as a whole or even \"enterprise work process\" as a whole.\n\nIn the OMG Essence standard, alphas and the work products/artifacts evidencing them are depicted with different symbols: alpha resembles the Greek α (but this actually means nothing, just a pictogram \"alpha\", indicating \"important method item, state changes of which need to be tracked in the project\"), and the work product/artifact — a sheet of paper with a folded corner (the paper sheet is a stylized image of the document, but in real life this is most often an electronic information carrier).\n\n\n![](08-alphas-and-artifacts-working-products-62.png)\n\n\nThe standard was mainly developed for information systems developers, so for alpha descriptions (e.g., software code as program description) the evidencing/representing/presenting work products — these are documents, including electronic ones, but for other alphas (say, teams as management method items) — these can be quite live people-performers of roles, \"organizational units\". Graphical representation of them by the standard will also show them as “sheets of paper”, indicating materiality/constructiveness, detachment from the \"content on the sheet\", emphasis on the logistical aspect during creation, abstraction from functionality in use. The alphas themselves — are method items considered in content (not resource, like work products) terms, passing some states after work on some method operations/receptions (smaller methods. We can talk about functional decomposition for methods here, understanding that method — is still behavior, and decomposition into parts-wholes is with roles as functional items demonstrating behavior).\n\n**Alphas are documented in project work products to agree on state of important attentional objects in a project, they answer the question \"in what state are the important project objects\".**\n\nThe main ability of an intelligent person is the ability to define the set of method items, whose state is important to monitor in a project and document this model of the situation. This set of method items is specified by the types of knowledge/explanations/theories/algorithms of meta-model (domain areas) or even meta-meta-model (general world picture for many domain areas",
    "396b7b007afd1193028d60f770aff87f": "```markdown\n---\ntitle: Systems description, description, description method\n---\n\nIn a systems description, there are various aspect/role/specific descriptions (views) that answer questions about certain \"areas of concern\". A project role can have several areas of concern and multiple interests in each of these areas. These are all interests in the subjects of this role's work methods.\n\nEach role/aspect description allows the system to be described in such a way as to support a conversation with the project role on the subject/topic/zone/area of its interests, answering its questions on achieving its preferences in the system's relevant characteristics. Many such descriptions are made, a significant number of them being hybrid (combining descriptions of certain areas of concern, showing several aspects of the system and the relationships between them, for example, the concept of the system as a role description of developers and architects showing coordinated descriptions of functional, structural, layout, and cost aspects).\n\nWhat is the result of using multiple descriptions of the same system, even multilevel across different types of systems breakdowns (meaning a systems description—not \"complete by types of descriptions,\" but \"a description considering the multitude of system levels defined by different breakdown criteria\")? The result will be a successful system: if the project role agrees with the description, then the implementation of the system meeting that description will likely satisfy that role as well (remembering engineering justifications: we will also substantiate during testing that the system's implementation behaves as described in its systems descriptions).\n\nThe success of a system can often be determined when the system implementation does not yet exist, but the system description does—even an incomplete description (errors in not accounting for certain interests may be visible even in partial descriptions). The use of 3D information models, drawings, simulation models in engineering, musical scores, and any other recordings in design and construction aims to thoroughly discuss the realization of the most diverse preferences in the important characteristics/concerns of different systems in the project before the target system is implemented. The discussion does not change if it is just the release of the next improved version of the system (not greenfield development \"from scratch,\" system creation, but brownfield development of improvements, system development).\n\nProject roles thus get access to descriptions, but descriptions themselves are immaterial, abstract. In reality, agents-in-roles view documentation/work products/artifacts: without an information carrier, there is no way to present descriptions for discussions. So **first and foremost all descriptions need to be documented, not kept in mind!**\n\nThere are many descriptions: different internal and external project roles are interested in extremely different **role/aspect descriptions/views** of the system. These descriptions/views reflect **important characteristics/concerns for various roles** of the system using various **role/aspect description methods/viewpoints** by which these descriptions/views are made. Of course, each description can be documented in different ways (for example, using different notations—numbers can be written in Arabic numerals, Roman numerals, in binary), on different media (paper, magnetic tape, computer memory, even the brain of a living person—a very low-capacity, poor, unreliable medium, but it's also an information medium! However, recording information in the brain is done in non-local/distributed representations, while recording information on computer media is now done in local/symbolic representations. Engineering now uses symbolic representations; they are resistant to error accumulation during multiple replications/copying).\n\nAll these numerous role/categorical/“by interest”/aspect descriptions (views) are sub-alphas of the systems (comprehensive/for all roles/for all areas of interest, for all system levels) description. There are, of course, many more of them than the usage concept, system concept, architecture; they are often cleverly structured (for example, the system concept in mechanical engineering develops into a technical-economic project, then a preliminary design, then a working design—which goes to production). These include financial models, physical simulation models, reliability forecasts, and numerous descriptions of what creation systems should do (for construction, this would be a POS, a construction organization plan—what builders should do during the erection of a building or structure, a combined description of the builders' work methods and the construction work itself): there are many descriptions, for some nuclear power plant in paper form twenty years ago it was several truckloads of paper, and that was not even all the documentation!\n\nThe difference between a description (alpha) and documentation (work products) is fundamental, but in practice, they are often confused. For instance, it's easy to confuse architecture (part of the system description) and architectural documentation (work products/artifacts/documents/files reflecting architectural decisions on some information medium). Often the word “documentation” is omitted and readers are warned that the context should make it clear whether talking about architecture (system description) or architectural documentation (a set of work products/artifacts/documents/database records with records of architectural decisions).\n\nIn literature (for example, ISO 42010:2022), the word “description” is often given not for an abstract object-alpha, but for documentation/artifacts, and in English, it will be a description. In systems engineering, our abstract “systems description” will be a system definition. In Russian, the word “definition” is confused with the dictionary meaning, so we translated it with a more suitable word by meaning, “описание”, and description was also translated with a more suitable Russian word “документация”. The confusion with descriptions is ubiquitous. Thus, ontology (or architecture or system color) can mean:\n\n-   What exists in life (slicing the world into some objects, or the architecture of some system, or the color of some system—they are “in reality”)\n-   Description (it is usually recognized as some aspect of various descriptions, then view if it is a project description “as it will be,” then definition). Often they say “ontology,” “architecture,” “color”—but they mean the ontological description (or synonymously—the description of ontology), architectural description (description of architecture), color description (description of color). And this is without touching the confusion of “description”::“object being described::method”. The method/process/activity of describing is often also called description! Here we mean the object of the method, not the method itself. The description method in English is viewpoint.\n-   A document with a description, and also often they say ontology, architecture, color. But that's already the name of the document!\n\n**You can easily figure out any terminology variant used in one or another description (pun intended), if you understand that there are always three different objects (described, description as ideal, and also material as description on the information medium)—they sometimes are designated by different words, accepted in different professional communities or different natural languages, but very often—by the same word.**\n\n**Words are important (apart from words, we have nothing else), and not important (words usually mean not what you think—and you can't look up their meaning in the dictionary because there are many dictionaries, and the language is alive). Carefully trace the types of objects hidden behind suspicious terms (suspicious—the ones causing ontological jitter, that was in the course “Rational Work”), and everything will be fine.**\n\nWhat terms might be suspicious? Not only the “description,” but almost all terms of system thinking, including the term “system”! Very often, “system” is used in a colloquial sense, simply to add “scientificness” or “engineering” to what is being said, sometimes as a synonym for “object” (“anything we are considering”)—and no system levels, emergence, creation graph, system development—nothing of the sort is implied by the one saying “system,” because not all those who say the word “system” are familiar with the modern systems approach. And “concept of use,” “architecture” can also be used not as sub-alphas for the alpha of systems description (as subjects of the engineering work method, to track changes in their states during the project of creating and developing a system), but in some completely different meanings (for example, meaning documents titled “concept of use” and “architecture”).\n\nA complete systems description (description) in real life is quite rare, although always in projects there are attempts to somehow gather numerous documents with different role descriptions in one place. Much more common are just separate role descriptions of the system, documented in different documents (different information systems, different databases).\n\nOnly the genome will necessarily be in every cell of the organism, collected in one “document,” on one information medium. The genome^[[https://ru.wikipedia.org/wiki/Геном](https://ru.wikipedia.org/wiki/Геном)] itself—is an information carrier, a “set of hereditary material contained in the cell of an organism,” that is, a set of all chromosomes^[[https://ru.wikipedia.org/wiki/Хромосома](https://ru.wikipedia.org/wiki/Хромосома)], each of which in eukaryotes is formed by one very long DNA molecule. The genome is a document with a description of genetic information. More often than not, the genome means not a set of chromosomes/\"DNA molecules\" (document), but the genetic information documented by the genome! In engineering, it is about the memome (by analogy with the genome), which is stored somewhere in the design bureau and is the result of not biological (Darwinian), but techno-evolution. There is no agreement that the memome is material carriers (project documentation), so it can equally be project/design documentation, but it can also be project/design description. The idea of gathering all project documentation in one place is usually a failure. Even if all project documentation is considered to be in some design bureau, it will immediately turn out that there is production, which also has part of the documentation, part of the documentation is with contractors (such as suppliers of custom components), part of the documentation will be with tuners and operators (for example, some system settings that even designers will not know about). So the idea that the systems description (systems description) is reflected in some \"super-document\" is doomed to failure.\n\nGiven this, view is usually translated simply as “description,” without specifying that it is role/aspect/topic/subject/private, not (complete) systems. Every time you hear “description,” it will only answer questions about some subjects of interests/important characteristics; for answers to questions on other subjects of interests, other views prepared by other descriptions methods/viewpoints will be needed.\n\nThe concept of use is also a system description (although usage scenarios are considered extant, in the concept of use we have not the scenarios of use themselves, but descriptions of use scenarios, but the word “description” will be omitted), and architecture is a description (the same situation: architecture exists in the system, and architectural descriptions will contain descriptions of significant architectural decisions, in life, it will all be called just \"architecture\" and most often will mean descriptions), and reporting under RAS and IFRS are descriptions, but each of them is not a complete systems description.\n\nNevertheless, we are talking about the alpha systems description (system definition), since in the project the collection of all descriptions needs to be tracked in terms of their readiness. The alpha of the systems description can be advanced through its states by advancing the work of the project through the states of subalphas of individual private/aspect/role descriptions (views). There are quite a lot of these subalphas descriptions/views for the alpha of the systems description.\n\nFirst of all, the most different roles in the project are interested in the states of progress through the course of the project for functional descriptions, constructive/modular/product descriptions, placement descriptions, and cost descriptions as parts of the system concept. This is the main thing; they will be conducted through the states “system concept ready,” “technical-economic project ready,” “preliminary project ready,” “working project ready” (remember that in different fields of activity these will be very different states, even in mechanical engineering, from which we borrowed this example). But then there can be a large number of descriptions interesting to various labor roles in the project: for example, synchronization in time of various contractors, the structure of ownership of parts of the environment, information flows, and more.\n\nThe more complex (more system levels, more subsystems at each level) the system, the more descriptions/views can be expected. **Important characteristics for people-in-roles of systems are diverse, and the success of the system is determined precisely by the completeness of their accounting (write it down!), and then the completeness of the agreement on the values of these characteristics. If you haven't taken into account and hence haven't agreed on descriptions affecting, for example, frost resistance::concern—you haven't received a successful system according to such descriptions. Or if you haven't taken into account and hence haven't agreed on various descriptions that show system behavior at different system levels—you also haven't received a successful system.**\n\nVarious objects dealt with in a project by different roles are:\n\n-   From the point of view of the work methods of these roles—subjects of the method,\n-   from the point of view of the motives driving agents to action, they are subjects of interest,\n-   from the point of view of changing the state of these subjects, they are alphas,\n-   from the point of view of thinking about these objects—are classified types of various models, meta-models, meta-meta-models, and even meta-meta-meta-models.\n\nThis is normal, but it immediately means that various objects will each be described multiple times using many different description methods. Systems thinking postulates:\n\n-   The necessity of systems descriptions (system definition). They are important; they should be made and documented, even if you are lazy and do not have time.\n-   The necessity of explicitly indicating for each of the descriptions/view as part of the systems description their methods of description (viewpoint). If you do not know what method you are describing something with, it does not mean that you are doing it without a method; therefore, think about the method and specify it.\n-   The representation/presentation of descriptions in the physical world in the form of documents/files/artifacts. Do not keep descriptions in the chambers of your mind; make them in a readable form by other agents (people, machines)—and the first of these people (or machines, AI agents also take this course) will be you, and these descriptions will help your biological (or non-biological) brain be reliable in memory and focus.\n\nThe project documentation (systems description) should reflect the values of the important characteristics of systems in the project to technically keep attention on them during discussions/harmonizations of preferences in these characteristics of different project roles, using “external memory,” exocortex instead of \"mentally, by willpower, good memory of people-agents.\" This is stated in all our courses, starting with “Rational Work”: humanity has gone as far from “thinking with bare brains” as from “working with bare hands,” without any tools.\n\nHow exactly to make these descriptions in various working projects is described in the corresponding methods of description of various applied engineering methods: classical “iron” systems engineering, software engineering, personal engineering, managerial engineering, social engineering, and so on.\n\nFor example, music is recorded in the form of a score^[[https://ru.wikipedia.org/wiki/Партитура](https://ru.wikipedia.org/wiki/Партитура)] in musical notation on paper sheets. How to make a score for a newly composed song? This is applied knowledge, and it will be extremely different in terms of notations for the score on paper and may take a completely different form if it’s about computer music. In systems thinking, you only need to remember that:\n\n-   if there is a “song” (subject of the method),\n-   then it must somehow be described using a description method. How exactly it is described (notation roll piano, or ancient Russian notation with hooks, or modern musical notation)—this is studied by applied methods of working with songs.\n-   this description must be documented. Not documenting is not allowed (although there are differing opinions, there are improvisational genres, but in those it will be not a “song”^[<https://polit.ru/article/2007/10/05/martynov/>])!\n\nIf your project has both scores in musical notation, drawings, a schedule, and an organogram, systems thinking allows discussing all these separate descriptions, not losing them—leaving the applied disciplines the details of how exactly they are done and how to use them.\n\nSystems thinking is the fundamental, permeating all applied methods of thinking tricks (“small methods/ways”) of thinking based on the concepts of the systems approach. **Knowledge of systems thinking cannot replace the knowledge of applied practices. Knowing that “descriptions are always at some level of abstraction of meta-modeling, but they may not be concretized and not documented”—is not enough. One must still know how to make these descriptions/view, that is, one must know the applied methods of classical and software engineering, management, medicine, law enforcement, political action, etc., and in these methods also know their included descriptions methods (viewpoints). Only mastery of systems thinking or even intelligence (as a fundamental mastery of thinking in new situations when it's not clear what to do) is not enough for work in projects for the creation and development of systems, you also need to have applied mastery in the method of project work that you need to use in your project role.**\n\nThe description method (viewpoint) reflects (frame) an important characteristic/subject of interest (concern), and the description (view) answers questions about the value of the target characteristic, satisfies interest in it. For example, the “legend of a fauna map”::description method reflects the “distribution of fauna in a specific area”::concern, and the map::description answers questions about the “presence or absence of fauna in specific locations”::“the value of the target characteristic/subject of interest.”\n\nNevertheless, subjects of interest/concern and “description method”/viewpoint, as well as description/view, are often confused (meaning “fauna distribution as a characteristic of some ecosystem/territory”::concern, “legend of the \\[distribution\\] fauna map”::viewpoint, and the “fauna map” itself::view). Of course, all these are close concepts, but they all draw attention to different objects, so for discussing nuances, they are all needed: it is necessary to locate objects of all mentioned types in the project: concerns, viewpoints, views.\n\nIf my role subject of interest/concern/important characteristic is the color of the system, and my preference/interest is a bright color, I will be dissatisfied if the color is not bright. I choose a description method for color (reflecting the important characteristic of interest using the description method), including the ability to describe the values of color saturation—this will allow me to predict the brightness of color in the system of my interest, test the obtained color brightness of the painted system, formulate preferences for color brightness, negotiate with other project roles regarding color saturation. Another project role is the engineer who has to paint the system. He might be concerned with ensuring the paint is cheap (satisfying the interest of another project role—the financial manager), and the brightness of this paint may not concern him. But cheap paint is not bright. If I document the color I need, described using standard characteristics of colorfulness, chroma, saturation, plus take into account external lighting (brightness), then at least we can negotiate about acceptable color characteristics, and as a result, the engineer can choose a cheap but bright enough paint to my role taste (role taste! As an agent, I might prefer subdued colors, but in the project role, I make a professional judgment on brightness: I realize not my personal preference but a role preference)—my role preference for \"bright color\"::“value of important characteristic”",
    "70b2d789aa2f3fda8e7d76116ee53445": "---\ntitle: Systems description (of subjects) of enterprise activity\n---\n\nScheme/schema^[<https://plato.stanford.edu/entries/schema/>] in thinking is not necessarily a diagram, but simply a set of concepts and relationships between them as some template for thinking, a support for attention in thinking (framework, \"what to think about\", what to keep in attention, checklist of important). The scheme can well be expressed both with natural language text and with formal language text (modeling or programming), but can also be expressed in a diagram. More details about schemes, diagrams, texts, and various other types of description representations are discussed in the course \"Rational Work\". Lately, people talk less about the scheme and more about ontology (a multilayered set of well-coordinated concepts and their relationships) or ontics (a small and often single-level set of concepts that are convenient for describing objects of a particular subject area, which is commonly called a framework).\n\nThe entire text of our course provides some ontology/\"large scheme of systems thinking\" — a set of concepts of systems thinking linked by relationships. For some parts of this set of concepts and their relationships (systems thinking ontology), we provided not only textual descriptions but also diagrams: graphical representations of the ontology as a graph, where concepts are depicted as nodes, and graph edges denote relationships between concepts. There was a diagram for project roles, and just now we reviewed a system description diagram.\n\nLife has shown that students do not consider separate sets of concepts and relationships on some topics from the systems thinking course as parts of a single connected ontology, a single \"large scheme\" (again: a scheme here is a term for a set of concepts linked by relationships and can be represented both by text and diagrams. The text of our course is precisely a representation of the set of concepts and relationships of systems thinking).\n\nWhen you say \"project role,\" students immediately recall preferences but forget that a role performs some method of work (this is in other paragraphs!). When you say \"important characteristic,\" they immediately recall the preference but forget that the role description/view answers questions about this characteristic precisely to understand what happens with the preference, and the subject of interest is reflected/framed by the role’s method of description/viewpoint (this is in a completely different section of our course!).\n\nThe problem is that all concepts from theories/knowledge/explanations of fundamental methods of thinking in the intellect stack (including methodology concepts and systems thinking concepts) are applied together in reasoning, not in fragments. If you consider something important while working on a method (remember that concepts for method objects represent a checklist of what needs to be thought through in a given situation), then go further and think about other important method objects that are connected by known theoretical/explanatory relationships to what you just thought of — and you will manage not to miss any important method objects in your thinking.\n\nIf you recall some person (or even a larger organizational unit) in a project, who has a \"work role\"::type (applied a type from our course!), then recall their \"subject of interest/important system characteristic\"::type, and \"characteristic preference\"::type, but also recall their \"work method of the role\"::type, and their \"role/aspect description/view\"::type, as well as their \"description method\"::viewpoint::type! What does \"recall\" mean here? Remember that in reasoning, you need objects of these types and find these objects in real life! And merely recalling the Alphas, whose states change throughout the project, is not enough, you also need to show attentiveness: remember them throughout the project, constantly keep them in focus (i.e., better not just recall but also write down the recalled so as not to forget it immediately).\n\nIf important objects in the project do not immediately present themselves for some reason — ask questions to the project participants, you will get unexpected answers! This list of \"what to think about, state to track\" is not large: so much flashes, howls, and shakes in the project, distracting attention, that focusing on these understandable and usual thought moves on objects-types-subject areas, for which we find objects in life, will save a lot of time by reducing pondering over the unimportant. How to separate the important from the unimportant? The important in unclear situations is what humanity has chosen types of meta-meta-models for (they have undergone quite a lengthy evolution, and intellect stack methods continue to develop), and the important in more or less clear situations is what has types of meta-models for specific subject areas.\n\nHere is an example diagram for the systems description of (subjects) of enterprise activity. In fact, this is a diagram of Alphas because Alphas are the objects of activities, activity being one of the synonyms for \"method\".\n\nThis illustration shows that the considerations of objects of work methods of various org roles in the enterprise creation graph are closely related. For each org role, which acts as a system in the graph of some system’s creation, modeling of its method objects as Alphas is presented, but who creates what (who changes what method objects by their work) — this can be viewed.\n\nWe do not encourage using such diagrams in work projects’ modeling because diagrams need frequent changes in work projects, which is usually more than laborious, plus different parts of the diagram usually need to be changed by different people, and moreover, modelers for diagrams are rarely available, not every workplace has one. In the course \"Methodology,\" it will be explained how to model enterprise Alphas not with such diagrams, but with lists (ultra-short form) and tables (convenient form, supported by practically any operational software). We give the diagram here only as an illustration, we need to show how to model a target system and graphs of creating an enterprise using the basic set (kernel) of four Alphas for each system: system implementation, system description, system work method, system work. This diagram is thoroughly discussed in the course \"Systems Management,\" which is dedicated to the creation and development of organizations.\n\n![](12-systems-description-of-subjects-of-the-enterprise-s-activities-65.png)\n\nWill scrutinizing this diagram^[Here is this diagram in high resolution — <https://ic.pics.livejournal.com/ailev/696279/247262/247262_original.jpg>, the original file was made in the yEd editor, <https://disk.yandex.ru/d/qMDMgCZTkkT4-w>] (if you can read something there due to the small font, a problem with most large diagrams on small screens!) when the role::\"type of some object in the subject area\" comes to mind (say, when looking at the screen with \"Aristarch Vladimirovich\"::agent-AI, it is recalled that he is an engineer-architect::role) now lead to not only the desire to think about his interests and preferences in them but also the desire to think about architectural activity practices? The desire to think about description methods that establish agreements for descriptions used in architecture (for example, ADR as architecture decision records) to support a meaningful conversation with Aristarch Vladimirovich as an engineer-architect? Not a fact. Much text that will demonstrate examples of reasoning (i.e., also performed grounding) here will help more.\n\nThe neural grid of people is better trained by using words, not by looking at pictures: humanity achieved civilization after learning to write; pictures are not enough to convey knowledge. For each picture, one still has to write (or if not write, then \"narrate orally,\" which is even worse) many, many words. Pictures are hard to read, hard to edit.\n\nThe \"picture\" illustration of the description of enterprise work objects contains very little knowledge by itself; it still has to be described with hundreds of pages of text from both our course and the \"Methodology\" course. It is not a fact that such a picture adds any clarity: the more concepts and relationships a diagram contains, the less readable, less understandable, and less usable it becomes. And if it’s broken up into parts, then thinking breaks up into parts, losing the integrality of the whole discipline. And we return to the initial question: how to connect in thinking well-mastered pieces of thinking about the target system, the creator (engineering team) of the target system, the creator of the engineering team (management team), the creators of the management team (investment project team), and also link the work of the promotion service and even the work of clients who must work to buy our product and use it in their supersystems? The problem is also that all this needs to be done by different people, and each will have to deal in detail with their part of the diagram.\n\nThe biggest trouble will be if such a diagram is used in organizational work at an enterprise: it will be like a good artist's painting - pleasant to look at, but very hard to correct something in it, so those corrections will not be made, and the diagram will soon significantly diverge from reality, becoming eternally outdated. All models in systems thinking must be easily changeable and placed under configuration management (there should always be an answer to who changed what and when, it should be easy to change, and easy to check for errors in changes). Diagrams for continuous changes are significantly worse than texts in formal languages and worse than tables. Therefore, in life, we use table modeling instead of diagrams: systems thinking with (table) modeling. Examples of such modeling are carrying out modeling tasks in our course.\n\nIn any case, it is necessary to understand that the gradually and consistently presented set of concepts in the course as object types from life, specified by the knowledge/disciplines/ontics of intellect stack thinking methods (including the set of concepts of the systems approach), represents some \"large scheme/ontics of description method\". The absence of a diagram as a graphical representation of such a \"large scheme/ontics of the description method\" means nothing. You can safely consider that the whole course simply describes the set of types of the meta-meta-model with text, in which all mentioned concepts are connected by some relationships, but there will be no huge diagram-picture (even broken into parts) for them all, such a picture is useless, but other forms of representation (texts in natural language, texts in formal languages, tabular representations) — they work perfectly fine.",
    "7a036141e893bddf445a7ca70b7cf8f5": "```markdown\n---\ntitle: 'Development of the system concept: functional analysis and modular synthesis'\n---\n\n**The main solutions for the system's structure are called the system concept.\nTypically, the system concept becomes detailed until the precision of the system's description\nis sufficient for its manufacturing on a production platform.** Remember, the system concept is \"alive,\" changing as the system evolves with the release of new versions,\nwhich means in the modern world, the system is not simply created and operated in an unchanged state, but is continually modified even after the start of its operation. This is reflected in the transition from the \"system lifecycle, from birth to death\" to \"system creation and development\" (creating an MVP system and subsequently releasing multiple versions with new features/capabilities/services that provide new features). In any case, the system concept is initially developed for the release of the MVP (minimal viable product, i.e., a version of the system capable of delivering some utility upon operation) and is then continually refined.\n\n**The core content of the system concept involves describing\nthe integration of functional (\"how it works\") and structural (\"what it's made of\")\nbreakdowns, considering spatial layout and the resulting cumulative ownership cost.**\nBut this is only the main content. Further, it should be noted that the work breakdown description is also likely to be included in the primary content of the system concept. In addition, not only are the tasks described, but also the work methods – this extends beyond just the concept of the system to the concept of the system including its creators. Therefore, the system concept in one way or another begins to touch upon the creators, increasingly acquiring traits of the system creation concept during its operation timeline (i.e., describing the system's creators, not the system itself), rather than just the system concept (description of the system during operation, but touching upon some connections with creation – primarily the choice of affordances, \"invention\"). However, this division between a system concept and the system creation concept does not yet exist in modern engineering.\n\nThe boundaries of what is included in the system concept are very vague (more details on how to create a system concept will be covered in the \"Systems Engineering\" course), but the consensus is that the primary aspect of this concept is showing the integration of\n\n-   functional breakdown considering its passage through the constraints on the line of required functionality (thus, besides breakdowns, functional descriptions are usually included – some engineering calculations of characteristics, 1D modeling)\n-   structural breakdown considering its passage through affordance availability constraints (therefore, this often involves investigating the availability of made-to-order structures/components/modules, manufacturing possibilities of structural elements, and characteristics of structures),\n-   layout considering spatial constraints,\n-   cost breakdown considering expense constraints.\n\nIn domestic literature, the concepts of use and system concept are often combined under the name **technical and economic project** (and if the system is, for example, a nuclear power plant unit, the name may be different – OBIN, investment justification, or preliminary project). Engineers still debate whether it's a technical project without an economic part or a technical and economic project. But the obligatory cost description among the main systems descriptions indicates it is necessarily a technical and economic project; a purely technical project does not make sense.\n\nAfter the technical and economic project becomes detailed, they move on to actually creating more detailed projects – first a **draft** (and sometimes even the draft project is mistaken for a less detailed system concept), then a **working project** (with precision sufficient for manufacturing). In Russian, all of this is called project/design, leading to frequent confusion with project/project. Therefore, the phrase \"system creation project\" is ambiguous in Russian: either it means project/project::work to create the system, or it means project/design::system description. How to distinguish between them? As always, pay attention to the type of concept denoted by the term \"project\" and clarify the type from the context or directly re-ask. If you are speaking or writing, try to avoid mistakes due to this inherent ambiguity. \"Birdhouse project based on the birdhouse project\" – we hear this often; don't forget to specify the type for each \"project,\" they are different types! Also, remember that the word \"project\" often implies a third meaning – project organization.\n\nBut back to the system concept. It starts with agreeing on descriptions of the four (and often more) main aspects of the system, described through parts of the system that we find in the main breakdowns. Therefore, first we need to understand how this integration of breakdowns progresses, focusing initially only on two of them – functional/role and structural/product/module.\n\nIn literature, for different breakdowns, the term **\"structure\"** is often used, but we need to remember that this is not just any \"structure\" as some graph of objects and relationships, but specifically a hierarchy based on a type of part-whole relationship as the basis of a breakdown. Thus, \"structure\" becomes a hierarchy based on the part-whole relationship (is\\_part\\_of, composition, assembly) of functional, structural, spatial, cost objects, and similar (not only the main types of system parts are used in projects, systems are represented not only in their main aspects but in many others!). All other relationships (specializations, classifications, temporal precedence, mutual influence, etc.) in this \"structure\" of breakdowns are not considered.\n\nIf the hierarchy is shown as a breakdown, then the structure of the decomposed object-system is precisely the structure of parts and wholes! And these different types of parts-wholes show not objects of physical disassembly-assembly but merely indicate the focus on different types of parts in the physical system. With one exception: structural/product parts included in the system's composition (affordances/\"fitting\") are not only focused on during their interaction during operation, where they embody some functional parts, but also indicate actual physical disassembly-assembly, as they are considered during creation, where there is also disassembly-assembly during manufacturing/implementation of the system.\n\nHere is a drawing from the IEC 81346-1:2022 standard (which took this drawing from the earlier IEC 1392/09 standard):\n\n\n![](07-development-of-the-system-concept-functional-analysis-and-modular-synthesis-61.png)\n\n\nThis is the **basic scheme of work** **for creating the system concept** **(and it is also** **the basic scheme of inventing).** **Here, neither layout nor cost is considered, but in actual work, they are inevitably present, along with various other specific breakdowns for one project or another. Still, the main point here is** **the transition from functional decomposition to** **modular/product composition, from analysis to synthesis.**\n**The fact that this is a \"transition\" and that there is a \"before\" and \"after\" is set by the time line.**\n\nLet's look at the target system, which initially we view as a functional object A (subsystem::role A in the supersystem for A).\nThe first step in considering the future system is functional decomposition: functional parts are broken down into smaller ones (in the drawing these are B and four other unnamed ones), and an attempt is made to match them with structural/material objects as affordances that can perform the functions of these functional parts during the final system's operation. This selection (an educated guess as to which of the millions of material/structural objects could perform the required role, and it may be necessary to manufacture such an object, meaning it may be needed to specially create it with the necessary properties) is precisely **modular synthesis**, and if the task seems non-trivial (meaning it is not a task but a problem: unclear what to do if an affordance is not immediately found), this is referred to as **inventing**.\n\nThe typical behavior of a hammer is \"to hit the object, delivering the energy of the head to this object.\" This expected behavior is perfectly suitable for the \"hammering\" function with the functional object \"nails\" (synonym: method with its method object, but the terminology \"method of work\" is generally applied to animate objects or robots, while for simple agents like a hammer, functions are more often discussed).\n\nInventing here means seeing that not only a hammer but also a microscope can deliver the expected \"to hammer\" function.\nBoth the hammer and the microscope have the expected behavior \"to hit the object, delivering the energy of the solid mass to this object.\"\nEven a \"stone\" can be used to fulfill the role of a \"hammer\" for nails, suggesting a stone for hammering nails is also an invention.\nIn the absence of a hammer, the inventor may choose the stone as an affordance since there is no hammer, the microscope might be large and inconvenient, but a stone is easy to pick by size and shape – considerations here can be varied, and not merely the lower cost of a stone.\n\nThis is a crucial point: for an invention to be possible, known affordances for the required function must exist at the current level of civilization.\nIf invention is impossible, the system will not exist. A good example is the invention of the computational machine.\nThe function was understandable to Charles Babbage and Ada Lovelace in the early 19th century, but the affordances for the required logical operations were unreliable: mechanics failed (Babbage tried this), pneumatics did not work, electrical relays failed, hydraulics also did not work! In the end, electronics worked after invention: it was proposed to use logical gates on radio tube triodes for building the universal computer, used initially not as amplifiers (their initial use), but in the key mode.\nThese tubes were available and relatively cheap but were only invented in 1906, while the invention of the computer on the basis of radio tubes occurred in 1945, with the computer being non-functional for about half of the time due to unreliable radio tubes; super-reliable radio tubes emerged only in 1948.\nThis history is discussed in detail in the \"Systems Management\" course and is relevant to strategizing: you should not rely on the invention during a project. Rather, you can start a new system project if you make the invention!\nIf you do not understand the system concept, even in general terms, or do not understand the available affordances, do not start the project! You might be a genius inventor, but you might also be trying to invent an aircraft heavier than air before light internal combustion engines were available (no wonder the Wright brothers, airplane inventors, owned a motorcycle workshop). The system concept indicates that the invention is done and detailed design can begin.\n\nThe IEC 81346 diagram shows that in the first step of decomposition, matching constructive/products/modules with suitable expected functions for implementation/realization of subsystems succeeds only for two of the five subsystems (shown in the left part as first-level subsystems with yellow and blue faces simultaneously: yellow face–function aspect described, that is, the function they perform in the supersystem with the name A is clear, and blue face–it is clear from what constructs the subsystems will be made from as shown in the right part of the diagram). In the next decomposition step for subsystems, this succeeds for all subsystems, including subsystems of subsystem B. This part of functional decomposition, when we attempt to break the system into functional parts not just into any subsystems, but such that they can later be implemented by some affordances, is sometimes called **functional analysis.** Analysis (assuming separation into parts, decomposition) is normal if you do not forget its subordination to synthesis (assembly from parts). Analysis is bad only if it is isolated, not subordinated to synthesis goals. The IEC 81346 diagram exactly shows how functional analysis/decomposition supports structural/modular synthesis/assembly from affordances - it is challenging to propose such a one-level set of constructs that realize system A's functionality, much easier to first break functionality into separate subsystems, and then merge constructs into a system in several stages, through assembly units in their hierarchy, rather than one-level.\n\nAfter (remember the logical timeline arrow on the diagram) functional decomposition, we must synthesize the target system-construct from all constructs, i.e., the final product/item, which will perform the initially stated function during system usage/operation/working.\n\nFor the construct/module/node B' in the diagram, implementing the functional part B, it happens only in two steps - first two intermediate constructs are gathered, and only then they are merged. In the next step, the construct/module/node B' is included as part of the construct A' that implements the initially conceived system A (when we say \"system\" here, we mean its main aspect: functional).\n\nThis part of creating the system concept, that is, compiling the system in its constructive aspect (construct/module/product/item/node) from its smaller constructive parts, is called **modular synthesis**. Sometimes the method of modular synthesis (product synthesis from constructs) is presented as a method of \"unit disassembly,\" that is, breakdown into units, but no – logically \"disassembled,\" meaning decomposed, are exactly functional parts (subsystems), while for constructive parts, it is logically the assembly into the final construct, so movement through the diagram goes from the whole system-role to the midpoint as a set of subsystems implementing small functions, then these subsystems are implemented by small modules/nodes, which are then combined into the final system-construct (product/item). So, it is about summation of units, although this term is never used. Why \"disassembly of units,\" not \"synthesis of units?\" The described method of creating a system concept was realized by engineers not long ago, while the current production terminology emerged much earlier. Engineers thought they were \"disassembling in mind\" an already made construct, but no – it is units that are assembled as \"assembly units.\"\n\nThe system concept is sometimes obvious, no need to invent – you just know what has been done before. The need to use electronics for a computational machine is clear today. But of course, sometimes inventing is necessary (most often, as stated, not during a project, but prior to its inception – inventions form the basis of engineering projects, and are not the result of project work).\n\nIn\nTRIZ^[[https://en.wikipedia.org/wiki/Theory_of_Inventive_Problem_Solving](https://en.wikipedia.org/wiki/Theory_of_Inventive_Problem_Solving)]\nas the theory of inventiveness, it is crucial that a small number of constructs perform many functions (i.e., the degree of system ideality increases: an ideal system is one whose functions are performed without material embodiment, with no constructs/affordances in the system at all, nothing needs to be manufactured). Thus, in TRIZ, the ratio between functional and constructive elements is never 1:1 (as in our teapot and scissors examples). **It is desirable to learn to load many functions onto a single** **construct/module/product/item, reducing their** **number in the system.**\n\nThis is best achieved with computers and robots – hence the general trend in engineering is creating universal modules, easily reprogrammed for new functions. In biological evolution, nature arrived at more or less universal and complexly arranged cells, whose various functions (liver cells, brain cells, lung cells) are achieved by minor reprogramming. In techno-evolution, look at the smartphone, computer, and rapidly developing ideas of universal creators, now often designed as (self-)programmable intelligent anthropomorphic robots.\n\nIn inventive activity, we solve a program of multi-level optimization, removing conflicts between interests that may occur at different system levels. **John** **Doyle** **and his colleagues point out that contradictions always exist (notably between speed and accuracy: there can be fast inaccurate parts and slow accurate parts), and this contradiction can be resolved using multi-scale constructions with multi-level feedback, it cannot be resolved in one level. Thus, to create a fast and accurate system, it necessarily becomes complex—** **requiring substantial inventive work, supported by mathematics, developed by them**^[<https://ailev.livejournal.com/1622346.html>]**.**\n\nTypically, it is challenging to pick constructs from available or easily manufacturable constructs, which when assembled into a ready-to-use system-construct, realize all necessary functional parts, resulting in a system with all the required functions during operation. This necessitates breaking the logical order of creating the system concept, i.e., changing the already developed functional decomposition to a new one, easier for modular synthesis. Hence, logically one-time method of creating a system concept (first functional decomposition, then modular synthesis) becomes iterative: attempts at functional decomposition, but if modular synthesis fails based on current functional breakdown, returning to analysis – and then trying modular synthesis again, making an invention, selecting affordances based on a new functional decomposition. **Dependence on a different set of functional objects** **effectively means proposing a different device operation method, a different operating principle.** Thus, for different functions, other constructs may be more accessible.\n\nFor example, a universal computer can be implemented as a set of functional subsystems of a quantum computer or a classic logical computer. Affordances (constructs) for a well-functioning and reliable quantum computer are unknown. However, affordances for a classic computer are well-known, today they are transistors, which can be mass-produced in electronic chip-microcircuits. Thus, we first set some computer decomposition into subsystems, then check: are there cheap affordances (are they available at all today), and if not – attempt to change the functional decomposition. Or, there is hope someday to make an invention – finding affordances for the current functional decomposition, but such a gap could be a hundred years (as in the invention of computers or airplanes).\n\nConstructs/nodes/modules/products/items need to be designed and manufactured if they cannot be bought ready-made. **Buying is the simplest way of** **manufacturing constructs!** In IEC 81346-1:2022, they even suggest calling the intended product for purchase a \"component,\" so frequent is this scenario. Terminology can vary widely in other literature, a component (or module, \"komponenta\" in Russian) can refer to a functional part, a structural part might be called \"part,\" and purchase items straightforwardly \"purchasable items.\"\n```",
    "d121dff22739569f0092ebf0d33fd287": "---\ntitle: Four Main Types of System Descriptions Based on Four Methods of System Partitioning\n---\n\nSystems thinking provides multiple system descriptions, similar to the general philosophical/ontological idea of multiple descriptions of a situation by different agents pursuing different goals. However, **systems thinking specifies which descriptions must be made**, which ones should be primary, even though it acknowledges that more types of descriptions are necessary beyond the primary ones.\n\nToday, systems thinking identifies **four main types** of **descriptions reflecting four main methods of dividing the system into parts. For each set of parts obtained through different methods of partitioning the system**, **different descriptions/views are made — modern systems thinking mandates four such types of descriptions, with a fifth one trending. For each type of parts, of course, many different descriptions are made**:\n\n1.  **Functional:** Based on parts obtained through functional decomposition (dividing into functional parts/roles by part-whole relationships, often referred to as systems breakdown, emphasizing the importance of the system's function influencing its external objects, especially for intellectual agent-creators — this influence is the impact of method/service work on external objects). Functional descriptions are made for the system's operation/exploitation/operation time (description \"how it works,\" usage time).\n2.  **Constructive,** also called structural, product-based, or material. These descriptions are made for parts identified as constructive/material objects through structural/modular/product decomposition (sometimes referred to as synthesis/assembly from parts instead of decomposition/breakdown). Constructive descriptions are made for the system's creation time, describing \"from what and how it is assembled.\"\n3.  **Spatial/placement:** For locations in space (usually space, but it's better to consider space-time), where parts of the system are located. Such descriptions allow agreement on the discussed object: in 4D extensionalism, descriptions relating to the same place in space-time pertain to the same object.\n4.  **Cost-based:** Addressing expenses on money and other resources (total cost of ownership [https://en.wikipedia.org/wiki/Total_cost_of_ownership]). This reflects systems thinking's second generation, involving not just the target system but also the creation graph, considering costs during creation and operation.\n5.  **Work-based:** Only a trend, not yet standardized, but significant. It involves describing the work of creators, leading to a work breakdown structure. These include project management aspects, focusing on the system creators' work.\n\nThese are just the main descriptions, with many more in actual projects. The work description is still a \"candidate,\" and descriptions of work methods are also not standardized yet, but may appear — and we will discuss them in the \"Methodology\" course, including standards like OMG Essence.\n\nMain and other types of system descriptions rarely occur in pure form, often being hybrids. They should align and be consistent, which is why hybrid descriptions are practical.\n\nThe four main (mandatory) types of system descriptions have become predominant in systems approaches over the past thirty years. The cost-based partition became mandatory recently, recognized in engineering projects over the last decade. The fifth (work-based) partition is still under discussion, while creator work methods are described but not yet standardized.\n\nDifferent types of main descriptions rely on system part descriptions obtained through various decompositions. Misconception is considering systems descriptions as descriptions of partitions, meaning trees of functional, constructive, spatial, and cost-based objects by part-whole relationships.\n\nPartition descriptions (trees) are not the only systems descriptions! Systems descriptions depend on partitions, taking details from respective partitions. For instance, functional system decomposition can be discussed along with functional modeling as 1D modeling results, where functional parameters are determined along flow lines (e.g., electrical, hydraulic circuits, heat transfer pipes, logistics chains).\n\n1D modelers often called \"physical modelers,\" can calculate currents and voltages in electrical circuits, pressures, and flow rates in hydraulic systems. They represent systems more complexly than just partitioning.\n\nLet's delve into breakdowns. These breakdowns exist in reality, but we can also talk about their descriptions. The difference between a real-world partition and the description is often blurred, particularly in conversations about methods and ontologies, requiring context to distinguish, and it's always wise to clarify if unsure.\n\nHere's a modified diagram from the IEC 81346-1:2022 standard, illustrating the first three main types of descriptions based on three main partition types (though it doesn't include cost-based descriptions, imagine a financial calculation like \"total cost of ownership\"):\n\n\n![](02-four-main-types-of-describing-a-system-based-on-four-methods-of-system-partitioning-55.png)\n\n\nThe figure depicts three project roles with different system descriptions, represented by little figures. Remember, roles are just roles: they could be played by one person or groups with tools and equipment. The figure shows three people playing three roles, though the IEC 81346-1:2022 standard includes five aspects, plus \"type\" for arbitrary groupings and \"other\" for logistics, cost division, administrative subordination.\n\nEach project role sees the system divided into specific interacting parts, represented by colors. **Systems thinking minimally requires attention to** **four main** **types/kinds of parts, and system descriptions are constructed on these parts**:\n\n1.  **Functional/role parts** (functional elements, but we translate elements as \"parts\" since elements imply indivisibility, which we always consider; role elements^[Components sometimes refer to functional parts, sometimes constructive (e.g., separately purchased products per IEC 81346-1:2022)**). Discussing their interaction answers how the system works to fulfill its function/role in its supersystem, always involving exploitation/work/operation/service time discussions. An electrical schematic illustrating functional/role parts and their **connections** is shown. These parts perform their function by interacting with others, changing states during system operation.\n2.  **Constructive/products/modules/material parts** (modules, products, components as order units, assembly units, logistics units, constructs) — this part type answers how to assemble and interface through **interfaces** (interface), discussing creation time. Exploitation time discussions are not allowed for these partitions.\n3.  **Spatial objects, locations** (locations) or **placements** (allocations), answering where system parts can be found in space at a given moment, defining system composition. Location/placement is important for runtime-role and physical object merging: if both are in the same place simultaneously, they are the same object. The figure shows compartments for system installation and operation, but it doesn’t explain assembly parts or functioning.\n4.  **Cost-based parts** (costs) address the costs associated with the system over its entire lifecycle, including materials, creation work, operation, maintenance, modernization, and decommissioning, considering system development over multiple versions.\n\nThe fifth partition — work breakdown structure, is still not fully entrenched in engineering, only a \"candidate for essential partitions.\" Each target system has a creator performing work (during continuous deployment of various versions, conceptualizing, designing, creating with technology considerations, justifying success, mounting new parts, operating them). These works need planning, execution, and distribution among contractors. **So, partitioning work for system creation and development is often considered part of compulsory system descriptions, though not included here. The fact that work description addresses the creator rather than the system isn't crucial — cost description also involves creator services, making it a continuation of the second generation of systems thinking, remembering that the system always has creators.** Besides, discussing work methods follows sensitive work breakdowns.\n\nWork breakdown partitioning isn't predetermined but explored further in courses \"Methodology,\" \"Systems Engineering,\" and \"Systems Management.\" Work breakdown describes the creator rather than the target system, even as it relates to creating system parts.\n\nRecent cost-based parts cover materials and creator work costs, including operational and maintenance expenses. Even so, they represent system parts as per different role interests, shown by colored cube facets: each role discussing an aspect through convenient descriptions:\n\n-   For \"how it works,\" typically schematic/functional diagrams show functional/role parts and their **connections** (though physical system descriptions via differential equations in modeling languages are preferred now [https://ailev.livejournal.com/1549559.html]).\n-   For \"how to assemble,\" descriptions include material products/modules and their interfaces.\n-   For \"where to find or place/install,\" place descriptions are provided.\n-   Cost descriptions reflect system expenses. Recently, total cost of ownership is deemed necessary, though not yet standardized.\n-   For work breakdown structures not depicted yet. Descriptions of work methods aren't discussed yet but are common.\n-   ... and many more interested in various partitions exist, showing only minimal descriptions, often hybridized!\n\n**System levels are defined by primary functional partitioning in systems thinking!** **Which is why functional partitioning is often referred to as systems breakdown structure.** The other partitions are simply breakdowns.\n\nTerminology of \"s                                                                    ystem breakdown\" (functional only) isn't always respected. A system is usually both a functional part of a supersystem and a constructive part, occupying a specific space in the supersystem, requiring costs and maintenance. In engineering, systems breakdown often denotes functional partition, not constructive, spatial, or cost-based.\n\nWe emphasize the point that a system is part of a supersystem, not dividing it into subsystems. **The key systems thinking approach moves from the system as a part to the supersystem as a whole.** This recursive thinking applies to any system level, including subsystems and supersystems.\n\n**When talking about system parts, it's essential to specify which partition: main (functional, constructive, spatial, cost-based) or others (creation work, manufacturing sequence, assembly sequence, eco-friendliness, etc.).** **If descriptions include several part types (hybrid descriptions, common), ensure understanding of described and missing partitions.**",
    "6b81cbdab80eab8968041600c977dfc3": "---\ntitle: Alphas\n---\n\nEmbodiment of the system, description of the system, creator --- these are all examples of\n**alphas**, \"apples from textbooks and workbooks\", objects of the method from the set\nof types of system approach, project thinking in system creation is conducted\nusing objects of these exact types. When you write, or\nspeak, or see \"Boeing 737\"--- as a systems thinker you\nimagine some class of planes, which are systems “Boeing 727”::plane::“system embodiment”, and system embodiment is one of\nthe subjects of the development method. The system embodiment is material, it will\nlike an alpha in the course of the project go through states from \"raw\" to\n\"half-assembled\" through \"assembled\" and \"tested\" to \"in operation\",\n\"upgraded\", \"decommissioned\" (note that\n\"in operation\" is given here in the present tense, while the other states --- through\nthe completion of some operations in the past tense). In speech, only\n\"Boeing 737\" will appear, but in thinking and reasoning a systems thinker\nwould have this breakdown by types, it is important. An airplane \"in raw\" doesn’t\nlook like an airplane in the sky, but an alpha allows you to retain focus on\nthe airplane throughout its embodiment (again, notice: \"system embodiment\" in this paragraph is given in two types — as a physical object\nof the airplane and as a process of manufacturing the airplane in \"metal\". Did you\nnotice that?).\n\n**Work products/artifacts,** such as the documentation of various models\nof the target system and super-system, systems of creation and their workings on paper or in\ndatabases, project role performers, the material embodiment\nof the system --- these are \"apples that we eat,\" they can be easily found in\nprojects, pointed at (indicated their place in space). Say,\nwe want to track the state of the alpha \"system description\" for \"Boeing 747\".\nHow to do it? By the work products: the system description is contained in\nvarious databases, and in these databases with the information model\nof the airplane, you can find out, for example, whether some design decisions\nhave been made or not, whether we have a description detailed enough for\ntechno-economic project, preliminary project, working project. This is convenient: we consider the alpha\nindependently of which database the airplane description is reflected in, in what font this description is displayed on the screen, whether the diagrams in\nthis description or tables, or even just texts. But having reviewed the work\nproducts, we conclude in what state the system description is,\nhow far it has progressed from \"no description\" through \"description with main\narchitectural decisions ready\" and \"description sufficient for\nmanufacturing\" to \"description used in operation\". All these\nstates are conditional, they will be further detailed through the states\nof sub-alphas --- in each project their set of alphas is defined and adapted\nto the project situation. More about alphas will be discussed in the course\n\"Methodology\".\n\nMany project alphas are usually well described in textbooks of the\nproject domain, related to metaU-model, and some of them are still\ndetailed in regulations or working standards of the enterprise,\nrelated to metaS-model (and there in the regulations and working standards often\nit is also said, by what work products it is necessary to track the state changes of these alphas).\n\nBut the most general alphas as the most general objects of the most general methods of work --- are objects of meta-meta-model, they are given to us in\nknowledge/theories/explanations/algorithms of fundamental methods of thinking,\nprincipally detached from the subject areas of specific projects.\nThat is why the disciplines of fundamental methods of thinking\nintellect-stack (physics, mathematics, ontology, logic, rationality, etc.) are called trans-disciplines: they are \"trans-\",\nbeyond the scope of applied subject disciplines, they give us abstract types\nof meta-meta-model, rather than more specific applied types of meta-model.\n\nHow to correlate objects of different levels of meta-modeling (different\nontological levels) --- this is the main difficulty not only in mastering systems\nengineering, but also any other method of work,\ndescribing the surrounding world and its regularities: how the objects of some\ndescriptions (for example, any theory/explanations, which are usually given at\na fairly high level of abstraction) to be combined with specific physical\nobjects or even objects of descriptions with a lower level of abstraction.\n\nThis is exactly what distinguishes physicists and engineers from mathematicians/pure\nlogicians: physicists are concerned with what their formulas correspond to in the real\nworld, while mathematicians/pure logicians are not concerned. Physicists are worried about\nannotating the types of mathematics to the types of physical objects (making hypotheses\nabout such correspondences, conducting experiments with measurements and evaluating,\nhow the behavior of abstract objects differs from the measured behavior\nof real physical objects), mathematicians mainly describe descriptions (though there are already\ntalks about experimental mathematics because you immediately fall into the physical world\nand conduct experiments if the mathematical constructions require resources\nof the mathematician itself as an agent, in their thinking modeling\nmathematical/abstract objects).\n\nIf in the physical world there is an object \"physical space,\" then this\nmeans that in the world of mathematical objects there is an object \"mathematical\nspace\" and the physicist postulates that he will describe some\nproperties of reality, which he will call \"physical space\" (plus in physics there are\nphase spaces and all sorts of other spaces), using the object of mathematical\nspace, which behaves in reasoning as\nthe physical space behaves in an experiment (in measurements in the real physical world).\nThis is all discussed by semantics, work with types, you need to figure it out once,\notherwise you will get confused when the physicist speaks about \"space\" from\nthe physical world, and when \"space\" from the mathematical world.\n\nOne of the MIPT students received two points for the exam on system\nthinking because he couldn’t decide: \"goods for shipment\" are physical goods on the warehouse shelf,\nor is this the list, which is displayed somewhere in the database of his computer?\nOnce in the conversation it was goods, and once --- the description of goods, which he called\ngoods since he mainly wrote the program with the description of goods, but\nnever saw the goods with his own eyes. And further these same goods\nshould still be called the target system --- and then it turned out that in the computer\nthese \"supposed goods\" (in fact --- the description of goods as tables in\nthe database) have a completely different environment, than real goods! Don’t be such a student!\n\n**Work with types: descriptions come on many levels, but these are descriptions!\nAnd the physical world --- ** **this is the physical world, and there levels are not abstractions\n(in relation to classification), but system levels (in relation\nto composition)!** **Distinguish the relationship of composition (\"part-whole\") for\nphysical objects and \"classification\" (class-instance) for descriptions!**\n\n**When you work with alphas, reflecting the state of work products,\nthen you need to distinguish alphas from work products.** For instance, alpha\n\"engineering team\" in life is represented by agents as team members,\nand we learn about the team composition and decisions made about how\nthe team is organized from some descriptions (orders on team formation,\nmeeting minutes, instructions on role distribution in the team) --- they will bear witness to the team\ngoing through various states.\n\n**Alphas** (alphas) --- these are objects, by which we judge the\nprogress (progress, \"how much have we already done?\") and health\n(\"is everything going well in the project?\") of the project, by tracking the change of their states.\n\nAlphas --- this is an abstraction of the same sort, of which \"physical body\"\nis an abstraction of real physical objects. This physical body\nhas mass, while the geometric point has coordinates. But we\nidentify physical bodies and geometric points as\nideal/abstract objects with real/physical objects. We\n\"glue together\" in thinking ideal and real objects, real objects\ninherit characteristics of ideal objects --- we begin to think about real objects\nas described in textbooks about abstract objects.\nTherefore, both the weight and the atomic station have mass, and both\nthe feather and the airplane also have mass --- we can (**after rather long\ntraining ** ** to align physical objects from life and\nabstract objects from the textbook!**) understand that these are physical bodies and\ntransfer the characteristic of \"mass\" of this physical body to the weight, atomic station,\nfeather, and airplane. If you learned that the main alpha in the project will be the system’s work\n(such a real engagement of the system, which changes something there in its environment, does\nwork/functioning), then we can track what happens with the work: \"the system\nhasn’t been worked yet\", \"work on test data was passed\", \"work is going on real data\",\n\"work is interrupted\", \"work is finished\" (and there is a cycle of states for \"work is going on real\ndata\" and \"work is interrupted\"). Why do you need the alpha work? To\ntrack whether the system is just created, or created and already performing its\nfunction. Whether the system is working or not is important, it needs to be\ntracked. So you like a student have mastered the systems thinking (we are near\nthe end of the course!), you already have some mastery. Does your\nmastery work? You are also a member of dozens of different teams --- are they working,\nor just created and the work is halted?\n\nIt is customary to speak of instances of alphas in the project as if they are quite\nreal and exist in the world, despite all the abstractions --- these\nalphas as mental objects we judge by artifacts/work products.\n\nWhat is the concept of using an automated toothpick in our\nspecific ongoing project, right now, March 28, 2028? I can\njudge what the external project roles need and how the toothpick fits\ninto its environment (that is, to judge the concept of use, this is a description, an abstract object, and also changing its state during\nthe project) by the available documentation of the concept of use. These might\nbe several different documents with parts of this model (parts of\nthe concept of use of some model of an automated toothpick),\nbut they may also contain a lot more that I don’t need right now.\nThe concept of use --- one of the alphas, the documentation of the concept\nof use --- a set of artifacts/work products. What external project roles are\nrepresented today by agents in the project, and which external\nroles are represented by agents who already\ncooperate with the team? I can look at the real\npeople-performers (or even not people, but robots), playing some role in\nthe project today --- and judge whether they are represented in\nthe project somehow, and are they cooperating (for example, they are tuned, if these are robots),\nor the team still needs to work on this (or even discuss it,\nwhether the team considers the AI-robot as a team member, or just someone’s tool).\n\nAlphas in their entirety give a \"compact description\nof the world\"/theory/discipline/ontic/knowledge/model/algorithm/explanation,\nconvenient for describing progress in the project. Alphas are studied\nby methodology; these are method objects primarily --- after all, the project is\nsimply a set of works on the method (that there are other variants of what\nthe term \"project\" denotes, we have already discussed this. But the classic\nunderstanding --- is the set of works to create some system, that is\nthe set of works on all methods of creating some system, and\nrecently taking into account the third generation of systems thinking ---\nthe set of works to create and develop some system). Concepts\nof methodology (method, object of the method, alpha as the most important object\nof the method, which is needed to track changes in the project, works on\nthe method) serve to draw the project team's attention to the most important\nin the project, changes which cannot be ignored, highlight this important\nfrom the colorful background of many details irrelevant to this or that subject of\ninterest.\n\nAll this work with abstractions is needed to be able to reuse\nknown ways of reasoning and problem-solving for the most\ndifferent objects. So, we think about the \"physical body\" and \"geometric\npoints\" uniformly, \"as in the textbooks of physics and geometry,\" and this\nthinking applies to the most different \"real objects around us,\" from a\nmatchbox to galaxies.\n\nIn this economy of thinking (we learn to think once, then likewise we think in\nthe most different situations) lies the meaning of separating alphas and\nartifacts/products, only the talk is not about physics and mathematics, but about\nthe most different projects.\n\nFor example, we learn to think about the concept of use as a developed\nmodel once, and then apply this thinking to determine the state\nof development for specific paper or electronic documentation, which\ncan be found in production \"in the real world\" in the most different projects,\ncountless times:\n\n-  requirements (if it is old engineering!), with a work product\n  \"requirements specification\" (in modern development there is no such thing,\n  they speak of different hypotheses about the required characteristics of the system and its\n  behavior, while they try not to gather it all in one\n  work product, it quickly becomes a \"bottleneck\" in\n  development, so today they try not to store functional descriptions of the system in one\n  work product)\n-  use scenarios, and the work products here will be some \n  files with these scenarios written in their specific languages \n  (if they will be used) for some modelers,\n-  descriptions from standard texts, and the files with these standard texts\n  will be work products\n-  user stories, work products --- cards with user stories,\n-  wishes (not even needs, just \"wants\") of external\n  project roles, and the work products can be, for instance, records\n  of these \"wants\" in a database or files of questionnaires with\n  these \"wants\",\n-  ... and etc. There are thousands of artifacts\n  that can document the concept of use and different descriptions in its\n  composition, but to understand what it is and why the concept of use\n  is needed when studying systems engineering requires only one time.\n\nRemember, **systems thinking points to the concept of use** **as a necessary object of attention in the project**, **methodology teaches that the change of states of the concept of use must be tracked by alphas, and it will be\npresented in the most different work products/artifacts,** but **methods** **of work** **for the development of the concept of use** (discipline/knowledge/theory, giving a set of alphas for identifying external project roles, their needs, identifying important events in use, identifying happy path scenarios and scenarios when difficulties are found in use, as well as the use of modelers for documenting the concept of use, etc.) **are taught by systems\nengineering**.\n\nDespite the \"ideal\" and \"abstract\" nature, alphas are spoken of as quite\nexisting in the physical world, much like physicists\nconsider the mathematical objects they use to model reality quite real\n(take them seriously until proven otherwise by an experiment). So alpha\n\"concept of use\" --- it is quite a real object, it has some state (first it's not there, then an initial is developed, then it will be realized by the created system, then it will continue to be continuously refined and realized by new and newer versions of the system), though in life these \nwill be the most different files and database records on the most different\ncomputers. Files here are nothing (form, although important for logistics in the\nproject, the information must be with those who need it, moreover, in the form \nthat it can be conveniently used), the concept of use --- everything (content).\nAlphas --- about the content, work products --- about the form. When thinking\nabout work methods, the alphas will be present primarily, and the work will be \ndone with work products.\n\nTo judge the state of Prince Hamlet, we look at the facial expressions\nand listen to the intonations of Vasya Pupkin, playing the role of Prince\nHamlet. And about the state of the concept of use (as the work progresses\non the development methods of the concept of use) we judge by the work\nproducts-documents, in which it is described. More cunning situations are possible: about the \nstate of the physical system (alpha \"system embodiment\", for instance, \"embodiment of the payroll information system\") at the\nboard meeting we judge by the work product \"report about the state of the payroll system development\", in which the state of\nthe system is described, instead of examining the system itself,\nwhich may still exist as source code (of course, here we are not saying that \"the\n  embodiment of the information system exists first as raw material\", but\n  \"the target servers for the information system are determined\" here is quite a normal move for discussing the embodiment).\n\nFor instance, you can define the alpha of the functional object \"my favorite\ntoy\" --- and, although in my childhood it was a control panel of a spaceship\ndrawn on whatman paper, today it is my laptop, I can\ntalk about the state of \"my favorite toy\" levels of \"loved\",\n\"unloved\", \"broken\", \"in play\", \"abandoned\" and etc., regardless of what my toy is now. Moreover, by observing \nthe toy itself, we will not be able to tell its state --- the observation will need to\nbe done with me and my state! The work product for \"my favorite toy\",\nby which it is possible to determine its state --- it is me!\n\nIf in thinking and conversation the \"requirement\" appears (those practicing\nthe old versions of systems engineering do this very often systems thinker\njust smiles and understands, what is happening and how to mitigate the harmful\nconsequences of using such an alpha) --- then it doesn’t matter, the work product here\nwill be the point of the meeting minutes with the customer representatives, or\na record in the database of the requirements management system, or a fragment\nof the diagram of some requirements model, or requirements from the customer's \n  email. In thinking it will be recognized as something,\nrelated to the alpha of the system description, the sub-alpha\nof the concept of use (at the same time, the systems thinker will replace \nthe deontic modality of \"should\" on the doxastic \"belief\" --- \"I require\" will\nbe replaced by \"I assume that it will be good, although I could be wrong\") --- and\nafter that, it becomes clear what to do with it, how to think about the\ncontent of this “requirement”. Of course, this alpha “requirement” will be\na description of the target system on the external boundary, which will need\nto be aligned with the needs of external project roles. It’s immediately clear why it’s important to keep attention to",
    "cbe98cb69abb73b907746f32734af280": "---\ntitle: 'One system, but many descriptions, many names: this is normal!'\n---\n\nQuaternary (these are only the main four! There are many, many more!),\nmultiple aspects of perceiving an integrated system are normal,\nas it should be! One time you consider the system as consisting of\nfunctional parts with their behavior during use, another time\nyou see the system as constructive with the behavior of\nfabrications during their production and assembly, a third time\nyou view the system as consisting of layout spaces, then\nyou check the total cost of ownership, the working methods,\nthe works themselves, and how much time they'll take from whom, and so on—while trying to hold all these notions simultaneously so they align with one another.\n\n**Unified** **in** **the mind** **for different** **project roles with\ndifferent interests,** **can only be a unified thought**, thus there will be no unity\nin the partitioning, no unity in the system viewpoint within the project.\n\nReal unity of all these descriptions is given only by 4D extensionalism:\n“constructive parts”/constructives/products/items/modules/affordances\n(what it’s made of) occupy the same space-time locations as\n“functional parts”/roles embodied by the constructives.\nThis “occupied space” itself—that's “placement”, and the system\ncosts something as well (ideally less than the external roles, like a customer, assess the irreparable benefits it brings).\n\nThe relationship between a role and a construct is\nrealization/realization/embodiment. In practice, this relationship is often expressed\nas “playing a role”, i.e., performing a method/function as the role’s behavior.\n**Both constructive descriptions and functional descriptions** **are descriptions**\n**of the same** **system as the same** **physical object in space-time.** **No identification**\n**of constructive and functional descriptions** **through reference to types, through**\n**“definitions”,** **as in logic or mathematics! All identifications** **only** **through to\nphysical reality, to** **the physical object in a specific space-time**\n**location!**\n\nThe four main ways of highlighting parts of the same system provide\nfour main ways of organizing attention, highlighting the essential and\ndiscarding the inessential, and these are just the main ways—there are usually more! Subsequently, **project roles must agree that all** **four** **main** **descriptions, as well as others (not categorized as main but necessary for work),** **do not contradict each other and describe the same system.**\n\nGerman electrical engineers, authors of the IEC 81346 standard for system\ndescriptions, devised a method: to immediately see what type of system part is being discussed, they are named using special prefixes:\n\n- functional/role prefix \"=\",\n- modular/product prefix \"-\",\n- placement prefix \"+\".\n\nThe names of objects from a specific partition under one relationship\nare given at each level of the partition’s hierarchy (remember: partitioning\nis a hierarchy with part-whole relationships). But in each partition,\nthe “part-whole” relationship is constructed according to one specific type of objects in the partition.\n\nFor example, =S12=16 indicates a functional part 16,\npart of (relation composition/is\\_part\\_of) functional part S12. The number of\nlevels in the partitioning hierarchy in the name is unlimited.\nFunctional/role name engineers often call **tag** (tag).\nDesigning, of course, takes place in types/classes: this is the name of the types/classes of the system parts, not the specific parts of a specific\nimplemented/realized physical system at a particular moment in time\n(instances of material embodiment of objects of that type/class that were in the project/design).\n\nIf the name is -M87-K5, it refers to the product/module/construct/item\nK5, which is part of the higher construct M87. This too is not a specific\nphysical object with a serial number, but a type/class of these objects,\na type of products of a certain brand.\n\nThe standard IEC 81346 formalized such naming to provide short **codes**\ninstead of “normal” long names. Indeed, if there are 6 million individual parts\n(part—a construct that isn’t assembled from its subconstructs)\nin a Boeing 787, it immediately means they’ll have several names, plus\nfunctional names, and place names. In this case, it’s better to keep these\nnames short, and for each name to make clear to which type of parts from which partition\nand whole these parts belong to within the aircraft.\n\nThe standard IEC 81346-1:2022 formalizes the modern engineering consensus\nabout the three main types of system partitioning into parts. In total, it introduces\nfive partitions, besides functional, product, and placement, there are\nalso “type” for arbitrary grouping by some attribute and “other” for everything else—logistics, cost division, administrative subordination. Our cost partitioning under this standard will fall into this “other” partitioning, other aspects.\n\nIf you look at today's engineering projects, naming::method\n(slight differences between naming/naming::method,\nidentification/identification::method, and\ndesignation/designation::method with slightly different\nsubjects of all these methods we will not consider here) of system\nparts and the whole system is exactly like this, adding other characteristics to such names\nand codes, such as voltage or pressure, standard size, and even price\n(although price is no full substitute for total cost of ownership, and\nit is not a name or a code, without this description talking about the system\nis no longer customary).\n\nWe have already encountered situations where Prince Hamlet and Vasily Pupkin\ncould be the same human agent but called differently depending on what we need from him: to understand what his next line will be in his play (this is about the role/functional, i.e., about Prince Hamlet), when he plans to learn a new role in a new play\n(this is about the construct, i.e., Vasily Pupkin), or to find out if he has children (this is about the construct, i.e., Vasily Pupkin, unless talking about “the children in the play”). The same can be said of inanimate systems, for example, differently named systems may turn out to be the same device:\n\n- “pressure gauge in the fifth cooling loop”::“role/functional object”,\n- “KLM-23 pressure gauge from 'Automation Assembly Plant'”::“construct\n    object”/product/module,\n- sensor in “fifth box on the third shelf of warehouse number 4”::placement,\n- “$300”::cost.\n\nIn reality, you are unlikely to see around such names an indication of the type of object from the meta-meta-model, but here we indicated the types to explain the difference in the types of objects designated by such names, in real life, you will have to understand each time what type of object is named by one or another name.\n\nDifferent names indicating very different types of objects signal that we will\nemploy very different methods for working with this subject of the method, thus, the same device appears in different guises, making it convenient to call it different names\nfor different methods of work. This is normal; it’s unavoidable in projects!\n\n**Forcing all the roles in a project to use the same name** **(including the same classifier which helps to give a unique code), the same** **partitioning of the system into parts—** **is impossible, unproductive,** **this** **is an error. Acknowledging role-based thinking driven by role-based interest** **in the method’s subjects requires many names for objects, many classifiers for system parts.**\n\nBut names should be given meaningfully, not just as a free-for-all where everyone writes as they breathe because “I am an artist, I see it this way”. These are all culturally\nconditioned names, “cultural” here reads as culture from the long synonymous series:\nmethod/style/culture/practice of work. Type of labor, engineering, occupations, as well as strategy and even service—this too refers to methods, knowledge/theories/explanations/algorithms of these methods and the tools of these methods. Choosing “culture” from this synonymous series means only that the method is shared by a fairly large number of people, it is widely recognized. So names should not be invented arbitrarily, but given based on\ncivilization’s accumulated knowledge about similar subjects of methods. But since many methods can be applied to a single system as the subject methods, the system will have many types and corresponding names.\n\n“Prince Hamlet—Vasily Pupkin” is quite cultural (i.e., understandable to many people without additional explanations), even though it uses two names of separate guises of the actor: the character and the performer. Similarly, system names in industry can often consist of names of several guises, e.g., “=S12=16 --M87-K5 $300” (composite name of one system consisting of three individual names of this system). Such names satisfy the interests of different project roles, individual names are listed through spaces. We notionally count price as a name, though it isn’t exactly so, but noting the financial characteristic near a name does not feel unusual; this is what we want to emphasize.\n\nSuch a composite **“system** **name”/“system** **designator”** can usually be used in one specific project just as the composite name “Prince Hamlet—Vasily Pupkin” can only be used in one play; in another play, role distribution will be different. All these composite names talk about a particular place in space, so it’s always possible to figure out which system is named by such a composite name by specifying the situation in the physical world. It is pointless to investigate by requiring definitions for all the constituent names, then aligning different objects in the project to fit the definition! No, you need to immediately specify/ground, moving from types/classes and definitions to objects in the physical world (or at least examples of objects in the physical world).\n\n**You are warned:** **arguments about definitions** **(often called**\n**“argument about terms”)** **are meaningless,** **and** **systems\nthinking—** **is not mathematics, not defined by “strict definitions” and\n“unambiguous names”!** It is useless to clarify definitions “as in mathematics”, “as in the dictionary”, “as in science” and demand identical names for\n\n- the hot system (functional name),\n- the system bought yesterday (product/construct name),\n- the remote system (spatial name),\n- the expensive or cheap (cost name) system.\n\nThe situation should always be clarified, but not through definitions, only through\nunderstanding where these systems are located in physical\nspace-time: if in different locations-times, they are different\nobjects, if in the same location-time, it's the same object described differently—the same system. Having many descriptions, not one, many names, not one, is the norm in systems thinking, and systems thinking also offers 4D extension and grounding as methods to combat confusion in the multiplicity of names for one system.\n\nThe essence of the systems approach is not to forget the system as a whole—system's realization/ realization, which only differently appears by different project roles as divided into parts of a certain type, depending on the methods by which these project roles will act.\n\nBecoming fluent in such simultaneous retention in attention of different\nrepresentations of different roles to satisfy their different interests in\nthe same object, becoming fluent working with many descriptions of one\nsystem, including many variants of system partitioning into parts,\nrequires some time to learn, although the idea of multiplicity of names for multiplicity of types (classification in multiple classifiers, convenient for different work methods for different roles) is usually understood at the first presentation. But it’s one thing to understand, quite another to freely master such thinking oneself, retaining attention on the same objects as subjects of different work methods and therefore having different names.\n\nIt is helpful here to write down these objects of attention: no one demands\nholding this systemic multiplicity in mind, write them down! In systems thinking usually “all moves are recorded”, greatly easing life. A computer is not forgetful, records in it are accessible to many agents (not only people!), carrying out the most varied work methods with the most varied subjects of these methods, the most various roles in the project, so **system partitions are always documented, it is not customary to agree on system partitions** **“by word”.** **Write your partitions!**",
    "555a81992eeef797960d618a57630b9a": "---\ntitle: Systems Description\n---\n\n**Systems Documentation/System Documentation** (system description) ---\nthese are documents/artifacts/work products that implement the alpha **systems definition/description** (system definition). The system description in the previous phrase is given as an alpha type — this means that an ontology is proposed, in which creators will develop the system description using some description methods, it will be the subject of the method, will go through some states that will be tracked during the project, and will be represented by some artifacts.\n\n**If there is a system, it is considered described:** **it has a concept of use** **of the system** **(alpha, not work products!),** **it has its project/design** **(which includes the system concept, architecture as a set of architectural decisions, as well as engineering justifications, manufacturing details, description** **of the manufacturing method/technology, and so on.)** We may simply not yet know this description, although it \"logically exists\"—the system is in space-time, and time here may be in some future, and we are in the present, and therefore just have not yet thought about these descriptions and have not documented them. Alphas exist, but there are no work products, so we cannot say anything about these alphas. But we consider that they already exist as subjects of some methods, they go through some states, but what state these alphas currently have in the project — we cannot say if there are no artifacts by which we can know these states.\n\nOr we simply have not yet found the executors who will make such descriptions of project roles and have not yet guessed the right question to ask them — and they will give us the missing parts of the description, they know them, it is just us who don't know them yet. In any case: there is a system — there is a concept of use, there is a system concept, there is its architecture, possibly just not yet discovered (either not found already existing, or not yet invented and documented): we already know the types of meta-meta-models, it remains only to receive the objects themselves, and then document these descriptions.\n\nIt's not that \"we don't know if they exist or not\". They do exist, here are their types — which means there must be descriptions, sooner or later, attention to them as alphas (they will change their states during the project) is already there, attention is being drawn by types already known to you! It's just a matter of identifying them or even designing them — proposing a guess as to what they are, agreeing on guesses from various people, trying to create a system according to these descriptions (then such descriptions will be called project/design).\n\n**When you go into a completely new project, you already know a lot about what you need to monitor there,** **what alpha state changes to track,** **you are not in complete ignorance! You already know the** **fundamental** **meta-meta-model, and sometimes even the** **applied** **meta-model (if you are engaged in something in the applied subject area whose practice you have already mastered). Therefore, you already know something about the world, but something (a model** **of the situation, without any \"meta\")** **you will have to learn in the very project, and also track the state change** **of objects in a rapidly changing project.**\n\nIf we're talking about shoes, you already know there will be a sole, a heel, an insole, a form called \"style\" — just one word \"shoes\" is enough to start discussing objects of these types. They are definitely there, even if the heel is \"heel-less\" (a space is also a sign!). If you go into a project, you know that a system is being created there, there's a creator, alphas need to be tracked, and for the many systems of the project, you need to track at least four of them (target system, system description, system work method, system work) and even break them down into sub-alphas (more on sub-alphas later).\n\nTo reveal (identify) the system description to the world, it needs to not only be known (or even proposed anew), but also recorded on some media so that systems documentation appears—record all these models (and sometimes texts in natural language, photographs that may not resemble models much but still reflect something important in the real system, they too describe something in it, so we boldly consider them also models, albeit less formal descriptions) in electronic form as entries in a database. We are not even considering paper representation today; it is already outdated. But when talking about the alpha of systems definition, the work product of systems documentation (system description) is largely unimportant—this is more a matter of convenience for work, rather than something fundamental. Today it is convenient to work with database records (local representations on electronic media), later perhaps with some neural networks reflecting these descriptions (distributed representations on electronic media), and back in the last century, they worked with local paper representations (like paper blueprints of mechanical systems).\n\nIf there is a system, then someone has identified it from the surrounding world for some purpose (\"system in the eyes of the beholder\"), has agreed on this system isolation from the world with other creators in the creation graph (collective projects usually), thinks about it, keeps attention on the method of working with the system. Thinking means performing some operations with its description; without this, other works with tools that change the system in the physical world are impossible. We are not considering options for creating and developing systems without any work on its design or recovery of the project/design during \"reverse engineering\": \"if you don't write it, you don't think about it,\" projects/projects without design documentation have minimal chances of success.\n\nIf some role cannot describe some aspect of the system, then the system has not yet been isolated from the surrounding world. **We must clearly distinguish between the always existing description of the system as an alpha** **(possibly in the state of “system description in the scope of a brief usage concept idea”)** **and the not always existing systems documentation as** **a work product/artifact** **(including electronic** **documents).**\n\nSometimes the description of the system/system definition is translated as \"system definition\". In this case, it is important not to confuse the term with a \"dictionary definition,\" like \"our system is this and that\". No, it's various information about system implementation, including various models of the target system, and often it's constructive description (in the sense of constructivism: \"to describe an object, you need to define operations for its construction\"), so explicitly or implicitly, the creators from the creation graph and their operations are also described — this will all be the system description (system definition). A single phrase \"dictionary definition\" won't replace it; in system definition, the term \"definition\" has a completely different meaning, not a reference to \"definition as in the dictionary\".\n\nIn practical engineering life, it usually starts with developing (identifying, inventing, agreeing among each other) and documenting project roles descriptions (usage concepts, system concepts, architectural decisions, and so on), and then the project team moves from project descriptions to implementation::system method in the physical world (manufacturing/producing the system, commissioning it) — and all this is in a continuous cycle of system development, through many versions of the system, assembled from multiple versions of its parts. If it's reverse engineering, then everything is the reverse: taking a system in the physical world and restoring all descriptions for the already ready system. **Usually in projects, reverse engineering is done for the supra-system, and direct for the target system.**\n\nIf you joined some organization (client, contractor, or just joined a new project team for you), you do reverse engineering of this organization: understand what's happening in the creation graph. If you need to organize the system creator, on the contrary — you do direct engineering, prepare all these descriptions as project ones, and then convince the agents in the organization to follow these descriptions (the \"Systems Management\" course is just about this, the whole \"Organizational Development\" program helps to do this).\n\nPhilosophical logic advises always starting with the system's embodiment, even if this embodiment will only exist in the future: **you need to imagine** **(generate/generate** **a description based on your existing generative models/generative** **models** **of the world, knowledge about the world), and then document this description** **of the possible world, in which the system embodiment** **already** **exists!** Do not forget for a moment that the system embodiment is needed, and the description (given to us as information models, blueprints, manufacturing instructions, etc.) is needed only because, without the description, it is very difficult to bring a working system to life. Remember: when the technologist describes the kefir production technology, he makes kefir, not just describes a method for making kefir. In the end, he is required not documents with the description of the technology (manufacturing method, needed tools for this method) of making kefir, he is ultimately required to produce kefir in its physical embodiment — this is his target system. But there is no kefir yet while the technologist describes the technology of its making, and there are no tools for making kefir while the technologist has not described them. Nothing terrible, in the possible world, they already exist in the future! This is what we are describing.\n\nThe diagram has no set reading direction (left-right, or right-left, or bottom-top, or top-bottom) of alph diagrams (objects of attention, which will change their state during the project) for the systems description. Different project roles for their purposes read this diagram in different directions. But the main element of the diagram is, of course, the system embodiment. All activity is started for it, it must always be kept in mind.\n\nAll such diagrams are checklists of alphas that need to be kept in mind when thinking about the project; for each alpha object, there will also be a checklist of states through which it should pass. Detailed information on checklists will be in the \"Methodology\" course, which will also provide example checklists for about three-quarters of the main alphas you will encounter in projects. It will also explain how to prepare these descriptions. **Descriptions of alphas and their states** **are descriptions of the alpha** **\"working method\"** **of the creator** – **these are objects of the method that change during the work of some creator.**\n\nThe ISO 42010:2022 standard provides recommendations on how to think about systems description/system definition. The standard itself only speaks about architectural descriptions, in the old understanding of architecture, but its provisions are quite applicable to any description, that is, usage concept, system concept, and architecture.\n\nHere is a diagram determining thoughts about system descriptions from this standard, modified using OMG Essence provisions, and generalized from the architectural description of some entity of interest to the overall systems description:\n\n\n![](11-systems-description-63.png)\n\n\nThe system description diagram starts with the familiar differentiation of realization and definition (description) of the system.\n\nFor simplicity of the diagram, most of the relationships (except for one: satisfies/is described in one direction and characterizes/is described in the other direction) are shown with only one naming of the connection, but this does not mean that the reverse relation does not exist. This is a common feature of all such schemes: even a \"part-whole\" relationship is read as \"includes\" or \"consists of\" in one direction and as \"is part of\" or \"is included in\" in the other direction.\n\nEach connection between objects on this diagram can be read in two directions, for example, \"the system description is expressed by the system documentation/systems documentation,\" \"the systems documentation documents the system description.\" They say both \"systems documentation\" and \"system documentation,\" and \"system description\" and \"systems description.\"\n\n**Note that documentation does not fix, but documents** **the constantly changing descriptions during the project** **(systematic, role-based, model-based)! Avoid the word** **\"fixes,\"** **because people usually think it means not documenting (as you think when you say the word** **\"fixes\"), but declaring the description as unchanging, \"freezing requirements,\" or \"freezing project descriptions.\"** \"Write,\" – means document, and \"fix\" – means \"stop changing,\" completely different action! You will definitely be understood with \"fixation\" as \"further discussion ended, now follow\".\n\nFixation or fixing requirements in past engineering (sometimes still used when talking about usage concept fixation, and exception of fixation/freezing of requirements was one of the reasons for abandoning requirement development in favor of usage concept development) for most means not writing requirements on paper or in the database, but declaring the current set of requirements stable and unchanging. But in systems thinking, you better and better describe the system (or describe an increasingly better system, as you understand how exactly it will be used, in what environment), constantly changing the usage concept – documentation does not hinder this, models of the system are not \"fixed\" at any project's moment! You can administratively declare some version stable. Engineers then use the term baseline, but this does not mean \"fixation\"! Just the changes in system descriptions will be collected and documented in other artifacts (a \"working version\" document, not the document of the already approved \"baseline\"), and later the baseline will be changed by some administrative change management procedure. But even here changes: trunk-based development ^[<https://trunkbaseddevelopment.com/>] implies that all development does not generate separate long-living branches, and in modern engineering (e.g., at Tesla plants, in SpaceX), each individual car or rocket has unique descriptions (project description), produced by a unique project and manufacturing process each, no two identical cars or rockets. But a third generation of systems thinking deals with this, talking about versioning — and how to live when each system instance version is unique, and the systems themselves continuously evolve.\n\nFor now, we remember: the diagram does not say that one-time a single version of the system description is made, which will then be used in system manufacturing. No, the diagram just says what objects of attention you have in the project when describing the system and documenting these descriptions. These are alphas, so you must keep in mind not just these objects but changes in the states of these objects (subjects of various engineering and management methods) during the project.\n\nHere is the same diagram in English:\n\n\n![](11-systems-description-64.png)\n\n\nThe system description (system definition) consists of role-based/aspect/view descriptions of the system (views), which are defined by important characteristics (concerns, role-based items of interest/concerns) and are set by aspect description methods (viewpoints). **Role-based/aspect/view descriptions of the system** — these are precisely the concept of use (developed by the role of engineer-designer), architecture (formulated by the role of engineer-architect), and so on — descriptions made by various engineering roles, given in the \"Systems Engineering\" course. But in management, it will be, for example, not just architecture, but org-architecture, and as the \"concept of use\" of the organization, there will be a business model, where the need for the organization is justified (and the role of a businessman will be responsible for it). Aspect descriptions — it's anything that describes the system in a convenient way for discussing role interests.\n\nOf course, there may be many role-based/aspect/view descriptions. For example, a role may be interested in finance. Then the role-based description is financial, and the models there are the balance sheet, profit and loss statement, cash flow statement. How to make these descriptions? These descriptions can be made using the RAS (Russian Accounting Standards) or IFRS (International Financial Reporting Standards), and the meta-models are the formats of the balance sheet, profit and loss statement, cash flow statement in the corresponding role-based description methods (RAS or IFRS). If the financier is interested in both description methods, he will get two descriptions — both in RAS and IFRS. How will these descriptions be documented? Either on paper, or in Excel spreadsheets, or in the database of a computer accounting program — in any case, the content of the descriptions can be discussed without discussing the format of representation on information carriers.",
    "b6c6201ff17a7bb2ba152988b3d93e59": "---\ntitle: Functional Analysis and Modular Synthesis\n---\n\nEach work/professional/project role, due to the specifics of its interests, sees a partial description of the system as a \"transparent box,\" consisting of the types of parts that interest it, allowing it to discuss its areas of interest. For example, an “Operations Manager”::role is not interested in how the system works (functional description), but in \"what it is made of\" (constructs) and the logistics of these constructive parts to the assembly site, and after assembly — to the place of sale. Operational managers are not interested in \"system functionality,\" but are interested in the construction of the system; they will manage the configuration, \"so nothing gets lost, everything is assembled, and nothing is mixed up.\" Management/management — is usually not about functionality, it is about logistics! It's about \"on time, timely, nothing lost, everything handed over, all engineering tasks completed.\" The focus of operational management as a method of work for an operational manager includes constructive parts undergoing state changes during the creators' work.\n\nHowever, an engineer-developer, considering the calculation of the operating/work/operational modes of some system, first thinks about \"how it works\" (**functional analysis** based on functional decomposition) to ensure that the interaction of functional parts-subsystems results in/emerges the required function of the entire system, and then will necessarily address \"what to assemble from\" (**modular synthesis/assembly,** selecting affordances-constructs from constructive decomposition for the functional parts of the system). Modular synthesis for an engineer-developer will not be immediate, but will occur when the developer, through functional analysis, understands what specific operational/work modes are needed, and what characteristics are required from subsystems to select the necessary affordances of constructs/modules.\n\nIt is not customary to talk about \"functional synthesis.\" The focus is on functional decomposition and functional analysis (analysis — is also \"fragmentation\"). In the analysis, we take a functional object (role) in the supersystem and look for its decomposition/fragmentation into subsystems, also functional objects. For constructs as material objects — we take various material objects-constructs (materiality here emphasizes existence not only during the system’s operation but also during its creation, and even outside the project — \"on their own\") and seek affordances/matches in them to assemble from these affordances-constructs such a super-construct that will \"play the required role\"/\"embody the functional object\" during use. That is, the constructs seem to be synthesized/assembled from material parts, and functional objects, on the contrary, are only fragmented — this is a logical description of the method. In reality, all this happens iteratively and with various conjectures over a fairly long time, because it is an optimization, an iterative process across many projects, many versions of the system. It should be particularly noted that both functional and constructive objects are types of physical objects. A functional object is physical when its role is played by a constructive material object (i.e., the material for the physicality of the functional object doesn’t come from \"nowhere\", but from the material object that is set to play the role, perform the assigned function).\n\nNote that engineering necessarily includes both functional/systems analysis (systems are usually primarily described by their roles, functions — that’s why functional and systems analysis are synonymous) and modular synthesis. **We have a course of comprehensive** **systems thinking, where analysis and synthesis are given equal attention.** **This is not just a course on systems analysis, which is a very small and limited part of systems thinking!**\n\nThose who engage only in analysis (functional/systems or any other) are dreamers who have no chance of changing the world. The world needs changing physically. For this, certain constructs/products/modules must begin to embody the functional parts of the system, i.e., must be physically assembled to start interacting. It’s not enough to understand how the system works, to think about the system, discuss the system, analyze it — the system must be embodied in the physical world, for this modular synthesis must be performed, i.e., design/engineer the system constructively from constructs, manufacture the constructs, assemble the system from them, debug its operation, further develop this system, release many constantly improved versions of the system. This is all the work of \"synthetics,\" not \"analysts.\" An engineer is someone who thinks and does, not just an analyst who only thinks and is not involved in works related to changing the world.\n\nThis is exactly the same reasoning as for the performers of human roles in plays. If you only write plays, prescribe roles and behaviors well, but do not think about the embodiment of these plays by actors (including robots and animals!), it's fair to consider it just literature, not dramaturgy. Actors will fly, dissolve in air, give lines telepathically: if you don't extend thought to reality, everything is possible! A playwright and director of a play usually imagine that their play will live in reality, performed on a very limited stage for a very limited time, and there will also be a limited number of viewers in the audience — thoughts and emotions of characters cannot be conveyed to the audience as it can be done in literature by simply giving descriptions. No, everything must be expressed through acting, that's what dramaturgy, scripting of plays, is about, not just “writing” as such.\n\nEngineering thinking should not be just analytical, speculative, it must be adequate, i.e., not lose connection with the physical world, not just stay in the clouds, but aim to change the world for the better, to create and develop systems, and it is not enough to just explain the world, analyze systems!\n\nTherefore, a systems thinker doesn’t limit themselves to the operating time but is also involved in development time. They definitely distinguish at least four areas/fields of interest (and this is just the beginning, usually, these zones/fields of interest are more, and in each, there are many topics of interest):\n\n-   functional/role-based,\n-   constructive/material/modular,\n-   spatial (combining functional and constructive within the framework of 4D extensionalism, the relation of realization is shown by the fact that functional and constructive parts occupy the same space-time, so space-time is introduced explicitly),\n-   cost/expense/economic/resource.\n\n**Analysis/decomposition is always only part of thinking! Beware of a project where it is not clear who makes decisions on synthesis! Synthesis changes the world, analysis does not change the world! Only synthesis decisions change the world!**\n\n**Who has the right to indicate that the rocket will have three stages? That there will be three departments in the enterprise? That Vasya Pupkin will play the role of Prince Hamlet, and Dasha Nevrubkina will not? It's certainly not analysts!** **These are engineers who change the world, not just understand it!**\n\n\"Analyst\" here is a role, not a position. An agent (person or even an entire organization) in the position of an \"analyst\" can well perform both the role of an analyst and the role of a synthesizer/constructor, i.e., make decisions on functional decomposition, functional analysis, and modular synthesis. But it would be better to call such a position, with a person making decisions about changing the world, otherwise, “engineer”: project participants do not expect \"analysts\" to have decision-making authority to change the world and hence are not inclined to discuss decisions on modular synthesis with people in analytical positions.\n\nTypically, such decisions on assigning constructive parts of the system to role/functional parts are made by a design engineer, relying on principles of dividing the system into constructive parts and describing the connections of these constructive parts prepared by a system architect (this is the essential part of concept creation for the system — assigning affordances-constructs to subsystem roles). Thus, an analyst is only a part of a design engineer and part of a system architect. Today, a separate analyst is considered more like a \"broken telephone\" between the outside world and the engineer who makes the decision. How you name the yacht is how it will sail. Rename an analyst an engineer, and you will see how they start taking responsibility for decisions made (not just for analytical \"understanding\" and \"identified problems\"), and the people around will recognize these decisions, not considering them merely \"analyst recommendations\" for some engineer. More about this is explained in the \"Systems Engineering\" and \"Systems Management\" courses.\n\n\"Enterprise Engineer\"/manager::role for \"enterprise engineering\"/management::method. Org-designers and org-architects/\"enterprise architects\" understand that they are essentially engineers of organizations::system (sometimes they directly refer to themselves as organizational systems engineers). Sometimes org-designers and org-architects call themselves enterprise engineers to distinguish themselves from \"just managers,\" implying they are not \"operations managers\" and do not engage in enterprise operations time methods, i.e., they are not \"enterprise operators\" and do not deal with administration but create and develop the enterprise. Remember, MBA is a degree of master of business administration, management in conversation narrows down to administration. Org-developers and org-designers emphasize that they use systems engineering standards in enterprise engineering, treating the organization as a system.\n\nLeaders (those who implement organizational changes, analogs of process engineers in mechanical engineering, i.e., \"specialists in changing the physical world, manufacturing the system embodiment\") take the concept of the organization from org-designers and org-architects (specializing the system concept for an org-system: decisions on realization/embodiment of org-roles by org-units, considering org-architectural solutions) and further \"manufacture\" the enterprise itself according to these descriptions, explaining the org-roles from the functional description of the organization to agents at each job position in the org-structure as a constructive breakdown of the organization. Leaders \"catalyze cooperation\" by creating an atmosphere where each agent-employee performs their roles qualitatively, regardless of where their workplace is located (description of placements) and with whom these agent-employees have to interact under the inevitability of productive conflicts between the interests of roles played by agents-employees.\n\nOf course, all this is explained in detail in the \"Systems Management\" course, here we just need to emphasize that **leaders take the organizational concept from** **org-designers and** **org-architects, i.e., from** **\"synthetics\",** **not analysts, and** **if the organizational concept is missing, then leaders have nothing to do literally —** **if there is no org-project, it is unclear what to explain to employees in terms of labor division in the project**. Org-analytics is performed as necessary by the people performing the engineering roles of org-designers and org-architects. Some \"department head,\" organizing their department, performs the roles of an org-designer and leader (together these roles can be combined as the role of \"org-development manager\"), and also the org-architect of this department, and may also perform roles in the applied engineering project of \"their system\" (for them, it will be \"our system,\" sometimes even coinciding with the target), for example, a system architect — the smaller the enterprise, the more roles one agent plays.\n\nAnd, of course, \"functional analysis\" and \"modular synthesis\" are only two aspects of system description. In engineering (the target system, personality, enterprise, community), one must understand all the main (four or even five) aspects during analysis and synthesis, and a greater number of aspects — for besides the main ones, there may be others. Systems thinking is precisely about finding a suboptimal solution for synthesis (how to embody the function with construction, how to assemble it in space with costs not higher than those project role holders are willing to pay, and with work that can be feasibly completed with available resources within foreseeable timeframes), satisfying all project roles.\n\nYou won’t achieve the optimal in synthesis; there are always many suboptimal (clearly worse than optimal, \"the least bad of the known to us,\" not \"the best of the known good\") solutions of about the same quality based on SoTA ideas (remembering the unsettlements from conflicts between different system levels), you must guess at least some of the suboptimal solutions, choose one of them. The rational choice of a project solution among those proposed during synthesis is often also called \"analysis,\" while there is a resource constraint on this choice of a solution for synthesis — we avoid analysis paralysis^[<https://en.wikipedia.org/wiki/Analysis_paralysis>].\n\nSystems/modular synthesis is always multi-criteria optimization, which goes on at many system levels simultaneously, based on **hunches/hypotheses/inventions** that have undergone numerous justifications. **If you managed to more deeply reconcile all descriptions** **by all main types** **of decomposition** **of the designed system,** **and even add some additional types,** **there is a big chance that you will have** **(temporary, only for the current moment)** **success compared to all competitors, who consider descriptions by fewer aspects.**",
    "f2ff2c7ebb011e74e451d00b45a21923": "---\ntitle: The Struggle with Complexity in Thinking\n---\n\nEdsger Dijkstra in 1974\nintroduced^[<http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.html>]\nthe concept of **separation of concerns** as\na way to organize human thoughts about a subject. This principle states that one should discuss complex situations one important characteristic (concern) at a time, focusing the attention of various roles on a single aspect or side of the situation. This does not mean ignoring all others, but rather keeping both the single aspect being discussed right now and the overall situation in mind. According to Dijkstra, this kind of thinking is \"It is being one- and multiple-track minded simultaneously\".\n\nThis division of thinking by subjects of interest is conducted recursively, in the understanding of Systems thinking — it’s the same thinking methods at each of the numerous systemic levels. Each system at each systemic level has many concerns, and they are discussed one by one. Due to emergence at each systemic level, systems, subsystems, and supersystems exhibit different sets of properties and characteristics, requiring discussion of different systems and their different characteristics. There are many concerns for each system at each systemic level, plus there are concerns regarding the creators, which is a creation relationship — but this too is a systemic approach, starting from its second generation.\n\nThe complexity of describing/discussing a system is thereby reduced by splitting a single entangled super-complex discussion into several less entangled and complex discussions in two ways:\n\n-   dividing the complete discussion of the whole system into **discussion of its individual parts by systemic levels.** Each part of the system is simpler than the whole system, therefore the discussion proceeds more or less uniformly at each level, and each part of the system is described **by the concept of its use** (ConOps or OpsCon, accounting for the nuances of their similarities and differences, varying by engineering school of thought), i.e., by describing the system as a “black box.” In it, the internal structure of the system and its parts is ignored, so the discussion always starts with whole systems within the supersystem, or whole subsystems within the system, and so “all the way down” and “all the way up.” Systems thinking as such stands “aside,” it is transdisciplinary, keeping everything in systemic division in mind to ensure nothing is forgotten. The systems of each individual systemic level in their breakdown can then be discussed by practitioners of one team or even different teams.\n-   dividing the complete discussion of each system at one systemic level into **discussion using multiple descriptions of different aspects** of that system as a transparent box. The most important of these descriptions – **the system concept** (systems concept), includes functional, constructive, spatial, cost descriptions, and many others. This division is based on the main engineering roles (visionary, developer, architect, platform engineer), also specializing in specific types of systems on a given systemic level.\n-   Separately, **discuss the creators in the creation graph**, which means following the creation relationship rather than the part-whole relationship. Systems thinking forces you to keep the creators in mind!\n\n**Detailed and thorough discussion of large complex systems and their creation graphs** **principally (due to the very essence of the Systems approach) can be broken into sufficiently small parts, ensuring no part of the discussion is overlooked, and no description is missed. How do you eat an elephant? One bite at a time!**\n\n\n![](10-the-struggle-with-complexity-in-thinking-78.png)\n\n\nSystems thinking by nature is collective, allowing for the separation of both mental (by design) and physical (by manufacture and operation) labor, engaging many different living and non-living performers in diverse project roles — while carefully considering the parts of the system at all systemic levels to account for all known role interests at each systemic level.\n\nBut how to agree on how to combine all these different descriptions of different parts of the system into one comprehensive system description? How to get all these roles and their performers to agree? All these descriptions can be combined if one understands that they all describe the same point in space-time, relate to the same embodiment of the system. At the center of any Systems discussions will be the physical embodiment of the system considered at runtime, linking to all other considerations.\n\nWithout a systemic approach, it’s impossible to complete complex projects involving many different specialists on time and successfully: the system will fail because someone’s interests won’t be accounted for (i.e., forgotten, lost: the team’s attention won’t suffice!), introducing an error in the system, leaving people dissatisfied with its operation or with the project creating the system. Plainly: if you forget to discuss one system, subsystem, or supersystem “of our” system, or the target system, or even the creator - there will be trouble, “if something can go wrong, it will go wrong.” Collisions are inevitable, something will have to be reworked, consuming unplanned resources.\n\n**Systems are discussed one part at a time, one description of a part at a time — never losing sight of the whole system in its environment, and also its creators.**\n\nCreators (\"systems of creation\", omitting the word for the type of\nmeta-meta-model) — are also systems, but it’s important not to forget that their entire existence is related to the target system and hence should not be referred to as the targets themselves. But they can be \"our system\" for managers as enterprise engineers. If a manager suddenly says, \"my enterprise — that’s my target system,\" it violates the collective nature of thinking; the manager will be unable to agree with anyone. They should honestly say that the target system is what their enterprise produces (even if the enterprise provides a service), while the enterprise itself is “their system” (not a common system for all).\n\nIf you provide a product for use within an enterprise or organizational link (or part of it, if not the entire enterprise or link), it becomes the supersystem for your product. A clock you deliver to an auto plant can be used by plant workers (not just \"clock users\") either in the car produced by the plant (similarly, plant workers are not just \"clock users\") or in the workshop (where they first act as workshop developers, a supersystem for the clock, and then as time-interested, \"clock users\").\n\nIn enterprise engineering, all systemic considerations remain the same, but terminology and practices change. For example, enterprise modules are called **departments** (less often referred to as **org links**, but systems thinking considers collegiate bodies such as working groups, councils, and commissions), functional parts of the enterprise are its **org roles**, the functions/methods of work for org roles are often called **work processes**, and configuration management of the enterprise is called **accounting**. Importantly, org links are not **developed** but **organized**, and manufacturing itself is not **production** but **leadership** (explaining to rational individuals how their org link is structured and their place within it, cooperating with others — this is leadership). More details are in the “Systems Management” course.\n\nWhen it comes to organizational systems, the concept **enterprise engineering** became relevant a couple of decades ago, but the terminology didn’t become “iron-engineering” nor universal across systems, i.e., meta-meta-model level. In other types of systems (medicine, law enforcement, dance, politics, etc.), terminology might differ even more from that of engineering and Systems thinking. In education (personality engineering) it's about mastery engineering, highlighting roles:\nvisionary — cultural promoter, designer — methodologist, technology engineer — methodologist, etc. (for more, see the “Personality Engineering” course).\n\n**Words don’t matter**, what’s important is the general structure of thinking (what to pay attention to in all these projects: Systems thinking manages attention). **Words matter**: without the terminology of a specific domain, you won’t understand the subject matter. Also, types of meta-meta-models are important: with them, you’ll see the commonality in diverse situations, projects, systems, and types.\n\n-   **In each project, you will need to correlate** **\"apples from the text** **book\"** **with** **\"apples from real life\": identifying concepts corresponding to objects from various domains** **(domains, concepts from the meta-model)** **with** **fundamental concepts of Systems thinking** **(meta-meta-model).** **Remember, it's just about navigating: you’ll quickly understand your location. Next, you’ll need to:**\n-   **Strategize, figuring out which method with which method objects you will work** **— even if neither** **you nor anyone else** **knows exactly what needs to be done for success. Propose several methods most likely to succeed for the entire endeavor, then use decision-making methods to select the one that can’t be criticized.**\n-   **Plan your actions based on the chosen method, tying them to specific time and resources.**\n-   **Take the plans seriously: allocate (or even obtain, if initially unavailable) resources and execute these plans, even if it’s about step-by-step planning.**\n-   **And continue thinking systematically, examining what Systems thinking points to as important, holding this crucial information in collective attention among project participants, preventing attention from scattering.**",
    "a23dbdc0b5818343b26c33af37360e17": "---\ntitle: Descriptions and Methods of Description, Models and Meta-Models\n---\n\nA description/view of certain aspects of a system consists of one or multiple distinct **models**. Here, of course, \"consists of\" is not a composition relationship for physical objects, we hope you have already noted this for yourself. Often, therefore, the words \"consists of\" are replaced with the evasive \"groups\" (the description groups models), and in the opposite direction — \"are grouped into\" (models are grouped into a description).\n\nA model is a set of some objects (physical or abstract/informational) that behaves in some way similar to the behavior of the modeled object, that is, it describes this modeled object (the modeled object does not necessarily have to be a system — you can model anything, \"an object is everything that is the subject of our consideration\"). The types of these modeled objects are given by meta-models and are taken from the theories/explanations of the description/modeling method (viewpoint). Models can have varying degrees of formality (up to and including the point where the most informal descriptions may not be considered \"non-model descriptions\" by standards, but we will not consider them this way).\n\nFor example, a complete Systems view includes a \"financial view\" of an enterprise::creator (and between the view and the described subject, there is a representation relation, all of this was discussed in the \"Rational Work\" course).\n\nIn the financial view, you can distinguish different constituent models needed to answer different questions of the role interested in finance:\n\n-   balance (balance),\n-   profit and loss report (profit and loss, P&L),\n-   cash flow (cash flow).\n\nIf you have only the balance sheet, you cannot answer the question of the enterprise's break-even point, and if you have the profit and loss report and even the balance sheet, you won't be able to discuss the cash gap without the cash flow documents. One view for one area of interest (with several subjects of interest), three different models for three narrower areas, down to individual subjects of interest (of course, subjects of interest/important characteristics can be clarified).\n\nAll these decisions about how detailed, broad, or narrow to consider some important characteristics of the system are subjective and are the result of agreements in the project. But it would be good to know the general principles of reaching such agreements, to discuss what — so that these agreements can be achieved faster.\n\nEach model must be made using one of the meta-models/model kinds (this was discussed in detail in the \"Rational Work\" course when talking about ontological descriptions), and each meta-model sets certain languages, rules, and other **modeling conventions** (for example, which objects we assign which types of meta-model or meta-meta-model, and how we will choose object names and type names from long rows of synonyms).\n\nJust as individual models (models), responsible for dealing with some interest, are combined into a more complete description (view), responsible for dealing with interests in a certain area of interest, so are meta-models (metamodels/model kinds), which define the language, rules, and modeling techniques used in role-specific/contextual/descriptive views, combined into **methods** **of** **description** (viewpoints), reflecting/fram subjects of interest (concerns) in areas of interest (area of concern). Methods of description with their meta-models and other modeling conventions are often described in a special document called \"modeling conventions.\" Often for models with some data about the real world, the meta-model is called a \"data model\" (data = system model, data model = system meta-model).\n\nFor example, for the financial view/view of a creating system-enterprise, you first need to choose one of the \"methods of description\"/viewpoint — RAS (Russian Accounting Standards) or IFRS (International Financial Reporting Standards). When compiling the balance sheet (one model of financial view) and the profit and loss report (another model of financial view), meta-models (conventions on how to make models) for these types of models from one of the description methods must be used — either RAS or IFRS.\n\nWe remember that there is also the level of meta-meta-model (that RAS::viewpoint — is exactly the use of material from our course for assigning a type, we said that RAS is a method of description, used the type of meta-meta-model of a fundamental discipline, a common type for all disciplines. While RAS represents a meta-model, a method of description for a subject/applied discipline).\n\nThe simplest way is to consider that a method of description is a set of conventions for multi-layered map-models that describe the territory.\n\nLet us remind you what you already know from the \"Rational Work\" course:\n\n-   The map is not the territory, but a model of the territory. One does not walk on a map but on the terrain. However, you usually choose a route on a map. The thing is, the set of conventions (viewpoint) will not give you a map (view), you will have to make it yourself, to model some area (domain). And then generate several hiking routes on this map, criticize them (\"wow, this route leads to a swamp! Let's not go there!\"), choose according to some decision theory the best way to act, the best route (the best method of work), and then even make yourself (and convince others) follow this route, that is, in addition to choosing the method, also do the work itself according to the method. This is all a metaphor, of course, but you need to understand this metaphor. In any case, your thought should reach real work, for which you need to determine the method (strategize: find out the method in cases where the method is unknown), each method has its objects of the method from its subject area, they are given in some model, and this model has its meta-model.\n-   There are several levels of abstraction, they are the same meta-modeling, from the most general theory model (theory theory — \"everything is objects and relations,\" this can be considered foundational ontology, not to be confused with the \"foundation model\"/LLM) through the meta-meta-model as a set of types for objects and relations from fundamental methods of thinking (including the set of systems approach types — \"system,\" \"environment,\" \"system level,\" \"creator,\" etc.), then the meta-model of some subject area (including management with its types: org-architecture, organigram, output/throughput, etc.), then the model with its values (for example, throughput of 3 sepulks per day at \\$30). Of course, there can be more levels (you can distinguish between a metaU-model, a metaS-model). As a matter of fact, there is the territory (world), the map (model), the meta-model (map of the map, that is, a system of designations for the domain), there is a meta-meta-model (map of the map of the map, that is, a system of designations for the system of designations of the map, universal for all systems of designations, that is, for all domains), and even a meta-meta-meta model (a system of designations for the system of designations for the system of designations of the map). In Systems thinking you must keep all of this and not confuse them. If you suddenly speak in terms of the meta-meta-model (words from our course), no one will understand you. Discuss the map, not the system of designations. But you yourself should keep in mind where the designations on the map came from and where the designations in the table of designations came from.\n-   At any level of abstraction, you can model either strictly (a map to scale, with exact designations in some projection) or not very strictly (a child's map, a subway map — where it is important to convey to people poorly versed in cartography some idea, not to have an exact model). In modeling, this is the choice of the level of formality — from formality considering the univalent foundations of mathematics (they will be stricter than the foundations of mathematics built on set theory, and imply constructivism — not even theory theory with objects and relations, but still poorly defined and extremely rare frontier theory of concepts with objects and operations of their construction, we will discuss this in more detail in the next section of our course) to the formality of epic tales when you suddenly go from the meta-meta-meta-model (foundational ontology) based on objects and relations to analogies (say, prototype theory of concepts when fruits are defined as \"different versions of apples, less and less similar to apples\"), concept blending and other non-logics, almost to linguistics. After all, people mainly use the fast and easy S1 thinking mode, not the hard and inconvenient S2 thinking mode. S1 reasoning is difficult to criticize, they are \"analog,\" but S2 reasoning is easily criticized — there logic works, and there you are either right, or you are wrong. If accuracy matters to you, you need to be formal: rockets are not built on inaccurate reasoning, submarines sink, enterprises go bankrupt. But if you will always be strictly logical, you will not be able to talk to \"simple people.\"\n\nIn any case, **you cannot describe anything if you have not realized how exactly you describe it, by which method** **of** **description!** **You cannot understand someone's description if you have not realized how exactly, by which method of description someone's description was made!**\n\nYou can't make maps and/or allow other project roles to examine maps if neither the mapmaker nor the other project roles know the map legend and cartography methods. Maps made by different methods of description cannot be compared with each other later. You cannot make a map using layers prepared according to different cartography methods — you cannot take a map of the city's water resources prepared by surveyors and a map of subway stations prepared by the metropolitan services and just overlay them on each other. You cannot take a balance sheet according to RAS and make a profit and loss statement according to IFRS. All models (models) in the view should be prepared using meta-models from one method of description (viewpoint). And yes, the method of descriptions should be agreed upon with the project role, as depending on the subject of interest and the preferences of the role in the characteristics of this subject of interest, different project roles will require different methods of descriptions! For instance, accountants will demand financial views according to IFRS (and for them, cost description will be important), while operational managers will reject such views and insist on keeping their own financial records because they will consider \"cost\" a misleading characteristic, insisting on completely different financial calculation methods more suitable not for taxation purposes but for operational management purposes. They might insist on using methods of description accepted in \"throughput accounting\" from Goldratt's Theory of Constraints^[<https://en.wikipedia.org/wiki/Throughput_accounting>].\n\nThe question is, how to be here — if everyone needs some different descriptions? How to be, for example, with the same financial accounting (for managers, pre mortem) and accounting (for tax inspections, post mortem)? Of course, you just need to make several different descriptions! It won't harm the described subject if you take its photographs from different angles, with different cameras, and sometimes even a video recording, and then add an x-ray, and then add a textual description in poetry.\n\nThus, managers can organize a SelfAccounting according to Goldratt, and OthersAccounting1 according to RAS (for their tax authorities) and OthersAccounting2 according to IFRS (for shareholders, for example). This is okay, this is normal, this is how it should be done — just keep an eye on describing the same object (the enterprise's money and their movement), not different ones. Sometimes they talk about correspondence rules between objects of different descriptions, but these correspondence rules are not always possible to define, so don't delude yourself: there may be no correspondence between a photo of a boiling kettle in infrared light and an itemized list of components for making a kettle. But in different engineering modelers, there might be different icons representing the same functional object — and here you can indicate that there is correspondence between some functional block from DIN 66001 and a functional module from IEC 61346. Of course, to discover such correspondence, you must raise to the meta-level concerning these standards: understand that all these objects are functional objects and not constructive or placement objects.\n\nThe method of description is most often **library-based**, meaning that instead of detailing its content, a reference to literature on this method is provided. This is like giving a reference to a book or a cartography standard instead of the full text and pictures of the map legend, where a list of symbols and detailed instructions on how to use these symbols to depict terrain details, flora, fauna, minerals, population density, etc., are given. But if there is no text with a ready-to-use method of description, then you will have to describe some subject of interest in a way that has not been used so far. Then, instead of this reference to a library-based method of description, you must attach a method of description documented by yourself to the description: without indicating the method of description, descriptions cannot be done. The method of description is the alpha, so an artifact/work product/document will be required to witness the state of this alpha. And the description needs documentation, and the method of description needs documentation.\n\nThe main thing to remember: **any description is a system description, any system description is made using a method of description** (even if the describer does not realize this), the description becomes available to people only after its **documentation**, the method of description is a description of the description (therefore, questions about the method of description of the method of description, and the documentation of the method of description of the method of description are appropriate!).\n\nThe method of description (viewpoint) frames some characteristic important for the role performing the method of work (concern of this role). One of the consequences: **if a project role/stakeholder** **has no corresponding** **\"concern\"/interest, then a description/view** **to satisfy interest in this** **missing** **characteristic** **is not made: descriptions** **that do not address any** **important for** **methods of work** **characteristics of any of the roles are unnecessary, they are redundant.** Accordingly, this description is not documented, and the method of description for it is not needed.\n\nEven if some regulation or standard you use (which you seem to be required to follow) demands a certain description, but you find that no one will ever read it (for example, managers will merely check the fact of the description's existence “for compliance with the standard,” but even in case of realization of some risks, no one will delve into these descriptions, no one will open them and use them for substantive discussions) — such a description need not be made, it's a senseless waste of project resources. And on the contrary: **if any project role** **finds an interest/** **importance in some characteristic/\"subject of interest\"/concern** **and intends to discuss it with other project roles, or even use it for their own reasoning and role-based decisions,** **the description** **including that characteristic is made** **and must** **be documented.** It is never about verbal answers to questions. On paper, or in a database, or in files, but the description must be documented.\n\nSay, you made a decision at a meeting. This decision is a description of a future situation, a certain state of certain objects. Not recorded (and not in the minutes, as minutes do not survive longer than a couple of weeks, then they are forgotten) — it means the decision has not been made, but merely \"discussed.\" Written decisions will undoubtedly be different from what everyone \"thought\" they heard orally; there will be found errors, inconsistencies with other previously made decisions, etc. Descriptions are by no means only the descriptions prescribed in some engineering or managerial standards! One must very strictly distinguish between systems (and situations, that is systems in some states, accounting for changes in their states) and system descriptions, as well as comply with all the requirements for descriptions, whatever they may be. For example, a decision at a meeting: if this is a description (view), then it must also include a method of description (viewpoint). What exactly are you describing, what types of main objects will be in your description of the meeting decision?\n\nApproaches to descriptions (views) according to ISO 42010:2022 can be of two types: projective and synthetic.\n\n**Projective** descriptions are like in a stage spotlight where the lamp is white, but we make a colored beam by filtering out all colors except the one we like. In fact, it means we have a large database that stores all interrelated different models of different role views — all together, corresponding to some data model. This data model is a common ontology of very different subject domains. When we need data from one model (model), it just filters out what we need in terms of a meta-model (requested role views, or even requested individual models from these views) and displays it in suitable document formats. If we look at some classes of computer corporate software (ERP, CRM, PLM, and other \"three-letter abbreviations\"), inside each such software, we will find a database attempting to embody a projective description. If you want to get some specific description with individual system characteristics, you just need to perform a query in the query language for that database.\n\n**Synthetic** descriptions are the opposite: the initial role views are given as separate model documents, where each model is documented not just as part of one common database for all models (as in projective descriptions) but as separate paper or electronic documents in separate ontology. **Correspondence rules** (correspondence rules, \"this object of this model is that element of that model\") are established between these autonomous models from separate documents if possible, and the overall model of a system description is thus obtained synthetically, by combining separate autonomous types of models. Reasonings about system/complete and role/aspectual system views do not change from how these views are assembled from model documents — immediately in a common document (projective approach to views) or after creating separate model documents (synthetic approach). You can't say which method wins:\n\n-   The projective method is very convenient: everything is gathered in one place and even coordinated. Problems like \"here I have length in feet, and you have it in meters, but here they have it in parrots\" don't occur, meta-modeling is centralized!\n-   This is a nightmare for architects: to slightly tweak some description, you have to tweak all descriptions together, maintaining this coordination! The projective method becomes a \"bottleneck,\" effectively prohibiting the autonomous work of teams dealing with different descriptions.\n-   If you already have autonomous modelers, convenient for documenting some separate descriptions within the synthetic approach, it's very difficult to force them to abandon them to switch to new modelers that store their models in a common database within the projective approach — the effort to retrain people and reconfigure tools is often considered not very justified, even if constantly facing some collisions between models. Of course, the number of collisions is significantly higher with the synthetic approach.\n\nSynthetic and projective descriptions turn out to be equivalent in terms of reasoning about working with descriptions. ISO 42010:2022 explicitly states that all basic ideas about working with descriptions (e.g., the requirement to specify a viewpoint for any view) work for both options. Just in synthetic descriptions, a lot of effort is required to coordinate independently prepared descriptions, \"lifecycle data",
    "f8b060ad20edd8a2171f5961a84f9b7e": "---\ntitle: Orglinks\n---\n\nIn Systems made up of people, constructs are first and foremost the people themselves, with their audio, visual, tactile, and other interfaces. The functions of people are not even attempted to be discussed, nor the meaning and content of the information or changes in the environment that come to and go from people through the interfaces of the human body. People are universal creators. We remember the definition of universal creators by David Deutsch, which essentially expands the definition of universal computers by Alan Turing: given sufficient resources and time, they can perform any transformation of the physical world allowed by the principles of physics, just as a universal computer can perform any computation given enough time and memory. Among other things, people can replicate themselves when resources are insufficient, build tools first, and then carry out the necessary transformation, working collectively and using tools.\n\nThis provides a constructive/productive consideration of people, i.e., a consideration of \"how to make,\" how to compose a system from people as they are at the start of the work, since we do not discuss functionality. We consider that because people are universal creators, they can be trained to perform necessary functions. In essence, we are concerned not even with people but with universal agents — robots with sufficiently strong AI are also suitable for our considerations.\n\nIntellectual agents have a special type of relationship that denotes the ability to manage specific means of production or even other people: we are talking about ownership rights, the authority to give orders to other people, the right to accept work from others, the authority to exchange certain items or services (including \"universal items\" like money).\n\nTo obtain the required external behavior from an agent, one must have the relevant authorities recognized by them. Agents who agree on the authority over each other and their means of production, on mutual obligations, are called **organized**, and a system of such people is called an **organization/orglink providing services for other organizations/orglinks**. The term \"organization\" is most often used concerning the top of the constructive decomposition of a system of intellectual agents (primarily people) and means of production. These organizations are enterprises/firms/companies. In the case of state and public/non-commercial organizations, other names are used — bodies, agencies, institutions, associations, funds, etc.\n\nConstructs from which organizations are built (i.e., individual agents or organized groups of agents with their tools) we will call not \"department\" but a more general term — **orglink**.\n\nThe term \"orglink\" is better than \"department\" because constructives of orgstructure usually do not show temporary organized groups of agents and their tools (means of production): project teams (projects are temporary by definition!), as well as various councils, committees, circles, commissions, etc. But when you are told that \"to launch a new project, you need the decision of the scientific-technical council,\" you need to take into account such an org-construct as the scientific-technical council, which evidently exists in the organization structure but is not called a \"department.\" The structure of \"departments\" is usually convenient for payroll, counting the number of employees, but if an employee starts working in several different overlapping organizations (in a department, in some council, and a couple of project groups), discussing this in terms of departments is impossible: councils and project groups are not included in the staff schedules. If we generalize the concept of division to all entities entitled to make some decisions and execute actions related to those decisions and include such \"collegial bodies\" that convene for separate meetings (often through mail lists or chat discussions) and constantly working project teams recruited from division employees \"bypassing the official staff schedule,\" then we get an \"organizational link\"/orglink::constructive — a type of part from which the organization is constructed.\n\nThe minimum orglink, therefore, is one person or one AI agent (and it does not matter if it's an AI bot implemented somewhere in data centers or an AI robot whose \"brains\" might also be in data centers, and it might be represented in the world not by one body, but several, not necessarily anthropomorphic). Since agents do not change the physical world with bare hands and do not use bare channels of perception, the minimum orglink will include not only the agent but also their tools, which they are authorized to manage. Since agents in the organization should cooperate, they are called employees. The minimum orglink is one employee with the assigned equipment/tools (we will also consider premises and furniture as equipment/tools here).\n\nThese minimal orglinks/employees/agents (some of them are people) from one agent are further united based on known permissions into the next-level orglinks, and so on until the highest-level orglink becomes the organization as a whole (enterprise, institution, association, fund, etc.). Sometimes the primary association of orglinks is called a **team,** usually comprising 5-12 agents, and now they often talk about a team as \"the number of people that can be fed with two large American pizzas at lunch\" (two pizza team). It's unclear how to deal with teams of robots, people, and robots — probably still consider it as 5-12 intellectual agents, with some teams being 2-5 agents (Tesla mentions such small crews — mob/gang).\n\nSometimes another level is introduced — **collective,** a \"team of teams.\" But remember that when different hierarchy levels (here — the part-whole hierarchy for orglinks) are named differently — it seems convenient at first, but becomes inconvenient as changes in the number of levels for particular branches of this hierarchy increase. For rhetorical (persuasion) purposes, even the population of a country can be called a \"team\" to emphasize belonging to a \"small organization\" and readiness to implement agreed work plans (however, the desire, of course, differs from the possibilities — everything we know about autonomous agents like people and similar robots already does not fully fit organizations, although both are \"persons\" and \"parties\" taking responsibility for executing some plans. This marks \"organizing.\" But with **communities** (agents engaging in some methods of work and sharing experience in practicing these methods, for example, community of practice^[<https://en.wikipedia.org/wiki/Community_of_practice>]), the situation is different, and with societies (agents compactly living in some territories without discussing any common work methods) — even more so. So discussions about orglinks end at not very far systems levels from a single organization — precisely at those levels where, through some clear agreement (and not merely coercive measures like \"paid your taxes — and sleep peacefully\"), one can speak of performing organized tasks as a system according to some strategy, i.e., working according to some agreed methods on changing the state of certain items of this method, considering the division of labor among the organization's members.\n\nFrom communities and societies, we cannot expect this, but we can expect it from production cooperatives, business ecosystems around marketplaces as platforms, and organized political movements and parties, since they have mechanisms to agree on labor organization (to divide into agents performing distinct roles, i.e., works by certain methods, and to agree on how they understand which works with which method objects should be done to eventually create a successful target system).\n\nAt extended levels, therefore, coordinated actions to use resources are carried out based on direct agreements for creating \"extended enterprises\" (extended enterprise, organizations consisting of organizations that agree to perform certain joint tasks). For example, a nuclear power plant is built by an extended enterprise — hundreds and thousands of contractor enterprises, not just one construction and installation organization (\"construction\" means \"construction\" plus \"installation of complex equipment\"). The construction and installation organization of the nuclear power plant has contracts with its contractors, defining who is responsible for what in building the nuclear power plant: not at the individual level, but at the organizational level.\n\nThe entire organizational (constructive) structure and interfaces between orglinks (organization constructs) are discussed not regarding how to do something better in the applied domain (organization/orglink's working time), but exactly about \"how to organize\" — who will fulfill whose orders, what and when will be purchased as means of production, and who will manage it. The subject of modular/organizational discussion in organization/orglinks is organizing (achieving a state of organizedness, where the authorities of all employees are clear). Why so? Orglinks are considered as agents and collective agents, moreover, universal. This means they can be assigned different functions, instructed to perform work by other methods, and directed a different stream of method objects.\n\nServices of orgroles assigned to orglinks (both regular divisions and \"collegial bodies,\" temporary project groups — project teams, task forces, divisions, councils, committees, commissions, etc.), provided by them at their organizational interfaces, the discussion of interfaces and interface modules/channels (mail, issue tracker, cash desk window, conveyor belt, etc.) for interacting with them, are a typical subject of discussion in organizations. These services in good organizations try to standardize (regulate: bring under the enterprise level standard, publish the standard), make some sort of orgplatform with a published interface out of them. The main problem here: in large organizations, centralizing such regulation leads to people working without following these regulations — simply because it is inconvenient for them to use documents and operational software that are sufficiently far from their workplace. The solution here is decentralizing work with regulations and checklists. Detailed methods are covered in the courses \"Methodology\" and \"Systems Management.\" By the way, everything else about orglinks is covered in the \"Systems Management\" course, which is precisely about creating organizations, management being the creation and development (including operation) of organizations, i.e., the engineering of organizations.\n\nAn organization/enterprise is literally composed, constructed, made from its orglinks — these are the constructive, not functional parts of an enterprise/organization. From the discussion of an organizational chart, you cannot tell how an enterprise works, what functions the orglinks of the enterprise perform. But you can tell \"what it is made from\" — out of which divisions.\n\nNaming orglinks — is a consideration of \"how it is made, what it is composed of,\" reflecting this constructive, not functional aspect. The names convey the most general ideas of the service provided, unrelated to the purpose/function of this service. Workshop No. 5, Chamber No. 6 — simple numbers in names from which no functions follow, are typical indicators of constructive consideration. The most general words without reference to the subject area (like \"database\" and \"server\" in information technology) are similar indicators (“engineering,” \"legal department,” scientific-technical council, project team). Similarly, location aspect clarifications might be present in names — but still nothing can be said about functions: \"Vologda Branch\" is clear that it is an orglink, and clear that it is in Vologda. But what does it do? By what method does it change which method objects, what are its services as a system? All this needs to be learned from other aspectual descriptions.\n\nFunctions performed by the enterprise/orglink’s constructive elements can be numerous and unexpected. On the other hand, if \"the division moves to another building,” it describes a connection between constructive and location aspects. \"The division will work by new methods” — it's a discussion of the connection between functional and constructive aspects of the division.",
    "40ff7da35f01342de3825a89907f2c23": "---\ntitle: Concept of Systems Configuration\n---\n\n**Configuration** **of a system** is the current relevant state of the system (the system’s embodiment: all parts on all system levels) and their descriptions in their correspondence. Ontologically, it is the system itself, but in fact - it is a temporal part corresponding to some state of its construction in terms of the presence of certain versions of constructs. Usually, during various projects, many different options for possible parts of the system's embodiment are produced (if “in metal”, even manufactured) with varying degrees of success, and only one of them finds its place in the target system during operation, while the others remain outside the system – either as spare parts or simply discarded due to moral aging. There may also be many successful embodiments for subsystems, but not all are used in the target system (for example, a dozen pumps were manufactured, but only one made it to the pumping station - the others were produced, with some sold and some kept in storage as replacements in case the working pump fails).\n\nMoreover, during the design phase, a multitude of different types of system descriptions and its parts, related to different time points, are developed by various agents. The project needs to understand: which variations of all the manufactured parts eventually entered the current system embodiment, and which description variations are relevant to the current state. Not all manufactured parts of the future system are used; some remain unused. Not all system description variations are implemented: some are rejected in favor of others that are more suitable for the system’s success, making the system more functional, reliable, cheaper, faster to manufacture, etc. If you apply the firmware of an old phone version to a new phone model – it’s not certain it will work. Such **configuration collisions** should not occur; all versions of both the system parts and system descriptions must correspond to each other. Therefore, the concept of configuration as the state of the system’s versions extends to descriptions as well – we only need descriptions that describe the current system configuration, possibly only of a future system (this is sometimes separately called **system description configuration**).\n\nModern manufacturing adopts an evolutionary idea, where the system is considered as a type of system, similar to the evolutionary view of animal or plant species.\n\nFirstly, a type of systems or animals (a set, type) is represented by instances (unique physical objects) that are all genetically slightly different but belong to the same type. For example, the Boeing-737 system is thought of as a “type” consisting of a series of slightly different unique instances of physical airplanes. How to determine if the system refers to a “type” or a specific airplane by serial number? From the context, as there is no other way. If you talk about a Dell XPS 13 computer, you are referring to all Dell XPS 13 series computers and their development (they will be structurally quite different, with each year’s models having significantly varying configurations), or to the current computer with a serial number, but here the central processor type, memory volume, screen resolution can differ – these can be chosen at purchase. And all this will be Dell XPS 13, with some similarities. The same applies to the Windows operating system, the software on your computer. It refers to all similar versions of the Windows system differing from, for instance, iOS, or a specific yearly version, or even a unique version on your computer. How to know what is being referred to? From the context, and if unclear – ask again!\n\nSecondly, one separately thinks about the meme (all system descriptions, living and evolving within creator organizations, analogous to the animal genome contained in each cell) and the phenotype (a set of properties of developed and embodied systems, for animals, it is the set of properties of an adult organism). In engineering, the principle of “continuous everything” is adopted today. Firstly, it is “continuous development”, which doesn’t stop with the release of the first version of the system as an MVP, minimal viable product, but primarily – **“continuous delivery”**, don’t confuse this with mere “customer delivery”, it is also already deployed with the customer, “continuous deployment” and further continuous testing. Continuous operation means creating sequentially different system versions with various configurations (sets of physical material parts and corresponding descriptions, following some alternative routes through creator tools – one version on one machine, another on a different one), and these versions have different descriptions. Thus, the properties of all systems differ. Even these final descriptions undergo multiple changes after refinements, bug fixes, addition of new features to the described system.\n\nHow to determine which of these description versions should be used by manufacturers for system embodiment? And if some manufacturers changed the system embodiment so it no longer corresponds to these descriptions, and some manufacturers work “as agreed” – can you be sure that a working system can be assembled from the produced parts? And which instance of the working system? Tesla cars are now developed within a production process where developers and the factory work on one production site, changes to the design are made without interrupting production, an operation at the factory can be conducted in two alternative variants according to A\\|B testing^[<https://en.wikipedia.org/wiki/A/B_testing>], but compared not two variants of the whole car, but multiple times a pair of variants in different conveyor places. Each Tesla car thus has a unique configuration, it is not similar to other cars of the same brand, differing in many places. Likewise with airliners – slightly different engine modifications, seat configurations, control systems, but no two identical Boeing-747s in the skies. Considering that the system configuration is one of the specific states in terms of the system parts’ versions of the “system as a type” – this “configuration” runs on the roads for Tesla, and flies in the air for Boeing, it is not a configuration description running or flying, but documented in the database. The closest approximation to it – yet non-running and non-flying car or airplane, already assembled and tested standing at the factory, they are “in metal” but not yet operational. It’s only programmers who confuse the configuration of their “project documentation” (source codes) with the system's configuration (already working in machine codes). “Iron” system engineers must clearly understand that a system’s configuration, and its descriptions without configuration collisions – is very good, but insufficient for discussing configuration; system description configuration – isn’t the system’s configuration during its operation.\n\nErrors related to some system parts and their descriptions being unknown, or known but not corresponding to each other in their current versions, are quite common – these are called configuration collisions (engineer slang for a configuration with such errors is “broken configuration”, an unpleasant situation, “iron” engineers usually say “the system doesn’t assemble”, because all parts are made – but cannot assemble into a system, “this round thing here doesn’t fit in this square thing there – unclear how it happened”).\n\nA system’s configuration – is the parts of the embodied system and their descriptions; in modern engineering, every instance's configurations are unique. The configuration itself can be described (defined) and consequently documented (described). **Configuration documentation** is often shortened in speech to just “configuration” – and the difference between the system's composition (configuration) and configuration documentation needs to be determined from the context just like the difference between architecture and architectural documentation when the word “architecture” is used for both.\n\n**Configuration management** is tracking that the system’s embodiment and descriptions are known and correspond to each other. This discipline lies in between managerial and applied engineering disciplines. A configuration comprises **configuration items** – the smallest parts into which the system is divided in terms of logistics. This involves the units of system parts and their description transfer from one work performer to another, from one process to another.\n\nEngineers for the target system often have more detailed parts descriptions than needed for organizing the transport of work products. For example, each of the many billions of transistors on a chip is unique, but the configuration item in the electronics workshop is the chip itself, not these transistors, as separate transistors are not transferred to anyone.\n\nTo avoid losing these configuration items in accounting, to reference them in conversations and various system descriptions, individual designations (designations) are assigned to them. IEC 81346^[IEC 81346-1:2022, Industrial systems, installations and equipment and industrial products --- Structuring principles and reference designations --- Part 1: Basic rules, <https://www.iso.org/standard/82229.html>] is a standard offering a typical way of such description, considering the systems approach – multiple alternative system structures (functional, modular/product, placement, cost, etc.).\n\n**System version** is its configuration as of a moment in time. System versions are named. Tracking version changes due to **changes** is needed to clearly indicate which of the numerous configurations arising and disappearing during the project is meant. Not all versions can assemble into a working system, often called **configuration dependencies/dependencies**.\n\nIn software engineering, there are also configuration description standards, but they usually don’t consider the systems approach and rely mainly on the idea of source code versions. Popular “naming systems” for code parts are Semantic Versioning^[<https://semver.org/>], attempting to change version names based on whether major or minor changes are made to the source code, but it is found that both major and minor changes can break the system equally in case of a collision, so a simpler and more reliable option is proposed: Calendar Versioning^[<https://calver.org/>], which marks the date of the last version change – making it easy to orient by version name on how long ago something was changed.\n\nSystem documentation (today almost 100% electronic formats, often not classic “documents”, but databases) is always documentation of some configuration items (read: descriptions are always descriptions of some systems or descriptions of other documents' content, sometimes form; versioned documentation – the versions of some versions' system descriptions, versions of other documents), and its designations are usually created by appending the description type to the configuration item name. If for some reason it's necessary to describe three or four configuration items, it's likely talking about a system description of these items and thus needs a new configuration item created and described.\n\n**Baseline** (configuration baseline) is an integrity-checked and administratively approved version, but more frequently seen as an anachronism in development today: integrity checks happen for each version, and there is no administrative version approval with multiple daily product versions.\n\n**Change management** is often included in configuration management. Terms are combined: “configuration and change management”, but generally this is a separate discipline. Do not confuse it with organizational change management – how to change an organization without causing resistance and bringing positive results. Engineering change management is about decision-making on configuration changes to minimize configuration errors. Previously, there were 1. regular work versions with simpler changes, and 2. baselines with additional integrity checks for configurations. Today that’s an ancient story, different change management approaches are used, like trunk-based development^[<https://trunkbaseddevelopment.com/>] (trunk – just the version tree trunk, without branching). Interesting observations emerge, like the quality of systems for which a change approval board didn’t differ from systems without such board evaluation: freezing configuration changes slowed development but didn’t improve quality. For example, freezing new features' configuration didn’t increase quality but freezing bug fixes did, proving beneficial. Everything is alive, everything changes for potentials' better, and intensive testing for each instance/version will show if errors occur (one instance – one version).\n\nIn any case, you need configuration management, knowing at any moment which (of all possible variants) parts are in the manufactured system, by what descriptions they were produced – ensuring no collisions, errors, and contradictions when assembling parts into a system and merging particular descriptions into a system description. It’s very bad when Team A develops their part considering a meeting result agreeing a part size as 220mm, but Team B continues developing the case with the old size 180mm – unaware of the meeting. At assembly, this part and case meet: here’s a configuration collision: the case's expected part size and the manufactured part size differ by 40mm, the system “doesn’t assemble”. It’s best to catch this before Team A already manufactured the part and Team B the case. Configuration and change management aim to prevent this from happening.",
    "7da7375a093e2f88ad5f336c0ed8d0c1": "---\ntitle: Applied Functionality vs. Universal Design\n---\n\nA common mistake in systems development is ignoring explicit functional modeling of the system: documenting schematic diagrams, descriptions of subsystem interactions, answering the question \"how does it work,\" \"how does the method change the state of objects.\" In electronics and electrical engineering, as well as in continuous/flow production^[<https://en.wikipedia.org/wiki/Continuous_production>] (chemical and energy enterprises), it is usually customary to draw such schematic diagrams (often documented through diagrams), where functions/processes or role/functional parts/units of the system are explicitly marked, or even both together.\n\nBut this development method, which requires mandatory drawing of functional diagrams, does not exist for all types of systems. For example, in software engineering, it is not common to draw functional/flow diagrams in most projects, nor to create such textual descriptions in a formal modeling language, or even in pseudocode.\n\nFor example, programmers think about the functionality of their programs, but they somehow don’t make schematic/conceptual diagrams of their work; they keep snippets of these schematics exclusively in their minds — and therefore, these diagrams cannot be checked for gaps, errors, or to discuss the functioning of their systems with colleagues. This does not mean that functional/flow notations do not exist, for example, data flow diagram^[<https://en.wikipedia.org/wiki/Data-flow_diagram>] and even dataflow architectures^[<https://en.wikipedia.org/wiki/Dataflow>], which form the basis of the so-called \"reactive programming\"^[<https://en.wikipedia.org/wiki/Reactive_programming>]/\"stream processing\"^[<https://en.wikipedia.org/wiki/Stream_processing>].\n\nIn the source code of programs, however, these \"schematics\" with their flows are not visible: the programming paradigm often does not involve a dedicated showing of the functionality of parts of the program, plus this functionality is significantly cluttered with description details sufficient for code execution. In advanced circles of software developers, this is not the case, and functional descriptions (most often obtained within the framework of domain driven design, DDD^[<https://en.wikipedia.org/wiki/Domain-driven_design>]) are documented, but so far this is not a common culture/practice, more like a pleasant and rare exception to the general practice.\n\nThis view of the system as some flow from inputs to outputs — it turns out to be important for the enterprise as a system. Thus, operational management is just a functional (sometimes referred to as logistic, \"transport\") view of the enterprise as workflows, flows of components and supplies (ERP, enterprise resource planning works precisely with planning these flows, if there is no flow planning — then it's not ERP in its original meaning).\n\nNeglecting functionality is a typical mistake of engineers and managers united in a project. \"Tech entrepreneurs\" or corporate managers converse with external project roles/stakeholders and usually identify their needs, but no one deals with the concept of use, that is, the basic use scenarios of the target system — engineers immediately move to the system concept, which is not yet clear what it should do (its function in the higher system is not clear). Including the use scenario, we note, not only the happy path, that is, the behavior of the system when everything goes well and there are no surprises.\n\nBut surprises are always present, and they need to be cared for in advance. The design engineer in such cases creates a modular design (that is, provides in the design for some replaceable modules with various expected important characteristics in their services at the moment of use, but these modules will have some identical connection interfaces). Functionality there is provided \"for growth,\" as services of modules implementing subsystems, which, in his opinion, can provide all possible functions at the system level without additional product improvements, if suddenly needed.\n\nFor this, the engineer connects typical constructive elements through typical interfaces from the most common and simple standards, hoping that after eight iterations everything will somehow settle down itself with functionality (there will be feedback from dissatisfied customers!), and the project will eventually be successful. But this is not elegant, not lean: extra functionality is added, the system due to this usually becomes more expensive, takes longer to manufacture, but the necessary functionality may not be in the first iterations, the first iterations will require rework, they will not represent MVP.\n\nNote that this is roughly how the \"broken telephone\" works: some people (who are not trained in Systems Engineering) talk to the customer, they formulate and rigidly fix the requirements with their obligations (not in the form of a hypothesis about what the customer needs from the system), and then the system is developed by completely different people (who are trained, but have no contact with the customer — and therefore the system's concept turns out to be poor, the hypothesis can only be checked after presenting the already finished system with a wrong set of functions to the customer).\n\nThe error of the absence of functional parts of the system in the system concept is also easy to find: in the system concept with this error, there is no reflection of the subject area for which the target system provides the service, there are no service items going through some states during processing. The service is named (however the people involved with the target system might name it, not the higher system), but there are no service items in the higher system (what the module as a subsystem performs within the higher system).\n\nFor example, in the concept of an information system of a store, there simply appears a \"database\" (an overgeneralization for anything), not \"product prices, discount rules, purchase history.\" It's clear that all this must be stored somewhere, but it is not a fact that in the \"database\" drawn by the programmer on his very first diagram (part of it, for example, may be obtained through an API of some service provided through the cloud, and discount rules may be stored in a configuration file or even turn out to be an artificial neural network), and not a fact that even the \"database\" will be one.\n\nNow feel the difference:\n\n- A manufacturer defines the pump unit service as \"increasing pressure,\" whereas the client needs a function \"lifting water to the upper floors\" (and it is also necessary to calculate the required pressure increase for this and what else needs to be done, for example, by installing two pump units so that the breakdown of one constructive does not lead to interruption of functioning),\n- A manufacturer defines the hammer service as \"strikes,\" whereas the client needs the function \"driving nails into boards,\" whether by \"strikes\" or \"pressing\"\n- A manufacturer defines their program's service as \"computation\" (hoping that the built-in programming language will provide \"any computations\"), whereas the client needs a function \"calculation of a calibration curve\" from the program, but \"out of the box,\" without writing programs in the internal language.\n\n**Functional diagrams will contain the names of functional parts or functions, while** **constructive/modular/product diagrams, disguised as functional —** **will still contain the names of the most common services, and usually indicate not flows and ports, but standardized interfaces as places/channels of service delivery.**\n\nIt is difficult to explain to a programmer the necessity of making functional descriptions as part of the system concept because they think in terms of components/modules/products/frameworks/platforms, which, in their opinion, are absolutely universal and will support \"**any function.\"** **Any-any?** Remember, you should double any **universal quantifier found in system description** **—** **\"each,\" \"every,\" \"any,\" \"all,\"** **etc., and put a question mark after it, doubting that universality.** Unfortunately, universality will not happen. But the disappointment will not be at the beginning of the project, but closer to the end — when it turns out that there are no universal application software systems, just as there are no universal \"hardware,\" \"human,\" \"social,\" etc., systems.\n\n**Architecture (architectural decisions related primarily to the division into modules and organization of connections between modules to support acceptable values of more or less uniform architectural characteristics for very different systems) is recognized by the programmer, but the system concept** — **no; functional decomposition at them** **is big-level \"in the head,\" and then immediately goes into the source code, \"the worker,\" and this is a mistake** **in the working method.** While the importance of architectural work is already recognized in large projects, the concept of architecture has undergone significant changes (more details in the \"Systems Engineering\" course) and the work of an architect is put in opposition to the work of a developer. Even new terminology for components/modules appears, reflecting architectural considerations: **an architectural quanta** as an autonomously deployable construct with high functional cohesion within it^[<https://www.oreilly.com/library/view/building-evolutionary-architectures/9781491986356/ch04.html>]. Further, we expect such considerations on how to divide a system into constructs, including architectural quanta, to transition from large corporate application architecture to hardware engineering, and much more. Roughly speaking, a vehicle with a trailer has quite a few constructive parts, but here the vehicle and trailer are the architectural quanta, deployed autonomously.\n\nEven aside from architectural work (performed by the separate role of the architect by architectural methods, not the developer's, and it is work on the construction, not functionality), software developers usually make many mistakes relating to functionality. Developers tend to act as \"under-architects,\" focusing on \"universal modular constructions,\" but forgetting to delve into functionality — but developers are ultimately responsible for accounting for functionality, not architects.\n\nHere is an example illustrating what happens in the head (or computers, or heads and computers, because not all developers today are human) of developers using an example of working with a \"hardware\" system — but of the same kind as programs: seemingly super-universal in form, but very concrete and unique in content. \"Commercials\" at the factory dragged some of their product ideas to the design engineer in the \"technical department,\" and the design engineer thought for a bit and came up with some ideas that the \"commercial department\" formalized into proposals for a new project:\n\nWe face the task of fine chemical synthesis of dimethylfluoromethylchloropentylbenzene-titanium for pharmaceutical industry purposes. It is known that it is difficult to synthesize, and many impurities are produced during synthesis, from which people die. Therefore, we will offer pharmacies such a pure product from which people will not die, and the marketing will be original: through the cleaning ladies of medical institutions, who will throw our brochures to doctors, and also heart-to-heart conversations with patients in queues to doctors. To obtain pure dimethylfluoromethylchloropentylbenzene-titanium, we will use four steel reactors connected by pipes with a diameter of 56mm, the last pipe is Teflon-coated. We will order the second reactor from external contractors. The purity of the resulting dimethylfluoromethylchloropentylbenzene-titanium will be monitored by an independent expert service. All four reactors must pass a pressure test of 156 atmospheres.\n\nThis description contains no ideas about which specific impurities have the maximum harmful effect, how to obtain purity from exactly these impurities (and not just any impurities — harmless ones do not interfere) dimethylfluoromethylchloropentylbenzene-titanium, what raw materials are needed and whether they are available or they also need to be synthesized under the project, further chemical reactions starting from available substances, i.e., detailed investigation of what happens in the reactors.\n\nNow imagine a design engineer in the technical department, to whom representatives of the commercial service (marketers, account managers) come and say that he will need to solve the task of chemical synthesis, but it is not yet clear which. And they will someday later, but not right now, hire a chemist who will clarify everything. The engineer agrees and takes on the case: it is immediately clear to him that reactors and pipes will be needed. Reactors are not clear in number because it is not clear how many chemical reactions there will be in the synthesis. Therefore, it would be better if there were many reactors. He chooses the number 4 as \"not very few, but still not too costly,\" guesses that there might be a tricky endothermic reaction in this synthesis, but he himself is unlikely to design a reactor for such a reaction. So he gives the task of designing this \"tricky reactor\" to external contractors and writes honestly about it. Although external contractors already asked what about masses and temperatures, nobody can give an answer yet, so the contract is planned without discussing use scenarios — but contractors certainly do not refuse the order, they say \"I will make any reactor.\" The word \"any\" does not scare anyone, as there is no chemist who could say what will happen in this reactor. There are only hardware engineers well versed in steel grades and welding, and marketers talking to doctors and pharmacists. The design engineer expresses the end result in the above abstract description of the system, which is unlikely to lead to success; almost all decisions hastily made then will have to be taken anew: discussion of the construction cannot be placed ahead of the discussion of functionality.\n\nIn the case of reactor and pipe hardware, it is obvious: the probability of producing pure dimethylfluoromethylchloropentylbenzene-titanium in this situation is zero. But **in the case of software, it somehow seems that the task can be solved this way. And so they write about** **\"servers\"** **and** **\"databases,\"** **but how there will be processing of what information there, and why this processing will suddenly be better than the competitors', or even generally possible, this question does not arise. Exactly as in the previous task, where there is no chemist, only welders and high-pressure body specialists. They will definitely** **make a software** **\"universal reactor,\"** **but what about the purity** **of the \"information substance\"** **or even just setting off the necessary** **\"information reaction\"** **(words** **\"information processing\"** **or** **\"computation\"** **are written without any clarification, what exactly), and obtaining raw data (or original information? data! because information means something, and data here is like raw materials —** **one can ignore their content) —** **this is not for them**.\n\nIn the project of obtaining pure dimethylfluoromethylchloropentylbenzene-titanium, there is still no chemist, no one can support the conversation about chemistry or figure out how this chemistry influences impurities, and the impurities on the patient's health. **In** **the context of conversations about reactor and pipe** **constructive** **by this time it's already possible** **to forget that the situation itself** **is about medicine, the needs here are in the patient's health** **(the target system here is the patient: live tissues surround it at the moment of work, and reactors and pipes are in the systems of creation, \"on the side\" of the target** **system's separation/environment, in a different time, in the time of creation)**. It is, of course, necessary to make the iron construction of \"our system,\" but it is functional system work that should be done, which should perform its function in the graph of creation! It is necessary to trace a strict logical chain from the target system (synthesized substance) to our system (made of pipes and reactors) — through functional description, that is, chemical reactions describing the functionality of the target system (how it behaves in the patient, time of use), and further to deviations from the conditions of conducting reactions in the reactor leading to the appearance of harmful impurities (time of creation). In this case, the subject area of the functional (chemical) considerations of exploitation time — in fact, the client's, and the final constructive (pipe and reactor) considerations — the subject area of the manufacturer-contractor, the time of creation. Essentially, this reasoning is even not a very complete pass through the system mantra.\n\nReturning to programming and typical mistakes of developers insufficiently concerned with functional descriptions. Alas, it is usually not possible to obtain a functional description, which tells what substantively happens with customer information in corporate information systems, the first time. A couple or more iterations with roles/functional parts of the system and their assignments/behaviors (functions), but once obtained, the structure of components/modules/platforms/products/microservices is quite reasonably and substantially corrected, mainly handled by the architect.\n\nFor \"hardware\" projects, iterations with gradual refinement of descriptions are also needed, based on obtaining additional information in these iterations. In our example, after a detailed investigation of functional descriptions, the number of reactors will be changed, unnecessary pipes will be removed, additional research on the availability of cheap product purity sensors on the market will be carried out, a contractor will be found that writes control software for closing-opening the gates on reactors to manage the synthesis process based on the readings of the sensors, etc.\n\nFirst, one needs to deal with functionality: what happens at the moment when the system works/functions (the word \"functions\" here is not accidental! Functions and functional parts are the focus! This is the area of interest for roles responsible for the system's operation!), not when it is being assembled from construct parts of products/modules/items/platforms. Then, in the course of modular synthesis, one must still consider construct parts and placements. But that's later, and first, a qualitative functional decomposition, functional/systems analysis, is needed.\n\n**Consideration of** **functioning** **first, and construction second, is an important part of Systems Thinking: first, you need to discuss in detail why these constructs are needed and how they will work, and only then consider from what they will be assembled.**\n\nIn modern engineering, however, it is not customary to perform top-down functional decomposition since it is very difficult to overcome the consequences of those decisions that will need to be changed when subject matter experts of a particular function take on the case. Therefore, it is customary for visionaries (this role is usually performed in product manager positions) to come with some ideas about what and with what priority to add to the services/functions of the system in its environment, followed by architects, who roughly estimate which constructs are most likely to support this functionality in their interactions — but do not perform functional decomposition themselves. Then, they invite people from the teams dealing with the selected modules for detailed functional consideration at the lowest level. And iterations go with them. Thus, rough functional decomposition and modular synthesis are performed by architects and visionaries (in the person of product managers) at higher levels, while detailed consideration immediately occurs at the lower level, by those well-versed in the subject areas of these functions/methods/services, knowing the specifications of these method items.\n\nOf course, these discussions pertain to the engineering of anything, not necessarily \"hardware\" or software. For example, one can consider applying this reasoning to dancing. Simply waving arms and legs (with a margin! More waves, and the waves themselves wider!) will not satisfy anyone. Each wave should be understood, why — what emotion or lead signal is expressed: what do they want to say with this wave, demonstrate, what result is expected. Then the wave will be chosen appropriately (sharp, smooth, large, or short, with a hand or leg — exactly to a necessary function, not \"standard with countless variations due to parameterization\"). If your dance does not require a straight leg wave to the ear (and with \"a margin for any choreography you may encounter,\" as done in the creation and development of classical ballet dancers, about ten years of training), you can save many years of life. Less universal waves \"for the function,\" considering the subject area of a particular",
    "0c1c275b4e3e0c9e35a4a8a9bda88191": "---\ntitle: The Necessity of Good Modularity\n---\n\n**The system should be assembled from modules on the principle of a submarine,\nwhere all compartments are made** **optimally** **autonomous---** **if\none of them floods, it will not mean the submarine is flooded.** **But if you make complete autonomy (for example, not providing hatches between compartments), then it can no longer be a submarine---** **non-interacting parts of the structure through interfaces will not generate emergence, new properties that were absent in the individual parts (e.g., submarine compartments). An overly connected system \"sinks,\" and a very loosely connected one---** **ceases to be a system altogether, displaying expected properties.** **This is true for**\n**\"hardware,\"** **software, organizational, and all other systems.**\n\nIn a system, all parts are interconnected; in the system environment, they behave completely differently than they would without the system environment. If we do not have well-defined and well-described interfaces through which we control all interactions in the system, any attempt to improve a module could not only improve that module but also produce a side effect: degrading the system as a whole through effects on other modules via untraceable links. If there are not enough interfaces, the system won't work at all.\n\nHere are graphs of computer simulations showing the dependence of development cost reduction on the improvement of n individual modules, considering d connections each of them has^[<http://www.pnas.org/content/108/22/9008.full>]:\n\n\n![](09-the-necessity-of-good-modularity-77.png)\n\n\nIt can be seen that if there is one connection, the development cost rapidly decreases exponentially with each improvement, weakly dependent on the number of modules. But if there are more connections, errors from local improvements spread through these connections, and the reduction in development costs from improvements in individual modules goes poorly. Each connection has its system price, and without this price, we wouldn't even have \"organs,\" \"cells,\" or other constructs/modules in living nature^[<http://arxiv.org/abs/1207.2743>].\n\nThe modularity of the human body is acquired through evolution and does not compare to the modularity of a modern computer or smartphone, assembled from standardized parts with well-defined interfaces. Therefore, it is unclear how to improve or even simply treat the poorly modular human body (although modularity exists here too! Organ transplants work!). Improving and treating/repairing the design of a computer or smartphone is much easier because the modularity of the computer or smartphone is carefully thought out.\n\nInterfaces need management: carefully designing them, accounting for their presence, identifying parasitic (i.e., undocumented) interfaces, and taking measures to eliminate them. Harmful, erroneous interaction can spread through these parasitic interfaces in systems. **Optimal** **modularity,** **understood as an optimal**\n**assembly structure of constructs connected** **through quality interfaces---** **this ensures the possibility of autonomous improvement of individual modules and the quality of the entire system.**\n\nAn interface is not just a connection but a connection through a specific physical channel/set of interface modules by a specific protocol (preferably defined by an open standard rather than just an internal project agreement, though this is not always adhered to), so that this interaction can be traced, and the error does not spread through the system. Moreover, a module can simply be replaced with an alternative (easier if the interface is standard)---and the system continues to work. Even an accounting unit can be replaced: replace your own department with an external accounting service! However, if some connections (in the case of modules, we talk about \"dependencies\") bypass the interfaces of the modules and the system uses these connections to realize its function, replacing the module will lead to the loss of these connections and malfunctions in the system.\n\nThere are many methods that help reduce the connectivity of modules in the created system. One of the most well-known methods is DSM (design/dependency structure\nmatrix)^[<http://www.dsmweb.org/>].\n\nOptimal (minimal necessary for normal operation of the system) module connectivity is needed in hardware systems, software systems, organizational systems, and even in dance. Good modularity is addressed by architecture::method, the role of the agent performing the architectural work---the architect (in the case of organizational systems, the org-architect).\n\nGood modularity and minimizing dependencies between them do not mean that system/subsystem parts are not closely interacting with each other. It means that these **interactions** **of parts of the design** **are under strict** **architectural** **control**, and subsystems can be improved, and in the case of interface standardization, even replaced with fundamentally different in design and principle of operation, without risking degrading the overall system operation.\n\n**The Systems approach is usually called holistic because it pays attention to the system as a whole. But there are no other approaches that help so much in dealing with** **the division into various parts like the Systems approach. The essence of the Systems approach is not only to pay attention to the entire system but also simultaneous attention to the parts of the system.** **The Systems approach---** **is about multi-level: consciously holding attention at least** **three levels: the supersystem (where we integrate our system), the target system (what we are doing), and the subsystems (what we are assembling from).** **This is true for\nconstructive/product/modular division.**\n\nIn the \"Systems Engineering\" course, there will be detailed information about architectural work, its place among other engineering methods, references to literature on methods for optimizing inter-module dependencies, metrics for quantitatively assessing such dependencies.",
    "35a349cd2c839037ea476dc35f4ea0a7": "---\ntitle: Platforms and Platform/Tooling Stacks\n---\n\nIf we consider the constructive/product/modular breakdown (PBS,\nproduct breakdown structure as opposed to functional breakdown SBS,\nsystem breakdown structure), we can see at every level\nof the hierarchy in relation to composition some sets of small constructive\n\"bricks\" that provide services through their interfaces to build on top of them\nconstructive \"bricks\" of a higher level,\nwhich can potentially offer a vast set of functions when used in some roles. This consistent set of modules by the services they jointly provide (**service** here is slightly\nrefined as \"a function whose functional object's port is accessible at\nthe moment of use as an interface of some construct”) with their predefined interfaces is called a **platform.**\n\n**A platform is always**\n**a constructive/product/modular** **consideration of a system**\n**emphasizing the standardization of getting** **the expected service at the time of use** **through a published** **interface.**\n\nThe fact that a platform is a constructive consideration, and a service is\na role behavior consideration (a functional object created by the\nplatform at the moment of use), should not confuse us, remembering about 4D extensionalism: construct and role are one and the same\nphysical object at the moment of use. And \"service\" instead of\nfunction/method emphasizes the change of some\nexternal item of the method of work performed by the platform—with a new\nclarification: for a platform, a service is performed through a published\ninterface, and the interface description makes it clear where to find it and how\nto access the service.\n\nIn engineering\n\n-   interfaces are managed by the architect (the architect decides,\n    constructs/components/modules of the application will communicate via program calls,\n    or message passing, or will use a “bus”,\n    meaning all constructs at the time of their operation will receive all\n    messages from all and select the necessary ones themselves,\n    if it is computer hardware, the architects will determine, if the\n    interface will be USB Type-C or Bluetooth, or something else. Architects\n    write out how the interaction will be arranged at the logistic\n    level, separate from the ports of subsystems as functional\n    objects to be implemented by specific\n    constructs using these interfaces. Their concern is the proper assembly of the system from\n    constructs, optimization (mainly—minimization)\n    of interactions between them.\n-   Developers take the interface as a given and determine what ports it\n    will implement at the time of use. Their task is to\n    implement functionality within the constraints set by the architect\n    (not every interface can, during system use,\n    ensure the operation of a port of a particular functional object).\n\nIt's clear that the roles of architects and developers have completely different\ninterests (with a common interest in obtaining a successful target system, but they\nusually have different views on the best method of working to achieve this\nquickly and cheaply, with different optimization criteria). More details can be found in the course \"Systems Engineering\". It's also understandable that\norg-architects and org-planners have such a \"working\nconflict,\" more about this in the course \"Systems Management\".\n\nFor software constructs (components, modules, applications,\nlibraries—the term depends on the preference of the software engineering\nschool) this interface is usually called **API** (application program\ninterface), hence an application that publishes the description of its interfaces, through which its services can be obtained via external call,\nalso becomes a platform.\n\nIf it’s not a software system, it can simply be referred to as an\napplication interface (application interface, not application program\ninterface).\n\nA platform, if implemented as a program library or \"hardware\"\nmodules, can be chosen depending on the project:\n\n-   included as a construct in the composition of the application or product/item during\n    its operation, being its subsystem performing some\n    roles,\n-   included in the environment, providing services for some parts\n    of the system (platform provided by the service provider),\n-   included in the composition of the creator (and here too, the platform is provided by\n    a service provider).\n\nThe word \"platform\" thereby becomes completely universal, thus it\nbegins to be called anything if it's clear what service on which\ninterface the platform can provide.\n\n\"Internal Development Platform\" in platform\nengineering^[<https://platformengineering.org/blog/what-is-platform-engineering>].\nThe platform service provider is created by an internal\ndevelopment platform engineer (this is one of the roles in engineering), and the platform services,\nthrough the published interface, are obtained by developers—\nthe platform manufactures from software code a working\nprogram on computer hardware. The term \"internal development platform\" appeared in software engineering. But in \"hardware\" engineering,\nit’s a factory used by developers. More details— in the \"Systems Engineering\" course. An analogous\nplatform would be the company's administration, which provides services (financial, legal, etc.) to the company's manager-organizers, it’s created and maintained\nby the administration. More details— in the \"Systems Management\" course. In educational institutions, the student flow is processed in the dean's office, which\nplays the same role as the administration—a platform that creates an \"educational organization\" from student groups, akin to a\nfactory where masters are made out of students. More details—in the \"Personality Engineering\" course.\n\nA marketplace is also called a platform, as it publishes\nservice interfaces for sellers and buyers, and sometimes for payment\nsystems. Sometimes creating such platforms is called uberization, and for French\nWikipedia, another synonym is given— plateformisation^[<https://fr.wikipedia.org/wiki/Ub%C3%A9risation>]—\nnamed after the Uber taxi-ordering service, which created the platform\nfor guaranteed \"delivery against payment\" with two published\ninterfaces: a service for taxi drivers and a service for taxi passengers.\nIn principle, a service for finding all kinds of clients for all kinds\nof services or goods—this is primarily a search engine, especially Google. But\nin uberization, the main service is carried out by the platform: guaranteeing\ndelivery against payment, the marketplace platform acts as an\ninsurer and billing agent both for the client and for the\nservice provider (and projects where this insurance does not take place are usually more than modest in scale— simply matchmaking does not bring in much profit, without\ninsurance it's always possible to find a service provider through a search engine, but\nthen you'll have to deal with insurance and billing).\n\nIn the already mentioned social dances (tango, kizomba, forró, salsa, etc.)\nthere are also interfaces, they are usually standardized at the \"base\" level:\nthere are conventional signals given by the leader to the\nfollower (this is a gender-neutral terminology for the \"partner\" and\n\"partneress\" that the whole world has now adopted). For instance, the follower's hand\nis on your (leader's) shoulder—you can't twirl the follower,\nthis hand will interfere. You as the leader give a slight nudge with your shoulder to the hand (this is the \"leading signal\" from the \"interaction protocol\")—\nand the follower's hand flies vertically up. Now turns are possible, this\nhand won't get in the way, won’t catch on you. This is one of the\ninterfaces in social dances (there are others): between the leader's shoulder and\nthe follower's hand. This paragraph gives a piece of the standard with the\ninteraction protocol between the constructs of the leader and the follower in a pair of\nsocial dancers.\n\n**Protocol**—a description of possible interactions in the interface, which, when and in what direction\nstreams (signals, energy, matter) are transmitted and what generally happens in what order. Protocols can be\n\n-   internal to the project (published within the developers' collective),\n-   open (published by an official source in\n    a **public document**, not implying verification of compliance, or\n    **standard**, implying verification of compliance by some\n    implementation),\n-   transmitted in oral tradition (like ancient epics and fairytales), like\n    lead-follow protocols in social dances (they can also be\n    published in some usually incomplete form, but publications\n    differ and there is no official source) or etiquette protocols\n    when eating (they differ in various countries, also published\n    partially or even more or less fully in many places, but these publications\n    differ in volume and content, and don’t usually have a date with\n    a version— there is no official source).\n\nIn thinking, this is not much different from invoking a software service\n(remember, \"service\" often refers to both provider behavior and the\nprovider itself, \"service,\" \"server\"), or requesting a service from\nsome equipment. In this sense, both the leader and the follower, by adhering\nto the standard \"base\" of the dance with its signals, represent a platform of this \"base\" for\neach other, they provide services to each other (leader—\na service of issuing interesting leading signals, follower—a service of decoding and\nperforming these signals, one interpretation of social dances—\nthis is a joint \"game of\nriddles\"^[<https://vk.com/wall-179019873_1550>]).\nAnd an important feature of social dances: standardization of the interface,\n\"platformness\" leads to the leader and follower, arriving at\nsome festival party from different countries and dancing with\neach other for the first time, being able to interact predictably and\nreliably with each other, and also \"serve\"\nmultiple partners. This interaction in social dances in systems thinking is described roughly\nwith the same set of concepts, as the interaction of a smartphone and its cell station,\na tram with its tracks, a web browser with a web server—for all these\ncases, thinking is arranged the same way, using the same types\nof meta-meta-models (though, of course, everything is named\ndifferently in each subject area. The standard of leading-following in social\ndances will never be called an interface there, they don’t know such \"smart words.\"\nThe problem is that it is not called anything at all, except perhaps \"a tacit agreement on leading-following\").\n\nWhen considering the assembly of two constructs/products/modules, think about the\ninterface, if communication with something external that changes occurs through this interface at the time the constructs are used in\nsome roles in \"servicing\" individual instances of items of the method\nby the general method, then this method is a service,\nif the interface is published and there are several services—this is about\na platform.\n\nThe main issue when discussing platforms is the so-called\n**interface visibility**. Interfaces of some low-level systems\nshould not be visible from outside the construct, that is, **it is not allowed\nto connect** **constructs** **otherwise than through the provided** **interfaces.** Simply put, if you have a box with some connector,\nyou cannot plug an external device not into this connector, but somewhere\ninside the box, bypassing this connector, even if you really want to. In\nsystems, everything is interconnected, and through an untracked connection (it will\nalso be an interface, but \"unaccounted\") parasitic connections can occur, leading to unforeseen errors. Remember: the architect fights\nagainst these unaccounted parasitic connections between parts of the system, while the\ndeveloper, on the contrary, tries to somehow bypass these\narchitectural constraints, as they believe this will get results faster. If we take a hacker as a\ndeveloper, they will first attempt to bypass the published interface and immediately access the\nfunctionality (platform services) through untracked connections. **Security specialists fight this. In essence,** **security specialists** **and\narchitects are different facets of the same engineering role.**\n\nFor example, if in your department, where you meticulously plan employees'\ntasks, receiving orders for these works through some tracker,\nsomeone from other departments can come and ask for work to be done \"out of order\"\n— and they won’t be refused, the consequences for\nthe organization will be fatal: some unexpected work will be done,\nsome seemingly free employees will be occupied, some important (but importance is determined by the supersystem! Within the\nmodule-department both as the customer and the\nperformer, the importance may be unknown) tasks will not be completed due to delays caused\nby this suddenly appeared \"out of nowhere\" (bypassing\nthe planned interface supported by the\ntracker) work. The whole tracker here is just an interface\nconstruct/module, providing an interface for the service of ordering works,\nit doesn’t matter that it is a fairly large software system, at\nthe examined systems level it is just an interface module for\nwork orders, a means of communication of the division with the outside world.\n\nIn electrical engineering, there are three types of faults: contact where it shouldn’t be,\nno contact where it should be, and poor contact. This is a joke\nexactly about interfaces—that must be exactly where they are foreseen by the design!\n\nTo discuss interface visibility, a diagram of\nconstructive/modular/product/platform levels is used. Each\nplatform level is separated from another level by some\nstandardized (that is described and documented!)\ninterface. Implementations/embodiments of the lower-level constructs can\nthus be changed in such a way that the supersystems do not notice the replacement\nduring the use of these\nconstructs, if they comply with\npublished (in case of platforms) or even internal (if it's about functionality, not service)\ninterface agreements.\n\nThe resulting multi-level product/platform breakdown is called\n**a platform stack** or **tooling**\n**stack** (stack, pile—diagrams resemble a stack of trays in a cafeteria\nor a stack of paper sheets in a pack). Here are examples of various tooling stacks for\nintercomputer communication in the Internet of Things (IoT, internet of\nthings)^[<http://www.slideshare.net/Techtsunami/cn-prt-iot-v1>]:\n\n\n![](06-platforms-and-platform-instrument-stacks-74.png)\n\n\nThe diagram shows that in different communication standards\nfive platform levels are\ndescribed/defined, which can be divided into roles of transmitting a physical signal during use (physical), data transmission (Data Link), etc. The\nconstructs for data transmission during operation refer to the constructs for physical signal transmission,\nusing the interface protocols specified in the diagram^[Agreement on interaction,\nimplying some order/sequence of actions of two\nsystems, is called a protocol. Standards describing data exchange are often\nreferred to as protocols as well];\nAnd so on through all levels to\nthe application level: each level\nof the platform/tooling stack gives an interface for service provision upwards and\nuses the services of lower-level modules itself. Where does the\nboundary between systems and environment lie? It all depends on the project: some of these levels\ncan be implemented by some system, and some by its environment.\n\nIt doesn't matter what these platform stack levels do/how they work. For the\n\"how they work\" part, you need to discuss functionality at runtime, what data will be transferred and with what purpose; this is also about runtime\nand should be discussed with developers, but platform discourse is\ndesign-time, \"what it's built out of and how connected,\" system creation time,\nto be discussed with architects.\n\nThe key in showcasing this tooling stack is that\n\n-   no upper level construct \"sees\" the lower-level constructs (has no access to them,\n    cannot \"plug into them,\" as there’s no interface) other than\n    the constructs of the level\n    immediately below,\n-   the interfaces providing services of these platform levels are standardized—as is the set of\n    these levels itself.\n\nThese tooling/platform stacks are ubiquitous. In dances, you\ntransmit a signal from the leader's shoulder to the follower's hand (that is, from part of the body\nto part of the body in whole), not from muscles to muscles, nor even\nfrom muscles of the shoulder through the skin, then the skin and further via receptors and nerves to the muscles\nof the follower's hand. Muscles are lower-level constructs, and if\n\"shoulder\" and \"hand\" are intact without needing lower-level repair,\nyou don’t need to meddle at that level, just use the prescribed interfaces. Universality\nthus grows with each level downward. If in social dancing you can transmit the leading-following signal from shoulder to hand, at the level of muscle\nwork you can discuss not only signal transmission but\nmany other services. If you're discussing the bottommost level of protocol stacks, various other protocol implementations over\nthem can be reviewed. For instance, in the connectivity stack for a more or less universal IP protocol, you can propose a higher-level TCP protocol, but\nother protocols implemented by other constructs, such as UDP and ICMP,\ncan also be used. This is depicted in the IoT platform stack\ndiagram for TCP/IP Protocol Stack. It's visible that the stack is named after a pair\nof protocols from somewhere in the middle, not even the topmost level, nor all protocols at the same level as TCP. In the illustration,\njust three protocols of the TCP level are shown, but there are 145 different ones^[<https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers>].\n\nThere are two ways to depict such diagrams of\nplatform/tooling/modular/constructive stacks:\n\n-   some diagrams name the \"platform\" layer with the title of the\n    descriptive application interface standard. Application—\n    this is upwards in system levels; application is at the stack's top.\n    Realizing this standard with an interface construct is\n    \"between levels\" (this method is shown on the IoT tooling stack\n    diagram, it's the most common)\n-   showing the constructs themselves (naming platforms) will be on\n    the labels, then the interface of these constructs either is implied as named\n    by the construct itself (for example, the deep learning package/library\n    TensorFlow has the TensorFlow API, so it need not be specified separately—the\n    type of construct \"package\" or \"library\" and assigning the name TensorFlow suffice),\n    or it's stated separately.\n\nBut if a platform level implements a standard with a different name, it’s\nspecified somewhere within the module borders as a separate line closer to the\nboundaries, or even separately \"between platforms\" as in the\napplication security stack illustration^[<https://f5.com/about-us/blog/articles/why-cves-should-be-given-priority-one-for-resolution-27910>]—\nstandards are listed on the side, and each label\nindicates a layer/level of constructs:\n\n\n![](06-platforms-and-platform-instrument-stacks-75.jpeg)\n\n\nThe upper bracket for the standard interface in the supersystem from the custom code leads to\nnowhere with this depiction approach, so generally\nthe previous method is used more often, where the platform is named not\nby its module/layer designations but its purpose listed on the side.\n\nOften these methods are mixed, yielding a hybrid constructive\ndiagram of constructive/tooling levels for interface visibility, developed by architects. Here’s an example of a neural network compiler layer\ndiagram, where top rows are names of software packages/libraries\nfor services over neural networks (MXNet, PyTorch, ...), and lower ones—interface standards for some hardware (OpenCL, CUDA,\n...)^[<https://tvm.ai/2017/10/06/nnvm-compiler-announcement>]:\n\n\n![](06-platforms-and-platform-instrument-stacks",
    "135d98b9bbc90ddd6d42f7f85db563bc": "---\ntitle: Systems Modeling as the Creation of a Multi-Model. Mega-Model.\n---\n\nModeling in systems thinking is the main tool for dealing with complexity in projects. High complexity is when there are too many details in descriptions, so the brain (and the computers aiding it) needs to perform many calculations. The number of calculations can be significantly reduced by eliminating calculations over the unimportant.\n\nAt a glance, it is usually unclear what is important to describe and what is not. Here everything is simple: important objects (instances) of the domain are defined by the domain description method (domain meta-model, domain ontology), and important objects for working with domain description methods are defined by the meta-meta-model, the general transdisciplinary/fundamental ontology of thinking methods (often called upper ontology, our course reveals part of the concepts of this ontology).\n\n**Modeling —** **is the description of only the most important, and leaving out the unimportant in the description.** **Want to fight complexity —** **think in terms of modeling!**\n\n**Documenting models allows not only to describe the important but also to keep it in focus for as long as needed for reasoning. And the unimportant is not kept in focus, remaining only in conversations** **during modeling when you discuss the modeling method and make guesses about what should be included in the model.**\n\nConcentration and modeling go hand in hand, we do not trust the biological brain in modeling; we record all modeling results! Thinking in terms of modeling is not a \"mental act\"; it is simply the explicit use of some description method during written thinking. **If you do not write —** **you do not model, you do not think!**\n\n**For modeling at each level of abstraction, you need to know three types of objects:**\n\n-   **Modeled object** from a real-life situation (somehow related objects in a domain). Ultimately, these are some objects of the physical world, something important and something not important about which is known to someone. There may be some modeling graph, and then it is about some models of other models (modeling models is also quite possible! One model then allows making judgments about the behavior of some other model in some critical respects. For example, you can create a table describing cities and their population, and take the information from some geographical map where this information is available — if you do not need the relative locations of the cities but only need the population information). There is a lot of information, many objects of attention, the task of modeling is to cope with the compactification of thinking: the agent’s calculator (brains and computers, or even a work collective), which operates in the domain, gets overloaded with processing unimportant information. Such subtleties as the differences between reality and actuality are not taken into account here. Reality is everything that exists, and actuality is everything we know about what exists in reality and can somehow describe, so we perceive not the whole of reality but only actuality. Dealing with the domain (the objects themselves, not their descriptions!) is the subject of ontology, the answer to the question \"what objects are there in the world” (how the physical world, as well as the mental/abstract world is divided into objects, and why these and not others). For example, you model some fruits: you write that there is apple-1 on the table, apple-2, and the only banana, which we will number to emphasize its \"instance-ness”, banana-1. And ignore plates, napkins, and everything else. These physical two apples and the banana are the subject of modeling.\n-   Types of objects to look for in the world. They are defined by the description method, which contains the meta-model. This **meta-model** defines the types of objects that are important in the domain. If we describe the table, identifying fruits on it, this is the assignment of the type \"fruit” and the kinds of fruits (specializations of fruit) \"apples\" and \"bananas\". There is also a meta-meta-model with types, allowing to find objects of the meta-model itself. Thus, banana::fruit::\"physical object\". The meta-meta-model allows reasoning about meta-models: comparing them, integrating, complementing, clarifying, checking reasoning against them, and generally discussing which meta-model is currently needed to describe the modeled object.\n-   The **model** itself (sometimes called the \"operation model\" or \"instance model\" for clarity). In the case of a physical model, these are some items retaining the main characteristics defined by the meta-model, and in the case of an information model — these are some description objects whose types are defined by the meta-model. The important thing is that the model here appears in the discussion only after defining the meta-model. In other words: the description appears only after we have defined the piece of reality we want to model, then set the types of objects we want to find in reality — and only then create and document the model. In our example, we write strings of symbols “apple-1” and “apple-2” and also “banana-1” — but these are already objects in the world of descriptions. More precisely, of course, it would be to write “apple-1”::apple::fruit, “apple-2”::apple::fruit, banana-1::banana::fruit.\n\nThis trio of objects exists at each modeling level. The thought process from modeled instances in the world to the model, then the meta-model, then the meta-meta-model, and so on, is called \"meta-modeling”. And the process in the opposite direction is modeling. So, when modeling meta-model objects, you will have:\n\n-   Modeled objects — meta-model types.\n-   Types of objects to be found in the domain of the meta-model — meta-meta-model.\n-   Model — the meta-model.\n\nThis principle of meta-modeling (from the world to increasingly higher abstraction levels in types) and modeling (from highest abstractions to lower) must be memorized since the number of meta-modeling levels (number of hierarchy levels relative to classification) can be very different. But as in any hierarchy, always remember: there is a level above and a level below, the type of relationship must be retained throughout the hierarchy, and be extremely careful with reasoning at extreme levels. For example, the \"extreme level\" may not even be extreme for upper ontology, higher levels will include objects of different theory concepts. And at the bottom of the hierarchy, there may be a transition not by classification relationships, but by the representation relationship between the model and the modeled object.\n\nHow to identify this trio \"modeled object, model, meta-model\" in life? Very easily: in descriptions, pay attention to headings and their types in some human-readable formats, and in machine-readable formats — to data models. Usually:\n\n-   Modeled object — it exists somewhere in the world, absent in the description. For example, an Excel document describing the technical and economic project/design of a sepulka of 8 Watts: the sepulka itself will be in the world, and only its description will be in the technical and economic project.\n-   The titled — refers to the model. For example, it will specify that this document is a technical and economic project of the sepulka, with the sepulka power of 8 Watts.\n-   But \"technical and economic project\" as well as \"power\" (and unit of power) — will be elements of the meta-model. Many models with these types can be made. Roughly speaking, \"document form, just headings with unfilled fields/requisites\" (sometimes called a template, a blank form, or a \"blank”) — is the meta-model, these headings are the types of the meta-model.\n\nWhere to look for the meta-meta-model (types of objects from foundational thinking methods we study in our courses)? Very rarely these types are explicitly included in descriptions, but more often than not — no, they are \"inferred mentally\", primarily by the creators of forms/templates/blanks. So \"technical and economic project\"::description and the fact that it is not about the sepulka itself but its description \"technical and economic project\" — is mentally maintained, somehow determined \"from context\". That \"important characteristic\"/\"concern\" for the sepulka user — power in Watts (\"power in Watts\"::concern), is also \"inferred\". In some databases, the meta-meta-model must be explicitly specified. But in most cases, it is not mentioned.\n\nSystems thinking (and other thinking methods in the intelligence stack) forces attention not only on three levels (object in life, model as value in form, meta-model as value heading, for instance, heading of a requisite in a form or column in a table or even the document's heading, but also add a fourth, \"in mind\" — type of meta-meta-model from thinking methods. From this moment, you know what mental operations can be performed with these objects.\n\nRemember: if A::number, then multiplying the number by the number is possible, but breaking with a hammer — no. If A::nut, breaking with a hammer is possible, but multiplying a nut by a nut — no! Types protect from errors and allow agreeing on the important. Thus, the meta-meta-model tells us the really important things, even more important than the headings (meta-models) in description forms/templates!\n\nHow to determine what is important? Important in descriptions is only that which helps to work by some methods (including description methods, but only \"among others\"). If you cut::the method forest::\"subject of the method\", then descriptions of forest beauty, shades of green in tree leaves, the number of ants per hectare of forest are unnecessary, they don't need modeling. But the thickness of trees, the number of trees per hectare to be cut, clearings for removing cut trees, and so on, need modeling.\n\nFor different project roles, the system's important characteristics are different, and different project roles want to move their values in different directions and need to know the values of many other characteristics for this (since in systems everything is connected, parts of the system interact, so all characteristics' values are interlinked, all roles understand this). What is important for a role in performing its method is defined by the domain meta-model of that method from theories/knowledge/disciplines/explanations/algorithms of the method. The domain is the subjects of some method, important are not the subjects themselves, but the states of these subjects and possible operations with them that translate these subjects from one state to another.\n\nThe meta-model at each level always exists (thus, the meta-model for the applied domain is a set of types of foundational thinking methods). To avoid confusion, we look at the hierarchy of meta-models in the classification relationship and simply add \"meta-\" for each relationship to maintain not just the relative naming of levels (modeled object, model, meta-model at each abstraction/classification level), but the absolute naming (modeled object, model, meta-model, meta-meta-model, meta-meta-meta-model, but this may be organized as modeled object, model, metaU-model, metaS-model, meta-meta-model, etc., or some other way). Remember that the number of meta-model levels may vary significantly from project to project, as different modeling agreements suitable in the context of a particular project may be adopted. Hence, the principle of reasoning in this paragraph should be understood rather than simply copied into your project. Meta-models (and even meta-meta-models) can be numerous, and levels of \"meta-\" can also be numerous.\n\nPart of the meta-models in the meta-modeling hierarchy is determined by the human brain's or the computer's apparatus perceiving the world. Firstly, it concerns the apparatus for foundational ontology as the theory of concepts^[<https://plato.stanford.edu/entries/concepts/>], defining high meta-modeling levels, what concepts can generally exist in models of all abstraction levels. But the modeled objects can also depend on apparatus. For example, if we have no way to measure voltage and current, we cannot model them well (the concepts of volts and amperes appeared relatively recently in physics).\n\nThe importance of an object in the world worthy of its concept is determined not in one step of modeling but in many steps: even that objects and relationships exist in the world turns out to be a result of modeling — meta-meta-meta-model, or foundational ontology. It is necessary to be extremely careful about the number of modeling levels and whether we have reached the last level or stopped somewhere (usually, if reached — this is called \"ontology\", and if stopped quite low at the meta-model of some domain and were not too concerned with the types of the meta-meta-model — this is called \"ontic\", such a \"half-baked ontology\", as it ignores the full hierarchy of meta-levels and their consistency). Here, as always, ontology as the study of different ontologies and ontics and specific ontologies or ontics is designated by the same word (like geometry and, for example, Riemannian geometry or logic and Tarski's logic).\n\nOf course, there are many schools in ontology as a doctrine of existent objects in the world (more precisely, types of objects), which use different terminology. Thus, \"meta-meta-model\" from our course, following the engineering tradition of meta-modeling, in specialized literature is called upper ontology (objects described in fundamental theories/knowledge of thinking methods in the intelligence stack, transdisciplines, for instance, the concept of \"system\" is precisely from there), and the meta-model is called middle ontology or applied ontology (this is modeling of the domain of some applied work method, for instance, mechanical engineering as a method of creating \"machines\" — transport, machines, and other equipment utilizing mechanical forces). Instance model/operational model is simply a \"model\" of some instances of objects, not object types. But also \"model\" is used for any meta-model, easily leading to confusion. Nevertheless, three-four levels of \"meta-\", i.e., levels of type-setting for types (abstraction levels, levels of concepts in classification hierarchy) are usually sufficient.\n\nAll this was discussed in detail in the course \"Rational Work”. We will repeat this reasoning several times as it is important: you focus your attention not on arbitrary objects in the world and other models that \"catch the eye” (they might be important or not. Unimportant objects may distract much attention from the important ones!). You pay attention to important objects (even specifically look for them, and if it is about designing, then specifically propose them), but the very fact of the importance of these objects' existence is set by the meta-model you have at that moment. And if you do not have a meta-model, you look for its objects exactly like this: paying attention to those objects set by the meta-meta-model, for this reasoning works at any ontological level. If you look for something important in the meta-meta-model, you have in mind a meta-meta-meta-model (theory of concepts) at that moment, which serves as a meta-model for the meta-meta-model. If you do not know the theories of concepts (say, theory-theory — that we represent the world mainly in objects and their relations, not in prototypes) — you will not understand the meta-meta-model (material of our course). Do not know the meta-meta-model — will muddle through ontics of domains.\n\nImportance is set multi-level, we do not grab random objects with our attention. Education (learning meta-modeling in particular) is needed to know what important objects we are looking for in the world or (in case of inventing something new) in our imagination. Education is needed to save time on unimportant calculations! **Education is also needed to understand why it is needed (as strangely as it sounds).** For instance, education is needed to understand: without knowing ontology (how to meta-model at many levels), there will be no systems thinking, as you will not be able to construct system descriptions consciously. Literally, the next paragraph contains a description of a real situation: “A financier wants to prevent a cash gap.\" We will annotate it with types from our course.\n\nFinancier::role wants to prevent::preference/interest “cash gap”::subject of interest. From this course section, we know that it is necessary to make (and document!) a description/model reflecting this very cash gap. This is a cash flow model, it will answer questions on this subject of interest. Everything else, even in finance (balance sheet, profit and loss) is not that important, other descriptions/models will be used to answer questions of the same or other project roles. And until you bring this description into negotiations, the financier with his interest will not be satisfied, no matter how you persuade him to \"calm down\". No, until you model the cash flow (or he models it himself and makes sure there is no cash gap), the financier will not calm down.\n\nA systems thinking actor will ensure that the project work involves a manager, including financial methods work, particularly methods to prevent a cash gap. Therefore, financial description with a documented (recorded on some information carriers, not just done \"in mind\") cash flow description will be done for the creator organization, and this model will answer financier questions in this subject of interest as well as serve as the basis for the financier's conversation with other roles (these will be conversations of different agents and their computers, and sometimes even conversations of computers with AI, and in small projects, it will be a conversation of different roles in one head and/or computer if the agent plays multiple roles at once).\n\nWhy so complicated? Because you can simply memorize: \"the financier needs a cash flow description to prevent a cash gap\". But then you will need to memorize thousands of such statements — and your head will explode. Instead, you remember the way of reasoning and in each specific situation simply understand which types of descriptions are needed (and cannot be avoided), which descriptions are not needed (and, on the contrary, should not be made — just wasting resources), and how exactly to make these descriptions so that there are fewer errors. And if the situation is such that you work in an unclear role by an unclear method, you can develop new types of descriptions for yourself since you will understand how to think about \"descriptions in general\" (for example, you will know that in descriptions — a model and meta-model in headings, and the meta-meta-model should be \"spoken aloud\" to the headings, also keeping it in mind).\n\nNow let’s repeat all this again. Alas, ontology is not the simplest subject in the intelligence stack, so repetition might be necessary. However, reliable mastering begins somewhere around the fiftieth repetition, so repetitions in the course study materials will not be enough, and all these arguments about systems modeling need to be repeated many times in working projects. Fluency will appear after creating the fiftieth table (if this is modeling in tables) where you ensure the type of description object is titled by the table, table columns correspond to the meta-model, you explicitly state column types, model values are in each row, and the modeled objects instances are in life (physical or taken from other descriptions) and correspond to table rows. This is not so long: three tables per day every other day — and you can manage in a month! There are no miracles; just reading the course material will not teach you to model. A textbook for riding a bicycle helps to learn riding a bicycle, but without real riding — nothing will work out.\n\n\"Subject of interest\"/concern/\"important characteristic\" in the description/model (view/model) is framed by \"description method\"/viewpoint/meta-model, and this description method specifies what is most important in the modeled object, which needs to be considered in various models obtained using this description method. This \"most important” for some model is called the meta-model,",
    "9021aed4428c697c40443f88428311a1": "---\ntitle: Constructive/Product Descriptions\n---\n\nWhen the subject of interest for some working method refers not to the system runtime but to the system build time—something of interest for modular synthesis, the procurement of constructives/products/modules/items/blocks, the assembly of the system as a **construct** from already purchased constructive parts, the delivery of an already created system/product/item—constructive/product descriptions must be used. These descriptions answer the question \"how is the system made\" (compare with the functional \"how does the system work\") and they pertain to creation time (design-time, construction), not usage time (run-time, operations). Remember, in design-time we include not only design but also manufacturing, modernization, and destruction. But we do not include operation/work-time/functioning/usage time.\n\nAs in the case with functional parts, there are different graphical (diagrams), textual (in natural language, semi-formal \"pseudo-code\", formal languages), and tabular formats (for example, in Excel spreadsheets, Coda.io, Notion.so, Airtable) of presenting constructive descriptions.\n\nOn product/constructive/module diagrams, **constructives/modules/blocks/items** (in the case of blocks, it is often clarified that these are constructive blocks, because there are also functional blocks as parts of functional divisions) connected through **interfaces** (interfaces, literally—\"between faces\", \"that which is between\") are more frequently shown. An interface is usually described by some standard, defining both the properties of the connection and the events that occur during the interaction of modules through the connection. Assembly of constructives for their interaction through interfaces is often referred to as **integration**. Standards describing bidirectional interaction are called **protocols.**\n\nOften constructive parts are named differently depending on their level in the constructive breakdown: parts (if disassembly/reassembly is not planned, an alternative name—element, \"further undecipherable\"), subassemblies/subassemblies, assemblies/assemblies, sometimes even subsystems/subsystems (but here it is easy to confuse with subsystems in their functional aspect), and further—system (it is also easy to confuse the constructive system with the system in its functional aspect, system-role-in-environment). The practice of fixing separate type names for assembly levels is poor because as the system evolves, you may replace three parts and eight screws with one complex-shaped part printed on a 3D printer, or even print the subassembly entirely—and then, a lot needs to be changed in the naming plan in the project. Remember: if you have a sprawling hierarchy by one type of relationship with one type of object (the same operations with these objects at each level, including thinking operations about these objects), avoid giving different type names to objects at different levels of some divisions: the number of levels is sure to change during the creation and development of the system, you'll have to rename everything for a long time.\n\nInterfaces of constructives resemble the ports of roles in that these are precisely the connection points (and often on diagrams, this indeed looks like \"a place in a square where some arrow connects at one end\"), meaning **interfaces themselves** **are not constructives, they do not occupy space**, although they may have a form as \"a boundary in space\". A plug and a socket, a USB cable and a USB socket: for all these pairs the interface—\"that which is between\" (\"between faces/interface\"), not the \"face\" itself.\n\nSo, what to call the physical end of an electrical cord designed according to the plug standard, the plug for some socket, the connector in a computer for a USB cable? These will all be **interface** **modules**, whose main purpose is to implement some interfaces in the physical world, that is, to pair with another such interface module. And this module usually has not one interface, but two interfaces: one target, and the other connecting it to some module for which the target interface is needed. Of course, \"module\" here is just one of the possible synonyms: \"product with an interface\", \"interface constructive\": any word relating to constructives, to the assembly time.\n\n**It is quite a common mistake to confuse an interface with an interface module.** Do not make this mistake (including students: do not be surprised being sent for a retake if you didn’t read up to this point in the course and called an interface some part of a construction). For example, is the cell membrane the cell's interface with the outside world, or an interface module? Since the membrane consists of molecules occupying space-time, it is an interface module, a constructive. Membranes, cases—these are interface modules with the environment, not interfaces! They have two interfaces: inward the system and outward the system.\n\nHere is an example of such an old interface module (which is colloquially called a USB interface, which is incorrect—it also has a signal interface to the board, a separate power interface, and even an interface to a human: an LED that blinks when data is being transmitted and a power button, and there is also a mechanical interface for mounting to a case or another board):\n\n![](05-constructive-product-descriptions-72.png)\n\nWhat about connections needed for operation—all these pipes, cables, waveguides? These are also constructives/modules/products/items/artifacts, and they have their interfaces: they lie between them and those modules they connect. What passes through these interfaces, and how is it related to the operation of the entire system?\n\nUnknown, because it concerns constructive units in design-time: functions from run-time cannot be determined here, for this you need to step beyond modular description into the field of engineering solutions for modular synthesis implementing functional parts of the system with its constructive parts (the concept of the system just refers to such a correspondence in the part of the internal structure of the system, while the concept of use refers to how things stand with the system in its environment).\n\nModule synthesis solutions (inventions in the course of creating the system concept):\n\n-   determine which functional parts' roles will be played by various constructives,\n-   determine what interfaces will exist between these constructives, and through these interfaces, which flows between functional objects will occur (discussed in the previous section on functional descriptions),\n-   consider all other aspects of the system (primarily placement and cost aspects, but many others important for considering the interests of numerous other roles. There are many descriptions in system descriptions, not just their main types).\n\nOften, the conversation revolves around a module receiving-processing-delivering some physical flow passing through the input and output interfaces of that module. This physical flow will implement the functional flow from the functional description (for example, a schematic diagram), which passes through the functional/role part appointed to play the role by the module. Thus, data flow can be transferred through a USB interface (to a printer, a slide projector, an external monitor), physically, this will correspond to the passage of some profile of electric current through the contacts of the interface modules—but on a schematic diagram/functional diagram/dataflow diagram, these will be domain data streams from the applied subject area (domain) data between the system’s functional parts, that is, the flow of pages for the printer, slides for the projector, screens for the external monitor.\n\nWhen integrating (often this word is used) different constructives into a single working system, not just the mechanical assembly from ready-made constructives is important but also the coordination of the work of these constructives after connecting them through their interfaces. The installer/assembler must ensure that the connection through the interface between the pair of interface modules is established, complies with the standard describing the interface, and thus the module will be able to play its functional role during work/functioning/operations/run-time.\n\nThe rules for establishing a connection through the interface are known, but it is unknown what exactly and why is transmitted through this interface—this will only be known from the functional description (for example, a schematic diagram). The operation method/mode of the system (functionality) and its subjects appear on the schematic diagram, which arises from dealing with functioning, not dealing with the construction and how exactly the system is assembled. \"Bedroom\" appears from understanding what is done in the bedroom (working methods), that is, the bedroom is determined not in the constructive but in the functional world. In the constructive world, the world of constructives/products/modules, it will simply be a \"room.\" A \"bedroom\" is implemented with a \"room\" (not, for example, a corridor or a balcony), then a bed (whether it be in its various realizations as a bed, couch, bench with a soft cover, sleeping bag) is needed to implement in it (but not needed in a corridor or balcony, but if you equip a bed there, then the constructives \"corridor\" and \"balcony\" can also be designated to perform the role of \"bedroom\").\n\nFor example, a printer and a computer are connected through a USB interface, but what information goes to the printer is unknown to the interface. The iron is connected to the power network through the interface between the Europlug and the Euro socket, but it is unknown to this interface what current will go through it and what this current will do in run-time. But the limiting current values that can pass through this interface are known, as is the maximum amount of information that can pass through the USB interface per unit time. **The task of module synthesis** **when designing the system is** **to choose such interface modules,** **whose interfaces** **can handle** **the flows with their operational modes as provided by** **the system's functional description.**\n\nHere is another example of constructive/modular/component (in IEC 81346-1, it is suggested to call a component an ordered product that arrives at the project from other creators) description, in this case it is simply a list of components (another name for the product/component) that need to be purchased for manufacturing the iPhone 2008, with prices provided—and this directly becomes a hybrid description, as it includes cost estimates^[<https://www.zdnet.com/article/isuppli-iphone-3g-costs-173-to-make/>]:\n\n![](05-constructive-product-descriptions-73.png)\n\nNotice how many different standards are mentioned here: GPS, HSDPA, DDR, Bluetooth—enumeration of interfaces described by standards is typical for constructive descriptions. After all, the essence of modules is replacing the implementation of some functional part of the system by simply replacing the constructive part: a module with a standard interface. Rapid progress in smartphone and laptop engineering is determined by this: thorough description of interfaces.\n\nInstead of one printer through a USB interface to a computer, another instance of the printer of the same brand, or even a different brand printer, or not a printer, but some other device (for example, a scanner, or even an additional display) can be connected—without interface standardization, this would be impossible. Then competition will work: the price and quality of the service/function/working method obtained through the same interface among competing module suppliers will differ, but the module change will happen easily for engineers, nothing will need to be changed in the project if they used a **standard interface**!\n\n**Standard parts** (with standard interfaces) are cheap because their price is driven down by \"competition of standard implementations.\" If you want to increase the price of an item, remove standard interfaces from the item—and immediately you will have a huge amount of work within the project on alignment of interests of the various project roles, which, in case of using standards, was conducted by developers of standards. This is often used in government projects to justify their high cost, simply specifying a non-standard interface in the contract—and the job is done! If a standard part costs 3 rubles in any store, then a non-standard part with the same function will cost a lot: it’s the same as instead of store-bought clothes suddenly taking clothes from an expensive atelier! The problem is that replacement of expensive atelier clothes with store-bought clothes will mostly go unnoticed, and the quality of a cheap item can turn out to be even higher because it is mass-produced and better tested! In engineering, it’s the same.\n\nThe method of fighting against inflating the cost of custom development is to require that intermodule interfaces are prescribed not in the contract, but in an open standard, and the contract should just reference the open widely accessible standard. Then there's more chance competition will arise, and the prices of purchased modules will be lower. This method for seeking low component prices is called **open architecture**^[<https://en.wikipedia.org/wiki/Open_architecture>].\nBut regularly the architecture (decisions on slicing the system into modules with defining interfaces for connection of these modules, i.e., solutions on the modular part of modular synthesis, in which functional decomposition solutions are linked and then a whole system is proposed to be synthesized from modules) is not opened for competition reasons, also for easier configuration management. In a closed architecture, to change the interface of module interaction, fewer people need to agree. But if the interface is written in an open standard, it will take much more time to change the standard. The iPhone architecture falls into the class of closed architectures. And it's not the cheapest device, although Apple's negotiating power is sufficient to keep component prices low: it’s just that there are large volumes of release for each module, and these large volumes are a powerful factor in negotiations.\n\nThese considerations apply to enterprises/organizations, but for them, functional parts are org-roles, functions are working methods/modes, and constructive parts are org-links performing work by the methods agreed upon in the functional description. Of course, interfaces must be defined between org-links, and how they should work is determined by org-architecture. Detailed information on this will be provided in the courses \"Methodology\" and \"Systems Management\", the concept of architecture is comprehensively discussed in the course \"Systems Engineering\".",
    "76376d6290bed7d3b9be11c1d5388263": "---\ntitle: 'Functional Descriptions: Circuit Diagrams and Scenarios'\n---\n\nIn a large number of project roles, the area of interest includes important system characteristics during run-time/operations, when the system is ready and being exploited. Explaining how the system works (i.e., describing the causes and effects within subsystem interactions) can be done through functional descriptions. In these, we explain the purpose (function/mode of operation) of each functional part of the system and the contribution of this part to achieving the overall system purpose, the overall system behavior in its environment (run-time).\n\n**Circuit diagrams** are schematics that show the connections of functional parts with each other and are convenient for explaining the principle of system operation (answering the question \"how the system works\" — how the functional parts interact to provide the required system functionality as a whole). Here are some typical examples of circuit diagrams:\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-66.png)\n\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-67.png)\n\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-68.png)\n\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-69.png)\n\n\nDuring operation, functional parts of the system interact with each other through **flows** passing through **ports** of these functional parts. In circuit diagrams, functional parts are usually depicted with graphical elements of different shapes, and flows are lines between these graphical elements. A port is a connection point where a connecting line attaches to the graphical element of a functional part.\n\nOf course, all these beautiful pictures in a diagram modeler are stored (and most often edited) in some completely different format, for example, in tabular form, and only displayed on the screen as a diagram. Remember that pictures in engineering are good only if they are very simple — and for showing completed work (these are \"archival documents\") when changes are no longer expected, as changes are difficult to make, and the modelers themselves are unexpectedly expensive in all respects (including expensive to operate — a single change usually requires too many and long clicks somewhere with the mouse, while making a change in text or a table is much faster). That's why our course includes diagrams; they are very simple, usually citing diagrams of other authors, and when it comes to our own diagrams, they are exclusively for illustrative purposes and do not imply changes during any project (remember \"constant everything\").\n\nOn a computer as a source of slides, there is a port for connecting a slide projector, and through this port, the slide data flows into the projector. This is a functional description, shown on the diagram. In the physical world, we see the constructive part \"laptop\" and in it the constructive part, implementing the outdated USB 3 interface (not yet USB Type-C) or HDMI interface, through which a projector cable is connected.\n\nA constructive/material \"laptop\" implements/incarnates the functional \"slide source\" (though the source of slides could be a smartphone), the constructive projector implements the functional slide projector, the cable implements the connection between the slide source and the projector, the interface implements port-to-port connection. \"Implements\" here means that the constructive (physical) object performs the role of a functional object. In a functional description, there are usually terms from the operational domain (\"presentation\", \"slides\"), while in a constructive description, these words are absent. A hammer and a microscope don't know they will be driving nails, so the descriptions do not contain words related to nail driving, just as there are no words about \"slides\" in the domain of laptop computers, but a slide projector might well contain such a word if it is specialized for presenting slides, or it might not if it can also show videos. And here we described a small part of the system concept — how we imagine dividing the system into different types of parts and how these parts are linked, with what is constructive and what material implements. Further, we would need to add spatial and cost descriptions, but for now, we will be concerned with the functional description of the system — yet, as always, we can’t talk about an object (in this case, a functional description) without discussing its connections with other objects (e.g., other types of descriptions), clarifying its meaning (\"the meaning is the use\") and grounding (providing examples of physical situations, sets of uses) so as not to become overly abstract in our explanations. Thus, this paragraph's inclusion in the course is just a norm for description (here we describe the functional description, a part of the meta-meta-model, the material of our course).\n\nFunctional parts are physical (when embodied by constructive/material objects), chosen for the system's operation to conveniently explain the system's work during its exploitation/operation (run-time, operations). Flows are mostly logical/role/functional objects, extracted from the world based on the constancy of the path, not the substance (for instance, in a river, the path of water is the same, but the water at any cross-section is different at each new moment), through which functional parts influence each other. Flows can be of various objects passing the same path: light flows, electric current, energy-mass transfer flows (in thermal machines), and even data flows (in software systems).\n\nFlows are extracted from the physical world based on the constancy of the path over time, functional objects based on the constancy of function over time, and constructive based on the material constancy during changes, spatial based on place constancy. These are ideas from the ontology/meta-meta-model ISO 15926-2, which we discussed in our course in more detail in the methods/functions/practices section, under role objects/roles and “role-play”/function/purpose in the environment.\n\nIn any case, we always bring our thoughts back to the physical world, but remember that **flows** are depicted in circuit diagrams, not constructive/material objects serving as flow conductors: for instance, electric current can flow through a conductor, chassis, bolt connection, but in a circuit diagram, this diversity of mediums will not be shown. In an electrical circuit within a device/product, it's not necessary to have exactly the same number of wires as depicted in the circuit diagram of that device/product. But the current must still have a path to flow between products/modules implementing functional parts, so the system works, the “wire” is just one of the possible ways to implement flow/connection/interaction.\n\nSimilarly, a \"pipe\" in a **hydraulic diagram** (a circuit diagram where flows are liquid flows) is just one way of implementing the flow/interaction — the constructive components playing the roles of functional parts of the system can be connected directly, flange to flange, without a pipe, or instead of a pipe, the liquid can flow through some kind of chute, with myriad other possible options. The main point is that the diagram shows connections of functional parts with each other via ports so their interaction can be traced through flow transmission of some substance or energy or data. However, in the end, data will also be transmitted through the transfer of substances, such as transporting a truckload of magnetic disks, or energy, e.g., through fiber-optic communication or through electric current between computer parts — all this boils down to flow being an object with the constancy/consistency of path during inevitable changes.\n\nRemember, functional descriptions can show not only the functional/role parts of the system but also the behavior/functions of these parts — and this behavior will also operate on flows: items in methods, passing along a constant path. In methods (by the way, functions too, they are synonyms — remember functions are often used for inanimate simple agents, and methods for intelligent agents that can plan something), they usually talk about input (input flow), processing/function/process (converting input flow into output) and output (output flow). In this case, they talk not about **circuit diagrams**, as for technical devices, but \"functional diagrams/process descriptions.\" Of course, a diagram is a description in the language of typed objects (object type is often determined by their shape — oval, circle, square, or drawing a picture next to it, in the simplest such diagrams, only one type of objects is used) and relationships, indicated usually by arrows (they too can have different ends and fletchings, in the simplest variants — one type of arrow). \"Process descriptions\" can be not only diagrammatic but traditionally are expected as diagrams. Here, we provide diagrams exclusively for illustration; today, this is not the main presentation. Expect to see texts and tables in real life rather than pictures.\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-70.jpeg)\n\n\nHere is an example of such a functional diagram (function model^[<https://en.wikipedia.org/wiki/Function_model>]) in the long morally outdated but extremely widespread and often encountered IDEF0 notation. To the left of each element are its inputs, and to the right — the outputs, and the arrows indicate what exactly is transferred from the output of the previous functional part to the input of the next. What is the most common type of mistake when reading such diagrams? These are functional parts and “logical time of method operation,” but this is often read as “physical time of operation instance,” and here lies the problem: one can fall into the scissors situation, where the functional and constructive breakdowns are different and “logical/functional time” does not coincide with “physical/material time.” For material time, other diagrams are used, often showing synchronization — for instance, the long outdated IDEF3 notation (and this is the issue, they use IDEF0 instead, nine times out of ten when methods/functions and works are 1:1, it’s OK, but in the tenth situation they diverge as in the scissors example, where the blade block and handle didn’t match with the two constructed halves of the scissors). So, you will inevitably encounter these IDEF0 diagrams, be careful about what they tried to depict — it might not always be functional objects and flows.\n\nAnother type of functional description — **scenarios** (scenario), sometimes referred to as **use cases** (use cases, to be translated not as \"variants of use,\" but precisely “use cases” — the original term was coined by Ivar Jacobson in Swedish, and it was exactly a \"scenario\", the term \"case\" was recognized by him as a failed translation into English^[More details in the History section <https://en.wikipedia.org/wiki/Use_case>]).\n\n\n![](04-functional-descriptions-circuit-diagrams-and-scenarios-71.png)\n\n\nAn example of such a diagram^[<https://en.wikipedia.org/wiki/Use_case_diagram>] illustrates the actions of active parts of the system, shown by figure icons. In the picture, these are project roles, but in real life, these can be functional/role parts played by non-humans. These diagrams use \"Aristotelian physics\" (\"the finger presses the table, but the table doesn't press the finger\"), i.e., they show not interactions but actions specifically: functional elements are depicted by the role actors/actors/performers, and their actions (functions) are modeled by separate circles, and the whole diagram reflects \"logical\" scenarios (not in physical time! In the “cause-effect” sequence of explaining what’s happening) as methods/functions performed by functional parts (roles, in use case terms — these are actors). Here, actors can be non-living, they are not necessarily \"intelligent agents\" making decisions. What is called actor in a use case, is not an \"agent performing the role,\" but the role itself, moreover, disregarding agency (without free will, without the ability to make decisions, a hammer in driving is also an actor). Always keep in mind that there are few words in the language, and each word has many different meanings, and terms like \"actor\", \"actor\", \"actor\" can denote completely different concepts in different disciplines of different methods, although sometimes they appear indistinguishably similar. So, stay vigilant.\n\nModes of operation/functioning of a system are usually calculated exactly by functional descriptions, as they are tied specifically to the system's runtime, not its creation time. Multiphysical modeling is done precisely for functional descriptions: optimal characteristics of functional objects are sought for given operating modes. Of course, the system is modeled in its environment (it’s run-time/operations-time, and the system's operation depends significantly on the state of its environment). Be careful: multiphysical modeling is sometimes called \"system modeling\" in engineering and tied to a specific class of software supporting some kind of physical modeler with descriptions in an acausal modeling language for physics, for instance, Modelica. But no, this is not full-fledged system modeling, it's modeling a functional description (e.g., calculating characteristic values of functional objects by some circuit diagram — often this is called 1D modeling because we model only one characteristic given the rest), not all descriptions. How to understand this? From the context, as always: if you hear \"system modeling\" or especially “system modeler,” just understand from the context — whether they are talking about system modeling in the context of Systems, or just labeling multiphysical (mechanics, plus electrics, plus hydraulics, etc.) modeling of some system.\n\nSometimes functional diagrams are supplemented by even more process diagrams, where the objects are the functions/behaviors themselves, named by verbs or deverbal nouns — \"hauling\", \"cooling\", \"lighting\". But process diagrams are rarer than \"circuit diagrams\" with functional objects as diagram elements, rather than functional element behaviors as in process diagrams. For instance, on a process diagram “increasing fluid pressure” behavior might be shown, while on a circuit diagram it will be \"pump\" (“object-increasing pressure,\" not its action “pressure increase”).\n\nOf course, remember that most descriptions in real projects are “hybrid”: people (and now also AI) in diagrams, tables, and texts can quite clarify that the function of increasing fluid pressure is implemented by a pump module, not a height differential and a chute module, or even explicitly state the brand and technical characteristics of equipment to be purchased!\n\nThe main problem with functional descriptions: they are usually understood only by narrow specialists, functional/role/\"by purpose in the supersystem\" breakdown of the system into parts — counterintuitive. But **if you are asked how exactly the system works** **(runtime), you won’t** **manage without some simplified circuit diagram** **or process diagram** **. Always prepare for such questions: after all, systems are made to work/be used, and most people are interested in how they work** **(what happens during use,** **what the system changes in its environment, what flows of what** **pass** **during that moment between system subsystems) —** **and only after clarifications on this topic can you discuss how and from what the system is made** **(development time, constructive), how composed, costing.** **If it’s unclear what the system does in its environment (which objects are transferred from one state to another during operation) —** **it’s unclear how to evaluate its construction, composition,** **cost. Good or bad —** **whom to ask, who will be interested in the system? All depends on what the system does! Functional consideration of the system is primary!**\n\nSystems thinking does not teach how to read and build functional descriptions and document them. Systems thinking says that functional descriptions should be made (and documented!). This is a meta-meta-model — not even a map to build a route and then follow that \"route on the map,\" not even the map legend, but the \"legend of the map legend.\" But if you want to go somewhere, the very idea that you will have a map legend, then a map, then plot a route on it — and go, will be helpful. You better do it this way, make a map yourself, than just \"take and go somewhere by intuition\" (and end up in a swamp after a couple of steps).\n\nHow to make functional descriptions (with functional decomposition), how to then do modular synthesis (deciding which modules will implement which functional parts) — this is taught by Systems. And if you want to become a professional, you will need to study also an applied discipline specifically dealing with some engineering subpractice (for instance, mastering a couple of textbooks explaining use cases and how to use them in projects to create use models in some “smartphone application development” or “electric vehicle development”).",
    "06786e1740de4a4ef3b7e1bbf59920df": "---\ntitle: 'Systems Engineering: Engineering Based on the Systems Approach'\n---\n\nMost actively after physics, biology, cybernetics, and thereafter management, but before the latest developments on the link between physics and biology, the systems approach in the 20th century was developed in **systems engineering**.\n\nIn Russian translations of engineering literature, managers often do not bother to translate the word engineering as \"инженерия\", leaving it as \"инжиниринг\". It's understandable that \"systems engineering\" and \"systems engineering\" are synonyms, but there's a small problem: in Russia, in places where engineering management is dealt with rather than engineering, it is also called \"systems engineering\"—although no engineering solutions (i.e., changes to the design and characteristics of a system) are made, it’s only about engineering decisions regarding the system-creator as an organizational system. These decisions in \"systems engineering\" are also made using the systems approach, but they mainly concern organizing the work of the project team's effort to create the **system-of-interest**. In the original systems engineering, when considering a project for creating a super-duper stool::\"system-of-interest,\" the main focus was on the features of this stool and the methods of its creation. However, in \"systems engineering\" in its Russian version, very little would be said about the stool itself, but we would learn everything about how the team of creators of this stool behaves and is organized. This is also important but is systems engineering of organization::\"system-creator,\" that is, systems management.\n\nWe will consider \"engineering\" and \"engineering\" as synonyms, but in the case of \"engineering,\" we recommend double-checking if it’s not actually management (organizational engineering) being referred to instead of engineering work with the system-of-interest (i.e., whether the \"engineering\" involves changing the system-of-interest, or if it's done in some other form of engineering alongside the \"engineering\").\n\nAncient engineering worked with the substance, where there were no significant computations except for the simplest \"feedback\" like the Watt's governor on a steam engine. Modern systems engineering primarily deals with cyber-physical systems, which typically include robots, missiles, airliners, autonomous/unmanned vehicles.\n\nAlready in the twenty-first century, systems engineers began to say that there were no restrictions on the types of systems based on their levels of organization/evolutionary levels/systems levels for systems engineering. This means changing matter to produce a soap dish or a match, changing matter to produce an airliner, changing people (they also need to be healed and educated), changing organizations (they need to be designed and developed), communities, societies, and even humanity itself—all these changes in the physical world for the better are led by systems engineers. In all these cases, it's about a multi-level view of objects: both the soap dish and the match are considered as parts of something whole (objects in the situations of using the soap dish and the match) and have some parts themselves, but society is also part of the whole humanity and also has its parts. Any work to improve the physical world turned out to be engineering, and it was about the most general and universal, scale-free engineering—systems engineering.\n\nThe International Council on Systems Engineering (INCOSE) sent engineers back to school to study social theories/disciplines to be prepared for such a turn of events and called upon systems engineers to take responsibility for the entire Earth: if not them, who have systems thinking, then who!^[<https://incose-ru.livejournal.com/49015.html>].\n\nSince then, life has shown that it was not so much engineers who went back to school to become politicians as engineers of society or managers as engineers of organizations (although many people became managers as well). No, on the contrary: people considering themselves politicians and managers began to work using engineering methods.\n\nEven in propaganda campaigns, needs are first identified, then designed, implemented, feedback is obtained, the project and methods are adjusted, and this is done continuously rather than one-off while also exploiting the results of the past part of the campaign. Amazingly, such a simple and understandable way to describe work aimed at changing the surrounding world and its necessity was formulated more or less clearly by systems engineers. Simplicity and clarity, of course, are only relative: such a view of the world had to be learned.\n\nThe unification of considering various projects aimed at improving the world and thus drastically increasing the simplicity of describing the most diverse system-of-interests of various projects was based on the idea of the system as a piece of the world selected from the environment that needs to be changed (transforming material into a part, turning a student into a master, turning a non-indoctrinated society into an indoctrinated one). Further, it was postulated that this piece of the world (**system-of-interest**) at the moment of its use brings irreparable benefit, changing the world for the better (the part makes some \"iron\" device operable, the master performs useful work, the indoctrinated society supports its existence). All these changes are done more or less alike with a general systems view of very different systems, despite the differences in terminology in each field of study.\n\nSay, the roles of a manager (businessman, organizer with subroles of org-designer and leader, org-architect, administrator) in relation to the enterprise as a system turn out to be roughly the same as the roles of an engineer (visionary, developer with the subroles of designer and production technologist, architect, platform engineer) in relation to the system-of-interest, and this makes it possible to present the knowledge of management much simpler than the \"from scratch\" approach, without using the knowledge of systems engineering. This can be seen in examples of other systems. Say, if a personality is understood as a set of various skills realized by an agent (person or even robot with AI), then teaching a person or a robot something new (for example, enhancing innate intelligence through education by means of an intelligence stack) turns out to be engineering of personality. And we see the same roles there as in engineering of \"hardware\" or \"software,\" as in management: culture agent (analogous to businessman, visionary), course author (analogous to organizer, developer, including the subroles of methodologist as an analog of org-designer and designer, methodologist as an analog of production technologist and leader), tutor or educational program architect (analogous to architect and org-architect), dean's office (analogous to administrator, platform engineer).\n\nSo, systems engineering in its modern understanding is changing the world for the better, in all its variety of systems. **Labor** turned out to be just different forms of engineering various systems. Labor was usually understood not only as \"hard labor\" from the perspective of workers but also as improving the world from the perspective of consumers of labor products. Earlier, labor was associated with agriculture, then with engineering \"factory\" change at the level of inert matter, which was not \"animated\" with computers, remember the \"labor lessons\" in school fifty years ago, where it was necessary to make a stool or turn a part on a lathe.\n\nNow the limitation on the type of systems associated as a product of labor has been removed. Labor, practice, activity, engineering, even culture and style as a method/mode of performing work (i.e., changing the state of the physical world)—everything turned out to be more or less synonymous if these words are used scale-free, for all possible systems levels. Although each word has some nuances of meaning, we will examine them further in the course. A detailed consideration of labor as behavior according to some pattern (method/culture/practice) of an intellectual agent as a system-creator of some system-product is dedicated to a separate course \"Methodology.\" In our course \"Systems Thinking\" we will primarily consider the system-of-interest, but not the system-creators in their creation graph, where some creators create and develop other creators. System-creators with their creation graphs will be examined in detail in the course \"Methodology,\" methods for creating and developing system-products in their most general form in the course \"Systems Engineering,\" methods of programming intellectual creators for performing some work methods (i.e., teaching agents these methods)—in the course \"Personality Engineering,\" system-creators of humans and machines (organizations)—in the course \"Systems Management.\"\n\nSystems engineering as a universal normative (\"how it's supposed to be done,\" norm of engineering work) method of work will also have a dedicated course. There is also a separate course on personality engineering. Meanwhile, the courses \"Systems Engineering,\" \"Systems Management,\" and \"Personality Engineering\" are based on the material from the courses \"Systems Thinking\" and \"Methodology,\" allowing them to be similarly structured. One time it is told how to do something, it will always be more or less the same in general terms (design, manufacture, operate—and repeat this in a cycle of development)—then one can tell only some features that distinguish the engineering of different types of systems. Learn once, use always!\n\nThe most contemporary but already outdated definition of systems engineering is given in the Guide to the Systems Engineering Body of Knowledge in 2023: \"Systems Engineering is a transdisciplinary approach and means to enable the realization of successful systems. Successful systems must satisfy the needs of their customers, users, and other stakeholders\"^[<https://sebokwiki.org/wiki/Introduction_to_Systems_Engineering>, SE is a transdisciplinary approach and means to enable the realization of successful systems. Successful systems must satisfy the needs of their customers, users, and other stakeholders.]. In this guide's glossary, other definitions are also provided, such as the one from the honorary members (Fellows) of INCOSE 2019: \"A transdisciplinary and integrative approach to enable the successful realization, use, and retirement of engineered systems, using systems principles and concepts, and scientific, technological, and management methods\"^[<http://sebokwiki.org/wiki/Systems_Engineering_%28glossary%29>, A transdisciplinary and integrative approach to enable the successful realization, use, and retirement of engineered systems, using systems principles and concepts, and scientific, technological, and management methods.]. These definitions highlight:\n\n-   **Successful concept, realization, use, and retirement of the engineered system** **in the physical world, accounting for the multiplicity versions of continuously developing systems**—this is systems engineering as a specific \"method of work\"/\"type of labor\"/activity, method/culture/style/practice of work (and in unique cases chosen for a particular project—strategy). The word \"successful\" (successful) here is extremely important and has not everyday but terminological special meaning. The term **\"successful\"** means that the project takes into account **role preferences** (this is also a systems approach term; we'll examine it in more detail in the following course sections) of both agents affecting the system and agents affected by the system and its project. Abstracting from whether these agents are humans, or AIs, or if these humans and AIs are organized into organizations or even societies, we won't deal with the multi-level nature of agents in the hierarchy of part-whole relationships of these agents yet. If role preferences (that is, dictated by some applied work methods) of all these agents in the roles of customers, payers, users, and others (the interests/preferences of malicious roles, say thieves, are accounted with a negative sign) are taken into account, then this will be \"success.\" Thus, success here is defined not by everyday, financial, or ecological criteria, or any other way, but precisely through the acceptability of the project result for a plurality of agents-in-roles. **Success is defined as** **\"in the project, we have convinced everyone, all are satisfied.\"** **\"We've convinced everyone,\"** incidentally, is a stronger phrase than **\"we've agreed with everyone.\"** Because if these \"everyone\" haven’t agreed among themselves, then our agreement with everyone collapses, so it is more reliable to convince everyone (including ourselves), meaning that organizational work is also done, not just engineering work. This was the innovation of the second generation of the systems approach: creator agents (then—humans and their organizations, now including AI) as supersystems of the system-of-interest (needs come from them), and the system-of-interest (the engineering project team) are no less important than the new system they create.\n-   The term **\"systems\"** is used in a very specific sense: these are \"systems\" in the systems approach, not the everyday word for \"some complex objects.\" For systems engineering, the word \"system\" is roughly what \"physical body\" is for Newtonian mechanics—if you say about a computer \"physical body,\" it automatically involves talking about mass, shape, volume, potential energy, elasticity modulus, temperature, and so on, but certainly not price and not the performance of the computer. If you say \"system\" about a computer, it automatically involves talking about system levels involved in the work on the creation and development of the computer (transistors, microchips, printed circuit boards, assembled computer—from computer going down to parts) and with a finished computer (arranging the workspace, installing and using various software, from the physical boundary of the computer upwards to the supersystem) the roles of different agents and their role preferences in important characteristics of the computer (concerns), then the discussion goes about the use concept, the system concept, architecture, continuous system development and so on. In our course, all these concepts will be examined in detail.\n-   **Transdisciplinary and integrative/interdisciplinary approach**—systems engineering as a method claims that it works with all other applied engineering methods (though not only engineering ones). **Transdisciplinarity** (transdisciplinary) means externality/\"otherworldliness\" in relation to various other disciplines (and in our case also to other methods based on these disciplines/theories/knowledge), not being \"between\" other disciplines. Transdisciplinarity is a very strong statement, it means that systems engineering is included in numerous other applied methods themselves, it is not \"on an equal footing\" with them but is used directly within the reasoning of applied methods. In INCOSE, from where this definition is taken, nothing is said about the intelligence stack, but what is meant is that systems engineering is included as a method in the intelligence stack itself, not being an applied discipline outside it. Systems engineering due to its transdisciplinarity can \"harness a horse and a delicate doe together.\" For example, systems engineering connects people and AI in roles of mechanical engineers, ballisticians, cryogenics, psychologists, medics, astronomers, programmers, etc., in manned spaceflight projects, coordinating their work in these highly complex projects using systems engineering concepts. The interdisciplinary approach of systems engineering means that using the method of systems engineering makes it possible to combine the labor of many people working by various applied methods. Today, it becomes clear that the most important characteristic of transdisciplinary knowledge is its scale-free nature as applicability to systems of any size/scale/system level, from molecules to humanity with its technosphere as a whole, and also extending to scale-free time, accounting for techno-evolution. And, of course, transdisciplinarity implies non-anthropocentrism, agents can be not only humans/homo sapiens.\n-   The word **\"realization\"** means exactly this: creating a material (physical, occupying space-time, i.e., tangible/material) successful system. It's about changing the physical world, it isn't confined only to design and other informational work, the project reaches physical reality and changes it. As physicists like to point out, \"a mathematician and an astrophysicist, after all, are also tangible objects, physical systems.\" The same applies to humanity as a whole: it's quite physical. So, tasks can be set for engineers to change humanity along with its technosphere. The question is only whether these set tasks can be carried out afterward, but in physics, it's not forbidden, so such tasks can be considered. For example, set a task for humanity not to go extinct in the next ten thousand years and see what happens.\n-   **Use of systems approach principles and concepts** speaks for itself. If these concepts aren’t used, then it’s not systems engineering but something else!\n-   **Methods of work** systems engineering takes not only **scientific** but also **technological** (obtained by trial and error), and even **managerial** (but not, for example, religious). In the course \"Systems Engineering,\" the question is considered whether systems engineering is scientific or non-scientific, and there is exactly this answer: scientific and non-scientific simultaneously. On the one hand, no scientific achievements are rejected, they make engineers' lives much easier. But if a medieval engineer is asked to build a bridge over the river, and he answers that structural mechanics will be invented in three hundred years, so he will not build the bridge, \"this is unscientific\"? This is an example by Billy Koen, who clearly states that engineering is not limited to the use of \"scientific knowledge,\" but it develops quite in line with how science develops: there are guesses about what constitutes the best methods of systems engineering, then these guesses are criticized, and guesses that have survived this criticism are precisely the contemporary version of systems engineering. The methods of thinking about work methods in engineering (\"hardware,\" \"software,\" living systems, AI, personalities, communities—it doesn't matter) are covered in the course \"Methodology.\"\n\nIn English, \"systems engineering\"—though earlier writings were \"system engineering.\" The correct interpretation (and the correct translation) is exactly \"systems\" (implying the use of a systems approach) engineering, not **engineering of systems** when any \"object\" is labeled \"system,\" but the systems approach isn't fully used. Under the term engineering of systems^[see Prof. Derek Hitchins, \"Systems Engineering vs. Engineering of Systems—Semantics?\", <http://systems.hitchins.net/profs-blog/systems-engineering-vs.html>] (e.g., control systems engineering, manufacturing systems engineering) are common engineering specialties, and the word \"system\" can be easily discarded there, indicating just some \"scientific gloss.\" Applied engineers easily call any object a \"system\" without consciously using systems thinking, i.e., without using the systems approach and without aligning the preferences of various design roles in important characteristics of the system and the project characteristics. In the best case, subject engineers will say about the system that \"it consists of interacting parts\"—this is usually the end of the conversation about the \"system\" and \"systemness,\" it doesn't last more than twenty seconds, the concept of \"system\" here means about the same as \"system\" in classical physics. People working on the \"engineering of systems\" are very useful and necessary, but they are not systems engineers.\n\nHowever, the qualifier \"systems\" cannot be removed from systems engineering without changing the meaning of the concept. Informally defined, **systems engineering is engineering with systems thinking in mind** (not any engineering dealing with objects prestigiously named systems just to indicate the complexity of these objects and scientific nature \"like in physics\" in their description).\n\nIt would be fair to state that any engineering that starts relying on fundamental methods of the intelligence stack becomes systems engineering. This applies even to engineering traditionally not considered as such (the same management, or medicine, or child education). All of them in fact become \"systemic\" if they are conducted by methods of the modern intelligence stack, even if explicitly the word \"systemic\" is not added to these engineerings and the word \"engineering\" is not mentioned. It’s just a question of how contemporary the version of the systems approach and the other positions from the fundamental theories/discipl",
    "05911c2ca0243ec186409adb9f452a29": "```markdown\n---\ntitle: Terminology\n---\n\n**Terminology**^[[https://ru.wikipedia.org/wiki/Терминология](https://ru.wikipedia.org/wiki/Терминология)] ---\nis the study/knowledge/discipline about words that designate **concepts.**\nConcepts, \"concepts\" and \"concepts\" for our course can quite act\nas synonymous terms, although in some scientific schools the Russian words\n\"concept\" and \"concept\" mean different things, and in English the broad concept is sometimes called\nnotion^[<https://www.merriam-webster.com/dictionary/notion>].\n\"Terminology\" also has two terminological meanings:\n\n1.  a set of term-words to express types and relationships of the ontology\n    of some subject area and\n2.  The study/discipline not about the concepts themselves, but specifically about the designations\n    of concepts with words, about **terms**.\n\nThis is just like with geometry and logic --- both specific versions of geometry\nand logic, and the study of what geometries and logics there can be in general.\n\nIn each language, sets of terms (terminology in the first sense) have formed\n(or continue to form) for concepts from various fields of\nhuman culture/activity/methods of work. And in these areas,\nterms acquire meanings, i.e. they designate (since they are \"signs\", they\n\"designate\") some objects and their relationships that exist in the real world, not in the world of signs.\nTerminology thereby can be considered part of semantics as a general study of objects,\ntheir designations, and the concepts of these objects. This was already touched upon in the course\n\"Rational Work\", and will also be further explained in the course\n\"Intellect-Stack\".\n\nA term is always just a word. We need words only to agree on concepts,\nthe words themselves are not important. So,\nit absolutely does not matter whether you use the term \"concept\" or the term\n\"concept,\" if you mean the same thing: the meaning of what\nis designated by the term. There are many dialects, disputes about which dialect\nis the \"true language\" (whether to translate viewpoint in Systems thinking\nas \"point of view\", \"description method\", thus saying \"viewpoint\", or\nstill translate \"aspect\", as will be \"the only\ncorrect\"?!), they are fruitless, these disputes cannot be resolved.\n\nArguments between people on the most important issues of life and death often turn out\nto be just \"arguments about terms\": the same object\nis called differently in different dialects and people believe they are talking about\ndifferent objects (the example of Venus is given in philosophical literature: in\nsome countries it is called \"morning star\", and in others --- \"evening\nstar\"), or vice versa --- the same words mean completely different\nobjects (\"mowing with a scythe with a curved scythe on a spit\").\n\nIn such \"arguments about terms\", it is important to recognize that this is not a\nsubstantive conversation, but merely an argument about terms. To stop\nsuch fruitless disputes, it is necessary to formulate your ideas about\nthe world in speech as expected observations, not through terminology from your\nfavorite dialect, even if it is taken from your favorite standard\nor dictionary. Your interlocutor may have another\nfavorite standard or dictionary, they may speak in another unfamiliar dialect --- and you will not come to an agreement on the matter itself, just get stuck\ndiscussing words. So if you try to talk to someone about\nintelligence or dance, you are unlikely to agree: each person interprets\n\"intelligence\" in their own way, just as \"dance.\" It will be roughly understood\nthat it is about some \"cleverness\" or \"movement to music\",\nbut nothing can be discussed in detail: you will get stuck in a long discussion\nof what you understand by \"intelligence\" (the word!) and what your interlocutor understands by \"intelligence\" (the word!), as well as the same\nwill be with the word \"dance.\" People recognize that in a dictionary each word has\nmany meanings, but then insist that you use\nonly the meaning they prefer\n --- and it would be better for you to refrain from other meanings of the word or come up with\na new word for them. The use of the terms themselves, if there is no agreement on their dictionary meanings, will be useless\nin conversation, reducing to an eternal fruitless argument about terms. But if there is no argument, and the word's meaning is perceived differently, you will get a \"false friend of the translator\" from professional slang to everyday language --- and then\nintractable and hard-to-find errors in thinking.\n\nIf you feel that you cannot agree on some simple\nterm, try to taboo its use, i.e. continue\nthe conversation without using this term, just not to get confused. For\nyou cannot convince the interlocutor that you use\na different dictionary meaning for some word. In our course, we did\nthis with the words \"stakeholder\"/stakeholder, the word \"dance\", the word\n\"enabling\"/enabling. Students' use of these words caused\nmistakes. For example, \"enabling system\" was perceived not as a\nsystem-creator, enabling the realization of the system in the physical world, but as something like a \"supply service\" --- a power supply system,\ncatering, gas station, parts supply. This\ncould not be overcome by any explanations, the mistakes were made by almost every\nfirst student. The solution: all these word-terms that provoke mistakes\nwere tabooed. They are no longer in the course.\n\nWhen you understand the content of the conversation under the conditions of tabooing\nthe term, just name different objects that you called with your\ninterlocutor with one term, different words-terms, and continue\nthe conversation --- there will be no more \"arguments about terms.\"\n\nThe use of certain terms for certain concepts\n(for example, \"car\", and never \"автомобиль\") signifies belonging to a certain\ncommunity that prefers to use these terms, speaking in their own dialect. But there are other communities,\nusing other terms for the same concept. It is important to agree, and\nterms are not important. In Systems thinking, which\nis transdisciplinary/fundamental, this is given great attention:\n**thinking goes in** **concepts** **(types and relationships), not in\nwords**. Words can evoke some associations, they can be\nuseful for this, but thinking still goes in concepts.\n\nPeople who have never seen a car in their life, members of the Mumba-Yumba tribe, do not know the concept designated by the word \"car\" at all. But people\nwho are aware of the existence of cars and do not know each other's terms will not be able\nto agree if one demands \"car\" and the other --- offers\nan incomprehensible \"автомобиль\". But here at least there will be\na suspicion that the problem is in different languages. But when one demands\na cart, and they are given a garden cart, not the expected car --- and\ninsist, then in real projects there is a problem.\n\nTerminology is transient, concepts survive longer. During the USSR,\na computer was called an EVM (electronno-vychislitel'naya mashina), but now it is already \"computer.\" The meaning has not changed, the speech has changed --- that is,\nthe term, the word-designation has changed. And speech-words change much\nfaster than the objects they designate: the word \"тачка\" is already going out\nof fashion for the meaning \"car\" as \"not slang enough\" in\ncertain circles and is gradually being replaced there by the word \"тачило.\"\nThe computer is no longer necessarily an electronno-vychislitel'naya mashina, it can be\na quantum or optical computer/computer/calculator. EVM turned out to be just a reference to a specific hardware implementation not through\nhydraulics, pneumatics, mechanics, but \"electronics\" --- the engagement in the mode of **electronic keys**^[<https://studbooks.net/2347860/tehnika/elektronnye_klyuchi>] first with electronic radio tubes, and then discrete transistors and then\ntransistors on semiconductors (the key switches a \"door\" from the\nstate \"open\" to \"closed\", and back). But try googling\n\"electronic key,\" and you will find that the main meaning of this term\nhas also changed! This is both an \"electronic signature key,\" and just a key from\na door with an \"electronic filling.\"\n\nTerminology can differ significantly not only for different\nprofessions but also for different sub-professions within one profession.\nWhat is called \"software\" for systems analysts working\nby state standards will be an \"application\" for foreign software vendors, or\n\"soft\" for developers.\n\nIf the inability to agree on terms becomes a real\nproblem that hinders the implementation of the project --- there are different\napproaches to solving it:\n\n-   **Terminological fascism**, when only one term is declared\n    by someone as correct, and all the others --- incorrect (compare with\n    \"Grammar nazi\"^[<https://neolurk.org/wiki/Grammar_nazi>]).\n    This approach has many variations --- demanding\n    the uniqueness of the term used (the absence of synonyms for\n    the term), also demanding compliance with the accepted standards\n    (certain state standards, for example, and not textbooks or other state standards),\n    demanding the use of a native root in the word (\"mokrastuples\"\n    instead of \"galoshes\"), insisting on following traditions (\"калоши\", but\n    not \"галоши\"), ignoring modern norms (\"coffee\" only\n    masculine, although it has been possible to use the neutral gender according to dictionaries for a long time).\n-   **Terminological indifference**, when words and their meanings are generally\n    disregarded. No \"deliberately correct options\" or\n    references to authoritative sources. At the same time, if the meaning of a word changes during the conversation, this often\n    is not tracked at all, the speech turns out to be \"not strict.\"\n-   **Strictness of meanings** **(maintenance of type)** **with permission**\n    **of various** **synonymous terms designating the same concept.**\n    With this approach, it usually takes a long time to agree on which particular\n    concept is meant, and then any word-terms are used\n    to point to the agreed concept. At the same time,\n    the use of terms preferred by different professional\n    speech communities is allowed. Moreover, it is also possible not to use specific\n    terms if the meaning is clear. Thus, when discussing\n    a car, calling it a \"self-propelled cart\" is quite acceptable, and this will not\n    be a crime if the recipient understands what it is about.\n\nIn our course, an **approach will be used, achieving strictness\nof understanding meanings** **(concepts), with the possibility of using**\n**different** **synonymous designations, thus different terms for the same concept.** Call it even a pot, even use five terms from\nfive different standards in three languages --- but agree on what concept/concept you mean: interlocutors should understand not\nthe term but what you mean by this term: understand\nthe meaning-concept, not the sign-term. This is discussed by semantics, the study\nof meanings. Systems thinking is based not only on the theory of concepts and\nontology, it is also based on semantics. For fluency in Systems\nthinking, it is necessary to be somehow familiar with all other methods of thinking in the intellect-stack.\n\nWhen several synonymous terms are indicated, they are in our course\nwritten through a slash, \"trains\": software\n/software/application/application/soft. And the fact that each\nof these synonyms has slightly different shades of meaning, we will not pay\nattention to --- or specifically discuss this difference if it suddenly becomes important and\nit is not a terminological difference, but a substantial difference,\na difference of concepts.\n\nCriticism of this approach is also not rare: \"How can you teach people,\nwhen you designate the same thing with different words? You must choose one\nterm, and then use it in the course to designate some concept\nonly it! That's how it's always done in textbooks!\". The answer to this criticism is simple:\nin life, you have every chance to meet people who designate concepts\nnot with the terms introduced in books and courses, including in\nour course. So our course will train you to use\ndifferent terms for the same concepts: pay attention ---\nyou are not just being taught new words, not just being made to memorize\nterminology. They are trying to give you knowledge about concepts and their connections, under\nwhatever words-terms these concepts are hidden.\n\nAs for the fact that indicating many synonyms slows down the reading of the text, we have\nalready written: slow reading and thinking about the read improve\nthe result of learning. If the text is read quickly and smoothly, then it is not certain that\nsomething from this text will be remembered in three days.\n\nWe also have gratitude from students in favor of the training method of explicit synonymization\nthrough \"train\" terms we have adopted. Students usually do not understand in the first half of the course why\nit is so complicated to express thoughts through synonymous rows, but somewhere in the second half they gain\nexperience using the course material in real projects, where\nterminology diversity reigns. And then they understand how important it is\nto disengage from working with a single \"precise term\" and the habit\nof working with concepts, not terms. Synonymous rows just\ndevelop this habit of understanding the meaning of statements regardless of\nthe terms used.\n```",
    "c9af13b3146fdf81edde39f380e3353b": "---\ntitle: Reliance on Standards and Public Documents of Systems Engineering and Management\n  in Our Version of the Systems Approach\n---\n\nThe version of the systems approach we present in our course is based\nprimarily on the material of **standards** and **public documents**\nof systems engineering. To the engineering standards, we have added some\nmanagement standards like enterprise engineering. A public document is a standard for which no procedure for conformity assessment is defined. Otherwise, everything else is the same: the specification is issued by a collective, regularly reviewed. Public documents serve the purpose of informing, spreading knowledge, and not for unification. These are mainly materials from the second generation of the systems approach, \"target systems which are conceived, created, and operated by system creators from teams of people.\"\n\nOf course, we have added modern ideas of the third-generation systems\napproach that have appeared in the last five years in physics, biology, and\nalso control systems engineering, about which we wrote in previous sections (scalelessness, including not only scales of size but also scales of time, including Darwinian/biological evolution and\ntechno-evolution, non-anthropomorphic presentation, conflicts between\nobjects of different system levels, and indeterminacies).\n\nNevertheless, the main concepts and terminology are taken from the engineering and\nmanagement versions of the systems approach, and not from academic\nliterature. From these standards and public documents, we took the main\nconcepts and their terminology and only slightly adapted these concepts and\nterminology, making the link between the concepts defined in different standards and public documents obvious.\n\nReliance on standards is important also because the standards and\npublic documents themselves are regularly reviewed, every few years.\nThis allows not to lag behind reality, as the texts of Bertalanffy's General Systems\nTheory (GST), which can still be found in bookstores and on the internet even today (we remember that these ideas were first proposed in the 1930s), have fallen behind by dozens of years. The version of the systems approach we present in the course will also become outdated someday (this has already happened! The current text --- is the result of the ninth revision!), but by relying on regularly reviewed standards and public documents, as well as regularly published scientific articles, this can be noticed (as we noticed the recent shift from \"interdisciplinarity\" to \"transdisciplinarity\" in public documents of systems engineering, the recent discovery of the role of indeterminacies from conflicts between system levels as a basis for the growth of complexity in biological, mimetic, and techno-evolution, the departure from requirements engineering in systems engineering, the departure from the concept of the life cycle to \"continuous everything\").\n\nIn our version of the systems approach, the following versions\nof engineering and management standards and public documents were used (this list is far from exhaustive, only the main\nsources are provided^[For many of these standards, there are\nofficial Russian-language versions as GOST, but we did not rely on them. Firstly, we are more interested in international, not national standards. We hope that our textbook will be used not only in Russia, and the knowledge obtained from it will be universal for different countries. Secondly, translations of international\nstandards for the purposes of \"gosting\" are carried out under economic contracts without special attention to their quality and\nharmonization of the terminology used in different international standards. Therefore, we do not use the terms defined by translated GOSTs. Thirdly, international standards are continuously reviewed,\nand translations usually lag behind the current content of the standards, they\nare only available for past, obsolete versions.]):\n\n-   The **ISO/IEC/IEEE** **15288:2023** **Systems** **and**\n    **software** **engineering --- System life cycle processes**\n    defines the very concept of the system and the life cycle, distinguishes the target system, systems in the environment, and creation systems, introduces the concept of life cycle methods/processes/practices. Although it is significantly out of date, as it mainly implies one-time development and includes requirements engineering methods, which are already irrelevant in engineering (this became irrelevant around 2017, but international standards of this level change slowly).\n    But we still use many concepts introduced by this standard.\n-   The generalized standard from purely recommendations for architectural\n    documentation creation to complete system documentation\n    **ISO/IEC/IEEE** **42010:2022** **Systems and software\n    engineering --- Architecture description** brings multiplicity of descriptions and action-oriented approach. This is a \"mind turn\" from the reductionist approach of one-sided description to the systems approach, implying a multiplicity of related descriptions in various information systems.\n-   The generalized standard from software to systems engineering **OMG\n    Essence** **1.2:2018 --- Kernel and Language for Software\n    Engineering Methods** defines a language for describing the method of creating and developing a system in terms of work methods/practices. This standard also introduces checklists/control questions. We use not so much its Kernel (set of basic alphas) but its Language (the very concept of alphas as an important object, for which the state is tracked in the project of creating and developing the system).\n-   The **IEC** **81346-1:2022** **Industrial** **systems,**\n    **installations** **and** **equipment** **and** **industrial**\n    **products --- Structuring principles and reference\n    designations --- Part 1: Basic rules** is used for the minimal necessary description of the structure of complex engineering\n    objects, setting the principles for the designation of systems and their parts. This is the foundation for configuration management during the life cycle.\n    Furthermore, this standard distinguishes three types of descriptions:\n    functional, product-related, and location, although it does not touch upon the need for cost description, already mandatory for today's systems thinking.\n-   The **ISO 15926-2:2003** **Industrial automation systems and\n    integration --- Integration of life-cycle data for process\n    plants including oil and gas production facilities --- Part 2:\n    Data model** serves for modeling data of deployed (complete)\n    descriptions of engineering objects. Supports the integration of data from various information systems of the life cycle of engineering\n    objects. It is important to us for introducing the concepts of 4D extensionalism, which economizes thinking by transforming a large number of relationships into part-whole relationships if these objects are represented not as objects in space (3D) but as objects in space-time (4D).\n-   The public document **NIST** **PWG** **Cyber-Physical** **Systems**\n    **(CPS)** **Framework** **Release** **1.0** **(2016)** clarifies\n    the ways of describing cyber-physical systems, introduces the classification\n    of aspects for important characteristics of systems/objects of interest\n    of project roles.\n-   The public document **Guide** **to** **the** **Systems**\n    **Engineering** **Body** **of** **Knowledge** **(SEBoK):2023** gives\n    us the definition of a successful system and many other definitions\n    of the systems approach.\n\nLet us repeat: most of these standards and public documents do not yet\ntake into account the changes of the last five years in methods of modern systems\nengineering and other methods of the knowledge stack, so our course does not fully\nfollow these standards (previous versions of the course, corresponding to\nthe previous generation of systems thinking, corresponded more), but\ndoes maintain continuity. Thus, in standards, there is generally a reference to\nthe life cycle of the system as a one-time passage through work methods\n/\"work processes\" of the life cycle. In modern systems\nthinking, the concept of **\"continuous everything\"**: methods of creating and\ndeveloping a system, considering the constant development of the system as the constant creation of new versions of the system, not a one-time creation\nof the system, carrying it \"from birth to death,\" as in biology. Our course reflects this transition to the methods of \"continuous everything\" in engineering.\n\nWe guaranteed the universality of our version of systems thinking by actually using it in various projects ---\nengineering, management, the start of new activities, pedagogical, cultural, artificial intelligence, research, etc. (we are talking not only about projects carried out by systems engineers worldwide but also about projects by the course authors, and projects of numerous graduates of previous versions of the course). The course with its modern version of systems thinking is not a result purely of academic work with texts,\nit is the result of numerous trials of the proposed version\nof systems thinking in real projects.",
    "6bb15bc26db381ae197fa28dcd2da876": "---\ntitle: Variants of the Systems Approach\n---\n\n**Systems thinking** is thinking with the use of the core concepts and mental techniques of the **systems approach**. There are many different variants of the systems approach, significantly differing from each other in terms of elaboration, terminology used, and details, but coinciding in their fundamentals. The main feature of all variants of the systems approach is the multi-level consideration of the system as a part of a supersystem **first**, and then considering subsystems as parts of the system. This mental process (first to the supersystem, \"upwards\" through systems levels, then to the subsystem, \"downwards\" through systems levels) is performed up and down multiple levels.\n\nThe focus is exclusively on identifying systems, supersystems, and subsystems with direct attention on the operating/functioning system. No physical dismantling of the system into individual parts is performed. During the physical assembly/disassembly when creating the system (not during use/work/operation), such \"constructional\" consideration of the structural/material parts of the system also exists, but it is not the main focus in systems thinking. The main aspect is during use/work/operation, and these functional parts of the system (functional objects, roles) are highlighted by attention. To retain attention, recording is used—systems thinking foresees systems modeling; it does not happen purely \"in the mind.\" If you do not write, you do not think! This \"highlighting by attention\" and recordings to prevent loss of attention during mental distractions were discussed in more detail in the \"Rational Work\" course.\n\nThe systems approach first appeared in physics. The concept of a system in the modern systems approach is more developed than the concept of a system in physics. A system in physics is just part of the world/universe under consideration. In this respect, there is a specific part of the whole world as a system, the boundary of the system, and the entire surrounding world outside the system's boundary as an environment. Systems in physics (e.g., the concept of a thermodynamic system) were not long considered a full-fledged systems approach, because multi-levelness of systems was rarely discussed in physics: discussing systems consisting of certain parts within an environment was sufficient. Nevertheless, the concept of a system in physics is still actively used^[<https://en.wikipedia.org/wiki/Physical_system>].\n\nThe systems approach as the basis of systems thinking, specifically under the name systems thinking, first appeared in biological material. Biologists tried to describe a flood meadow as a whole with its hundreds of species of plants and animals and year-round changes. Living organisms cannot be disassembled into parts, making the meadow an exceptionally complex object for description and understanding. Therefore, **systems thinking emerged as managing the movement of the researcher's attention across different levels of division of the whole system into parts (or vice versa, assembling the whole system from individually highlighted parts by attention).**\n\nThe foundations of the systems approach underwent significant development since its proposal in 1937 by biologist Ludwig von Bertalanffy^[<https://en.wikipedia.org/wiki/Ludwig_von_Bertalanffy>] **General Systems Theory**. Generally, an **approach** is when concepts, methods of thinking, action techniques, and supportive tools developed within one method in one subject area are then applied to other subject areas. The General Systems Theory was mainly developed from the system concept from physics applied to biological material (something like \"physics theory for biologists\"), and then proposed for application to many other subject areas (\"general systems theory,\" already detached from the biological field).\n\nToday, proposing some significant types of objects and relations in a subject area is often called a framework, which also translates as \"approach\". This \"approach\"/framework represents some kind of ontic (a private ontology, not reconciled with other ontics in other subject areas; after all, ontology implies some general understanding of objects and relationships existing in the world), defined not in formal mathematical language, but as not too formal textual descriptions. We will further note that the higher the level of abstraction of such \"approaches,\" the less they will resemble \"mathematical formalisms,\" and the more they will be expressed in texts in natural language, defining concepts and relationships through examples of their use in texts, not through mathematical formal definitions, as in mathematics. Intellectual agents today are not logical computers but living people and AI agents working not in local/symbolic (like mathematicians, \"with formulas\"), but in distributed (like in the brain or computer neural network) representations, non-symbolic (you may think of \"holography\" as an example of non-local representations, though there are many different variants of these non-local representations^[<https://ailev.livejournal.com/1281819.html>]). At such a low level of formality, the set of objects and relationships of the systems approach/approach/framework is also described, even though initial works on the systems approach tried to inherit a more formal description language from physics, which introduced the system concept.\n\nThe ontology of our variant of systems thinking is provided (with literature sources from where these concepts are taken) in a concise form in the last section of our course, and it is also done as text in natural language referring to literature sources, which are also texts in natural language. But it is important to emphasize: **the systems approach implies texts presented not within the framework of prototype theory of concepts (many metaphors, arbitrary typification), but within the framework of theoretical theory of concepts (strict typification of objects and relationships).** If you did not understand the highlighted fragment of the previous text, you absolutely need to retake the prerequisite course \"Rational Work.\"\n\nSince the emergence of General Systems Theory in the 1930s, entire disciplines/theories have arisen and died based on the systems approach. For example, **cybernetics** was born in 1948 and then forgotten in the seventies. Hence, it is still possible to encounter old versions of the systems approach intertwined with cybernetics, bearing all its shortcomings, primarily the attempt to reduce all understanding of the world to the operation of homeostasis-maintaining systems with feedback loops.\n\nCybernetics was actively used in state planning and proved inadequate: the economy itself is nonequilibrial; there is no \"balance of supply and demand\" returning to equilibrium because the economy evolves and changes rather than balances around some \"equilibrium.\" Remnants of cybernetics now exist only as automatic control theory, where one indeed needs to manage some constant parameter in a technical system, monitoring \"deviations.\" But in most situations, it is not about \"deviations\" from an equilibrium point but about moving toward goals and relying on non-equilibrium states. Modern descriptions of the interaction of systems and the surrounding world (e.g., active/embodied inference theory) do not imply highlighting a \"control system\" in a simple \"feedback loop,\" and they are based on other assumptions about the principles of system-environment interaction than cybernetics.\n\nThe most widespread version of the cybernetic systems approach is reflected in the \"system dynamics\" modeling method (system dynamics^[<https://en.wikipedia.org/wiki/System_dynamics>]) and boils down to finding and explicitly reflecting in the model certain relationships that can form cycles, leading to oscillations around some equilibrium position. Such \"cybernetic modeling\" is over-simplified and poorly represents various kinds of systems, which are very different from the cybernetic \"Watt governor.\"\n\nDevelopment, evolution are well described by systems representations but poorly described by \"control\" representations, that is, by cybernetics representations. In general, modeling different types of connections (electrical, chemical, economic, etc.) on the same systems level (and even on different systems levels) is performed by arbitrary systems of differential equations. Sometimes this arbitrary systems of differential equations description in engineering are called \"systems modeling,\" but it is much broader than the narrow class of \"system dynamics\" equations. However, this is already not quite a systems approach; it is simply simulation modeling of systems in \"hardware\" engineering (and sometimes organizational systems). Thus, if you see \"systems modeler,\" it does not necessarily mean the systems approach and systems thinking—most often, it is about \"systems modeling\" as a variant of a-causal simulation modeling of cyber-physical systems, mostly in Modelica language. As with system dynamics, there is a lot of diverse software for this purpose^[<https://modelica.org/tools/>]. So, a System Modeler from Wolfram^[<https://www.wolfram.com/system-modeler/>] is not necessarily a modeler supporting the systems approach and systems thinking. It is just a tool for physical modeling of cyber-physical systems (\"hardware\" systems with controlling computers, the \"cyber\" part).\n\nThe systems approach has already gained wide acceptance in engineering and management. In engineering in the 1950s-60s, the \"mathematical\" understanding of the systems approach prevailed, which boiled down simply to the active use of mathematical modeling in solving engineering problems (\"systems modeling\" as simulation modeling—the echoes of those times). \"Systematicity\" consisted of compiling models from the most various theories/disciplines, both natural sciences and engineering (electricity, mechanics, chemistry for chemical reactions, calculations of pressure changes, heat and mass transfer, etc.) for different levels of the system's structure (the system as a whole and its subsystems of various levels).\n\nDescriptions of specific \"systems\" were carried out using numerous models reflecting different properties of interest to engineers and scientists in various situations.\n\nMost often, this significantly math-bound simulation modeling (\"system modeling\") was contrasted with the so-called **reductionism** (reducing to the simple).\n\nFor reductionism, declared main in science (this is \"reducing to the simple,\" dividing into ever-smaller parts—scientificness was sought here, \"how to explain the complex by the work of the simple\"), it was typical to highlight one primary point of view, one theory/discipline, and modeling method for some level of the structure of the object or subject of study. For example, a person was considered at the molecular level (i.e., the biochemical level), and all knowledge about human nature was derived from this: his thinking and social behavior were explained as a complex combination of biochemical processes.\n\nThe systems approach overcame the obvious absurdity of single-level simplification of reductionism, and therefore it became very popular. **To think systemically** is above all to keep in mind the level of the system's fragmentation into parts at which it is appropriate to discuss the emerging properties on that level, which were not yet on the previous levels of system fragmentation and are no longer on levels above the system, on the supersystem level. **These properties are necessary for ease of action in the physical world.**\n\nThe systems approach does not imply a simple physical or mathematical-logical understanding of the \"part-whole\" relationship. For example, \"the house consists of bricks\"—this is a true statement in physics and mathematics but false in the systems approach. In the systems approach, it will be noted that another level in the system's fragmentation into parts (\"consists of\"—this refers to the composition/part-whole relationship) is missed: walls! If you are planning to build a house, indicating the position of each brick to compactly describe the house is very wrong. It is much simpler to describe how walls are made of bricks and then describe how the house is made of walls. Systems are introduced when their introduction allows describing something more compactly, conveniently, and simply for action in the physical world.\n\nThe taste of borscht during its cooking must be discussed as dependent on the method of preparation from pieces of vegetables and meat; discussing the ongoing biochemical processes at the cellular level during cooking is inadequate. These processes are definitely happening during cooking, but they are the wrong level of structure to discuss the taste of borscht! The understanding of how meat protein folds during the cooking of borscht, of course, directly relates to the change in the taste of raw meat to cooked, but it is unlikely to help the cook! Attention must highlight whole vegetables and their pieces, cooking techniques, and the dependence of taste on these techniques, discussed at this level of coarseness: whole vegetables and pieces of meat, cut into small pieces, as accepted in different cuisines (slightly larger in southern cooking, slightly smaller in northern). And you can’t discuss the taste of borscht if you discuss a six-course dinner where borscht will be just one of the courses: the dinner as a whole does not \"have the taste of borscht,\" although borscht is a part of it. The main point is the highlighting with attention real situations of cooking borscht and dining situations for the needed goals (making dinner with tasty borscht).\n\nAbout the reductionism \"borscht from folded proteins\" will be all the same arguments as about a \"house of bricks\".\n\nThe situation with the house or borscht seems simple, but let's take the project of creating an airliner, which plans for 6 million individual parts. How will you and a huge team of a couple of hundred thousand people engaged in its manufacturing at factories in different countries consider this airliner to not miss anything important? At the material level from which this airliner consists? This will be correct if calculating the strength of the airliner. But if calculating the lift of its wings, the material level will not help. A complex system of millions of individual parts must be described at many levels of its assembly into the whole, describing for different purposes in various ways, and not losing any! **Systems thinking helps not lose the attention of thousands of people, not forget anything important** **when dividing into parts or assembling the whole from parts, not be distracted to irrelevant matters.**\n\nManaging the attention to 6 million individual parts in the airliner to not forget any part and considering aerodynamics, passenger capacity, overall project cost, lightning strike safety, assembly plant size—doing all this became not an intellectual feat but a routine mental task after the appearance of systems thinking in engineering. And names of genius aircraft designers like Messerschmitt and Tupolev remained in the past; for modern, more complex airplanes, it is no longer necessary to have geniuses on the team! Systems thinking, supported by computers (even without AI), copes well. It is no longer necessary to have an absolute genius like Korolev to conduct such complex space launches as SpaceX is doing now.\n\nThrough this fight against reductionism, they reached the point in the seventies when systems thinking began to be declared **holistic,** which means it speaks about the primacy of the whole over the parts. In holism, the behavior of the parts is explained by the existence of the whole. But **holism** turned out to be as much a mistake as reductionism: **systems thinking** **fights both the complete rejection of considering the dependencies of the whole’s behavior as the behavior of its parts (reductionism) and the complete rejection of considering the dependencies of the parts' behavior due to what is happening to the whole (holism).**\n\nThe word \"system\" in the late seventies became respectable, and it began to be used even by those entirely unfamiliar with the systems approach in any of its versions, who did not understand the essence of the systems approach, its method of managing attention when considering complex situations. In fact, the word \"system\" suddenly became synonymous with the word \"object\"—something that fell into our sphere of attention. The connection with attention remained, but the specificity of dealing with a specific level of coarseness of cutting into objects, the multitude of levels and ways of cutting, was completely lost. Users of the word \"system\" did not have any systems thinking, which afterwards would work with \"object-systems.\"\n\nThis \"pop\" understanding of the word \"system\" was inherited by modern AI systems (Bard, Claude, ChatGPT, etc.). Unfortunately, you cannot maintain a conversation with them about modern systems thinking: in everyday understanding, the word \"system\" is not a type of object as in the systems approach, but \"almost a synonym\" for an object. Instead of a theoretical theory of concepts and its strict/formal typification (slow thinking S2 by Kahneman^[<https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow>]), artificial intelligence systems use a prototype theory of concepts with its loose analogies as the basis of thought (fast thinking S1 by Kahneman) from everyday speech. Therefore, be cautious in discussing systems thinking with AI systems (and with laypeople); the word \"system\" is known to everyone—but for all of them, it is not a type of object from the systems approach, and not everyone can track the strict use of the type!\n\nIn the eighties, numerous textbooks on the systems approach appeared in management, with no mathematics. The emphasis was on the fact that in a system \"everything is connected to everything,\" while essential connections could be lost in traditional mono-disciplinary considerations (again fighting reductionism!). Therefore, it was necessary to involve various people to reveal these critical connections through their communication.\n\nThe managerial presentation of the systems approach was valuable in drawing attention to the need to consider the creating systems (usually consisting of people organized into enterprises) when discussing some target systems. Later, considering these people became mandatory, and it was no longer about individuals but their roles in the project called stakeholders. Sometimes stakeholders meant role players, and sometimes the roles themselves—a stakeholder in \"engineer Vasya\" was considered Vasya by some and engineer by others. In our course, we avoid saying \"stakeholder\" and call the engineer a role, and Vasya the agent playing roles, including the role of engineer. In any case, discussing the target system without the creating systems became incorrect; thus, in the eighties, a second generation of the systems approach appeared. Although role players and the roles themselves are still confused, with the term stakeholder used very differently, be careful here.\n\nIn managerial books on the system approach, on each recommendation \"consider system integrity,\" \"think holistically,\" \"view problems from different perspectives,\" there should have been another ten on precisely how to do it. For each “think holistically” reminder, not forgetting about the parts of the system, holism is as useful and harmful as reductionism. Managerial systems thinking (this is a vast number of books! If you start googling, you will most likely find managerial books) did not emphasize the multi-level fragmentation of the system into parts; various ways of fragmentation (e.g., functional parts—convenient for discussing the system's functioning/operation, structural parts—for discussing what the system is made of) were not considered.\n\nFor example, take scissors: functionally, there are the blade block and handle (usage time, explaining “how they work”), and structurally—two ends, two loops, and a pin in the middle (manufacturing time, “how and what to make”). Both descriptions (further, we will learn that more such descriptions are needed) are required to design, manufacture, and then operate the scissors. Now find such distinctions of different fragmentations in the “pop” books on systems thinking in management. No, there wouldn't be any (in our course—it will be!), just saying that “the system should be described in various ways.” This is understood even without textbooks that it should be various ways. But which ways exactly?\n\nThe answer to this question was absent in managerial books; it was simply postulated that “it is necessary to think about parts and the whole; this is extremely useful,” and that's it. In engineering books on systems thinking (more precisely, books on the use of systems thinking in engineering—books on systems engineering), the answer to this question (“how many minimally necessary ways to fragment the system into parts?”) was given; over time, the number of these ways increased—",
    "e53990369b602a54c71a19f1b2a8bf24": "---\ntitle: Basic Concepts of the Systems Approach\n---\n\nHere are the main concepts/terms of the version of the systems approach and some other transdisciplinary thinking methods of the intelligence stack described in our course. These concepts will be described in detail in the following sections of the course:\n\nConnection to the physical world (these terms are primarily taken from semantics, concept theory, ontology):\n\n-   physical object occupying a place in space-time\n-   embodiment (physical objects) versus their descriptions and documents\n-   changes (processes, projects, cases) as physical objects\n-   events as physical objects\n-   role/functional object (role) and constructive/material object (construct) as its affordance/usability, their physicality\n-   software as a physical object (source code as a description of software)\n-   enterprise/organizational unit as a physical object\n-   parts in time\n-   methodological time versus system lifetime\n-   when two objects coincide in space-time, it's one object (extensionalism)\n-   relationship of composition (composition, \"whole-part\", partition) of physical objects\n\nMethodological/functional/activity-related subjectivity of system description (these terms are mainly taken from methodology as the study of methods of agents' work, including actors playing \"roles in the method of work\"\nfunctional/professional/activity-related/work/organizational/practical/cultural/stylistic roles, with vast synonymy here):\n\n-   method/way of working, metaphor of role-playing\n-   functional/work/project/activity/cultural/org role (stakeholder role): external, internal/team\n-   role-related: \"subject of interest\"/\"important characteristic\", interest/preference\n-   agent, their intention and acting out the work method role as an actor\n-   successful system\n\nSystem division:\n\n-   systems of systems approach versus systematics (\"Linnaean system\") and norms/rules (\"Stanislavski system\")\n-   system, system level, system division\n-   emergence/system effect\n-   types of systems: target, ours, subsystem, supersystem, environment (systems in the environment), creators (creation systems)\n-   system name (role-based, by function)\n-   black and transparent boxes\n-   concept of use, system concept\n-   engineering justifications\n\nSystem description and documentation:\n\n-   definition of the system\n-   description of the system (documentation)\n-   role-specific/private description (view)\n-   role-based method of description (viewpoint)\n-   model, meta-model, meta-meta-model, multi-model, mega-model\n-   projection and synthetic approaches to system description\n\nFunctional and constructive parts of the system, placements, and resources:\n\n-   divisions: functional, constructive/material/modular/product/affordance, placements/spatial, cost (candidate: works)\n-   conflicts between system levels and inconsistencies\n-   functional part (role), its ports, flows/connections\n-   constructive/material part (construct), its interface, platform\n-   spatial part (placement)\n-   resource part (total cost of ownership)\n-   architecture\n-   functional analysis and constructive/modular synthesis (invention)\n\nThis set of systems approach concepts, developed over many years within various fundamental thinking methods, is surprisingly compact: the complex world of diverse situations is represented by a relatively small number of concepts, and this set is chosen to make the world simpler to think about, better understand causality and sources of problems.\n\nThe course in the following sections will describe these concepts and their relations as objects and relations of the subject areas of methodology and systems thinking. The last section of the course provides a compact (without justifications and detailed explanations) description of these concepts within the third-generation systems approach with references to literature (there is also a published English translation of this description^[<https://arxiv.org/abs/2310.11524>]).\nIt is these concepts that applied engineering (including levels of organization, community, society levels) discussions rely on when they refer to the systems approach and consider project methods to create successful systems.",
    "c48c439837d59acf7c4f556f95505c62": "---\ntitle: How Terms Were Chosen for Our Course\n---\n\nScience has traditionally generated new terms (designations for emerging new concepts) in two ways:\n\n-   A common (\"colloquial\") word was taken and loaded with a special (\"scientific\") meaning. \"Work\" in physics is by no means \"work\" in the everyday sense. Moreover, \"work\" in the text of our course is also not a colloquial word. Thus, \"work\" and \"method/practice/activity/labor\" cannot be confused, they are not synonyms. Moreover, there will be no quotation marks — you might not notice that this is a term! Confusing work and labor in our course is not allowed — it will look something like this, without quotation marks and specifying types. Both work and labor mean behavior. But they are different classes of one class \"behavior.\" \"Work\" and \"labor\" here are terms with strict/formal typing, and they are of different types! The \"colloquial word\" as a \"term with special meaning in some method\" is the most common way, but it easily leads to confusion with words from colloquial speech, because these are \"false friends of a translator\" when translating from scientific language to colloquial and vice versa.\n-   To make speech more precise, a term was made from a word that had no known meanings in everyday speech. For this, an unusual word for the native ear was taken from a foreign language (most often with a Greek or Latin root) and loaded with a special meaning. Today in Russian language, the captured word can be an English word, not Latin or Greek — it does not have a colloquial meaning in Russian. But this also comes with problems. If you say the Greek word \"epistemology,\" it needs to be explained, and you will have to explain it for a long time, setting the \"use of the word in the context of the language game in some activity.\" But \"the study of how to do research\" — it seems immediately clear what it is about, but it is not a fact that \"epistemology\" will be understood under these words, it may equally be \"gnoseology,\" and in it, you will suddenly encounter not only scientific research aiming for knowledge of the world, but also artistic and theological \"research.\" In epistemology, artistic and religious knowledge of the world is usually absent, but in gnoseology, they are usually present. Therefore, very rare words are used to avoid confusion in close but still different meanings of words.\n\nIn our course, terms were chosen (including when translating foreign texts — standards, methodologies, textbooks) to maximize the clarity of their use in activities. When choosing terms, it was taken into account: who will understand this word, from which professional community is he, in which dialect does he prefer to speak? This is a different principle than \"taking terms from a standard close to the authors and ignoring all other options.\"\n\nFor example, we can easily use jargon words in the course. For instance, \"IT specialist\" instead of \"programmer\" — because we care not only about the beauty of speech and familiar terms but also about the most accurate indication of the meanings of terms in the real world. After all, \"programmer\" is a narrower term than \"IT specialist.\" Database administrator, data modeler, and data engineer, systems administrator, IT architect, electronics specialist — they are not programmers, but IT specialists. The word \"IT specialist\" could be replaced with \"computer specialist\" — for someone, it would be even clearer, but someone would start to object. Considering all this, we could write programmer/IT specialist/computer specialist — so no one would be offended, and it would be clearer what meaning of all these terms we mean.\n\nIt also happens that a certain term, the meaning of which is very easy to misunderstand, has already become established in the language of a narrow professional group. For example, such is the translation \"management\" for the term governance. In such cases, our courses will use our own option, which leads to fewer misunderstandings. For example, governance (in the course \"Systems Management\") will be translated as \"accountability\" or \"supervision\" (or even \"control\" and \"oversight,\" or even \"supervision\"), and no dictionaries and standards matter here. A similar situation with frustration. This is not \"psychological frustration,\" but geometric disorder/instability. Therefore, no \"frustrations\" in the translation here will be present, they will only confuse.\n\nIf some \"process standard\" (for example, the systems engineering ISO 15288:2023) by the word process means a concept, referred to in various other places as method/method/practice (characteristic of processes unfolding in time in this \"process\" from ISO 15288 is not there, it lists \"methods/practices/life cycle processes\", this standard did not reflect the \"continuous everything\" method), then in our course this will be \"work method,\" not \"process.\" If you find yourself in a community of people who practice the \"process approach\" and speak the dialect used in this community, feel free to use the word \"process\" or \"work process,\" or \"organizational process\" (but it would be better not to \"business process\", the cleaner's coming out to wash the floors is clearly not a \"business process\", and in state organizations \"business\" is also not encouraged) instead of the word \"method\" — but know that in doing so you lose the information on the distinction between processes (with step-by-step unfolding over time) and work methods (without such unfolding), and your speech will cause perplexity from time to time: then do not be lazy to clarify the meaning of the term you used. If we distinguish between work and method/practice (and we will distinguish!), then labor — is it work or method? We choose that labor — is a function/practice/culture/style/method of work (this is what the term \"division of labor\" points to), not work. Therefore, in the course, we will try not to consider labor and work as synonyms. But you can easily find a community where they will not be distinguished, and you will need to take this into account in your conversations in this community.\n\nUsually, the same term in even one speaking community has many different meanings, so clarifying the meaning of even a very common term is never superfluous. For example, Andries van Renssen identified^[p. 79 in <https://repository.tudelft.nl/islandora/object/uuid:de26132b-6f03-41b9-b882-c74b7e34a07d/datastream/OBJ/download> (Gellish: A generic extensible ontological language - design and application of a universal data structure)] the following commonly used by the IT community meanings for the term \"**function**\":\n\n-   a subtype of activity (behavior), process, or event;\n-   some object, in a specific role or made for a specific role;\n-   the role of the object itself (usually this is the role of a constructive/material object, a thing) participating in activity (behavior). Played role (functional object) and constructive/material object playing the role are different! Role — Hamlet, the object playing this role — Vysotsky;\n-   indication of correlation/dependence, usually as a physical connection between some aspects: \"if height increases, then the pressure falls\";\n-   mathematical relation between numerical objects, defining their mapping to each other.\n\nThis means that often instead of the word \"function,\" you can use the word \"action,\" or \"role,\" or even \"dependence\" — and the conversation will become more precise.\n\nThe often encountered term \"**meta**\" is used in six different meanings, expressing six different types of relationships^[<https://ailev.livejournal.com/1053878.html>]:\n\n-   instantiation (relationship type and instance);\n-   grouping (relationship type and subtype), also categorization (philosophical, not from category theory, the term “category” is loved by very different speaking communities and denotes different things in them!);\n-   description (relationship description and described object);\n-   application/stereotype (relationship pattern and its implementation);\n-   variation (relationship main model and customized);\n-   realization (relationship abstract syntax and corresponding expression. This is in computer science, because the cited work belongs to computer science. But we remember that we will also have another meaning of the term \"realization\" — this is the relationship of fulfilling the role of a functional object by some constructive object).\n\nTherefore, every time you encounter the word \"meta,\" you need to figure out which of these six meanings was meant.\n\n**Never get attached to the specific word-terms chosen by others!** **Words-terms are extremely important because besides them we have nothing else for communication. But** **words** **as sequences of letters** **in written text or sequences of phonemes** **in speech** **are never** **unequivocal, they are merely “labels” on concepts. Each time try to understand what is actually being talked about, what meaning of the word was meant in each specific case, reach for the concept/meaning of the term.** **Words-terms are not that important, they are only needed to get to the meaning or understand what subject area we are talking about at all!**\n\nUsing terms from standards does not guarantee unambiguous understanding by the interlocutor, but using ambiguous words does not necessarily lead to difficulties. This course will not attempt to define precise definitions, nor will it attempt to choose the correct terms for the concepts of the course. We will try to convey the understanding of the most important concepts and suggest different words that can denote them. For the question \"what's two times two?\" answers such as IV, 4, \"four,\" and four will be accepted. But don't delude yourself: answers like \"pot\", 5, \"per aspera ad astra\" — will not be accepted.",
    "9fa66c4e409d604199513b7a70488b9e": "---\ntitle: 'Definitions: Coffin for a Dead Thought'\n---\n\nWill \"dictionary definitions\" help us understand the meaning/concept behind the word? Including a glossary in the course? No, dictionary definitions won't help! You can't say anything about an object except how it relates to other objects. Most definitions are built \"according to Aristotle\" as genus-differentia definitions---they define what **genus** the object belongs to and then its distinctive features or **species** within that genus (a relationship of specialization). \"An orange is a type of citrus from the Rutaceae family, and also the fruit of this tree.\" In life, such definitions are of little help because different people highlight different distinguishing features useful for various uses of the concept. Their relationships are not genus-differentia but part-whole, implementations, classifications, etc. We always end up with situations involving definitions similar to those described in the joke: \"Cheburashka, how do I explain what a helicopter is to you? Do you know an orange? Well, a helicopter is nothing like it!\"\n\n**The meaning of a word is defined** **not by its definition, but** **by its usage** **in the context of a language game**^[<https://en.wikipedia.org/wiki/Language_game_(philosophy)>]**. A person's neural network learns the meanings of words in the context of their usage, through examples from** **methods/practices/cultures. The only way to grasp the meaning of a concept is** **to gather multiple examples of its use** **in some practical/activity/cultural/method of work context** **of speaking. Each new example of use will refine the scope of this concept's meaning** **in this context. A definition won't help, but will only confuse: definitions are often used just as a pretext to present several counterexamples, which usually point to different contexts** **of the discussed method/practice.**\n\nSystems thinking isn't reducible to mathematics, although physicists have recently given mathematical grounding to many observed general system behavior patterns in various subject areas---after all, systems primarily refer to physical systems. Providing a strict physical, and within that, mathematical definition of its concepts is impossible.\n\nIn natural and even formal languages, there will always be uncertainty in concepts, uncertainty in type assignment. Although this uncertainty can be mitigated by various methods indefinitely, it will remain. Different properties will stand out for different roles of the same system, and different systems will be called by the same words, as each role has its own method/culture/style of work, which sets its typical situations, and thus words in definitions will be used differently.\n\nWe will not give reasons to get confused by \"definitions\" and then deal with their contradictions, insufficiency, inaccuracy, inevitable ambiguity, and distortion in translation from one natural language to another due to the lack of certain concepts and corresponding terms in the other language.\n\n**In systems thinking** **\"glossary definitions\"** **are often a medicine that turns into a disease.** **In situations of terminological disagreements, use** **not definitions, but** **techniques developed in modern philosophical logic:**\n\n-   If you (or your interlocutor) don't want to change something in the physical world (and thereby explain, i.e., understand the causes and effects), but simply \"find the truth\" out of curiosity, the argument should end: arguments about \"truth\" and \"terms\" are theoretically fruitless. If it's unclear how you will use terms for some action that changes the world (and not just the description of the world---after all, what difference does it make how the world is described if the world itself doesn't change, \"paper will bear anything\"!), then you don't need to agree, there's no reason to. **If the physical world won't change from the argument's outcome, you can stop arguing, part ways, and not waste time.** **But if the world will change from the argument's outcome (both agreed on joint actions), keep arguing and negotiating the next steps, actions, finding explanations (i.e., discussing causes and effects).**\n-   **When describing the unclear, don't go to more general concepts (the path of \"dictionary definition\"** **by Aristotle), but** **\"ground\"** **: describe the physical world. Going into more general concepts and describing the unclear as specializations (Aristotelian definitions** **\"X is Y with such features\") is a dead end.** To agree, it is necessary to concretize, not to abstract---to reduce to the physical known to the disputants, not to the general known to the disputants. For the particular, an opposing poorly definable general is implied, or it's about a \"functional role\" inexplicably realized in the physical world. Discussing behaviors is always harder than discussing static physical objects, things behaving a certain way. Therefore, for each role-based object, we substitute some understandable constructive/material object (thing) as an example playing the functional object's role---and discuss its behavior, which will become clear immediately.\n-   **During terminology discussions** **taboo the term**^[[https://lesswrong.ru/wiki/Tabooing](https://lesswrong.ru/wiki/Tabooing)] **(its use doesn't lead to understanding, only slowing the discussion), provide expanded formulations instead.** If you need to continue the conversation and the interlocutor clearly doesn't understand the term, continue the discussion without that term! In discussions not about terms but about the matter, terms are needed simply to make the discussion more compact, but arguments about terms eliminate all the advantages of using the term, making it simpler without it. If the argument turns into an argument about terms (about \"truth\" and \"correct naming\" instead of \"what do we do\"), that's a red flag of a fruitless argument. Stop arguing and leave the conversation immediately.\n\nWhen explaining unfamiliar concepts through other unfamiliar concepts, the understanding of **\"conceptual distances\"**^[[https://lesswrong.ru/w/Expecting_Short_Conceptual_Distances](https://lesswrong.ru/w/Expecting_Short_Conceptual_Distances)] helps. These distances are usually not short: try explaining to a third-grader how to build the current-voltage characteristic for a thyristor. Explain volts, amperes, characteristics, and what a thyristor is. This is pure fiction, populism about \"a real pro can explain everything clearly to a child.\" You don't believe in fairy tales, do you? To explain something complex to a child, you have to teach that child for many years until they become educated. By that time, the child will become an adult.\n\nWith a third-grader and explanations of complex concepts for them, everyone understands everything, but two pros often try to \"define\" their \"thyristors\" and other sepulki in three phrases---the age difference is small, and it seems that explanations can be given by providing \"definitions understandable by a child.\" But no. No matter how many definitions you give, they won't be of any use. Beware, beware of definitions---this is the medicine that more often turns into a disease than cures. **Georgy Petrovich Shchedrovitsky** **often repeated:** **\"Definition is a coffin for a dead thought.\"** And he was by no means alone in this, though he spoke of the shortcomings of definitions more often, colorfully, and vividly than many other experts on the methods of thinking within the intelligence stack.\n\nIn our course, there is no reliance on definitions, no glossary (what's the use of it?!). The last section of the course provides a concise exposition of the first generation systems approach ontology, but it is deliberately titled \"Instead of a Glossary: First Generation Systems Approach Ontology\" and is a coherent narrative with references to literary sources instead of a set of definitions.\n\n**Bold text** in our document highlights terms where the concept designated by the term is intensively discussed for the first time in the text. Naturally, the course text contains phrases that look like definitions, but they should not be taken as strict definitions. Later on, the course text will present other phrases for these same terms and the concepts they designate that also look like definitions. And then again and again: the text trains your brain's neural network, forming meanings for unfamiliar words, playing the language game.\n\nWith each use of a word, the place of the concept hiding behind the term and its synonyms becomes clearer and clearer in the space of meanings. Moreover, terminology often has synonyms as terms from other contexts with different nuances of meaning and other associations. But the uses of terms are not definitions, no. The result of such conceptual work in training the neural network of the living brain through detailed texts using words in an activity/cultural/practical/working context of performing tasks by a method (all by Wittgenstein: the meaning of words is defined by their usage! not definitions!) is achieved in the course of learning, and it is usually good. But from definitions in learning, in disputes, and communication in general (unless it's about mathematics!), the result is only disputes and requests to clarify/change the definition.\n\nSystems thinking is about life, it's not mathematics, where points have no size, parallel lines never meet even at infinity, and they're infinitely long too. In life, things are different, significantly determined by neural networks and neural network representations; thus, attempts to immediately move to strict formalizations are doomed to failure. Systems thinking is not mathematical (to the extent that it is not mathematics describing the space of meanings, for example, the mathematics of neural network representations in large language models), it is about a not too formally structured and not too formally describable life!\n\nThe meanings of terms (and any other words, even if not called solemnly \"terms\") are defined probabilistically, not precisely, through their use in various \"real-life\" situations. That is, language is defined not by the need to describe something but by the need to describe something to do something. In any work, its objects are important, with which actions of the method/practice/activity/culture/style/engineering/labor are performed---this sets the context for the language game, in which the meanings of words are determined.\n\nIn our course, we believe that your guesses about the meanings of terms from the course (and then your guesses about the meanings of terms you will encounter in work projects) will be built through studying detailed texts describing various practical/activity/cultural situations (work situations by some method), studying different relationships of the concepts designated by these words with other concepts designated by other words used nearby. When defining the meanings of words-terms, we do not read definitions but primarily deal with texts and speeches as sets of detailed statements containing the term of interest (even if we are talking about a photograph or diagram, it will still end with you describing them in words and relying on terms in these descriptions---you won't discuss them by grunting!).\n\nSo, first, always **deal with words-terms (pay attention to them, and not to a single word but to usage in context! Words are important!)** that we encounter, i.e., define their meaning, extract from these words the nameless concept that has various names in different professional languages of various communities adhering to different work methods/actions, worshiping different dictionaries (including unwritten ones, \"jargon\") and other terminological standards---and **then work with the concept (ignoring the words-terms!** **From this point on, the initial terms can be replaced!** **Words are not important!)**.\n\nLife is complex, and we simplify it by each time considering just a couple of interrelated concepts (and also omitting long discussions on the nuances of concepts accepted in theories/explanations of certain methods). For this, we avoid discussions about long lists of names for these concepts in different dialects of different communities. **We learn about concepts through their terms. Terms are important!** **Without them, we're lost, can't learn anything!** **Grunting is not an option, it's uninformative!** **But** **we** **never nitpick the terms themselves,** **they are unimportant to us, but the concepts they designate are important!**",
    "9019cad66bfdcbb1e64f127923194e98": "---\ntitle: Systems — this is not systematicity\n---\n\nIn systems engineering, which uses systems thinking as\nits primary method of thinking, it is emphasized that it is both\n**systemic** and **systematic**.\n\nIn science and engineering, **systems** is usually understood as following\na systems approach --- **a special**\n**fundamental/transdisciplinary (external in relation to any applied subject**\n**discipline, but deeply penetrating into the**\n**thinking** **of this applied/subject discipline)** **a set of**\n**types/concepts** **and their relationships,** **which directs**\n**the engineer's attention** **to the main things that need to be thought about** **first of all** **for successful world change:** **\"system,\" \"system level,\" \"disorder,\"** **and others.**\n\n**Systematicity** is something completely different, it is simply honest formal\n(not substantive) consistent attention to what needed to be paid attention to. If you “formally” (i.e., without considering\nthe content) do not miss certain objects in your attention and actions that you should have touched upon, then you are systematic. Discipline (in all senses of the word --- both subject-specific and administrative, “following the algorithm for performing actions with objects of the subject area”) of any\nmethod must be respected, systematicity is about this. It is necessary to honestly/systematically complete all difficult mental steps, systematically/without omissions\ncarry out recommended reasoning to ensure confidence in getting\nresults. And if it also concerns actions in the physical world, then\nthey must also be honestly completed.\n\nIf it is required to fill every cell of a 10*10 table, it is necessary\nto focus, gather --- and systematically (i.e., completely without\nomissions, accurately and without typos, in the specified order) fill it out. This is not\nsystems, but it is systematic. It is tedious and time-consuming.\nSystematicity does not imply systems. You can systematically\ncheck off each point of some absolutely nonsystemic\ninstruction, and carry out all its crazy prescriptions, without skipping a single point, bringing it to completion, but there will be no\nsystems in this, that is, there will be no use of the concepts of the systems\napproach.\n\n**Systems** is about the content of thinking, about the concepts\nof systems thinking. It is the content of the checklist, which is determined\nby the systems approach, and which must be checked by your thinking ---**\npay attention to the concepts of the systems approach. Systems lies in finding the target system among all systems, finding the supersystem, finding the creation system and even the whole chain of creation systems. If you do this absolutely\nunmethodically but chaotically --- you are still systemic!\n\n**Systematicity** is about documentation and objects of the surrounding\nworld, i.e., about ensuring that not a single item in some (potentially completely\nnonsystemic) checklist is missed, that all planned tasks are completed,\nand the results of these tasks documented.\n\nSystematicity immediately implies a huge amount of varied (both\nsubstantively necessary and substantively unnecessary, although this\n“substantively unnecessary” may be “administratively necessary” to some\nbureaucrats from a neighboring organizational system) mental work,\nwhich is also to be documented. Systematicity implies persistence in\nsome details with the perseverance of a maniac. Systems increases the likelihood\nthat it's important work (you are working with important objects, attention to\nwhich is directed by the systems approach), not a mix of important and trivial (you work with all sorts of objects, some of which turn out to be\nimportant). Systems and systematicity, nevertheless, live hand in\nhand, they are in\nbalance^[<https://incoseuk.org/Normal_Files/WhatIs/Systems_Engineering>,\n<https://www.researchgate.net/publication/327073164_Envisioning_Systems_Engineering_as_a_Transdisciplinary_Venture>].\n\nThe importance of systematicity applies not only to the method of systems\nthinking. Systematicity is needed for any activity. A person\nengaged in systemic fitness based on\nsomatomechanics^[Chain of texts \"Systemic Fitness\",\n<https://ailev.livejournal.com/1429126.html>, in 2021,\nsystemic fitness as an engineering method was reformulated based on the concepts\nof somatomechanics, as fitness as bodily engineering is fundamentally\nmechanics (understood as physics' mechanics: statics and dynamics) of the\nsoma (the human body, perceived from within by the person themselves, not by an external\nobserver).] can know in their mind how to create a luxurious mobile body. But if they systematically do not\nperform the prescribed method of “five sets of exercises for 30\nseconds each,” as well as systematically determine beforehand which part\nof their body is the most problematic, so that these five sets bring\nirreplaceable benefits, this will not mean that they practice\nsystemic fitness as an engineering method/practice. They may even be systemic (using the concepts of the systems approach and\nsomatomechanics), but not systematic: they would miss important actions in\nthinking, important actions in the physical world. **To achieve results\nin any projects, both systems and\nsystematicity are needed. Simultaneously. Discipline of thinking and discipline of\naction.** **Check what is prescribed by systems thinking ---** **work with the given types of objects\n(systems), check everything prescribed** **by working methods** **without omissions\n(systematicity).**",
    "91ddfe3d41f03f4f31e816c82b97a48f": "---\ntitle: Terms-Words are Important and Not Important\n---\n\nThe paradox \"pay attention to words and don't pay attention to\nwords\"/**\"terms are important and not important\"** arises when, on the one hand, we recognize that our main way of obtaining information about the world is to listen to or read someone's not very formal and strict speech, to study some formal models (but these formal models are also described in words). You don't know the terms---you won't understand what they are talking about. On the other hand, words are not important, terms are nothing---we are interested in the concepts they denote! And one should not be deluded by chains of letters on paper or chains of phonemes in oral speech (that is, be deluded by sign-terms): different people use them to mean different things. For example, the traditional problem in the administration of organizations (finance, HR, and other services with a predominance of accounting and state accounting, explained in more detail in the course \"Systems Management\", in educational organizations these are deanships, detailed in the course \"Personality Engineering\")---is the designation of completely different objects by one term. For example:\n\n-   \"Business trip\" for the manager sending the employee on a \"business trip\" means \"doing the job remotely\". It includes some business travel, as well as completing a task that cannot be done without the trip.\n-   \"Business trip\" for the employee means \"business travel\". Most likely, the task from this trip is just considered work by the employee, but the trip itself (transport, hotels, non-home food, and everything related to it) is the \"business trip\".\n-   \"Business trip\" for accounting means \"the reportable part of the business trip\", that is, only the transport, hotels, and food that will be paid for and need to be somehow confirmed.\n\nIf a \"business trip\" is discussed, the same term will denote three different objects, confusion and disputes are inevitable! It seems that such \"three different objects\" named by one word-term exist for most situations employees and their managers have to interact with the administration about. And that's precisely why it's so hard to discuss issues with financial, HR, and other administrative services: everyone is talking about different things using the same word.\n\nWe use words-terms in life in two ways:\n\n-   **They give a hint about the role in which the person** **speaking**\n    **these words is now engaged in, related to some activity/cultural role play**. If someone says \"balance,\" \"profit and loss statement,\" \"cash gap,\" we guess that we have a financier, accountant, or economist in front of us. And then we must be careful in choosing finance-related words-terms: in this subject area, \"expenditures,\" \"costs,\" and \"expenses\" mean different things (you should know this from management perspective)! But you've been warned, you've already guessed that the conversation is with a person-in-role, and you'll be careful not to confuse these words. So, a word-term is used here among other words-terms as a marker of which discipline/theory/method the conversation is about, what concepts are used in the conversation, as concepts are rarely used alone! You need to accept and consider that the people around you speak not just foreign languages, but when they are in some activities/cultural/professional/project roles, they use tricky dialects with tricky meanings of seemingly familiar words (as in the case of \"business trip,\" you need to be attentive). It's a myth that under the words of a natural language (even if they are words-terms) the same concepts are hidden in the speech of different people in different roles (places in the space of meanings^[For more about the space of meanings,\n    concepts, and terms see the book \"Visual Thinking\",\n    <https://ridero.ru/books/vizualnoe_myshlenie/>]).\n    This is especially true if we talk about translations into Russian!\n    Ask your interlocutor again to understand how he uses a term suspicious to you in terms of its meaning in his professional dialect---let him give some examples of situations where he needs to use this word (do not ask for a definition! It's useless, and often even harmful). Always remember that interlocutors do not necessarily use terms in the meanings you are used to---and when you say these terms to them, they will understand you differently than you expect, and when they say these terms to you, you will understand them differently than they expect.\n    **Terms** **are important!** **Choose your words when you speak! Think about what the terms mean that you hear from interlocutors!**\n-   When it becomes clear what activity role the interlocutor is playing,\n    it is possible to restore his concept by the term. We purposefully use words as terms for understanding or expressing---already knowing with the help of other mentioned words-terms in the concepts of which discipline to look for this concept. The understanding of the term when listening/perceiving and reading, as well as your use of the term in speech or writing when expressing the designated concept depends heavily on what activity role your interlocutor is playing---that is, you can judge the concept by considering this role and the method used by this role. If it is about the \"balance\", then you first, by other words-terms in the speech, need to understand that it is not about the balance of administrative forces in the company's management (everyday usage of the word, unlikely there was any \"theory/discipline\"), not about the balance of supply and demand (the role of an economist, a term from the discipline of economics), but about the accounting balance (a term from the discipline of accounting). And further you need to talk to this person (while he is in the role you identified), using his dialect. Continue to speak his language. Re-teaching a role player in the language you prefer for discussing your areas of interest is both impossible and harmful: you will destroy the language in which the person performing the professional role has maximum intuition about his subject area---if he has this intuition. If the activity role is played by a random person (or unadjusted AI), then he has no clear professional area of interest, he does not know the important characteristics of the system and his preferences in them, \"did not learn the role,\" does not know words from the role, that is, does not master the professional dialect, has no intuition, and if he does, it is erroneous and so on---then either change the role player to another performer, or teach him whatever dialect you desire, put your favorite words in his mouth for some concepts. Or stop the discussion, it will all be fruitless: if this is a \"random passer-by on the internet,\" stop the conversation, leave."
}